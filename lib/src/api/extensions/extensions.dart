import 'package:tdlib/td_api.dart';
extension TdErrorExtensions on TdError {
  TdError copyWith({int? code, String? message}) =>
      TdError(code: code ?? this.code, message: message ?? this.message);
}

extension AuthenticationCodeTypeExtensions on AuthenticationCodeType {
  TResult map<TResult extends Object?>({
    required TResult Function(AuthenticationCodeTypeTelegramMessage value)
    telegramMessage,
    required TResult Function(AuthenticationCodeTypeSms value) sms,
    required TResult Function(AuthenticationCodeTypeSmsWord value) smsWord,
    required TResult Function(AuthenticationCodeTypeSmsPhrase value) smsPhrase,
    required TResult Function(AuthenticationCodeTypeCall value) call,
    required TResult Function(AuthenticationCodeTypeFlashCall value) flashCall,
    required TResult Function(AuthenticationCodeTypeMissedCall value)
    missedCall,
    required TResult Function(AuthenticationCodeTypeFragment value) fragment,
    required TResult Function(AuthenticationCodeTypeFirebaseAndroid value)
    firebaseAndroid,
    required TResult Function(AuthenticationCodeTypeFirebaseIos value)
    firebaseIos,
  }) {
    switch (getConstructor()) {
      case AuthenticationCodeTypeTelegramMessage.constructor:
        return telegramMessage.call(
          this as AuthenticationCodeTypeTelegramMessage,
        );
      case AuthenticationCodeTypeSms.constructor:
        return sms.call(this as AuthenticationCodeTypeSms);
      case AuthenticationCodeTypeSmsWord.constructor:
        return smsWord.call(this as AuthenticationCodeTypeSmsWord);
      case AuthenticationCodeTypeSmsPhrase.constructor:
        return smsPhrase.call(this as AuthenticationCodeTypeSmsPhrase);
      case AuthenticationCodeTypeCall.constructor:
        return call.call(this as AuthenticationCodeTypeCall);
      case AuthenticationCodeTypeFlashCall.constructor:
        return flashCall.call(this as AuthenticationCodeTypeFlashCall);
      case AuthenticationCodeTypeMissedCall.constructor:
        return missedCall.call(this as AuthenticationCodeTypeMissedCall);
      case AuthenticationCodeTypeFragment.constructor:
        return fragment.call(this as AuthenticationCodeTypeFragment);
      case AuthenticationCodeTypeFirebaseAndroid.constructor:
        return firebaseAndroid.call(
          this as AuthenticationCodeTypeFirebaseAndroid,
        );
      case AuthenticationCodeTypeFirebaseIos.constructor:
        return firebaseIos.call(this as AuthenticationCodeTypeFirebaseIos);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(AuthenticationCodeTypeTelegramMessage value)?
    telegramMessage,
    TResult Function(AuthenticationCodeTypeSms value)? sms,
    TResult Function(AuthenticationCodeTypeSmsWord value)? smsWord,
    TResult Function(AuthenticationCodeTypeSmsPhrase value)? smsPhrase,
    TResult Function(AuthenticationCodeTypeCall value)? call,
    TResult Function(AuthenticationCodeTypeFlashCall value)? flashCall,
    TResult Function(AuthenticationCodeTypeMissedCall value)? missedCall,
    TResult Function(AuthenticationCodeTypeFragment value)? fragment,
    TResult Function(AuthenticationCodeTypeFirebaseAndroid value)?
    firebaseAndroid,
    TResult Function(AuthenticationCodeTypeFirebaseIos value)? firebaseIos,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case AuthenticationCodeTypeTelegramMessage.constructor:
        if (telegramMessage != null) {
          return telegramMessage.call(
            this as AuthenticationCodeTypeTelegramMessage,
          );
        }
        break;
      case AuthenticationCodeTypeSms.constructor:
        if (sms != null) {
          return sms.call(this as AuthenticationCodeTypeSms);
        }
        break;
      case AuthenticationCodeTypeSmsWord.constructor:
        if (smsWord != null) {
          return smsWord.call(this as AuthenticationCodeTypeSmsWord);
        }
        break;
      case AuthenticationCodeTypeSmsPhrase.constructor:
        if (smsPhrase != null) {
          return smsPhrase.call(this as AuthenticationCodeTypeSmsPhrase);
        }
        break;
      case AuthenticationCodeTypeCall.constructor:
        if (call != null) {
          return call.call(this as AuthenticationCodeTypeCall);
        }
        break;
      case AuthenticationCodeTypeFlashCall.constructor:
        if (flashCall != null) {
          return flashCall.call(this as AuthenticationCodeTypeFlashCall);
        }
        break;
      case AuthenticationCodeTypeMissedCall.constructor:
        if (missedCall != null) {
          return missedCall.call(this as AuthenticationCodeTypeMissedCall);
        }
        break;
      case AuthenticationCodeTypeFragment.constructor:
        if (fragment != null) {
          return fragment.call(this as AuthenticationCodeTypeFragment);
        }
        break;
      case AuthenticationCodeTypeFirebaseAndroid.constructor:
        if (firebaseAndroid != null) {
          return firebaseAndroid.call(
            this as AuthenticationCodeTypeFirebaseAndroid,
          );
        }
        break;
      case AuthenticationCodeTypeFirebaseIos.constructor:
        if (firebaseIos != null) {
          return firebaseIos.call(this as AuthenticationCodeTypeFirebaseIos);
        }
        break;
    }
    return orElse.call();
  }
}

extension AuthenticationCodeTypeTelegramMessageExtensions
    on AuthenticationCodeTypeTelegramMessage {
  AuthenticationCodeTypeTelegramMessage copyWith({int? length}) =>
      AuthenticationCodeTypeTelegramMessage(length: length ?? this.length);
}

extension AuthenticationCodeTypeSmsExtensions on AuthenticationCodeTypeSms {
  AuthenticationCodeTypeSms copyWith({int? length}) =>
      AuthenticationCodeTypeSms(length: length ?? this.length);
}

extension AuthenticationCodeTypeSmsWordExtensions
    on AuthenticationCodeTypeSmsWord {
  AuthenticationCodeTypeSmsWord copyWith({String? firstLetter}) =>
      AuthenticationCodeTypeSmsWord(
        firstLetter: firstLetter ?? this.firstLetter,
      );
}

extension AuthenticationCodeTypeSmsPhraseExtensions
    on AuthenticationCodeTypeSmsPhrase {
  AuthenticationCodeTypeSmsPhrase copyWith({String? firstWord}) =>
      AuthenticationCodeTypeSmsPhrase(firstWord: firstWord ?? this.firstWord);
}

extension AuthenticationCodeTypeCallExtensions on AuthenticationCodeTypeCall {
  AuthenticationCodeTypeCall copyWith({int? length}) =>
      AuthenticationCodeTypeCall(length: length ?? this.length);
}

extension AuthenticationCodeTypeFlashCallExtensions
    on AuthenticationCodeTypeFlashCall {
  AuthenticationCodeTypeFlashCall copyWith({String? pattern}) =>
      AuthenticationCodeTypeFlashCall(pattern: pattern ?? this.pattern);
}

extension AuthenticationCodeTypeMissedCallExtensions
    on AuthenticationCodeTypeMissedCall {
  AuthenticationCodeTypeMissedCall copyWith({
    String? phoneNumberPrefix,
    int? length,
  }) => AuthenticationCodeTypeMissedCall(
    phoneNumberPrefix: phoneNumberPrefix ?? this.phoneNumberPrefix,
    length: length ?? this.length,
  );
}

extension AuthenticationCodeTypeFragmentExtensions
    on AuthenticationCodeTypeFragment {
  AuthenticationCodeTypeFragment copyWith({String? url, int? length}) =>
      AuthenticationCodeTypeFragment(
        url: url ?? this.url,
        length: length ?? this.length,
      );
}

extension AuthenticationCodeTypeFirebaseAndroidExtensions
    on AuthenticationCodeTypeFirebaseAndroid {
  AuthenticationCodeTypeFirebaseAndroid copyWith({
    FirebaseDeviceVerificationParameters? deviceVerificationParameters,
    int? length,
  }) => AuthenticationCodeTypeFirebaseAndroid(
    deviceVerificationParameters:
        deviceVerificationParameters ?? this.deviceVerificationParameters,
    length: length ?? this.length,
  );
}

extension AuthenticationCodeTypeFirebaseIosExtensions
    on AuthenticationCodeTypeFirebaseIos {
  AuthenticationCodeTypeFirebaseIos copyWith({
    String? receipt,
    int? pushTimeout,
    int? length,
  }) => AuthenticationCodeTypeFirebaseIos(
    receipt: receipt ?? this.receipt,
    pushTimeout: pushTimeout ?? this.pushTimeout,
    length: length ?? this.length,
  );
}

extension AuthenticationCodeInfoExtensions on AuthenticationCodeInfo {
  AuthenticationCodeInfo copyWith({
    String? phoneNumber,
    AuthenticationCodeType? type,
    AuthenticationCodeType? nextType,
    int? timeout,
  }) => AuthenticationCodeInfo(
    phoneNumber: phoneNumber ?? this.phoneNumber,
    type: type ?? this.type,
    nextType: nextType ?? this.nextType,
    timeout: timeout ?? this.timeout,
  );
}

extension EmailAddressAuthenticationCodeInfoExtensions
    on EmailAddressAuthenticationCodeInfo {
  EmailAddressAuthenticationCodeInfo copyWith({
    String? emailAddressPattern,
    int? length,
  }) => EmailAddressAuthenticationCodeInfo(
    emailAddressPattern: emailAddressPattern ?? this.emailAddressPattern,
    length: length ?? this.length,
  );
}

extension EmailAddressAuthenticationExtensions on EmailAddressAuthentication {
  TResult map<TResult extends Object?>({
    required TResult Function(EmailAddressAuthenticationCode value) code,
    required TResult Function(EmailAddressAuthenticationAppleId value) appleId,
    required TResult Function(EmailAddressAuthenticationGoogleId value)
    googleId,
  }) {
    switch (getConstructor()) {
      case EmailAddressAuthenticationCode.constructor:
        return code.call(this as EmailAddressAuthenticationCode);
      case EmailAddressAuthenticationAppleId.constructor:
        return appleId.call(this as EmailAddressAuthenticationAppleId);
      case EmailAddressAuthenticationGoogleId.constructor:
        return googleId.call(this as EmailAddressAuthenticationGoogleId);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(EmailAddressAuthenticationCode value)? code,
    TResult Function(EmailAddressAuthenticationAppleId value)? appleId,
    TResult Function(EmailAddressAuthenticationGoogleId value)? googleId,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case EmailAddressAuthenticationCode.constructor:
        if (code != null) {
          return code.call(this as EmailAddressAuthenticationCode);
        }
        break;
      case EmailAddressAuthenticationAppleId.constructor:
        if (appleId != null) {
          return appleId.call(this as EmailAddressAuthenticationAppleId);
        }
        break;
      case EmailAddressAuthenticationGoogleId.constructor:
        if (googleId != null) {
          return googleId.call(this as EmailAddressAuthenticationGoogleId);
        }
        break;
    }
    return orElse.call();
  }
}

extension EmailAddressAuthenticationCodeExtensions
    on EmailAddressAuthenticationCode {
  EmailAddressAuthenticationCode copyWith({String? code}) =>
      EmailAddressAuthenticationCode(code: code ?? this.code);
}

extension EmailAddressAuthenticationAppleIdExtensions
    on EmailAddressAuthenticationAppleId {
  EmailAddressAuthenticationAppleId copyWith({String? token}) =>
      EmailAddressAuthenticationAppleId(token: token ?? this.token);
}

extension EmailAddressAuthenticationGoogleIdExtensions
    on EmailAddressAuthenticationGoogleId {
  EmailAddressAuthenticationGoogleId copyWith({String? token}) =>
      EmailAddressAuthenticationGoogleId(token: token ?? this.token);
}

extension EmailAddressResetStateExtensions on EmailAddressResetState {
  TResult map<TResult extends Object?>({
    required TResult Function(EmailAddressResetStateAvailable value) available,
    required TResult Function(EmailAddressResetStatePending value) pending,
  }) {
    switch (getConstructor()) {
      case EmailAddressResetStateAvailable.constructor:
        return available.call(this as EmailAddressResetStateAvailable);
      case EmailAddressResetStatePending.constructor:
        return pending.call(this as EmailAddressResetStatePending);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(EmailAddressResetStateAvailable value)? available,
    TResult Function(EmailAddressResetStatePending value)? pending,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case EmailAddressResetStateAvailable.constructor:
        if (available != null) {
          return available.call(this as EmailAddressResetStateAvailable);
        }
        break;
      case EmailAddressResetStatePending.constructor:
        if (pending != null) {
          return pending.call(this as EmailAddressResetStatePending);
        }
        break;
    }
    return orElse.call();
  }
}

extension EmailAddressResetStateAvailableExtensions
    on EmailAddressResetStateAvailable {
  EmailAddressResetStateAvailable copyWith({int? waitPeriod}) =>
      EmailAddressResetStateAvailable(
        waitPeriod: waitPeriod ?? this.waitPeriod,
      );
}

extension EmailAddressResetStatePendingExtensions
    on EmailAddressResetStatePending {
  EmailAddressResetStatePending copyWith({int? resetIn}) =>
      EmailAddressResetStatePending(resetIn: resetIn ?? this.resetIn);
}

extension TextEntityExtensions on TextEntity {
  TextEntity copyWith({int? offset, int? length, TextEntityType? type}) =>
      TextEntity(
        offset: offset ?? this.offset,
        length: length ?? this.length,
        type: type ?? this.type,
      );
}

extension TextEntitiesExtensions on TextEntities {
  TextEntities copyWith({List<TextEntity>? entities}) =>
      TextEntities(entities: entities ?? this.entities);
}

extension FormattedTextExtensions on FormattedText {
  FormattedText copyWith({String? text, List<TextEntity>? entities}) =>
      FormattedText(
        text: text ?? this.text,
        entities: entities ?? this.entities,
      );
}

extension TermsOfServiceExtensions on TermsOfService {
  TermsOfService copyWith({
    FormattedText? text,
    int? minUserAge,
    bool? showPopup,
  }) => TermsOfService(
    text: text ?? this.text,
    minUserAge: minUserAge ?? this.minUserAge,
    showPopup: showPopup ?? this.showPopup,
  );
}

extension AuthorizationStateExtensions on AuthorizationState {
  TResult map<TResult extends Object?>({
    required TResult Function(AuthorizationStateWaitTdlibParameters value)
    waitTdlibParameters,
    required TResult Function(AuthorizationStateWaitPhoneNumber value)
    waitPhoneNumber,
    required TResult Function(AuthorizationStateWaitPremiumPurchase value)
    waitPremiumPurchase,
    required TResult Function(AuthorizationStateWaitEmailAddress value)
    waitEmailAddress,
    required TResult Function(AuthorizationStateWaitEmailCode value)
    waitEmailCode,
    required TResult Function(AuthorizationStateWaitCode value) waitCode,
    required TResult Function(
      AuthorizationStateWaitOtherDeviceConfirmation value,
    )
    waitOtherDeviceConfirmation,
    required TResult Function(AuthorizationStateWaitRegistration value)
    waitRegistration,
    required TResult Function(AuthorizationStateWaitPassword value)
    waitPassword,
    required TResult Function(AuthorizationStateReady value) ready,
    required TResult Function(AuthorizationStateLoggingOut value) loggingOut,
    required TResult Function(AuthorizationStateClosing value) closing,
    required TResult Function(AuthorizationStateClosed value) closed,
  }) {
    switch (getConstructor()) {
      case AuthorizationStateWaitTdlibParameters.constructor:
        return waitTdlibParameters.call(
          this as AuthorizationStateWaitTdlibParameters,
        );
      case AuthorizationStateWaitPhoneNumber.constructor:
        return waitPhoneNumber.call(this as AuthorizationStateWaitPhoneNumber);
      case AuthorizationStateWaitPremiumPurchase.constructor:
        return waitPremiumPurchase.call(
          this as AuthorizationStateWaitPremiumPurchase,
        );
      case AuthorizationStateWaitEmailAddress.constructor:
        return waitEmailAddress.call(
          this as AuthorizationStateWaitEmailAddress,
        );
      case AuthorizationStateWaitEmailCode.constructor:
        return waitEmailCode.call(this as AuthorizationStateWaitEmailCode);
      case AuthorizationStateWaitCode.constructor:
        return waitCode.call(this as AuthorizationStateWaitCode);
      case AuthorizationStateWaitOtherDeviceConfirmation.constructor:
        return waitOtherDeviceConfirmation.call(
          this as AuthorizationStateWaitOtherDeviceConfirmation,
        );
      case AuthorizationStateWaitRegistration.constructor:
        return waitRegistration.call(
          this as AuthorizationStateWaitRegistration,
        );
      case AuthorizationStateWaitPassword.constructor:
        return waitPassword.call(this as AuthorizationStateWaitPassword);
      case AuthorizationStateReady.constructor:
        return ready.call(this as AuthorizationStateReady);
      case AuthorizationStateLoggingOut.constructor:
        return loggingOut.call(this as AuthorizationStateLoggingOut);
      case AuthorizationStateClosing.constructor:
        return closing.call(this as AuthorizationStateClosing);
      case AuthorizationStateClosed.constructor:
        return closed.call(this as AuthorizationStateClosed);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(AuthorizationStateWaitTdlibParameters value)?
    waitTdlibParameters,
    TResult Function(AuthorizationStateWaitPhoneNumber value)? waitPhoneNumber,
    TResult Function(AuthorizationStateWaitPremiumPurchase value)?
    waitPremiumPurchase,
    TResult Function(AuthorizationStateWaitEmailAddress value)?
    waitEmailAddress,
    TResult Function(AuthorizationStateWaitEmailCode value)? waitEmailCode,
    TResult Function(AuthorizationStateWaitCode value)? waitCode,
    TResult Function(AuthorizationStateWaitOtherDeviceConfirmation value)?
    waitOtherDeviceConfirmation,
    TResult Function(AuthorizationStateWaitRegistration value)?
    waitRegistration,
    TResult Function(AuthorizationStateWaitPassword value)? waitPassword,
    TResult Function(AuthorizationStateReady value)? ready,
    TResult Function(AuthorizationStateLoggingOut value)? loggingOut,
    TResult Function(AuthorizationStateClosing value)? closing,
    TResult Function(AuthorizationStateClosed value)? closed,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case AuthorizationStateWaitTdlibParameters.constructor:
        if (waitTdlibParameters != null) {
          return waitTdlibParameters.call(
            this as AuthorizationStateWaitTdlibParameters,
          );
        }
        break;
      case AuthorizationStateWaitPhoneNumber.constructor:
        if (waitPhoneNumber != null) {
          return waitPhoneNumber.call(
            this as AuthorizationStateWaitPhoneNumber,
          );
        }
        break;
      case AuthorizationStateWaitPremiumPurchase.constructor:
        if (waitPremiumPurchase != null) {
          return waitPremiumPurchase.call(
            this as AuthorizationStateWaitPremiumPurchase,
          );
        }
        break;
      case AuthorizationStateWaitEmailAddress.constructor:
        if (waitEmailAddress != null) {
          return waitEmailAddress.call(
            this as AuthorizationStateWaitEmailAddress,
          );
        }
        break;
      case AuthorizationStateWaitEmailCode.constructor:
        if (waitEmailCode != null) {
          return waitEmailCode.call(this as AuthorizationStateWaitEmailCode);
        }
        break;
      case AuthorizationStateWaitCode.constructor:
        if (waitCode != null) {
          return waitCode.call(this as AuthorizationStateWaitCode);
        }
        break;
      case AuthorizationStateWaitOtherDeviceConfirmation.constructor:
        if (waitOtherDeviceConfirmation != null) {
          return waitOtherDeviceConfirmation.call(
            this as AuthorizationStateWaitOtherDeviceConfirmation,
          );
        }
        break;
      case AuthorizationStateWaitRegistration.constructor:
        if (waitRegistration != null) {
          return waitRegistration.call(
            this as AuthorizationStateWaitRegistration,
          );
        }
        break;
      case AuthorizationStateWaitPassword.constructor:
        if (waitPassword != null) {
          return waitPassword.call(this as AuthorizationStateWaitPassword);
        }
        break;
      case AuthorizationStateReady.constructor:
        if (ready != null) {
          return ready.call(this as AuthorizationStateReady);
        }
        break;
      case AuthorizationStateLoggingOut.constructor:
        if (loggingOut != null) {
          return loggingOut.call(this as AuthorizationStateLoggingOut);
        }
        break;
      case AuthorizationStateClosing.constructor:
        if (closing != null) {
          return closing.call(this as AuthorizationStateClosing);
        }
        break;
      case AuthorizationStateClosed.constructor:
        if (closed != null) {
          return closed.call(this as AuthorizationStateClosed);
        }
        break;
    }
    return orElse.call();
  }
}

extension AuthorizationStateWaitPremiumPurchaseExtensions
    on AuthorizationStateWaitPremiumPurchase {
  AuthorizationStateWaitPremiumPurchase copyWith({String? storeProductId}) =>
      AuthorizationStateWaitPremiumPurchase(
        storeProductId: storeProductId ?? this.storeProductId,
      );
}

extension AuthorizationStateWaitEmailAddressExtensions
    on AuthorizationStateWaitEmailAddress {
  AuthorizationStateWaitEmailAddress copyWith({
    bool? allowAppleId,
    bool? allowGoogleId,
  }) => AuthorizationStateWaitEmailAddress(
    allowAppleId: allowAppleId ?? this.allowAppleId,
    allowGoogleId: allowGoogleId ?? this.allowGoogleId,
  );
}

extension AuthorizationStateWaitEmailCodeExtensions
    on AuthorizationStateWaitEmailCode {
  AuthorizationStateWaitEmailCode copyWith({
    bool? allowAppleId,
    bool? allowGoogleId,
    EmailAddressAuthenticationCodeInfo? codeInfo,
    EmailAddressResetState? emailAddressResetState,
  }) => AuthorizationStateWaitEmailCode(
    allowAppleId: allowAppleId ?? this.allowAppleId,
    allowGoogleId: allowGoogleId ?? this.allowGoogleId,
    codeInfo: codeInfo ?? this.codeInfo,
    emailAddressResetState:
        emailAddressResetState ?? this.emailAddressResetState,
  );
}

extension AuthorizationStateWaitCodeExtensions on AuthorizationStateWaitCode {
  AuthorizationStateWaitCode copyWith({AuthenticationCodeInfo? codeInfo}) =>
      AuthorizationStateWaitCode(codeInfo: codeInfo ?? this.codeInfo);
}

extension AuthorizationStateWaitOtherDeviceConfirmationExtensions
    on AuthorizationStateWaitOtherDeviceConfirmation {
  AuthorizationStateWaitOtherDeviceConfirmation copyWith({String? link}) =>
      AuthorizationStateWaitOtherDeviceConfirmation(link: link ?? this.link);
}

extension AuthorizationStateWaitRegistrationExtensions
    on AuthorizationStateWaitRegistration {
  AuthorizationStateWaitRegistration copyWith({
    TermsOfService? termsOfService,
  }) => AuthorizationStateWaitRegistration(
    termsOfService: termsOfService ?? this.termsOfService,
  );
}

extension AuthorizationStateWaitPasswordExtensions
    on AuthorizationStateWaitPassword {
  AuthorizationStateWaitPassword copyWith({
    String? passwordHint,
    bool? hasRecoveryEmailAddress,
    bool? hasPassportData,
    String? recoveryEmailAddressPattern,
  }) => AuthorizationStateWaitPassword(
    passwordHint: passwordHint ?? this.passwordHint,
    hasRecoveryEmailAddress:
        hasRecoveryEmailAddress ?? this.hasRecoveryEmailAddress,
    hasPassportData: hasPassportData ?? this.hasPassportData,
    recoveryEmailAddressPattern:
        recoveryEmailAddressPattern ?? this.recoveryEmailAddressPattern,
  );
}

extension FirebaseDeviceVerificationParametersExtensions
    on FirebaseDeviceVerificationParameters {
  TResult map<TResult extends Object?>({
    required TResult Function(
      FirebaseDeviceVerificationParametersSafetyNet value,
    )
    safetyNet,
    required TResult Function(
      FirebaseDeviceVerificationParametersPlayIntegrity value,
    )
    playIntegrity,
  }) {
    switch (getConstructor()) {
      case FirebaseDeviceVerificationParametersSafetyNet.constructor:
        return safetyNet.call(
          this as FirebaseDeviceVerificationParametersSafetyNet,
        );
      case FirebaseDeviceVerificationParametersPlayIntegrity.constructor:
        return playIntegrity.call(
          this as FirebaseDeviceVerificationParametersPlayIntegrity,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(FirebaseDeviceVerificationParametersSafetyNet value)?
    safetyNet,
    TResult Function(FirebaseDeviceVerificationParametersPlayIntegrity value)?
    playIntegrity,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case FirebaseDeviceVerificationParametersSafetyNet.constructor:
        if (safetyNet != null) {
          return safetyNet.call(
            this as FirebaseDeviceVerificationParametersSafetyNet,
          );
        }
        break;
      case FirebaseDeviceVerificationParametersPlayIntegrity.constructor:
        if (playIntegrity != null) {
          return playIntegrity.call(
            this as FirebaseDeviceVerificationParametersPlayIntegrity,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension FirebaseDeviceVerificationParametersSafetyNetExtensions
    on FirebaseDeviceVerificationParametersSafetyNet {
  FirebaseDeviceVerificationParametersSafetyNet copyWith({String? nonce}) =>
      FirebaseDeviceVerificationParametersSafetyNet(nonce: nonce ?? this.nonce);
}

extension FirebaseDeviceVerificationParametersPlayIntegrityExtensions
    on FirebaseDeviceVerificationParametersPlayIntegrity {
  FirebaseDeviceVerificationParametersPlayIntegrity copyWith({
    String? nonce,
    int? cloudProjectNumber,
  }) => FirebaseDeviceVerificationParametersPlayIntegrity(
    nonce: nonce ?? this.nonce,
    cloudProjectNumber: cloudProjectNumber ?? this.cloudProjectNumber,
  );
}

extension PasswordStateExtensions on PasswordState {
  PasswordState copyWith({
    bool? hasPassword,
    String? passwordHint,
    bool? hasRecoveryEmailAddress,
    bool? hasPassportData,
    EmailAddressAuthenticationCodeInfo? recoveryEmailAddressCodeInfo,
    String? loginEmailAddressPattern,
    int? pendingResetDate,
  }) => PasswordState(
    hasPassword: hasPassword ?? this.hasPassword,
    passwordHint: passwordHint ?? this.passwordHint,
    hasRecoveryEmailAddress:
        hasRecoveryEmailAddress ?? this.hasRecoveryEmailAddress,
    hasPassportData: hasPassportData ?? this.hasPassportData,
    recoveryEmailAddressCodeInfo:
        recoveryEmailAddressCodeInfo ?? this.recoveryEmailAddressCodeInfo,
    loginEmailAddressPattern:
        loginEmailAddressPattern ?? this.loginEmailAddressPattern,
    pendingResetDate: pendingResetDate ?? this.pendingResetDate,
  );
}

extension RecoveryEmailAddressExtensions on RecoveryEmailAddress {
  RecoveryEmailAddress copyWith({String? recoveryEmailAddress}) =>
      RecoveryEmailAddress(
        recoveryEmailAddress: recoveryEmailAddress ?? this.recoveryEmailAddress,
      );
}

extension TemporaryPasswordStateExtensions on TemporaryPasswordState {
  TemporaryPasswordState copyWith({bool? hasPassword, int? validFor}) =>
      TemporaryPasswordState(
        hasPassword: hasPassword ?? this.hasPassword,
        validFor: validFor ?? this.validFor,
      );
}

extension LocalFileExtensions on LocalFile {
  LocalFile copyWith({
    String? path,
    bool? canBeDownloaded,
    bool? canBeDeleted,
    bool? isDownloadingActive,
    bool? isDownloadingCompleted,
    int? downloadOffset,
    int? downloadedPrefixSize,
    int? downloadedSize,
  }) => LocalFile(
    path: path ?? this.path,
    canBeDownloaded: canBeDownloaded ?? this.canBeDownloaded,
    canBeDeleted: canBeDeleted ?? this.canBeDeleted,
    isDownloadingActive: isDownloadingActive ?? this.isDownloadingActive,
    isDownloadingCompleted:
        isDownloadingCompleted ?? this.isDownloadingCompleted,
    downloadOffset: downloadOffset ?? this.downloadOffset,
    downloadedPrefixSize: downloadedPrefixSize ?? this.downloadedPrefixSize,
    downloadedSize: downloadedSize ?? this.downloadedSize,
  );
}

extension RemoteFileExtensions on RemoteFile {
  RemoteFile copyWith({
    String? id,
    String? uniqueId,
    bool? isUploadingActive,
    bool? isUploadingCompleted,
    int? uploadedSize,
  }) => RemoteFile(
    id: id ?? this.id,
    uniqueId: uniqueId ?? this.uniqueId,
    isUploadingActive: isUploadingActive ?? this.isUploadingActive,
    isUploadingCompleted: isUploadingCompleted ?? this.isUploadingCompleted,
    uploadedSize: uploadedSize ?? this.uploadedSize,
  );
}

extension FileExtensions on File {
  File copyWith({
    int? id,
    int? size,
    int? expectedSize,
    LocalFile? local,
    RemoteFile? remote,
  }) => File(
    id: id ?? this.id,
    size: size ?? this.size,
    expectedSize: expectedSize ?? this.expectedSize,
    local: local ?? this.local,
    remote: remote ?? this.remote,
  );
}

extension InputFileExtensions on InputFile {
  TResult map<TResult extends Object?>({
    required TResult Function(InputFileId value) id,
    required TResult Function(InputFileRemote value) remote,
    required TResult Function(InputFileLocal value) local,
    required TResult Function(InputFileGenerated value) generated,
  }) {
    switch (getConstructor()) {
      case InputFileId.constructor:
        return id.call(this as InputFileId);
      case InputFileRemote.constructor:
        return remote.call(this as InputFileRemote);
      case InputFileLocal.constructor:
        return local.call(this as InputFileLocal);
      case InputFileGenerated.constructor:
        return generated.call(this as InputFileGenerated);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InputFileId value)? id,
    TResult Function(InputFileRemote value)? remote,
    TResult Function(InputFileLocal value)? local,
    TResult Function(InputFileGenerated value)? generated,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InputFileId.constructor:
        if (id != null) {
          return id.call(this as InputFileId);
        }
        break;
      case InputFileRemote.constructor:
        if (remote != null) {
          return remote.call(this as InputFileRemote);
        }
        break;
      case InputFileLocal.constructor:
        if (local != null) {
          return local.call(this as InputFileLocal);
        }
        break;
      case InputFileGenerated.constructor:
        if (generated != null) {
          return generated.call(this as InputFileGenerated);
        }
        break;
    }
    return orElse.call();
  }
}

extension InputFileIdExtensions on InputFileId {
  InputFileId copyWith({int? id}) => InputFileId(id: id ?? this.id);
}

extension InputFileRemoteExtensions on InputFileRemote {
  InputFileRemote copyWith({String? id}) => InputFileRemote(id: id ?? this.id);
}

extension InputFileLocalExtensions on InputFileLocal {
  InputFileLocal copyWith({String? path}) =>
      InputFileLocal(path: path ?? this.path);
}

extension InputFileGeneratedExtensions on InputFileGenerated {
  InputFileGenerated copyWith({
    String? originalPath,
    String? conversion,
    int? expectedSize,
  }) => InputFileGenerated(
    originalPath: originalPath ?? this.originalPath,
    conversion: conversion ?? this.conversion,
    expectedSize: expectedSize ?? this.expectedSize,
  );
}

extension PhotoSizeExtensions on PhotoSize {
  PhotoSize copyWith({
    String? type,
    File? photo,
    int? width,
    int? height,
    List<int>? progressiveSizes,
  }) => PhotoSize(
    type: type ?? this.type,
    photo: photo ?? this.photo,
    width: width ?? this.width,
    height: height ?? this.height,
    progressiveSizes: progressiveSizes ?? this.progressiveSizes,
  );
}

extension MinithumbnailExtensions on Minithumbnail {
  Minithumbnail copyWith({int? width, int? height, String? data}) =>
      Minithumbnail(
        width: width ?? this.width,
        height: height ?? this.height,
        data: data ?? this.data,
      );
}

extension ThumbnailFormatExtensions on ThumbnailFormat {
  TResult map<TResult extends Object?>({
    required TResult Function(ThumbnailFormatJpeg value) jpeg,
    required TResult Function(ThumbnailFormatGif value) gif,
    required TResult Function(ThumbnailFormatMpeg4 value) mpeg4,
    required TResult Function(ThumbnailFormatPng value) png,
    required TResult Function(ThumbnailFormatTgs value) tgs,
    required TResult Function(ThumbnailFormatWebm value) webm,
    required TResult Function(ThumbnailFormatWebp value) webp,
  }) {
    switch (getConstructor()) {
      case ThumbnailFormatJpeg.constructor:
        return jpeg.call(this as ThumbnailFormatJpeg);
      case ThumbnailFormatGif.constructor:
        return gif.call(this as ThumbnailFormatGif);
      case ThumbnailFormatMpeg4.constructor:
        return mpeg4.call(this as ThumbnailFormatMpeg4);
      case ThumbnailFormatPng.constructor:
        return png.call(this as ThumbnailFormatPng);
      case ThumbnailFormatTgs.constructor:
        return tgs.call(this as ThumbnailFormatTgs);
      case ThumbnailFormatWebm.constructor:
        return webm.call(this as ThumbnailFormatWebm);
      case ThumbnailFormatWebp.constructor:
        return webp.call(this as ThumbnailFormatWebp);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ThumbnailFormatJpeg value)? jpeg,
    TResult Function(ThumbnailFormatGif value)? gif,
    TResult Function(ThumbnailFormatMpeg4 value)? mpeg4,
    TResult Function(ThumbnailFormatPng value)? png,
    TResult Function(ThumbnailFormatTgs value)? tgs,
    TResult Function(ThumbnailFormatWebm value)? webm,
    TResult Function(ThumbnailFormatWebp value)? webp,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ThumbnailFormatJpeg.constructor:
        if (jpeg != null) {
          return jpeg.call(this as ThumbnailFormatJpeg);
        }
        break;
      case ThumbnailFormatGif.constructor:
        if (gif != null) {
          return gif.call(this as ThumbnailFormatGif);
        }
        break;
      case ThumbnailFormatMpeg4.constructor:
        if (mpeg4 != null) {
          return mpeg4.call(this as ThumbnailFormatMpeg4);
        }
        break;
      case ThumbnailFormatPng.constructor:
        if (png != null) {
          return png.call(this as ThumbnailFormatPng);
        }
        break;
      case ThumbnailFormatTgs.constructor:
        if (tgs != null) {
          return tgs.call(this as ThumbnailFormatTgs);
        }
        break;
      case ThumbnailFormatWebm.constructor:
        if (webm != null) {
          return webm.call(this as ThumbnailFormatWebm);
        }
        break;
      case ThumbnailFormatWebp.constructor:
        if (webp != null) {
          return webp.call(this as ThumbnailFormatWebp);
        }
        break;
    }
    return orElse.call();
  }
}

extension ThumbnailExtensions on Thumbnail {
  Thumbnail copyWith({
    ThumbnailFormat? format,
    int? width,
    int? height,
    File? file,
  }) => Thumbnail(
    format: format ?? this.format,
    width: width ?? this.width,
    height: height ?? this.height,
    file: file ?? this.file,
  );
}

extension MaskPointExtensions on MaskPoint {
  TResult map<TResult extends Object?>({
    required TResult Function(MaskPointForehead value) forehead,
    required TResult Function(MaskPointEyes value) eyes,
    required TResult Function(MaskPointMouth value) mouth,
    required TResult Function(MaskPointChin value) chin,
  }) {
    switch (getConstructor()) {
      case MaskPointForehead.constructor:
        return forehead.call(this as MaskPointForehead);
      case MaskPointEyes.constructor:
        return eyes.call(this as MaskPointEyes);
      case MaskPointMouth.constructor:
        return mouth.call(this as MaskPointMouth);
      case MaskPointChin.constructor:
        return chin.call(this as MaskPointChin);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(MaskPointForehead value)? forehead,
    TResult Function(MaskPointEyes value)? eyes,
    TResult Function(MaskPointMouth value)? mouth,
    TResult Function(MaskPointChin value)? chin,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case MaskPointForehead.constructor:
        if (forehead != null) {
          return forehead.call(this as MaskPointForehead);
        }
        break;
      case MaskPointEyes.constructor:
        if (eyes != null) {
          return eyes.call(this as MaskPointEyes);
        }
        break;
      case MaskPointMouth.constructor:
        if (mouth != null) {
          return mouth.call(this as MaskPointMouth);
        }
        break;
      case MaskPointChin.constructor:
        if (chin != null) {
          return chin.call(this as MaskPointChin);
        }
        break;
    }
    return orElse.call();
  }
}

extension MaskPositionExtensions on MaskPosition {
  MaskPosition copyWith({
    MaskPoint? point,
    double? xShift,
    double? yShift,
    double? scale,
  }) => MaskPosition(
    point: point ?? this.point,
    xShift: xShift ?? this.xShift,
    yShift: yShift ?? this.yShift,
    scale: scale ?? this.scale,
  );
}

extension StickerFormatExtensions on StickerFormat {
  TResult map<TResult extends Object?>({
    required TResult Function(StickerFormatWebp value) webp,
    required TResult Function(StickerFormatTgs value) tgs,
    required TResult Function(StickerFormatWebm value) webm,
  }) {
    switch (getConstructor()) {
      case StickerFormatWebp.constructor:
        return webp.call(this as StickerFormatWebp);
      case StickerFormatTgs.constructor:
        return tgs.call(this as StickerFormatTgs);
      case StickerFormatWebm.constructor:
        return webm.call(this as StickerFormatWebm);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(StickerFormatWebp value)? webp,
    TResult Function(StickerFormatTgs value)? tgs,
    TResult Function(StickerFormatWebm value)? webm,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case StickerFormatWebp.constructor:
        if (webp != null) {
          return webp.call(this as StickerFormatWebp);
        }
        break;
      case StickerFormatTgs.constructor:
        if (tgs != null) {
          return tgs.call(this as StickerFormatTgs);
        }
        break;
      case StickerFormatWebm.constructor:
        if (webm != null) {
          return webm.call(this as StickerFormatWebm);
        }
        break;
    }
    return orElse.call();
  }
}

extension StickerTypeExtensions on StickerType {
  TResult map<TResult extends Object?>({
    required TResult Function(StickerTypeRegular value) regular,
    required TResult Function(StickerTypeMask value) mask,
    required TResult Function(StickerTypeCustomEmoji value) customEmoji,
  }) {
    switch (getConstructor()) {
      case StickerTypeRegular.constructor:
        return regular.call(this as StickerTypeRegular);
      case StickerTypeMask.constructor:
        return mask.call(this as StickerTypeMask);
      case StickerTypeCustomEmoji.constructor:
        return customEmoji.call(this as StickerTypeCustomEmoji);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(StickerTypeRegular value)? regular,
    TResult Function(StickerTypeMask value)? mask,
    TResult Function(StickerTypeCustomEmoji value)? customEmoji,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case StickerTypeRegular.constructor:
        if (regular != null) {
          return regular.call(this as StickerTypeRegular);
        }
        break;
      case StickerTypeMask.constructor:
        if (mask != null) {
          return mask.call(this as StickerTypeMask);
        }
        break;
      case StickerTypeCustomEmoji.constructor:
        if (customEmoji != null) {
          return customEmoji.call(this as StickerTypeCustomEmoji);
        }
        break;
    }
    return orElse.call();
  }
}

extension StickerFullTypeExtensions on StickerFullType {
  TResult map<TResult extends Object?>({
    required TResult Function(StickerFullTypeRegular value) regular,
    required TResult Function(StickerFullTypeMask value) mask,
    required TResult Function(StickerFullTypeCustomEmoji value) customEmoji,
  }) {
    switch (getConstructor()) {
      case StickerFullTypeRegular.constructor:
        return regular.call(this as StickerFullTypeRegular);
      case StickerFullTypeMask.constructor:
        return mask.call(this as StickerFullTypeMask);
      case StickerFullTypeCustomEmoji.constructor:
        return customEmoji.call(this as StickerFullTypeCustomEmoji);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(StickerFullTypeRegular value)? regular,
    TResult Function(StickerFullTypeMask value)? mask,
    TResult Function(StickerFullTypeCustomEmoji value)? customEmoji,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case StickerFullTypeRegular.constructor:
        if (regular != null) {
          return regular.call(this as StickerFullTypeRegular);
        }
        break;
      case StickerFullTypeMask.constructor:
        if (mask != null) {
          return mask.call(this as StickerFullTypeMask);
        }
        break;
      case StickerFullTypeCustomEmoji.constructor:
        if (customEmoji != null) {
          return customEmoji.call(this as StickerFullTypeCustomEmoji);
        }
        break;
    }
    return orElse.call();
  }
}

extension StickerFullTypeRegularExtensions on StickerFullTypeRegular {
  StickerFullTypeRegular copyWith({File? premiumAnimation}) =>
      StickerFullTypeRegular(
        premiumAnimation: premiumAnimation ?? this.premiumAnimation,
      );
}

extension StickerFullTypeMaskExtensions on StickerFullTypeMask {
  StickerFullTypeMask copyWith({MaskPosition? maskPosition}) =>
      StickerFullTypeMask(maskPosition: maskPosition ?? this.maskPosition);
}

extension StickerFullTypeCustomEmojiExtensions on StickerFullTypeCustomEmoji {
  StickerFullTypeCustomEmoji copyWith({
    int? customEmojiId,
    bool? needsRepainting,
  }) => StickerFullTypeCustomEmoji(
    customEmojiId: customEmojiId ?? this.customEmojiId,
    needsRepainting: needsRepainting ?? this.needsRepainting,
  );
}

extension ClosedVectorPathExtensions on ClosedVectorPath {
  ClosedVectorPath copyWith({List<VectorPathCommand>? commands}) =>
      ClosedVectorPath(commands: commands ?? this.commands);
}

extension OutlineExtensions on Outline {
  Outline copyWith({List<ClosedVectorPath>? paths}) =>
      Outline(paths: paths ?? this.paths);
}

extension PollOptionExtensions on PollOption {
  PollOption copyWith({
    FormattedText? text,
    int? voterCount,
    int? votePercentage,
    bool? isChosen,
    bool? isBeingChosen,
  }) => PollOption(
    text: text ?? this.text,
    voterCount: voterCount ?? this.voterCount,
    votePercentage: votePercentage ?? this.votePercentage,
    isChosen: isChosen ?? this.isChosen,
    isBeingChosen: isBeingChosen ?? this.isBeingChosen,
  );
}

extension PollTypeExtensions on PollType {
  TResult map<TResult extends Object?>({
    required TResult Function(PollTypeRegular value) regular,
    required TResult Function(PollTypeQuiz value) quiz,
  }) {
    switch (getConstructor()) {
      case PollTypeRegular.constructor:
        return regular.call(this as PollTypeRegular);
      case PollTypeQuiz.constructor:
        return quiz.call(this as PollTypeQuiz);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PollTypeRegular value)? regular,
    TResult Function(PollTypeQuiz value)? quiz,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PollTypeRegular.constructor:
        if (regular != null) {
          return regular.call(this as PollTypeRegular);
        }
        break;
      case PollTypeQuiz.constructor:
        if (quiz != null) {
          return quiz.call(this as PollTypeQuiz);
        }
        break;
    }
    return orElse.call();
  }
}

extension PollTypeRegularExtensions on PollTypeRegular {
  PollTypeRegular copyWith({bool? allowMultipleAnswers}) => PollTypeRegular(
    allowMultipleAnswers: allowMultipleAnswers ?? this.allowMultipleAnswers,
  );
}

extension PollTypeQuizExtensions on PollTypeQuiz {
  PollTypeQuiz copyWith({int? correctOptionId, FormattedText? explanation}) =>
      PollTypeQuiz(
        correctOptionId: correctOptionId ?? this.correctOptionId,
        explanation: explanation ?? this.explanation,
      );
}

extension ChecklistTaskExtensions on ChecklistTask {
  ChecklistTask copyWith({
    int? id,
    FormattedText? text,
    int? completedByUserId,
    int? completionDate,
  }) => ChecklistTask(
    id: id ?? this.id,
    text: text ?? this.text,
    completedByUserId: completedByUserId ?? this.completedByUserId,
    completionDate: completionDate ?? this.completionDate,
  );
}

extension InputChecklistTaskExtensions on InputChecklistTask {
  InputChecklistTask copyWith({int? id, FormattedText? text}) =>
      InputChecklistTask(id: id ?? this.id, text: text ?? this.text);
}

extension ChecklistExtensions on Checklist {
  Checklist copyWith({
    FormattedText? title,
    List<ChecklistTask>? tasks,
    bool? othersCanAddTasks,
    bool? canAddTasks,
    bool? othersCanMarkTasksAsDone,
    bool? canMarkTasksAsDone,
  }) => Checklist(
    title: title ?? this.title,
    tasks: tasks ?? this.tasks,
    othersCanAddTasks: othersCanAddTasks ?? this.othersCanAddTasks,
    canAddTasks: canAddTasks ?? this.canAddTasks,
    othersCanMarkTasksAsDone:
        othersCanMarkTasksAsDone ?? this.othersCanMarkTasksAsDone,
    canMarkTasksAsDone: canMarkTasksAsDone ?? this.canMarkTasksAsDone,
  );
}

extension InputChecklistExtensions on InputChecklist {
  InputChecklist copyWith({
    FormattedText? title,
    List<InputChecklistTask>? tasks,
    bool? othersCanAddTasks,
    bool? othersCanMarkTasksAsDone,
  }) => InputChecklist(
    title: title ?? this.title,
    tasks: tasks ?? this.tasks,
    othersCanAddTasks: othersCanAddTasks ?? this.othersCanAddTasks,
    othersCanMarkTasksAsDone:
        othersCanMarkTasksAsDone ?? this.othersCanMarkTasksAsDone,
  );
}

extension AnimationExtensions on Animation {
  Animation copyWith({
    int? duration,
    int? width,
    int? height,
    String? fileName,
    String? mimeType,
    bool? hasStickers,
    Minithumbnail? minithumbnail,
    Thumbnail? thumbnail,
    File? animation,
  }) => Animation(
    duration: duration ?? this.duration,
    width: width ?? this.width,
    height: height ?? this.height,
    fileName: fileName ?? this.fileName,
    mimeType: mimeType ?? this.mimeType,
    hasStickers: hasStickers ?? this.hasStickers,
    minithumbnail: minithumbnail ?? this.minithumbnail,
    thumbnail: thumbnail ?? this.thumbnail,
    animation: animation ?? this.animation,
  );
}

extension AudioExtensions on Audio {
  Audio copyWith({
    int? duration,
    String? title,
    String? performer,
    String? fileName,
    String? mimeType,
    Minithumbnail? albumCoverMinithumbnail,
    Thumbnail? albumCoverThumbnail,
    List<Thumbnail>? externalAlbumCovers,
    File? audio,
  }) => Audio(
    duration: duration ?? this.duration,
    title: title ?? this.title,
    performer: performer ?? this.performer,
    fileName: fileName ?? this.fileName,
    mimeType: mimeType ?? this.mimeType,
    albumCoverMinithumbnail:
        albumCoverMinithumbnail ?? this.albumCoverMinithumbnail,
    albumCoverThumbnail: albumCoverThumbnail ?? this.albumCoverThumbnail,
    externalAlbumCovers: externalAlbumCovers ?? this.externalAlbumCovers,
    audio: audio ?? this.audio,
  );
}

extension DocumentExtensions on Document {
  Document copyWith({
    String? fileName,
    String? mimeType,
    Minithumbnail? minithumbnail,
    Thumbnail? thumbnail,
    File? document,
  }) => Document(
    fileName: fileName ?? this.fileName,
    mimeType: mimeType ?? this.mimeType,
    minithumbnail: minithumbnail ?? this.minithumbnail,
    thumbnail: thumbnail ?? this.thumbnail,
    document: document ?? this.document,
  );
}

extension PhotoExtensions on Photo {
  Photo copyWith({
    bool? hasStickers,
    Minithumbnail? minithumbnail,
    List<PhotoSize>? sizes,
  }) => Photo(
    hasStickers: hasStickers ?? this.hasStickers,
    minithumbnail: minithumbnail ?? this.minithumbnail,
    sizes: sizes ?? this.sizes,
  );
}

extension StickerExtensions on Sticker {
  Sticker copyWith({
    int? id,
    int? setId,
    int? width,
    int? height,
    String? emoji,
    StickerFormat? format,
    StickerFullType? fullType,
    Thumbnail? thumbnail,
    File? sticker,
  }) => Sticker(
    id: id ?? this.id,
    setId: setId ?? this.setId,
    width: width ?? this.width,
    height: height ?? this.height,
    emoji: emoji ?? this.emoji,
    format: format ?? this.format,
    fullType: fullType ?? this.fullType,
    thumbnail: thumbnail ?? this.thumbnail,
    sticker: sticker ?? this.sticker,
  );
}

extension VideoExtensions on Video {
  Video copyWith({
    int? duration,
    int? width,
    int? height,
    String? fileName,
    String? mimeType,
    bool? hasStickers,
    bool? supportsStreaming,
    Minithumbnail? minithumbnail,
    Thumbnail? thumbnail,
    File? video,
  }) => Video(
    duration: duration ?? this.duration,
    width: width ?? this.width,
    height: height ?? this.height,
    fileName: fileName ?? this.fileName,
    mimeType: mimeType ?? this.mimeType,
    hasStickers: hasStickers ?? this.hasStickers,
    supportsStreaming: supportsStreaming ?? this.supportsStreaming,
    minithumbnail: minithumbnail ?? this.minithumbnail,
    thumbnail: thumbnail ?? this.thumbnail,
    video: video ?? this.video,
  );
}

extension VideoNoteExtensions on VideoNote {
  VideoNote copyWith({
    int? duration,
    String? waveform,
    int? length,
    Minithumbnail? minithumbnail,
    Thumbnail? thumbnail,
    SpeechRecognitionResult? speechRecognitionResult,
    File? video,
  }) => VideoNote(
    duration: duration ?? this.duration,
    waveform: waveform ?? this.waveform,
    length: length ?? this.length,
    minithumbnail: minithumbnail ?? this.minithumbnail,
    thumbnail: thumbnail ?? this.thumbnail,
    speechRecognitionResult:
        speechRecognitionResult ?? this.speechRecognitionResult,
    video: video ?? this.video,
  );
}

extension VoiceNoteExtensions on VoiceNote {
  VoiceNote copyWith({
    int? duration,
    String? waveform,
    String? mimeType,
    SpeechRecognitionResult? speechRecognitionResult,
    File? voice,
  }) => VoiceNote(
    duration: duration ?? this.duration,
    waveform: waveform ?? this.waveform,
    mimeType: mimeType ?? this.mimeType,
    speechRecognitionResult:
        speechRecognitionResult ?? this.speechRecognitionResult,
    voice: voice ?? this.voice,
  );
}

extension AnimatedEmojiExtensions on AnimatedEmoji {
  AnimatedEmoji copyWith({
    Sticker? sticker,
    int? stickerWidth,
    int? stickerHeight,
    int? fitzpatrickType,
    File? sound,
  }) => AnimatedEmoji(
    sticker: sticker ?? this.sticker,
    stickerWidth: stickerWidth ?? this.stickerWidth,
    stickerHeight: stickerHeight ?? this.stickerHeight,
    fitzpatrickType: fitzpatrickType ?? this.fitzpatrickType,
    sound: sound ?? this.sound,
  );
}

extension ContactExtensions on Contact {
  Contact copyWith({
    String? phoneNumber,
    String? firstName,
    String? lastName,
    String? vcard,
    int? userId,
  }) => Contact(
    phoneNumber: phoneNumber ?? this.phoneNumber,
    firstName: firstName ?? this.firstName,
    lastName: lastName ?? this.lastName,
    vcard: vcard ?? this.vcard,
    userId: userId ?? this.userId,
  );
}

extension LocationExtensions on Location {
  Location copyWith({
    double? latitude,
    double? longitude,
    double? horizontalAccuracy,
  }) => Location(
    latitude: latitude ?? this.latitude,
    longitude: longitude ?? this.longitude,
    horizontalAccuracy: horizontalAccuracy ?? this.horizontalAccuracy,
  );
}

extension VenueExtensions on Venue {
  Venue copyWith({
    Location? location,
    String? title,
    String? address,
    String? provider,
    String? id,
    String? type,
  }) => Venue(
    location: location ?? this.location,
    title: title ?? this.title,
    address: address ?? this.address,
    provider: provider ?? this.provider,
    id: id ?? this.id,
    type: type ?? this.type,
  );
}

extension GameExtensions on Game {
  Game copyWith({
    int? id,
    String? shortName,
    String? title,
    FormattedText? text,
    String? description,
    Photo? photo,
    Animation? animation,
  }) => Game(
    id: id ?? this.id,
    shortName: shortName ?? this.shortName,
    title: title ?? this.title,
    text: text ?? this.text,
    description: description ?? this.description,
    photo: photo ?? this.photo,
    animation: animation ?? this.animation,
  );
}

extension WebAppExtensions on WebApp {
  WebApp copyWith({
    String? shortName,
    String? title,
    String? description,
    Photo? photo,
    Animation? animation,
  }) => WebApp(
    shortName: shortName ?? this.shortName,
    title: title ?? this.title,
    description: description ?? this.description,
    photo: photo ?? this.photo,
    animation: animation ?? this.animation,
  );
}

extension PollExtensions on Poll {
  Poll copyWith({
    int? id,
    FormattedText? question,
    List<PollOption>? options,
    int? totalVoterCount,
    List<MessageSender>? recentVoterIds,
    bool? isAnonymous,
    PollType? type,
    int? openPeriod,
    int? closeDate,
    bool? isClosed,
  }) => Poll(
    id: id ?? this.id,
    question: question ?? this.question,
    options: options ?? this.options,
    totalVoterCount: totalVoterCount ?? this.totalVoterCount,
    recentVoterIds: recentVoterIds ?? this.recentVoterIds,
    isAnonymous: isAnonymous ?? this.isAnonymous,
    type: type ?? this.type,
    openPeriod: openPeriod ?? this.openPeriod,
    closeDate: closeDate ?? this.closeDate,
    isClosed: isClosed ?? this.isClosed,
  );
}

extension AlternativeVideoExtensions on AlternativeVideo {
  AlternativeVideo copyWith({
    int? id,
    int? width,
    int? height,
    String? codec,
    File? hlsFile,
    File? video,
  }) => AlternativeVideo(
    id: id ?? this.id,
    width: width ?? this.width,
    height: height ?? this.height,
    codec: codec ?? this.codec,
    hlsFile: hlsFile ?? this.hlsFile,
    video: video ?? this.video,
  );
}

extension VideoStoryboardExtensions on VideoStoryboard {
  VideoStoryboard copyWith({
    File? storyboardFile,
    int? width,
    int? height,
    File? mapFile,
  }) => VideoStoryboard(
    storyboardFile: storyboardFile ?? this.storyboardFile,
    width: width ?? this.width,
    height: height ?? this.height,
    mapFile: mapFile ?? this.mapFile,
  );
}

extension BackgroundExtensions on Background {
  Background copyWith({
    int? id,
    bool? isDefault,
    bool? isDark,
    String? name,
    Document? document,
    BackgroundType? type,
  }) => Background(
    id: id ?? this.id,
    isDefault: isDefault ?? this.isDefault,
    isDark: isDark ?? this.isDark,
    name: name ?? this.name,
    document: document ?? this.document,
    type: type ?? this.type,
  );
}

extension BackgroundsExtensions on Backgrounds {
  Backgrounds copyWith({List<Background>? backgrounds}) =>
      Backgrounds(backgrounds: backgrounds ?? this.backgrounds);
}

extension ChatBackgroundExtensions on ChatBackground {
  ChatBackground copyWith({Background? background, int? darkThemeDimming}) =>
      ChatBackground(
        background: background ?? this.background,
        darkThemeDimming: darkThemeDimming ?? this.darkThemeDimming,
      );
}

extension ProfilePhotoExtensions on ProfilePhoto {
  ProfilePhoto copyWith({
    int? id,
    File? small,
    File? big,
    Minithumbnail? minithumbnail,
    bool? hasAnimation,
    bool? isPersonal,
  }) => ProfilePhoto(
    id: id ?? this.id,
    small: small ?? this.small,
    big: big ?? this.big,
    minithumbnail: minithumbnail ?? this.minithumbnail,
    hasAnimation: hasAnimation ?? this.hasAnimation,
    isPersonal: isPersonal ?? this.isPersonal,
  );
}

extension ChatPhotoInfoExtensions on ChatPhotoInfo {
  ChatPhotoInfo copyWith({
    File? small,
    File? big,
    Minithumbnail? minithumbnail,
    bool? hasAnimation,
    bool? isPersonal,
  }) => ChatPhotoInfo(
    small: small ?? this.small,
    big: big ?? this.big,
    minithumbnail: minithumbnail ?? this.minithumbnail,
    hasAnimation: hasAnimation ?? this.hasAnimation,
    isPersonal: isPersonal ?? this.isPersonal,
  );
}

extension UserTypeExtensions on UserType {
  TResult map<TResult extends Object?>({
    required TResult Function(UserTypeRegular value) regular,
    required TResult Function(UserTypeDeleted value) deleted,
    required TResult Function(UserTypeBot value) bot,
    required TResult Function(UserTypeUnknown value) unknown,
  }) {
    switch (getConstructor()) {
      case UserTypeRegular.constructor:
        return regular.call(this as UserTypeRegular);
      case UserTypeDeleted.constructor:
        return deleted.call(this as UserTypeDeleted);
      case UserTypeBot.constructor:
        return bot.call(this as UserTypeBot);
      case UserTypeUnknown.constructor:
        return unknown.call(this as UserTypeUnknown);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(UserTypeRegular value)? regular,
    TResult Function(UserTypeDeleted value)? deleted,
    TResult Function(UserTypeBot value)? bot,
    TResult Function(UserTypeUnknown value)? unknown,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case UserTypeRegular.constructor:
        if (regular != null) {
          return regular.call(this as UserTypeRegular);
        }
        break;
      case UserTypeDeleted.constructor:
        if (deleted != null) {
          return deleted.call(this as UserTypeDeleted);
        }
        break;
      case UserTypeBot.constructor:
        if (bot != null) {
          return bot.call(this as UserTypeBot);
        }
        break;
      case UserTypeUnknown.constructor:
        if (unknown != null) {
          return unknown.call(this as UserTypeUnknown);
        }
        break;
    }
    return orElse.call();
  }
}

extension UserTypeBotExtensions on UserTypeBot {
  UserTypeBot copyWith({
    bool? canBeEdited,
    bool? canJoinGroups,
    bool? canReadAllGroupMessages,
    bool? hasMainWebApp,
    bool? isInline,
    String? inlineQueryPlaceholder,
    bool? needLocation,
    bool? canConnectToBusiness,
    bool? canBeAddedToAttachmentMenu,
    int? activeUserCount,
  }) => UserTypeBot(
    canBeEdited: canBeEdited ?? this.canBeEdited,
    canJoinGroups: canJoinGroups ?? this.canJoinGroups,
    canReadAllGroupMessages:
        canReadAllGroupMessages ?? this.canReadAllGroupMessages,
    hasMainWebApp: hasMainWebApp ?? this.hasMainWebApp,
    isInline: isInline ?? this.isInline,
    inlineQueryPlaceholder:
        inlineQueryPlaceholder ?? this.inlineQueryPlaceholder,
    needLocation: needLocation ?? this.needLocation,
    canConnectToBusiness: canConnectToBusiness ?? this.canConnectToBusiness,
    canBeAddedToAttachmentMenu:
        canBeAddedToAttachmentMenu ?? this.canBeAddedToAttachmentMenu,
    activeUserCount: activeUserCount ?? this.activeUserCount,
  );
}

extension BotCommandExtensions on BotCommand {
  BotCommand copyWith({String? command, String? description}) => BotCommand(
    command: command ?? this.command,
    description: description ?? this.description,
  );
}

extension BotCommandsExtensions on BotCommands {
  BotCommands copyWith({int? botUserId, List<BotCommand>? commands}) =>
      BotCommands(
        botUserId: botUserId ?? this.botUserId,
        commands: commands ?? this.commands,
      );
}

extension BotMenuButtonExtensions on BotMenuButton {
  BotMenuButton copyWith({String? text, String? url}) =>
      BotMenuButton(text: text ?? this.text, url: url ?? this.url);
}

extension BotVerificationParametersExtensions on BotVerificationParameters {
  BotVerificationParameters copyWith({
    int? iconCustomEmojiId,
    String? organizationName,
    FormattedText? defaultCustomDescription,
    bool? canSetCustomDescription,
  }) => BotVerificationParameters(
    iconCustomEmojiId: iconCustomEmojiId ?? this.iconCustomEmojiId,
    organizationName: organizationName ?? this.organizationName,
    defaultCustomDescription:
        defaultCustomDescription ?? this.defaultCustomDescription,
    canSetCustomDescription:
        canSetCustomDescription ?? this.canSetCustomDescription,
  );
}

extension BotVerificationExtensions on BotVerification {
  BotVerification copyWith({
    int? botUserId,
    int? iconCustomEmojiId,
    FormattedText? customDescription,
  }) => BotVerification(
    botUserId: botUserId ?? this.botUserId,
    iconCustomEmojiId: iconCustomEmojiId ?? this.iconCustomEmojiId,
    customDescription: customDescription ?? this.customDescription,
  );
}

extension VerificationStatusExtensions on VerificationStatus {
  VerificationStatus copyWith({
    bool? isVerified,
    bool? isScam,
    bool? isFake,
    int? botVerificationIconCustomEmojiId,
  }) => VerificationStatus(
    isVerified: isVerified ?? this.isVerified,
    isScam: isScam ?? this.isScam,
    isFake: isFake ?? this.isFake,
    botVerificationIconCustomEmojiId:
        botVerificationIconCustomEmojiId ??
        this.botVerificationIconCustomEmojiId,
  );
}

extension ChatLocationExtensions on ChatLocation {
  ChatLocation copyWith({Location? location, String? address}) => ChatLocation(
    location: location ?? this.location,
    address: address ?? this.address,
  );
}

extension BirthdateExtensions on Birthdate {
  Birthdate copyWith({int? day, int? month, int? year}) => Birthdate(
    day: day ?? this.day,
    month: month ?? this.month,
    year: year ?? this.year,
  );
}

extension CloseBirthdayUserExtensions on CloseBirthdayUser {
  CloseBirthdayUser copyWith({int? userId, Birthdate? birthdate}) =>
      CloseBirthdayUser(
        userId: userId ?? this.userId,
        birthdate: birthdate ?? this.birthdate,
      );
}

extension BusinessAwayMessageScheduleExtensions on BusinessAwayMessageSchedule {
  TResult map<TResult extends Object?>({
    required TResult Function(BusinessAwayMessageScheduleAlways value) always,
    required TResult Function(
      BusinessAwayMessageScheduleOutsideOfOpeningHours value,
    )
    outsideOfOpeningHours,
    required TResult Function(BusinessAwayMessageScheduleCustom value) custom,
  }) {
    switch (getConstructor()) {
      case BusinessAwayMessageScheduleAlways.constructor:
        return always.call(this as BusinessAwayMessageScheduleAlways);
      case BusinessAwayMessageScheduleOutsideOfOpeningHours.constructor:
        return outsideOfOpeningHours.call(
          this as BusinessAwayMessageScheduleOutsideOfOpeningHours,
        );
      case BusinessAwayMessageScheduleCustom.constructor:
        return custom.call(this as BusinessAwayMessageScheduleCustom);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(BusinessAwayMessageScheduleAlways value)? always,
    TResult Function(BusinessAwayMessageScheduleOutsideOfOpeningHours value)?
    outsideOfOpeningHours,
    TResult Function(BusinessAwayMessageScheduleCustom value)? custom,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case BusinessAwayMessageScheduleAlways.constructor:
        if (always != null) {
          return always.call(this as BusinessAwayMessageScheduleAlways);
        }
        break;
      case BusinessAwayMessageScheduleOutsideOfOpeningHours.constructor:
        if (outsideOfOpeningHours != null) {
          return outsideOfOpeningHours.call(
            this as BusinessAwayMessageScheduleOutsideOfOpeningHours,
          );
        }
        break;
      case BusinessAwayMessageScheduleCustom.constructor:
        if (custom != null) {
          return custom.call(this as BusinessAwayMessageScheduleCustom);
        }
        break;
    }
    return orElse.call();
  }
}

extension BusinessAwayMessageScheduleCustomExtensions
    on BusinessAwayMessageScheduleCustom {
  BusinessAwayMessageScheduleCustom copyWith({int? startDate, int? endDate}) =>
      BusinessAwayMessageScheduleCustom(
        startDate: startDate ?? this.startDate,
        endDate: endDate ?? this.endDate,
      );
}

extension BusinessLocationExtensions on BusinessLocation {
  BusinessLocation copyWith({Location? location, String? address}) =>
      BusinessLocation(
        location: location ?? this.location,
        address: address ?? this.address,
      );
}

extension BusinessRecipientsExtensions on BusinessRecipients {
  BusinessRecipients copyWith({
    List<int>? chatIds,
    List<int>? excludedChatIds,
    bool? selectExistingChats,
    bool? selectNewChats,
    bool? selectContacts,
    bool? selectNonContacts,
    bool? excludeSelected,
  }) => BusinessRecipients(
    chatIds: chatIds ?? this.chatIds,
    excludedChatIds: excludedChatIds ?? this.excludedChatIds,
    selectExistingChats: selectExistingChats ?? this.selectExistingChats,
    selectNewChats: selectNewChats ?? this.selectNewChats,
    selectContacts: selectContacts ?? this.selectContacts,
    selectNonContacts: selectNonContacts ?? this.selectNonContacts,
    excludeSelected: excludeSelected ?? this.excludeSelected,
  );
}

extension BusinessAwayMessageSettingsExtensions on BusinessAwayMessageSettings {
  BusinessAwayMessageSettings copyWith({
    int? shortcutId,
    BusinessRecipients? recipients,
    BusinessAwayMessageSchedule? schedule,
    bool? offlineOnly,
  }) => BusinessAwayMessageSettings(
    shortcutId: shortcutId ?? this.shortcutId,
    recipients: recipients ?? this.recipients,
    schedule: schedule ?? this.schedule,
    offlineOnly: offlineOnly ?? this.offlineOnly,
  );
}

extension BusinessGreetingMessageSettingsExtensions
    on BusinessGreetingMessageSettings {
  BusinessGreetingMessageSettings copyWith({
    int? shortcutId,
    BusinessRecipients? recipients,
    int? inactivityDays,
  }) => BusinessGreetingMessageSettings(
    shortcutId: shortcutId ?? this.shortcutId,
    recipients: recipients ?? this.recipients,
    inactivityDays: inactivityDays ?? this.inactivityDays,
  );
}

extension BusinessBotRightsExtensions on BusinessBotRights {
  BusinessBotRights copyWith({
    bool? canReply,
    bool? canReadMessages,
    bool? canDeleteSentMessages,
    bool? canDeleteAllMessages,
    bool? canEditName,
    bool? canEditBio,
    bool? canEditProfilePhoto,
    bool? canEditUsername,
    bool? canViewGiftsAndStars,
    bool? canSellGifts,
    bool? canChangeGiftSettings,
    bool? canTransferAndUpgradeGifts,
    bool? canTransferStars,
    bool? canManageStories,
  }) => BusinessBotRights(
    canReply: canReply ?? this.canReply,
    canReadMessages: canReadMessages ?? this.canReadMessages,
    canDeleteSentMessages: canDeleteSentMessages ?? this.canDeleteSentMessages,
    canDeleteAllMessages: canDeleteAllMessages ?? this.canDeleteAllMessages,
    canEditName: canEditName ?? this.canEditName,
    canEditBio: canEditBio ?? this.canEditBio,
    canEditProfilePhoto: canEditProfilePhoto ?? this.canEditProfilePhoto,
    canEditUsername: canEditUsername ?? this.canEditUsername,
    canViewGiftsAndStars: canViewGiftsAndStars ?? this.canViewGiftsAndStars,
    canSellGifts: canSellGifts ?? this.canSellGifts,
    canChangeGiftSettings: canChangeGiftSettings ?? this.canChangeGiftSettings,
    canTransferAndUpgradeGifts:
        canTransferAndUpgradeGifts ?? this.canTransferAndUpgradeGifts,
    canTransferStars: canTransferStars ?? this.canTransferStars,
    canManageStories: canManageStories ?? this.canManageStories,
  );
}

extension BusinessConnectedBotExtensions on BusinessConnectedBot {
  BusinessConnectedBot copyWith({
    int? botUserId,
    BusinessRecipients? recipients,
    BusinessBotRights? rights,
  }) => BusinessConnectedBot(
    botUserId: botUserId ?? this.botUserId,
    recipients: recipients ?? this.recipients,
    rights: rights ?? this.rights,
  );
}

extension BusinessStartPageExtensions on BusinessStartPage {
  BusinessStartPage copyWith({
    String? title,
    String? message,
    Sticker? sticker,
  }) => BusinessStartPage(
    title: title ?? this.title,
    message: message ?? this.message,
    sticker: sticker ?? this.sticker,
  );
}

extension InputBusinessStartPageExtensions on InputBusinessStartPage {
  InputBusinessStartPage copyWith({
    String? title,
    String? message,
    InputFile? sticker,
  }) => InputBusinessStartPage(
    title: title ?? this.title,
    message: message ?? this.message,
    sticker: sticker ?? this.sticker,
  );
}

extension BusinessOpeningHoursIntervalExtensions
    on BusinessOpeningHoursInterval {
  BusinessOpeningHoursInterval copyWith({int? startMinute, int? endMinute}) =>
      BusinessOpeningHoursInterval(
        startMinute: startMinute ?? this.startMinute,
        endMinute: endMinute ?? this.endMinute,
      );
}

extension BusinessOpeningHoursExtensions on BusinessOpeningHours {
  BusinessOpeningHours copyWith({
    String? timeZoneId,
    List<BusinessOpeningHoursInterval>? openingHours,
  }) => BusinessOpeningHours(
    timeZoneId: timeZoneId ?? this.timeZoneId,
    openingHours: openingHours ?? this.openingHours,
  );
}

extension BusinessInfoExtensions on BusinessInfo {
  BusinessInfo copyWith({
    BusinessLocation? location,
    BusinessOpeningHours? openingHours,
    BusinessOpeningHours? localOpeningHours,
    int? nextOpenIn,
    int? nextCloseIn,
    BusinessGreetingMessageSettings? greetingMessageSettings,
    BusinessAwayMessageSettings? awayMessageSettings,
    BusinessStartPage? startPage,
  }) => BusinessInfo(
    location: location ?? this.location,
    openingHours: openingHours ?? this.openingHours,
    localOpeningHours: localOpeningHours ?? this.localOpeningHours,
    nextOpenIn: nextOpenIn ?? this.nextOpenIn,
    nextCloseIn: nextCloseIn ?? this.nextCloseIn,
    greetingMessageSettings:
        greetingMessageSettings ?? this.greetingMessageSettings,
    awayMessageSettings: awayMessageSettings ?? this.awayMessageSettings,
    startPage: startPage ?? this.startPage,
  );
}

extension BusinessChatLinkExtensions on BusinessChatLink {
  BusinessChatLink copyWith({
    String? link,
    FormattedText? text,
    String? title,
    int? viewCount,
  }) => BusinessChatLink(
    link: link ?? this.link,
    text: text ?? this.text,
    title: title ?? this.title,
    viewCount: viewCount ?? this.viewCount,
  );
}

extension BusinessChatLinksExtensions on BusinessChatLinks {
  BusinessChatLinks copyWith({List<BusinessChatLink>? links}) =>
      BusinessChatLinks(links: links ?? this.links);
}

extension InputBusinessChatLinkExtensions on InputBusinessChatLink {
  InputBusinessChatLink copyWith({FormattedText? text, String? title}) =>
      InputBusinessChatLink(
        text: text ?? this.text,
        title: title ?? this.title,
      );
}

extension BusinessChatLinkInfoExtensions on BusinessChatLinkInfo {
  BusinessChatLinkInfo copyWith({int? chatId, FormattedText? text}) =>
      BusinessChatLinkInfo(
        chatId: chatId ?? this.chatId,
        text: text ?? this.text,
      );
}

extension ChatPhotoStickerTypeExtensions on ChatPhotoStickerType {
  TResult map<TResult extends Object?>({
    required TResult Function(ChatPhotoStickerTypeRegularOrMask value)
    regularOrMask,
    required TResult Function(ChatPhotoStickerTypeCustomEmoji value)
    customEmoji,
  }) {
    switch (getConstructor()) {
      case ChatPhotoStickerTypeRegularOrMask.constructor:
        return regularOrMask.call(this as ChatPhotoStickerTypeRegularOrMask);
      case ChatPhotoStickerTypeCustomEmoji.constructor:
        return customEmoji.call(this as ChatPhotoStickerTypeCustomEmoji);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ChatPhotoStickerTypeRegularOrMask value)? regularOrMask,
    TResult Function(ChatPhotoStickerTypeCustomEmoji value)? customEmoji,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ChatPhotoStickerTypeRegularOrMask.constructor:
        if (regularOrMask != null) {
          return regularOrMask.call(this as ChatPhotoStickerTypeRegularOrMask);
        }
        break;
      case ChatPhotoStickerTypeCustomEmoji.constructor:
        if (customEmoji != null) {
          return customEmoji.call(this as ChatPhotoStickerTypeCustomEmoji);
        }
        break;
    }
    return orElse.call();
  }
}

extension ChatPhotoStickerTypeRegularOrMaskExtensions
    on ChatPhotoStickerTypeRegularOrMask {
  ChatPhotoStickerTypeRegularOrMask copyWith({
    int? stickerSetId,
    int? stickerId,
  }) => ChatPhotoStickerTypeRegularOrMask(
    stickerSetId: stickerSetId ?? this.stickerSetId,
    stickerId: stickerId ?? this.stickerId,
  );
}

extension ChatPhotoStickerTypeCustomEmojiExtensions
    on ChatPhotoStickerTypeCustomEmoji {
  ChatPhotoStickerTypeCustomEmoji copyWith({int? customEmojiId}) =>
      ChatPhotoStickerTypeCustomEmoji(
        customEmojiId: customEmojiId ?? this.customEmojiId,
      );
}

extension ChatPhotoStickerExtensions on ChatPhotoSticker {
  ChatPhotoSticker copyWith({
    ChatPhotoStickerType? type,
    BackgroundFill? backgroundFill,
  }) => ChatPhotoSticker(
    type: type ?? this.type,
    backgroundFill: backgroundFill ?? this.backgroundFill,
  );
}

extension AnimatedChatPhotoExtensions on AnimatedChatPhoto {
  AnimatedChatPhoto copyWith({
    int? length,
    File? file,
    double? mainFrameTimestamp,
  }) => AnimatedChatPhoto(
    length: length ?? this.length,
    file: file ?? this.file,
    mainFrameTimestamp: mainFrameTimestamp ?? this.mainFrameTimestamp,
  );
}

extension ChatPhotoExtensions on ChatPhoto {
  ChatPhoto copyWith({
    int? id,
    int? addedDate,
    Minithumbnail? minithumbnail,
    List<PhotoSize>? sizes,
    AnimatedChatPhoto? animation,
    AnimatedChatPhoto? smallAnimation,
    ChatPhotoSticker? sticker,
  }) => ChatPhoto(
    id: id ?? this.id,
    addedDate: addedDate ?? this.addedDate,
    minithumbnail: minithumbnail ?? this.minithumbnail,
    sizes: sizes ?? this.sizes,
    animation: animation ?? this.animation,
    smallAnimation: smallAnimation ?? this.smallAnimation,
    sticker: sticker ?? this.sticker,
  );
}

extension ChatPhotosExtensions on ChatPhotos {
  ChatPhotos copyWith({int? totalCount, List<ChatPhoto>? photos}) => ChatPhotos(
    totalCount: totalCount ?? this.totalCount,
    photos: photos ?? this.photos,
  );
}

extension InputChatPhotoExtensions on InputChatPhoto {
  TResult map<TResult extends Object?>({
    required TResult Function(InputChatPhotoPrevious value) previous,
    required TResult Function(InputChatPhotoStatic value) static,
    required TResult Function(InputChatPhotoAnimation value) animation,
    required TResult Function(InputChatPhotoSticker value) sticker,
  }) {
    switch (getConstructor()) {
      case InputChatPhotoPrevious.constructor:
        return previous.call(this as InputChatPhotoPrevious);
      case InputChatPhotoStatic.constructor:
        return static.call(this as InputChatPhotoStatic);
      case InputChatPhotoAnimation.constructor:
        return animation.call(this as InputChatPhotoAnimation);
      case InputChatPhotoSticker.constructor:
        return sticker.call(this as InputChatPhotoSticker);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InputChatPhotoPrevious value)? previous,
    TResult Function(InputChatPhotoStatic value)? static,
    TResult Function(InputChatPhotoAnimation value)? animation,
    TResult Function(InputChatPhotoSticker value)? sticker,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InputChatPhotoPrevious.constructor:
        if (previous != null) {
          return previous.call(this as InputChatPhotoPrevious);
        }
        break;
      case InputChatPhotoStatic.constructor:
        if (static != null) {
          return static.call(this as InputChatPhotoStatic);
        }
        break;
      case InputChatPhotoAnimation.constructor:
        if (animation != null) {
          return animation.call(this as InputChatPhotoAnimation);
        }
        break;
      case InputChatPhotoSticker.constructor:
        if (sticker != null) {
          return sticker.call(this as InputChatPhotoSticker);
        }
        break;
    }
    return orElse.call();
  }
}

extension InputChatPhotoPreviousExtensions on InputChatPhotoPrevious {
  InputChatPhotoPrevious copyWith({int? chatPhotoId}) =>
      InputChatPhotoPrevious(chatPhotoId: chatPhotoId ?? this.chatPhotoId);
}

extension InputChatPhotoStaticExtensions on InputChatPhotoStatic {
  InputChatPhotoStatic copyWith({InputFile? photo}) =>
      InputChatPhotoStatic(photo: photo ?? this.photo);
}

extension InputChatPhotoAnimationExtensions on InputChatPhotoAnimation {
  InputChatPhotoAnimation copyWith({
    InputFile? animation,
    double? mainFrameTimestamp,
  }) => InputChatPhotoAnimation(
    animation: animation ?? this.animation,
    mainFrameTimestamp: mainFrameTimestamp ?? this.mainFrameTimestamp,
  );
}

extension InputChatPhotoStickerExtensions on InputChatPhotoSticker {
  InputChatPhotoSticker copyWith({ChatPhotoSticker? sticker}) =>
      InputChatPhotoSticker(sticker: sticker ?? this.sticker);
}

extension ChatPermissionsExtensions on ChatPermissions {
  ChatPermissions copyWith({
    bool? canSendBasicMessages,
    bool? canSendAudios,
    bool? canSendDocuments,
    bool? canSendPhotos,
    bool? canSendVideos,
    bool? canSendVideoNotes,
    bool? canSendVoiceNotes,
    bool? canSendPolls,
    bool? canSendOtherMessages,
    bool? canAddLinkPreviews,
    bool? canChangeInfo,
    bool? canInviteUsers,
    bool? canPinMessages,
    bool? canCreateTopics,
  }) => ChatPermissions(
    canSendBasicMessages: canSendBasicMessages ?? this.canSendBasicMessages,
    canSendAudios: canSendAudios ?? this.canSendAudios,
    canSendDocuments: canSendDocuments ?? this.canSendDocuments,
    canSendPhotos: canSendPhotos ?? this.canSendPhotos,
    canSendVideos: canSendVideos ?? this.canSendVideos,
    canSendVideoNotes: canSendVideoNotes ?? this.canSendVideoNotes,
    canSendVoiceNotes: canSendVoiceNotes ?? this.canSendVoiceNotes,
    canSendPolls: canSendPolls ?? this.canSendPolls,
    canSendOtherMessages: canSendOtherMessages ?? this.canSendOtherMessages,
    canAddLinkPreviews: canAddLinkPreviews ?? this.canAddLinkPreviews,
    canChangeInfo: canChangeInfo ?? this.canChangeInfo,
    canInviteUsers: canInviteUsers ?? this.canInviteUsers,
    canPinMessages: canPinMessages ?? this.canPinMessages,
    canCreateTopics: canCreateTopics ?? this.canCreateTopics,
  );
}

extension ChatAdministratorRightsExtensions on ChatAdministratorRights {
  ChatAdministratorRights copyWith({
    bool? canManageChat,
    bool? canChangeInfo,
    bool? canPostMessages,
    bool? canEditMessages,
    bool? canDeleteMessages,
    bool? canInviteUsers,
    bool? canRestrictMembers,
    bool? canPinMessages,
    bool? canManageTopics,
    bool? canPromoteMembers,
    bool? canManageVideoChats,
    bool? canPostStories,
    bool? canEditStories,
    bool? canDeleteStories,
    bool? isAnonymous,
  }) => ChatAdministratorRights(
    canManageChat: canManageChat ?? this.canManageChat,
    canChangeInfo: canChangeInfo ?? this.canChangeInfo,
    canPostMessages: canPostMessages ?? this.canPostMessages,
    canEditMessages: canEditMessages ?? this.canEditMessages,
    canDeleteMessages: canDeleteMessages ?? this.canDeleteMessages,
    canInviteUsers: canInviteUsers ?? this.canInviteUsers,
    canRestrictMembers: canRestrictMembers ?? this.canRestrictMembers,
    canPinMessages: canPinMessages ?? this.canPinMessages,
    canManageTopics: canManageTopics ?? this.canManageTopics,
    canPromoteMembers: canPromoteMembers ?? this.canPromoteMembers,
    canManageVideoChats: canManageVideoChats ?? this.canManageVideoChats,
    canPostStories: canPostStories ?? this.canPostStories,
    canEditStories: canEditStories ?? this.canEditStories,
    canDeleteStories: canDeleteStories ?? this.canDeleteStories,
    isAnonymous: isAnonymous ?? this.isAnonymous,
  );
}

extension StarAmountExtensions on StarAmount {
  StarAmount copyWith({int? starCount, int? nanostarCount}) => StarAmount(
    starCount: starCount ?? this.starCount,
    nanostarCount: nanostarCount ?? this.nanostarCount,
  );
}

extension StarSubscriptionTypeExtensions on StarSubscriptionType {
  TResult map<TResult extends Object?>({
    required TResult Function(StarSubscriptionTypeChannel value) channel,
    required TResult Function(StarSubscriptionTypeBot value) bot,
  }) {
    switch (getConstructor()) {
      case StarSubscriptionTypeChannel.constructor:
        return channel.call(this as StarSubscriptionTypeChannel);
      case StarSubscriptionTypeBot.constructor:
        return bot.call(this as StarSubscriptionTypeBot);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(StarSubscriptionTypeChannel value)? channel,
    TResult Function(StarSubscriptionTypeBot value)? bot,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case StarSubscriptionTypeChannel.constructor:
        if (channel != null) {
          return channel.call(this as StarSubscriptionTypeChannel);
        }
        break;
      case StarSubscriptionTypeBot.constructor:
        if (bot != null) {
          return bot.call(this as StarSubscriptionTypeBot);
        }
        break;
    }
    return orElse.call();
  }
}

extension StarSubscriptionTypeChannelExtensions on StarSubscriptionTypeChannel {
  StarSubscriptionTypeChannel copyWith({bool? canReuse, String? inviteLink}) =>
      StarSubscriptionTypeChannel(
        canReuse: canReuse ?? this.canReuse,
        inviteLink: inviteLink ?? this.inviteLink,
      );
}

extension StarSubscriptionTypeBotExtensions on StarSubscriptionTypeBot {
  StarSubscriptionTypeBot copyWith({
    bool? isCanceledByBot,
    String? title,
    Photo? photo,
    String? invoiceLink,
  }) => StarSubscriptionTypeBot(
    isCanceledByBot: isCanceledByBot ?? this.isCanceledByBot,
    title: title ?? this.title,
    photo: photo ?? this.photo,
    invoiceLink: invoiceLink ?? this.invoiceLink,
  );
}

extension StarSubscriptionPricingExtensions on StarSubscriptionPricing {
  StarSubscriptionPricing copyWith({int? period, int? starCount}) =>
      StarSubscriptionPricing(
        period: period ?? this.period,
        starCount: starCount ?? this.starCount,
      );
}

extension StarSubscriptionExtensions on StarSubscription {
  StarSubscription copyWith({
    String? id,
    int? chatId,
    int? expirationDate,
    bool? isCanceled,
    bool? isExpiring,
    StarSubscriptionPricing? pricing,
    StarSubscriptionType? type,
  }) => StarSubscription(
    id: id ?? this.id,
    chatId: chatId ?? this.chatId,
    expirationDate: expirationDate ?? this.expirationDate,
    isCanceled: isCanceled ?? this.isCanceled,
    isExpiring: isExpiring ?? this.isExpiring,
    pricing: pricing ?? this.pricing,
    type: type ?? this.type,
  );
}

extension StarSubscriptionsExtensions on StarSubscriptions {
  StarSubscriptions copyWith({
    StarAmount? starAmount,
    List<StarSubscription>? subscriptions,
    int? requiredStarCount,
    String? nextOffset,
  }) => StarSubscriptions(
    starAmount: starAmount ?? this.starAmount,
    subscriptions: subscriptions ?? this.subscriptions,
    requiredStarCount: requiredStarCount ?? this.requiredStarCount,
    nextOffset: nextOffset ?? this.nextOffset,
  );
}

extension AffiliateTypeExtensions on AffiliateType {
  TResult map<TResult extends Object?>({
    required TResult Function(AffiliateTypeCurrentUser value) currentUser,
    required TResult Function(AffiliateTypeBot value) bot,
    required TResult Function(AffiliateTypeChannel value) channel,
  }) {
    switch (getConstructor()) {
      case AffiliateTypeCurrentUser.constructor:
        return currentUser.call(this as AffiliateTypeCurrentUser);
      case AffiliateTypeBot.constructor:
        return bot.call(this as AffiliateTypeBot);
      case AffiliateTypeChannel.constructor:
        return channel.call(this as AffiliateTypeChannel);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(AffiliateTypeCurrentUser value)? currentUser,
    TResult Function(AffiliateTypeBot value)? bot,
    TResult Function(AffiliateTypeChannel value)? channel,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case AffiliateTypeCurrentUser.constructor:
        if (currentUser != null) {
          return currentUser.call(this as AffiliateTypeCurrentUser);
        }
        break;
      case AffiliateTypeBot.constructor:
        if (bot != null) {
          return bot.call(this as AffiliateTypeBot);
        }
        break;
      case AffiliateTypeChannel.constructor:
        if (channel != null) {
          return channel.call(this as AffiliateTypeChannel);
        }
        break;
    }
    return orElse.call();
  }
}

extension AffiliateTypeBotExtensions on AffiliateTypeBot {
  AffiliateTypeBot copyWith({int? userId}) =>
      AffiliateTypeBot(userId: userId ?? this.userId);
}

extension AffiliateTypeChannelExtensions on AffiliateTypeChannel {
  AffiliateTypeChannel copyWith({int? chatId}) =>
      AffiliateTypeChannel(chatId: chatId ?? this.chatId);
}

extension AffiliateProgramSortOrderExtensions on AffiliateProgramSortOrder {
  TResult map<TResult extends Object?>({
    required TResult Function(AffiliateProgramSortOrderProfitability value)
    profitability,
    required TResult Function(AffiliateProgramSortOrderCreationDate value)
    creationDate,
    required TResult Function(AffiliateProgramSortOrderRevenue value) revenue,
  }) {
    switch (getConstructor()) {
      case AffiliateProgramSortOrderProfitability.constructor:
        return profitability.call(
          this as AffiliateProgramSortOrderProfitability,
        );
      case AffiliateProgramSortOrderCreationDate.constructor:
        return creationDate.call(this as AffiliateProgramSortOrderCreationDate);
      case AffiliateProgramSortOrderRevenue.constructor:
        return revenue.call(this as AffiliateProgramSortOrderRevenue);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(AffiliateProgramSortOrderProfitability value)?
    profitability,
    TResult Function(AffiliateProgramSortOrderCreationDate value)? creationDate,
    TResult Function(AffiliateProgramSortOrderRevenue value)? revenue,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case AffiliateProgramSortOrderProfitability.constructor:
        if (profitability != null) {
          return profitability.call(
            this as AffiliateProgramSortOrderProfitability,
          );
        }
        break;
      case AffiliateProgramSortOrderCreationDate.constructor:
        if (creationDate != null) {
          return creationDate.call(
            this as AffiliateProgramSortOrderCreationDate,
          );
        }
        break;
      case AffiliateProgramSortOrderRevenue.constructor:
        if (revenue != null) {
          return revenue.call(this as AffiliateProgramSortOrderRevenue);
        }
        break;
    }
    return orElse.call();
  }
}

extension AffiliateProgramParametersExtensions on AffiliateProgramParameters {
  AffiliateProgramParameters copyWith({
    int? commissionPerMille,
    int? monthCount,
  }) => AffiliateProgramParameters(
    commissionPerMille: commissionPerMille ?? this.commissionPerMille,
    monthCount: monthCount ?? this.monthCount,
  );
}

extension AffiliateProgramInfoExtensions on AffiliateProgramInfo {
  AffiliateProgramInfo copyWith({
    AffiliateProgramParameters? parameters,
    int? endDate,
    StarAmount? dailyRevenuePerUserAmount,
  }) => AffiliateProgramInfo(
    parameters: parameters ?? this.parameters,
    endDate: endDate ?? this.endDate,
    dailyRevenuePerUserAmount:
        dailyRevenuePerUserAmount ?? this.dailyRevenuePerUserAmount,
  );
}

extension AffiliateInfoExtensions on AffiliateInfo {
  AffiliateInfo copyWith({
    int? commissionPerMille,
    int? affiliateChatId,
    StarAmount? starAmount,
  }) => AffiliateInfo(
    commissionPerMille: commissionPerMille ?? this.commissionPerMille,
    affiliateChatId: affiliateChatId ?? this.affiliateChatId,
    starAmount: starAmount ?? this.starAmount,
  );
}

extension FoundAffiliateProgramExtensions on FoundAffiliateProgram {
  FoundAffiliateProgram copyWith({
    int? botUserId,
    AffiliateProgramInfo? info,
  }) => FoundAffiliateProgram(
    botUserId: botUserId ?? this.botUserId,
    info: info ?? this.info,
  );
}

extension FoundAffiliateProgramsExtensions on FoundAffiliatePrograms {
  FoundAffiliatePrograms copyWith({
    int? totalCount,
    List<FoundAffiliateProgram>? programs,
    String? nextOffset,
  }) => FoundAffiliatePrograms(
    totalCount: totalCount ?? this.totalCount,
    programs: programs ?? this.programs,
    nextOffset: nextOffset ?? this.nextOffset,
  );
}

extension ConnectedAffiliateProgramExtensions on ConnectedAffiliateProgram {
  ConnectedAffiliateProgram copyWith({
    String? url,
    int? botUserId,
    AffiliateProgramParameters? parameters,
    int? connectionDate,
    bool? isDisconnected,
    int? userCount,
    int? revenueStarCount,
  }) => ConnectedAffiliateProgram(
    url: url ?? this.url,
    botUserId: botUserId ?? this.botUserId,
    parameters: parameters ?? this.parameters,
    connectionDate: connectionDate ?? this.connectionDate,
    isDisconnected: isDisconnected ?? this.isDisconnected,
    userCount: userCount ?? this.userCount,
    revenueStarCount: revenueStarCount ?? this.revenueStarCount,
  );
}

extension ConnectedAffiliateProgramsExtensions on ConnectedAffiliatePrograms {
  ConnectedAffiliatePrograms copyWith({
    int? totalCount,
    List<ConnectedAffiliateProgram>? programs,
    String? nextOffset,
  }) => ConnectedAffiliatePrograms(
    totalCount: totalCount ?? this.totalCount,
    programs: programs ?? this.programs,
    nextOffset: nextOffset ?? this.nextOffset,
  );
}

extension ProductInfoExtensions on ProductInfo {
  ProductInfo copyWith({
    String? title,
    FormattedText? description,
    Photo? photo,
  }) => ProductInfo(
    title: title ?? this.title,
    description: description ?? this.description,
    photo: photo ?? this.photo,
  );
}

extension PremiumPaymentOptionExtensions on PremiumPaymentOption {
  PremiumPaymentOption copyWith({
    String? currency,
    int? amount,
    int? discountPercentage,
    int? monthCount,
    String? storeProductId,
    InternalLinkType? paymentLink,
  }) => PremiumPaymentOption(
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    discountPercentage: discountPercentage ?? this.discountPercentage,
    monthCount: monthCount ?? this.monthCount,
    storeProductId: storeProductId ?? this.storeProductId,
    paymentLink: paymentLink ?? this.paymentLink,
  );
}

extension PremiumStatePaymentOptionExtensions on PremiumStatePaymentOption {
  PremiumStatePaymentOption copyWith({
    PremiumPaymentOption? paymentOption,
    bool? isCurrent,
    bool? isUpgrade,
    String? lastTransactionId,
  }) => PremiumStatePaymentOption(
    paymentOption: paymentOption ?? this.paymentOption,
    isCurrent: isCurrent ?? this.isCurrent,
    isUpgrade: isUpgrade ?? this.isUpgrade,
    lastTransactionId: lastTransactionId ?? this.lastTransactionId,
  );
}

extension PremiumGiftPaymentOptionExtensions on PremiumGiftPaymentOption {
  PremiumGiftPaymentOption copyWith({
    String? currency,
    int? amount,
    int? starCount,
    int? discountPercentage,
    int? monthCount,
    String? storeProductId,
    Sticker? sticker,
  }) => PremiumGiftPaymentOption(
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    starCount: starCount ?? this.starCount,
    discountPercentage: discountPercentage ?? this.discountPercentage,
    monthCount: monthCount ?? this.monthCount,
    storeProductId: storeProductId ?? this.storeProductId,
    sticker: sticker ?? this.sticker,
  );
}

extension PremiumGiftPaymentOptionsExtensions on PremiumGiftPaymentOptions {
  PremiumGiftPaymentOptions copyWith({
    List<PremiumGiftPaymentOption>? options,
  }) => PremiumGiftPaymentOptions(options: options ?? this.options);
}

extension PremiumGiveawayPaymentOptionExtensions
    on PremiumGiveawayPaymentOption {
  PremiumGiveawayPaymentOption copyWith({
    String? currency,
    int? amount,
    int? winnerCount,
    int? monthCount,
    String? storeProductId,
    int? storeProductQuantity,
  }) => PremiumGiveawayPaymentOption(
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    winnerCount: winnerCount ?? this.winnerCount,
    monthCount: monthCount ?? this.monthCount,
    storeProductId: storeProductId ?? this.storeProductId,
    storeProductQuantity: storeProductQuantity ?? this.storeProductQuantity,
  );
}

extension PremiumGiveawayPaymentOptionsExtensions
    on PremiumGiveawayPaymentOptions {
  PremiumGiveawayPaymentOptions copyWith({
    List<PremiumGiveawayPaymentOption>? options,
  }) => PremiumGiveawayPaymentOptions(options: options ?? this.options);
}

extension PremiumGiftCodeInfoExtensions on PremiumGiftCodeInfo {
  PremiumGiftCodeInfo copyWith({
    MessageSender? creatorId,
    int? creationDate,
    bool? isFromGiveaway,
    int? giveawayMessageId,
    int? monthCount,
    int? userId,
    int? useDate,
  }) => PremiumGiftCodeInfo(
    creatorId: creatorId ?? this.creatorId,
    creationDate: creationDate ?? this.creationDate,
    isFromGiveaway: isFromGiveaway ?? this.isFromGiveaway,
    giveawayMessageId: giveawayMessageId ?? this.giveawayMessageId,
    monthCount: monthCount ?? this.monthCount,
    userId: userId ?? this.userId,
    useDate: useDate ?? this.useDate,
  );
}

extension StarPaymentOptionExtensions on StarPaymentOption {
  StarPaymentOption copyWith({
    String? currency,
    int? amount,
    int? starCount,
    String? storeProductId,
    bool? isAdditional,
  }) => StarPaymentOption(
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    starCount: starCount ?? this.starCount,
    storeProductId: storeProductId ?? this.storeProductId,
    isAdditional: isAdditional ?? this.isAdditional,
  );
}

extension StarPaymentOptionsExtensions on StarPaymentOptions {
  StarPaymentOptions copyWith({List<StarPaymentOption>? options}) =>
      StarPaymentOptions(options: options ?? this.options);
}

extension StarGiveawayWinnerOptionExtensions on StarGiveawayWinnerOption {
  StarGiveawayWinnerOption copyWith({
    int? winnerCount,
    int? wonStarCount,
    bool? isDefault,
  }) => StarGiveawayWinnerOption(
    winnerCount: winnerCount ?? this.winnerCount,
    wonStarCount: wonStarCount ?? this.wonStarCount,
    isDefault: isDefault ?? this.isDefault,
  );
}

extension StarGiveawayPaymentOptionExtensions on StarGiveawayPaymentOption {
  StarGiveawayPaymentOption copyWith({
    String? currency,
    int? amount,
    int? starCount,
    String? storeProductId,
    int? yearlyBoostCount,
    List<StarGiveawayWinnerOption>? winnerOptions,
    bool? isDefault,
    bool? isAdditional,
  }) => StarGiveawayPaymentOption(
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    starCount: starCount ?? this.starCount,
    storeProductId: storeProductId ?? this.storeProductId,
    yearlyBoostCount: yearlyBoostCount ?? this.yearlyBoostCount,
    winnerOptions: winnerOptions ?? this.winnerOptions,
    isDefault: isDefault ?? this.isDefault,
    isAdditional: isAdditional ?? this.isAdditional,
  );
}

extension StarGiveawayPaymentOptionsExtensions on StarGiveawayPaymentOptions {
  StarGiveawayPaymentOptions copyWith({
    List<StarGiveawayPaymentOption>? options,
  }) => StarGiveawayPaymentOptions(options: options ?? this.options);
}

extension AcceptedGiftTypesExtensions on AcceptedGiftTypes {
  AcceptedGiftTypes copyWith({
    bool? unlimitedGifts,
    bool? limitedGifts,
    bool? upgradedGifts,
    bool? premiumSubscription,
  }) => AcceptedGiftTypes(
    unlimitedGifts: unlimitedGifts ?? this.unlimitedGifts,
    limitedGifts: limitedGifts ?? this.limitedGifts,
    upgradedGifts: upgradedGifts ?? this.upgradedGifts,
    premiumSubscription: premiumSubscription ?? this.premiumSubscription,
  );
}

extension GiftSettingsExtensions on GiftSettings {
  GiftSettings copyWith({
    bool? showGiftButton,
    AcceptedGiftTypes? acceptedGiftTypes,
  }) => GiftSettings(
    showGiftButton: showGiftButton ?? this.showGiftButton,
    acceptedGiftTypes: acceptedGiftTypes ?? this.acceptedGiftTypes,
  );
}

extension UpgradedGiftModelExtensions on UpgradedGiftModel {
  UpgradedGiftModel copyWith({
    String? name,
    Sticker? sticker,
    int? rarityPerMille,
  }) => UpgradedGiftModel(
    name: name ?? this.name,
    sticker: sticker ?? this.sticker,
    rarityPerMille: rarityPerMille ?? this.rarityPerMille,
  );
}

extension UpgradedGiftSymbolExtensions on UpgradedGiftSymbol {
  UpgradedGiftSymbol copyWith({
    String? name,
    Sticker? sticker,
    int? rarityPerMille,
  }) => UpgradedGiftSymbol(
    name: name ?? this.name,
    sticker: sticker ?? this.sticker,
    rarityPerMille: rarityPerMille ?? this.rarityPerMille,
  );
}

extension UpgradedGiftBackdropColorsExtensions on UpgradedGiftBackdropColors {
  UpgradedGiftBackdropColors copyWith({
    int? centerColor,
    int? edgeColor,
    int? symbolColor,
    int? textColor,
  }) => UpgradedGiftBackdropColors(
    centerColor: centerColor ?? this.centerColor,
    edgeColor: edgeColor ?? this.edgeColor,
    symbolColor: symbolColor ?? this.symbolColor,
    textColor: textColor ?? this.textColor,
  );
}

extension UpgradedGiftBackdropExtensions on UpgradedGiftBackdrop {
  UpgradedGiftBackdrop copyWith({
    int? id,
    String? name,
    UpgradedGiftBackdropColors? colors,
    int? rarityPerMille,
  }) => UpgradedGiftBackdrop(
    id: id ?? this.id,
    name: name ?? this.name,
    colors: colors ?? this.colors,
    rarityPerMille: rarityPerMille ?? this.rarityPerMille,
  );
}

extension UpgradedGiftOriginalDetailsExtensions on UpgradedGiftOriginalDetails {
  UpgradedGiftOriginalDetails copyWith({
    MessageSender? senderId,
    MessageSender? receiverId,
    FormattedText? text,
    int? date,
  }) => UpgradedGiftOriginalDetails(
    senderId: senderId ?? this.senderId,
    receiverId: receiverId ?? this.receiverId,
    text: text ?? this.text,
    date: date ?? this.date,
  );
}

extension GiftExtensions on Gift {
  Gift copyWith({
    int? id,
    Sticker? sticker,
    int? starCount,
    int? defaultSellStarCount,
    int? upgradeStarCount,
    bool? isForBirthday,
    int? remainingCount,
    int? totalCount,
    int? firstSendDate,
    int? lastSendDate,
  }) => Gift(
    id: id ?? this.id,
    sticker: sticker ?? this.sticker,
    starCount: starCount ?? this.starCount,
    defaultSellStarCount: defaultSellStarCount ?? this.defaultSellStarCount,
    upgradeStarCount: upgradeStarCount ?? this.upgradeStarCount,
    isForBirthday: isForBirthday ?? this.isForBirthday,
    remainingCount: remainingCount ?? this.remainingCount,
    totalCount: totalCount ?? this.totalCount,
    firstSendDate: firstSendDate ?? this.firstSendDate,
    lastSendDate: lastSendDate ?? this.lastSendDate,
  );
}

extension UpgradedGiftExtensions on UpgradedGift {
  UpgradedGift copyWith({
    int? id,
    String? title,
    String? name,
    int? number,
    int? totalUpgradedCount,
    int? maxUpgradedCount,
    MessageSender? ownerId,
    String? ownerAddress,
    String? ownerName,
    String? giftAddress,
    UpgradedGiftModel? model,
    UpgradedGiftSymbol? symbol,
    UpgradedGiftBackdrop? backdrop,
    UpgradedGiftOriginalDetails? originalDetails,
    int? resaleStarCount,
  }) => UpgradedGift(
    id: id ?? this.id,
    title: title ?? this.title,
    name: name ?? this.name,
    number: number ?? this.number,
    totalUpgradedCount: totalUpgradedCount ?? this.totalUpgradedCount,
    maxUpgradedCount: maxUpgradedCount ?? this.maxUpgradedCount,
    ownerId: ownerId ?? this.ownerId,
    ownerAddress: ownerAddress ?? this.ownerAddress,
    ownerName: ownerName ?? this.ownerName,
    giftAddress: giftAddress ?? this.giftAddress,
    model: model ?? this.model,
    symbol: symbol ?? this.symbol,
    backdrop: backdrop ?? this.backdrop,
    originalDetails: originalDetails ?? this.originalDetails,
    resaleStarCount: resaleStarCount ?? this.resaleStarCount,
  );
}

extension UpgradeGiftResultExtensions on UpgradeGiftResult {
  UpgradeGiftResult copyWith({
    UpgradedGift? gift,
    String? receivedGiftId,
    bool? isSaved,
    bool? canBeTransferred,
    int? transferStarCount,
    int? nextTransferDate,
    int? nextResaleDate,
    int? exportDate,
  }) => UpgradeGiftResult(
    gift: gift ?? this.gift,
    receivedGiftId: receivedGiftId ?? this.receivedGiftId,
    isSaved: isSaved ?? this.isSaved,
    canBeTransferred: canBeTransferred ?? this.canBeTransferred,
    transferStarCount: transferStarCount ?? this.transferStarCount,
    nextTransferDate: nextTransferDate ?? this.nextTransferDate,
    nextResaleDate: nextResaleDate ?? this.nextResaleDate,
    exportDate: exportDate ?? this.exportDate,
  );
}

extension AvailableGiftExtensions on AvailableGift {
  AvailableGift copyWith({
    Gift? gift,
    int? resaleCount,
    int? minResaleStarCount,
    String? title,
  }) => AvailableGift(
    gift: gift ?? this.gift,
    resaleCount: resaleCount ?? this.resaleCount,
    minResaleStarCount: minResaleStarCount ?? this.minResaleStarCount,
    title: title ?? this.title,
  );
}

extension AvailableGiftsExtensions on AvailableGifts {
  AvailableGifts copyWith({List<AvailableGift>? gifts}) =>
      AvailableGifts(gifts: gifts ?? this.gifts);
}

extension UpgradedGiftAttributeIdExtensions on UpgradedGiftAttributeId {
  TResult map<TResult extends Object?>({
    required TResult Function(UpgradedGiftAttributeIdModel value) model,
    required TResult Function(UpgradedGiftAttributeIdSymbol value) symbol,
    required TResult Function(UpgradedGiftAttributeIdBackdrop value) backdrop,
  }) {
    switch (getConstructor()) {
      case UpgradedGiftAttributeIdModel.constructor:
        return model.call(this as UpgradedGiftAttributeIdModel);
      case UpgradedGiftAttributeIdSymbol.constructor:
        return symbol.call(this as UpgradedGiftAttributeIdSymbol);
      case UpgradedGiftAttributeIdBackdrop.constructor:
        return backdrop.call(this as UpgradedGiftAttributeIdBackdrop);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(UpgradedGiftAttributeIdModel value)? model,
    TResult Function(UpgradedGiftAttributeIdSymbol value)? symbol,
    TResult Function(UpgradedGiftAttributeIdBackdrop value)? backdrop,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case UpgradedGiftAttributeIdModel.constructor:
        if (model != null) {
          return model.call(this as UpgradedGiftAttributeIdModel);
        }
        break;
      case UpgradedGiftAttributeIdSymbol.constructor:
        if (symbol != null) {
          return symbol.call(this as UpgradedGiftAttributeIdSymbol);
        }
        break;
      case UpgradedGiftAttributeIdBackdrop.constructor:
        if (backdrop != null) {
          return backdrop.call(this as UpgradedGiftAttributeIdBackdrop);
        }
        break;
    }
    return orElse.call();
  }
}

extension UpgradedGiftAttributeIdModelExtensions
    on UpgradedGiftAttributeIdModel {
  UpgradedGiftAttributeIdModel copyWith({int? stickerId}) =>
      UpgradedGiftAttributeIdModel(stickerId: stickerId ?? this.stickerId);
}

extension UpgradedGiftAttributeIdSymbolExtensions
    on UpgradedGiftAttributeIdSymbol {
  UpgradedGiftAttributeIdSymbol copyWith({int? stickerId}) =>
      UpgradedGiftAttributeIdSymbol(stickerId: stickerId ?? this.stickerId);
}

extension UpgradedGiftAttributeIdBackdropExtensions
    on UpgradedGiftAttributeIdBackdrop {
  UpgradedGiftAttributeIdBackdrop copyWith({int? backdropId}) =>
      UpgradedGiftAttributeIdBackdrop(
        backdropId: backdropId ?? this.backdropId,
      );
}

extension UpgradedGiftModelCountExtensions on UpgradedGiftModelCount {
  UpgradedGiftModelCount copyWith({
    UpgradedGiftModel? model,
    int? totalCount,
  }) => UpgradedGiftModelCount(
    model: model ?? this.model,
    totalCount: totalCount ?? this.totalCount,
  );
}

extension UpgradedGiftSymbolCountExtensions on UpgradedGiftSymbolCount {
  UpgradedGiftSymbolCount copyWith({
    UpgradedGiftSymbol? symbol,
    int? totalCount,
  }) => UpgradedGiftSymbolCount(
    symbol: symbol ?? this.symbol,
    totalCount: totalCount ?? this.totalCount,
  );
}

extension UpgradedGiftBackdropCountExtensions on UpgradedGiftBackdropCount {
  UpgradedGiftBackdropCount copyWith({
    UpgradedGiftBackdrop? backdrop,
    int? totalCount,
  }) => UpgradedGiftBackdropCount(
    backdrop: backdrop ?? this.backdrop,
    totalCount: totalCount ?? this.totalCount,
  );
}

extension GiftForResaleOrderExtensions on GiftForResaleOrder {
  TResult map<TResult extends Object?>({
    required TResult Function(GiftForResaleOrderPrice value) price,
    required TResult Function(GiftForResaleOrderPriceChangeDate value)
    priceChangeDate,
    required TResult Function(GiftForResaleOrderNumber value) number,
  }) {
    switch (getConstructor()) {
      case GiftForResaleOrderPrice.constructor:
        return price.call(this as GiftForResaleOrderPrice);
      case GiftForResaleOrderPriceChangeDate.constructor:
        return priceChangeDate.call(this as GiftForResaleOrderPriceChangeDate);
      case GiftForResaleOrderNumber.constructor:
        return number.call(this as GiftForResaleOrderNumber);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(GiftForResaleOrderPrice value)? price,
    TResult Function(GiftForResaleOrderPriceChangeDate value)? priceChangeDate,
    TResult Function(GiftForResaleOrderNumber value)? number,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case GiftForResaleOrderPrice.constructor:
        if (price != null) {
          return price.call(this as GiftForResaleOrderPrice);
        }
        break;
      case GiftForResaleOrderPriceChangeDate.constructor:
        if (priceChangeDate != null) {
          return priceChangeDate.call(
            this as GiftForResaleOrderPriceChangeDate,
          );
        }
        break;
      case GiftForResaleOrderNumber.constructor:
        if (number != null) {
          return number.call(this as GiftForResaleOrderNumber);
        }
        break;
    }
    return orElse.call();
  }
}

extension GiftForResaleExtensions on GiftForResale {
  GiftForResale copyWith({UpgradedGift? gift, String? receivedGiftId}) =>
      GiftForResale(
        gift: gift ?? this.gift,
        receivedGiftId: receivedGiftId ?? this.receivedGiftId,
      );
}

extension GiftsForResaleExtensions on GiftsForResale {
  GiftsForResale copyWith({
    int? totalCount,
    List<GiftForResale>? gifts,
    List<UpgradedGiftModelCount>? models,
    List<UpgradedGiftSymbolCount>? symbols,
    List<UpgradedGiftBackdropCount>? backdrops,
    String? nextOffset,
  }) => GiftsForResale(
    totalCount: totalCount ?? this.totalCount,
    gifts: gifts ?? this.gifts,
    models: models ?? this.models,
    symbols: symbols ?? this.symbols,
    backdrops: backdrops ?? this.backdrops,
    nextOffset: nextOffset ?? this.nextOffset,
  );
}

extension SentGiftExtensions on SentGift {
  TResult map<TResult extends Object?>({
    required TResult Function(SentGiftRegular value) regular,
    required TResult Function(SentGiftUpgraded value) upgraded,
  }) {
    switch (getConstructor()) {
      case SentGiftRegular.constructor:
        return regular.call(this as SentGiftRegular);
      case SentGiftUpgraded.constructor:
        return upgraded.call(this as SentGiftUpgraded);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(SentGiftRegular value)? regular,
    TResult Function(SentGiftUpgraded value)? upgraded,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case SentGiftRegular.constructor:
        if (regular != null) {
          return regular.call(this as SentGiftRegular);
        }
        break;
      case SentGiftUpgraded.constructor:
        if (upgraded != null) {
          return upgraded.call(this as SentGiftUpgraded);
        }
        break;
    }
    return orElse.call();
  }
}

extension SentGiftRegularExtensions on SentGiftRegular {
  SentGiftRegular copyWith({Gift? gift}) =>
      SentGiftRegular(gift: gift ?? this.gift);
}

extension SentGiftUpgradedExtensions on SentGiftUpgraded {
  SentGiftUpgraded copyWith({UpgradedGift? gift}) =>
      SentGiftUpgraded(gift: gift ?? this.gift);
}

extension ReceivedGiftExtensions on ReceivedGift {
  ReceivedGift copyWith({
    String? receivedGiftId,
    MessageSender? senderId,
    FormattedText? text,
    bool? isPrivate,
    bool? isSaved,
    bool? isPinned,
    bool? canBeUpgraded,
    bool? canBeTransferred,
    bool? wasRefunded,
    int? date,
    SentGift? gift,
    int? sellStarCount,
    int? prepaidUpgradeStarCount,
    int? transferStarCount,
    int? nextTransferDate,
    int? nextResaleDate,
    int? exportDate,
  }) => ReceivedGift(
    receivedGiftId: receivedGiftId ?? this.receivedGiftId,
    senderId: senderId ?? this.senderId,
    text: text ?? this.text,
    isPrivate: isPrivate ?? this.isPrivate,
    isSaved: isSaved ?? this.isSaved,
    isPinned: isPinned ?? this.isPinned,
    canBeUpgraded: canBeUpgraded ?? this.canBeUpgraded,
    canBeTransferred: canBeTransferred ?? this.canBeTransferred,
    wasRefunded: wasRefunded ?? this.wasRefunded,
    date: date ?? this.date,
    gift: gift ?? this.gift,
    sellStarCount: sellStarCount ?? this.sellStarCount,
    prepaidUpgradeStarCount:
        prepaidUpgradeStarCount ?? this.prepaidUpgradeStarCount,
    transferStarCount: transferStarCount ?? this.transferStarCount,
    nextTransferDate: nextTransferDate ?? this.nextTransferDate,
    nextResaleDate: nextResaleDate ?? this.nextResaleDate,
    exportDate: exportDate ?? this.exportDate,
  );
}

extension ReceivedGiftsExtensions on ReceivedGifts {
  ReceivedGifts copyWith({
    int? totalCount,
    List<ReceivedGift>? gifts,
    bool? areNotificationsEnabled,
    String? nextOffset,
  }) => ReceivedGifts(
    totalCount: totalCount ?? this.totalCount,
    gifts: gifts ?? this.gifts,
    areNotificationsEnabled:
        areNotificationsEnabled ?? this.areNotificationsEnabled,
    nextOffset: nextOffset ?? this.nextOffset,
  );
}

extension GiftUpgradePreviewExtensions on GiftUpgradePreview {
  GiftUpgradePreview copyWith({
    List<UpgradedGiftModel>? models,
    List<UpgradedGiftSymbol>? symbols,
    List<UpgradedGiftBackdrop>? backdrops,
  }) => GiftUpgradePreview(
    models: models ?? this.models,
    symbols: symbols ?? this.symbols,
    backdrops: backdrops ?? this.backdrops,
  );
}

extension StarTransactionDirectionExtensions on StarTransactionDirection {
  TResult map<TResult extends Object?>({
    required TResult Function(StarTransactionDirectionIncoming value) incoming,
    required TResult Function(StarTransactionDirectionOutgoing value) outgoing,
  }) {
    switch (getConstructor()) {
      case StarTransactionDirectionIncoming.constructor:
        return incoming.call(this as StarTransactionDirectionIncoming);
      case StarTransactionDirectionOutgoing.constructor:
        return outgoing.call(this as StarTransactionDirectionOutgoing);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(StarTransactionDirectionIncoming value)? incoming,
    TResult Function(StarTransactionDirectionOutgoing value)? outgoing,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case StarTransactionDirectionIncoming.constructor:
        if (incoming != null) {
          return incoming.call(this as StarTransactionDirectionIncoming);
        }
        break;
      case StarTransactionDirectionOutgoing.constructor:
        if (outgoing != null) {
          return outgoing.call(this as StarTransactionDirectionOutgoing);
        }
        break;
    }
    return orElse.call();
  }
}

extension StarTransactionTypeExtensions on StarTransactionType {
  TResult map<TResult extends Object?>({
    required TResult Function(StarTransactionTypePremiumBotDeposit value)
    premiumBotDeposit,
    required TResult Function(StarTransactionTypeAppStoreDeposit value)
    appStoreDeposit,
    required TResult Function(StarTransactionTypeGooglePlayDeposit value)
    googlePlayDeposit,
    required TResult Function(StarTransactionTypeFragmentDeposit value)
    fragmentDeposit,
    required TResult Function(StarTransactionTypeUserDeposit value) userDeposit,
    required TResult Function(StarTransactionTypeGiveawayDeposit value)
    giveawayDeposit,
    required TResult Function(StarTransactionTypeFragmentWithdrawal value)
    fragmentWithdrawal,
    required TResult Function(StarTransactionTypeTelegramAdsWithdrawal value)
    telegramAdsWithdrawal,
    required TResult Function(StarTransactionTypeTelegramApiUsage value)
    telegramApiUsage,
    required TResult Function(StarTransactionTypeBotPaidMediaPurchase value)
    botPaidMediaPurchase,
    required TResult Function(StarTransactionTypeBotPaidMediaSale value)
    botPaidMediaSale,
    required TResult Function(StarTransactionTypeChannelPaidMediaPurchase value)
    channelPaidMediaPurchase,
    required TResult Function(StarTransactionTypeChannelPaidMediaSale value)
    channelPaidMediaSale,
    required TResult Function(StarTransactionTypeBotInvoicePurchase value)
    botInvoicePurchase,
    required TResult Function(StarTransactionTypeBotInvoiceSale value)
    botInvoiceSale,
    required TResult Function(StarTransactionTypeBotSubscriptionPurchase value)
    botSubscriptionPurchase,
    required TResult Function(StarTransactionTypeBotSubscriptionSale value)
    botSubscriptionSale,
    required TResult Function(
      StarTransactionTypeChannelSubscriptionPurchase value,
    )
    channelSubscriptionPurchase,
    required TResult Function(StarTransactionTypeChannelSubscriptionSale value)
    channelSubscriptionSale,
    required TResult Function(StarTransactionTypeGiftPurchase value)
    giftPurchase,
    required TResult Function(StarTransactionTypeGiftTransfer value)
    giftTransfer,
    required TResult Function(StarTransactionTypeGiftSale value) giftSale,
    required TResult Function(StarTransactionTypeGiftUpgrade value) giftUpgrade,
    required TResult Function(StarTransactionTypeUpgradedGiftPurchase value)
    upgradedGiftPurchase,
    required TResult Function(StarTransactionTypeUpgradedGiftSale value)
    upgradedGiftSale,
    required TResult Function(StarTransactionTypeChannelPaidReactionSend value)
    channelPaidReactionSend,
    required TResult Function(
      StarTransactionTypeChannelPaidReactionReceive value,
    )
    channelPaidReactionReceive,
    required TResult Function(
      StarTransactionTypeAffiliateProgramCommission value,
    )
    affiliateProgramCommission,
    required TResult Function(StarTransactionTypePaidMessageSend value)
    paidMessageSend,
    required TResult Function(StarTransactionTypePaidMessageReceive value)
    paidMessageReceive,
    required TResult Function(StarTransactionTypePremiumPurchase value)
    premiumPurchase,
    required TResult Function(StarTransactionTypeBusinessBotTransferSend value)
    businessBotTransferSend,
    required TResult Function(
      StarTransactionTypeBusinessBotTransferReceive value,
    )
    businessBotTransferReceive,
    required TResult Function(StarTransactionTypeUnsupported value) unsupported,
  }) {
    switch (getConstructor()) {
      case StarTransactionTypePremiumBotDeposit.constructor:
        return premiumBotDeposit.call(
          this as StarTransactionTypePremiumBotDeposit,
        );
      case StarTransactionTypeAppStoreDeposit.constructor:
        return appStoreDeposit.call(this as StarTransactionTypeAppStoreDeposit);
      case StarTransactionTypeGooglePlayDeposit.constructor:
        return googlePlayDeposit.call(
          this as StarTransactionTypeGooglePlayDeposit,
        );
      case StarTransactionTypeFragmentDeposit.constructor:
        return fragmentDeposit.call(this as StarTransactionTypeFragmentDeposit);
      case StarTransactionTypeUserDeposit.constructor:
        return userDeposit.call(this as StarTransactionTypeUserDeposit);
      case StarTransactionTypeGiveawayDeposit.constructor:
        return giveawayDeposit.call(this as StarTransactionTypeGiveawayDeposit);
      case StarTransactionTypeFragmentWithdrawal.constructor:
        return fragmentWithdrawal.call(
          this as StarTransactionTypeFragmentWithdrawal,
        );
      case StarTransactionTypeTelegramAdsWithdrawal.constructor:
        return telegramAdsWithdrawal.call(
          this as StarTransactionTypeTelegramAdsWithdrawal,
        );
      case StarTransactionTypeTelegramApiUsage.constructor:
        return telegramApiUsage.call(
          this as StarTransactionTypeTelegramApiUsage,
        );
      case StarTransactionTypeBotPaidMediaPurchase.constructor:
        return botPaidMediaPurchase.call(
          this as StarTransactionTypeBotPaidMediaPurchase,
        );
      case StarTransactionTypeBotPaidMediaSale.constructor:
        return botPaidMediaSale.call(
          this as StarTransactionTypeBotPaidMediaSale,
        );
      case StarTransactionTypeChannelPaidMediaPurchase.constructor:
        return channelPaidMediaPurchase.call(
          this as StarTransactionTypeChannelPaidMediaPurchase,
        );
      case StarTransactionTypeChannelPaidMediaSale.constructor:
        return channelPaidMediaSale.call(
          this as StarTransactionTypeChannelPaidMediaSale,
        );
      case StarTransactionTypeBotInvoicePurchase.constructor:
        return botInvoicePurchase.call(
          this as StarTransactionTypeBotInvoicePurchase,
        );
      case StarTransactionTypeBotInvoiceSale.constructor:
        return botInvoiceSale.call(this as StarTransactionTypeBotInvoiceSale);
      case StarTransactionTypeBotSubscriptionPurchase.constructor:
        return botSubscriptionPurchase.call(
          this as StarTransactionTypeBotSubscriptionPurchase,
        );
      case StarTransactionTypeBotSubscriptionSale.constructor:
        return botSubscriptionSale.call(
          this as StarTransactionTypeBotSubscriptionSale,
        );
      case StarTransactionTypeChannelSubscriptionPurchase.constructor:
        return channelSubscriptionPurchase.call(
          this as StarTransactionTypeChannelSubscriptionPurchase,
        );
      case StarTransactionTypeChannelSubscriptionSale.constructor:
        return channelSubscriptionSale.call(
          this as StarTransactionTypeChannelSubscriptionSale,
        );
      case StarTransactionTypeGiftPurchase.constructor:
        return giftPurchase.call(this as StarTransactionTypeGiftPurchase);
      case StarTransactionTypeGiftTransfer.constructor:
        return giftTransfer.call(this as StarTransactionTypeGiftTransfer);
      case StarTransactionTypeGiftSale.constructor:
        return giftSale.call(this as StarTransactionTypeGiftSale);
      case StarTransactionTypeGiftUpgrade.constructor:
        return giftUpgrade.call(this as StarTransactionTypeGiftUpgrade);
      case StarTransactionTypeUpgradedGiftPurchase.constructor:
        return upgradedGiftPurchase.call(
          this as StarTransactionTypeUpgradedGiftPurchase,
        );
      case StarTransactionTypeUpgradedGiftSale.constructor:
        return upgradedGiftSale.call(
          this as StarTransactionTypeUpgradedGiftSale,
        );
      case StarTransactionTypeChannelPaidReactionSend.constructor:
        return channelPaidReactionSend.call(
          this as StarTransactionTypeChannelPaidReactionSend,
        );
      case StarTransactionTypeChannelPaidReactionReceive.constructor:
        return channelPaidReactionReceive.call(
          this as StarTransactionTypeChannelPaidReactionReceive,
        );
      case StarTransactionTypeAffiliateProgramCommission.constructor:
        return affiliateProgramCommission.call(
          this as StarTransactionTypeAffiliateProgramCommission,
        );
      case StarTransactionTypePaidMessageSend.constructor:
        return paidMessageSend.call(this as StarTransactionTypePaidMessageSend);
      case StarTransactionTypePaidMessageReceive.constructor:
        return paidMessageReceive.call(
          this as StarTransactionTypePaidMessageReceive,
        );
      case StarTransactionTypePremiumPurchase.constructor:
        return premiumPurchase.call(this as StarTransactionTypePremiumPurchase);
      case StarTransactionTypeBusinessBotTransferSend.constructor:
        return businessBotTransferSend.call(
          this as StarTransactionTypeBusinessBotTransferSend,
        );
      case StarTransactionTypeBusinessBotTransferReceive.constructor:
        return businessBotTransferReceive.call(
          this as StarTransactionTypeBusinessBotTransferReceive,
        );
      case StarTransactionTypeUnsupported.constructor:
        return unsupported.call(this as StarTransactionTypeUnsupported);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(StarTransactionTypePremiumBotDeposit value)?
    premiumBotDeposit,
    TResult Function(StarTransactionTypeAppStoreDeposit value)? appStoreDeposit,
    TResult Function(StarTransactionTypeGooglePlayDeposit value)?
    googlePlayDeposit,
    TResult Function(StarTransactionTypeFragmentDeposit value)? fragmentDeposit,
    TResult Function(StarTransactionTypeUserDeposit value)? userDeposit,
    TResult Function(StarTransactionTypeGiveawayDeposit value)? giveawayDeposit,
    TResult Function(StarTransactionTypeFragmentWithdrawal value)?
    fragmentWithdrawal,
    TResult Function(StarTransactionTypeTelegramAdsWithdrawal value)?
    telegramAdsWithdrawal,
    TResult Function(StarTransactionTypeTelegramApiUsage value)?
    telegramApiUsage,
    TResult Function(StarTransactionTypeBotPaidMediaPurchase value)?
    botPaidMediaPurchase,
    TResult Function(StarTransactionTypeBotPaidMediaSale value)?
    botPaidMediaSale,
    TResult Function(StarTransactionTypeChannelPaidMediaPurchase value)?
    channelPaidMediaPurchase,
    TResult Function(StarTransactionTypeChannelPaidMediaSale value)?
    channelPaidMediaSale,
    TResult Function(StarTransactionTypeBotInvoicePurchase value)?
    botInvoicePurchase,
    TResult Function(StarTransactionTypeBotInvoiceSale value)? botInvoiceSale,
    TResult Function(StarTransactionTypeBotSubscriptionPurchase value)?
    botSubscriptionPurchase,
    TResult Function(StarTransactionTypeBotSubscriptionSale value)?
    botSubscriptionSale,
    TResult Function(StarTransactionTypeChannelSubscriptionPurchase value)?
    channelSubscriptionPurchase,
    TResult Function(StarTransactionTypeChannelSubscriptionSale value)?
    channelSubscriptionSale,
    TResult Function(StarTransactionTypeGiftPurchase value)? giftPurchase,
    TResult Function(StarTransactionTypeGiftTransfer value)? giftTransfer,
    TResult Function(StarTransactionTypeGiftSale value)? giftSale,
    TResult Function(StarTransactionTypeGiftUpgrade value)? giftUpgrade,
    TResult Function(StarTransactionTypeUpgradedGiftPurchase value)?
    upgradedGiftPurchase,
    TResult Function(StarTransactionTypeUpgradedGiftSale value)?
    upgradedGiftSale,
    TResult Function(StarTransactionTypeChannelPaidReactionSend value)?
    channelPaidReactionSend,
    TResult Function(StarTransactionTypeChannelPaidReactionReceive value)?
    channelPaidReactionReceive,
    TResult Function(StarTransactionTypeAffiliateProgramCommission value)?
    affiliateProgramCommission,
    TResult Function(StarTransactionTypePaidMessageSend value)? paidMessageSend,
    TResult Function(StarTransactionTypePaidMessageReceive value)?
    paidMessageReceive,
    TResult Function(StarTransactionTypePremiumPurchase value)? premiumPurchase,
    TResult Function(StarTransactionTypeBusinessBotTransferSend value)?
    businessBotTransferSend,
    TResult Function(StarTransactionTypeBusinessBotTransferReceive value)?
    businessBotTransferReceive,
    TResult Function(StarTransactionTypeUnsupported value)? unsupported,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case StarTransactionTypePremiumBotDeposit.constructor:
        if (premiumBotDeposit != null) {
          return premiumBotDeposit.call(
            this as StarTransactionTypePremiumBotDeposit,
          );
        }
        break;
      case StarTransactionTypeAppStoreDeposit.constructor:
        if (appStoreDeposit != null) {
          return appStoreDeposit.call(
            this as StarTransactionTypeAppStoreDeposit,
          );
        }
        break;
      case StarTransactionTypeGooglePlayDeposit.constructor:
        if (googlePlayDeposit != null) {
          return googlePlayDeposit.call(
            this as StarTransactionTypeGooglePlayDeposit,
          );
        }
        break;
      case StarTransactionTypeFragmentDeposit.constructor:
        if (fragmentDeposit != null) {
          return fragmentDeposit.call(
            this as StarTransactionTypeFragmentDeposit,
          );
        }
        break;
      case StarTransactionTypeUserDeposit.constructor:
        if (userDeposit != null) {
          return userDeposit.call(this as StarTransactionTypeUserDeposit);
        }
        break;
      case StarTransactionTypeGiveawayDeposit.constructor:
        if (giveawayDeposit != null) {
          return giveawayDeposit.call(
            this as StarTransactionTypeGiveawayDeposit,
          );
        }
        break;
      case StarTransactionTypeFragmentWithdrawal.constructor:
        if (fragmentWithdrawal != null) {
          return fragmentWithdrawal.call(
            this as StarTransactionTypeFragmentWithdrawal,
          );
        }
        break;
      case StarTransactionTypeTelegramAdsWithdrawal.constructor:
        if (telegramAdsWithdrawal != null) {
          return telegramAdsWithdrawal.call(
            this as StarTransactionTypeTelegramAdsWithdrawal,
          );
        }
        break;
      case StarTransactionTypeTelegramApiUsage.constructor:
        if (telegramApiUsage != null) {
          return telegramApiUsage.call(
            this as StarTransactionTypeTelegramApiUsage,
          );
        }
        break;
      case StarTransactionTypeBotPaidMediaPurchase.constructor:
        if (botPaidMediaPurchase != null) {
          return botPaidMediaPurchase.call(
            this as StarTransactionTypeBotPaidMediaPurchase,
          );
        }
        break;
      case StarTransactionTypeBotPaidMediaSale.constructor:
        if (botPaidMediaSale != null) {
          return botPaidMediaSale.call(
            this as StarTransactionTypeBotPaidMediaSale,
          );
        }
        break;
      case StarTransactionTypeChannelPaidMediaPurchase.constructor:
        if (channelPaidMediaPurchase != null) {
          return channelPaidMediaPurchase.call(
            this as StarTransactionTypeChannelPaidMediaPurchase,
          );
        }
        break;
      case StarTransactionTypeChannelPaidMediaSale.constructor:
        if (channelPaidMediaSale != null) {
          return channelPaidMediaSale.call(
            this as StarTransactionTypeChannelPaidMediaSale,
          );
        }
        break;
      case StarTransactionTypeBotInvoicePurchase.constructor:
        if (botInvoicePurchase != null) {
          return botInvoicePurchase.call(
            this as StarTransactionTypeBotInvoicePurchase,
          );
        }
        break;
      case StarTransactionTypeBotInvoiceSale.constructor:
        if (botInvoiceSale != null) {
          return botInvoiceSale.call(this as StarTransactionTypeBotInvoiceSale);
        }
        break;
      case StarTransactionTypeBotSubscriptionPurchase.constructor:
        if (botSubscriptionPurchase != null) {
          return botSubscriptionPurchase.call(
            this as StarTransactionTypeBotSubscriptionPurchase,
          );
        }
        break;
      case StarTransactionTypeBotSubscriptionSale.constructor:
        if (botSubscriptionSale != null) {
          return botSubscriptionSale.call(
            this as StarTransactionTypeBotSubscriptionSale,
          );
        }
        break;
      case StarTransactionTypeChannelSubscriptionPurchase.constructor:
        if (channelSubscriptionPurchase != null) {
          return channelSubscriptionPurchase.call(
            this as StarTransactionTypeChannelSubscriptionPurchase,
          );
        }
        break;
      case StarTransactionTypeChannelSubscriptionSale.constructor:
        if (channelSubscriptionSale != null) {
          return channelSubscriptionSale.call(
            this as StarTransactionTypeChannelSubscriptionSale,
          );
        }
        break;
      case StarTransactionTypeGiftPurchase.constructor:
        if (giftPurchase != null) {
          return giftPurchase.call(this as StarTransactionTypeGiftPurchase);
        }
        break;
      case StarTransactionTypeGiftTransfer.constructor:
        if (giftTransfer != null) {
          return giftTransfer.call(this as StarTransactionTypeGiftTransfer);
        }
        break;
      case StarTransactionTypeGiftSale.constructor:
        if (giftSale != null) {
          return giftSale.call(this as StarTransactionTypeGiftSale);
        }
        break;
      case StarTransactionTypeGiftUpgrade.constructor:
        if (giftUpgrade != null) {
          return giftUpgrade.call(this as StarTransactionTypeGiftUpgrade);
        }
        break;
      case StarTransactionTypeUpgradedGiftPurchase.constructor:
        if (upgradedGiftPurchase != null) {
          return upgradedGiftPurchase.call(
            this as StarTransactionTypeUpgradedGiftPurchase,
          );
        }
        break;
      case StarTransactionTypeUpgradedGiftSale.constructor:
        if (upgradedGiftSale != null) {
          return upgradedGiftSale.call(
            this as StarTransactionTypeUpgradedGiftSale,
          );
        }
        break;
      case StarTransactionTypeChannelPaidReactionSend.constructor:
        if (channelPaidReactionSend != null) {
          return channelPaidReactionSend.call(
            this as StarTransactionTypeChannelPaidReactionSend,
          );
        }
        break;
      case StarTransactionTypeChannelPaidReactionReceive.constructor:
        if (channelPaidReactionReceive != null) {
          return channelPaidReactionReceive.call(
            this as StarTransactionTypeChannelPaidReactionReceive,
          );
        }
        break;
      case StarTransactionTypeAffiliateProgramCommission.constructor:
        if (affiliateProgramCommission != null) {
          return affiliateProgramCommission.call(
            this as StarTransactionTypeAffiliateProgramCommission,
          );
        }
        break;
      case StarTransactionTypePaidMessageSend.constructor:
        if (paidMessageSend != null) {
          return paidMessageSend.call(
            this as StarTransactionTypePaidMessageSend,
          );
        }
        break;
      case StarTransactionTypePaidMessageReceive.constructor:
        if (paidMessageReceive != null) {
          return paidMessageReceive.call(
            this as StarTransactionTypePaidMessageReceive,
          );
        }
        break;
      case StarTransactionTypePremiumPurchase.constructor:
        if (premiumPurchase != null) {
          return premiumPurchase.call(
            this as StarTransactionTypePremiumPurchase,
          );
        }
        break;
      case StarTransactionTypeBusinessBotTransferSend.constructor:
        if (businessBotTransferSend != null) {
          return businessBotTransferSend.call(
            this as StarTransactionTypeBusinessBotTransferSend,
          );
        }
        break;
      case StarTransactionTypeBusinessBotTransferReceive.constructor:
        if (businessBotTransferReceive != null) {
          return businessBotTransferReceive.call(
            this as StarTransactionTypeBusinessBotTransferReceive,
          );
        }
        break;
      case StarTransactionTypeUnsupported.constructor:
        if (unsupported != null) {
          return unsupported.call(this as StarTransactionTypeUnsupported);
        }
        break;
    }
    return orElse.call();
  }
}

extension StarTransactionTypeUserDepositExtensions
    on StarTransactionTypeUserDeposit {
  StarTransactionTypeUserDeposit copyWith({int? userId, Sticker? sticker}) =>
      StarTransactionTypeUserDeposit(
        userId: userId ?? this.userId,
        sticker: sticker ?? this.sticker,
      );
}

extension StarTransactionTypeGiveawayDepositExtensions
    on StarTransactionTypeGiveawayDeposit {
  StarTransactionTypeGiveawayDeposit copyWith({
    int? chatId,
    int? giveawayMessageId,
  }) => StarTransactionTypeGiveawayDeposit(
    chatId: chatId ?? this.chatId,
    giveawayMessageId: giveawayMessageId ?? this.giveawayMessageId,
  );
}

extension StarTransactionTypeFragmentWithdrawalExtensions
    on StarTransactionTypeFragmentWithdrawal {
  StarTransactionTypeFragmentWithdrawal copyWith({
    RevenueWithdrawalState? withdrawalState,
  }) => StarTransactionTypeFragmentWithdrawal(
    withdrawalState: withdrawalState ?? this.withdrawalState,
  );
}

extension StarTransactionTypeTelegramApiUsageExtensions
    on StarTransactionTypeTelegramApiUsage {
  StarTransactionTypeTelegramApiUsage copyWith({int? requestCount}) =>
      StarTransactionTypeTelegramApiUsage(
        requestCount: requestCount ?? this.requestCount,
      );
}

extension StarTransactionTypeBotPaidMediaPurchaseExtensions
    on StarTransactionTypeBotPaidMediaPurchase {
  StarTransactionTypeBotPaidMediaPurchase copyWith({
    int? userId,
    List<PaidMedia>? media,
  }) => StarTransactionTypeBotPaidMediaPurchase(
    userId: userId ?? this.userId,
    media: media ?? this.media,
  );
}

extension StarTransactionTypeBotPaidMediaSaleExtensions
    on StarTransactionTypeBotPaidMediaSale {
  StarTransactionTypeBotPaidMediaSale copyWith({
    int? userId,
    List<PaidMedia>? media,
    String? payload,
    AffiliateInfo? affiliate,
  }) => StarTransactionTypeBotPaidMediaSale(
    userId: userId ?? this.userId,
    media: media ?? this.media,
    payload: payload ?? this.payload,
    affiliate: affiliate ?? this.affiliate,
  );
}

extension StarTransactionTypeChannelPaidMediaPurchaseExtensions
    on StarTransactionTypeChannelPaidMediaPurchase {
  StarTransactionTypeChannelPaidMediaPurchase copyWith({
    int? chatId,
    int? messageId,
    List<PaidMedia>? media,
  }) => StarTransactionTypeChannelPaidMediaPurchase(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    media: media ?? this.media,
  );
}

extension StarTransactionTypeChannelPaidMediaSaleExtensions
    on StarTransactionTypeChannelPaidMediaSale {
  StarTransactionTypeChannelPaidMediaSale copyWith({
    int? userId,
    int? messageId,
    List<PaidMedia>? media,
  }) => StarTransactionTypeChannelPaidMediaSale(
    userId: userId ?? this.userId,
    messageId: messageId ?? this.messageId,
    media: media ?? this.media,
  );
}

extension StarTransactionTypeBotInvoicePurchaseExtensions
    on StarTransactionTypeBotInvoicePurchase {
  StarTransactionTypeBotInvoicePurchase copyWith({
    int? userId,
    ProductInfo? productInfo,
  }) => StarTransactionTypeBotInvoicePurchase(
    userId: userId ?? this.userId,
    productInfo: productInfo ?? this.productInfo,
  );
}

extension StarTransactionTypeBotInvoiceSaleExtensions
    on StarTransactionTypeBotInvoiceSale {
  StarTransactionTypeBotInvoiceSale copyWith({
    int? userId,
    ProductInfo? productInfo,
    String? invoicePayload,
    AffiliateInfo? affiliate,
  }) => StarTransactionTypeBotInvoiceSale(
    userId: userId ?? this.userId,
    productInfo: productInfo ?? this.productInfo,
    invoicePayload: invoicePayload ?? this.invoicePayload,
    affiliate: affiliate ?? this.affiliate,
  );
}

extension StarTransactionTypeBotSubscriptionPurchaseExtensions
    on StarTransactionTypeBotSubscriptionPurchase {
  StarTransactionTypeBotSubscriptionPurchase copyWith({
    int? userId,
    int? subscriptionPeriod,
    ProductInfo? productInfo,
  }) => StarTransactionTypeBotSubscriptionPurchase(
    userId: userId ?? this.userId,
    subscriptionPeriod: subscriptionPeriod ?? this.subscriptionPeriod,
    productInfo: productInfo ?? this.productInfo,
  );
}

extension StarTransactionTypeBotSubscriptionSaleExtensions
    on StarTransactionTypeBotSubscriptionSale {
  StarTransactionTypeBotSubscriptionSale copyWith({
    int? userId,
    int? subscriptionPeriod,
    ProductInfo? productInfo,
    String? invoicePayload,
    AffiliateInfo? affiliate,
  }) => StarTransactionTypeBotSubscriptionSale(
    userId: userId ?? this.userId,
    subscriptionPeriod: subscriptionPeriod ?? this.subscriptionPeriod,
    productInfo: productInfo ?? this.productInfo,
    invoicePayload: invoicePayload ?? this.invoicePayload,
    affiliate: affiliate ?? this.affiliate,
  );
}

extension StarTransactionTypeChannelSubscriptionPurchaseExtensions
    on StarTransactionTypeChannelSubscriptionPurchase {
  StarTransactionTypeChannelSubscriptionPurchase copyWith({
    int? chatId,
    int? subscriptionPeriod,
  }) => StarTransactionTypeChannelSubscriptionPurchase(
    chatId: chatId ?? this.chatId,
    subscriptionPeriod: subscriptionPeriod ?? this.subscriptionPeriod,
  );
}

extension StarTransactionTypeChannelSubscriptionSaleExtensions
    on StarTransactionTypeChannelSubscriptionSale {
  StarTransactionTypeChannelSubscriptionSale copyWith({
    int? userId,
    int? subscriptionPeriod,
  }) => StarTransactionTypeChannelSubscriptionSale(
    userId: userId ?? this.userId,
    subscriptionPeriod: subscriptionPeriod ?? this.subscriptionPeriod,
  );
}

extension StarTransactionTypeGiftPurchaseExtensions
    on StarTransactionTypeGiftPurchase {
  StarTransactionTypeGiftPurchase copyWith({
    MessageSender? ownerId,
    Gift? gift,
  }) => StarTransactionTypeGiftPurchase(
    ownerId: ownerId ?? this.ownerId,
    gift: gift ?? this.gift,
  );
}

extension StarTransactionTypeGiftTransferExtensions
    on StarTransactionTypeGiftTransfer {
  StarTransactionTypeGiftTransfer copyWith({
    MessageSender? ownerId,
    UpgradedGift? gift,
  }) => StarTransactionTypeGiftTransfer(
    ownerId: ownerId ?? this.ownerId,
    gift: gift ?? this.gift,
  );
}

extension StarTransactionTypeGiftSaleExtensions on StarTransactionTypeGiftSale {
  StarTransactionTypeGiftSale copyWith({int? userId, Gift? gift}) =>
      StarTransactionTypeGiftSale(
        userId: userId ?? this.userId,
        gift: gift ?? this.gift,
      );
}

extension StarTransactionTypeGiftUpgradeExtensions
    on StarTransactionTypeGiftUpgrade {
  StarTransactionTypeGiftUpgrade copyWith({int? userId, UpgradedGift? gift}) =>
      StarTransactionTypeGiftUpgrade(
        userId: userId ?? this.userId,
        gift: gift ?? this.gift,
      );
}

extension StarTransactionTypeUpgradedGiftPurchaseExtensions
    on StarTransactionTypeUpgradedGiftPurchase {
  StarTransactionTypeUpgradedGiftPurchase copyWith({
    int? userId,
    UpgradedGift? gift,
  }) => StarTransactionTypeUpgradedGiftPurchase(
    userId: userId ?? this.userId,
    gift: gift ?? this.gift,
  );
}

extension StarTransactionTypeUpgradedGiftSaleExtensions
    on StarTransactionTypeUpgradedGiftSale {
  StarTransactionTypeUpgradedGiftSale copyWith({
    int? userId,
    UpgradedGift? gift,
    AffiliateInfo? affiliate,
  }) => StarTransactionTypeUpgradedGiftSale(
    userId: userId ?? this.userId,
    gift: gift ?? this.gift,
    affiliate: affiliate ?? this.affiliate,
  );
}

extension StarTransactionTypeChannelPaidReactionSendExtensions
    on StarTransactionTypeChannelPaidReactionSend {
  StarTransactionTypeChannelPaidReactionSend copyWith({
    int? chatId,
    int? messageId,
  }) => StarTransactionTypeChannelPaidReactionSend(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
  );
}

extension StarTransactionTypeChannelPaidReactionReceiveExtensions
    on StarTransactionTypeChannelPaidReactionReceive {
  StarTransactionTypeChannelPaidReactionReceive copyWith({
    int? userId,
    int? messageId,
  }) => StarTransactionTypeChannelPaidReactionReceive(
    userId: userId ?? this.userId,
    messageId: messageId ?? this.messageId,
  );
}

extension StarTransactionTypeAffiliateProgramCommissionExtensions
    on StarTransactionTypeAffiliateProgramCommission {
  StarTransactionTypeAffiliateProgramCommission copyWith({
    int? chatId,
    int? commissionPerMille,
  }) => StarTransactionTypeAffiliateProgramCommission(
    chatId: chatId ?? this.chatId,
    commissionPerMille: commissionPerMille ?? this.commissionPerMille,
  );
}

extension StarTransactionTypePaidMessageSendExtensions
    on StarTransactionTypePaidMessageSend {
  StarTransactionTypePaidMessageSend copyWith({
    int? chatId,
    int? messageCount,
  }) => StarTransactionTypePaidMessageSend(
    chatId: chatId ?? this.chatId,
    messageCount: messageCount ?? this.messageCount,
  );
}

extension StarTransactionTypePaidMessageReceiveExtensions
    on StarTransactionTypePaidMessageReceive {
  StarTransactionTypePaidMessageReceive copyWith({
    MessageSender? senderId,
    int? messageCount,
    int? commissionPerMille,
    StarAmount? commissionStarAmount,
  }) => StarTransactionTypePaidMessageReceive(
    senderId: senderId ?? this.senderId,
    messageCount: messageCount ?? this.messageCount,
    commissionPerMille: commissionPerMille ?? this.commissionPerMille,
    commissionStarAmount: commissionStarAmount ?? this.commissionStarAmount,
  );
}

extension StarTransactionTypePremiumPurchaseExtensions
    on StarTransactionTypePremiumPurchase {
  StarTransactionTypePremiumPurchase copyWith({
    int? userId,
    int? monthCount,
    Sticker? sticker,
  }) => StarTransactionTypePremiumPurchase(
    userId: userId ?? this.userId,
    monthCount: monthCount ?? this.monthCount,
    sticker: sticker ?? this.sticker,
  );
}

extension StarTransactionTypeBusinessBotTransferSendExtensions
    on StarTransactionTypeBusinessBotTransferSend {
  StarTransactionTypeBusinessBotTransferSend copyWith({int? userId}) =>
      StarTransactionTypeBusinessBotTransferSend(userId: userId ?? this.userId);
}

extension StarTransactionTypeBusinessBotTransferReceiveExtensions
    on StarTransactionTypeBusinessBotTransferReceive {
  StarTransactionTypeBusinessBotTransferReceive copyWith({int? userId}) =>
      StarTransactionTypeBusinessBotTransferReceive(
        userId: userId ?? this.userId,
      );
}

extension StarTransactionExtensions on StarTransaction {
  StarTransaction copyWith({
    String? id,
    StarAmount? starAmount,
    bool? isRefund,
    int? date,
    StarTransactionType? type,
  }) => StarTransaction(
    id: id ?? this.id,
    starAmount: starAmount ?? this.starAmount,
    isRefund: isRefund ?? this.isRefund,
    date: date ?? this.date,
    type: type ?? this.type,
  );
}

extension StarTransactionsExtensions on StarTransactions {
  StarTransactions copyWith({
    StarAmount? starAmount,
    List<StarTransaction>? transactions,
    String? nextOffset,
  }) => StarTransactions(
    starAmount: starAmount ?? this.starAmount,
    transactions: transactions ?? this.transactions,
    nextOffset: nextOffset ?? this.nextOffset,
  );
}

extension GiveawayParticipantStatusExtensions on GiveawayParticipantStatus {
  TResult map<TResult extends Object?>({
    required TResult Function(GiveawayParticipantStatusEligible value) eligible,
    required TResult Function(GiveawayParticipantStatusParticipating value)
    participating,
    required TResult Function(GiveawayParticipantStatusAlreadyWasMember value)
    alreadyWasMember,
    required TResult Function(GiveawayParticipantStatusAdministrator value)
    administrator,
    required TResult Function(GiveawayParticipantStatusDisallowedCountry value)
    disallowedCountry,
  }) {
    switch (getConstructor()) {
      case GiveawayParticipantStatusEligible.constructor:
        return eligible.call(this as GiveawayParticipantStatusEligible);
      case GiveawayParticipantStatusParticipating.constructor:
        return participating.call(
          this as GiveawayParticipantStatusParticipating,
        );
      case GiveawayParticipantStatusAlreadyWasMember.constructor:
        return alreadyWasMember.call(
          this as GiveawayParticipantStatusAlreadyWasMember,
        );
      case GiveawayParticipantStatusAdministrator.constructor:
        return administrator.call(
          this as GiveawayParticipantStatusAdministrator,
        );
      case GiveawayParticipantStatusDisallowedCountry.constructor:
        return disallowedCountry.call(
          this as GiveawayParticipantStatusDisallowedCountry,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(GiveawayParticipantStatusEligible value)? eligible,
    TResult Function(GiveawayParticipantStatusParticipating value)?
    participating,
    TResult Function(GiveawayParticipantStatusAlreadyWasMember value)?
    alreadyWasMember,
    TResult Function(GiveawayParticipantStatusAdministrator value)?
    administrator,
    TResult Function(GiveawayParticipantStatusDisallowedCountry value)?
    disallowedCountry,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case GiveawayParticipantStatusEligible.constructor:
        if (eligible != null) {
          return eligible.call(this as GiveawayParticipantStatusEligible);
        }
        break;
      case GiveawayParticipantStatusParticipating.constructor:
        if (participating != null) {
          return participating.call(
            this as GiveawayParticipantStatusParticipating,
          );
        }
        break;
      case GiveawayParticipantStatusAlreadyWasMember.constructor:
        if (alreadyWasMember != null) {
          return alreadyWasMember.call(
            this as GiveawayParticipantStatusAlreadyWasMember,
          );
        }
        break;
      case GiveawayParticipantStatusAdministrator.constructor:
        if (administrator != null) {
          return administrator.call(
            this as GiveawayParticipantStatusAdministrator,
          );
        }
        break;
      case GiveawayParticipantStatusDisallowedCountry.constructor:
        if (disallowedCountry != null) {
          return disallowedCountry.call(
            this as GiveawayParticipantStatusDisallowedCountry,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension GiveawayParticipantStatusAlreadyWasMemberExtensions
    on GiveawayParticipantStatusAlreadyWasMember {
  GiveawayParticipantStatusAlreadyWasMember copyWith({int? joinedChatDate}) =>
      GiveawayParticipantStatusAlreadyWasMember(
        joinedChatDate: joinedChatDate ?? this.joinedChatDate,
      );
}

extension GiveawayParticipantStatusAdministratorExtensions
    on GiveawayParticipantStatusAdministrator {
  GiveawayParticipantStatusAdministrator copyWith({int? chatId}) =>
      GiveawayParticipantStatusAdministrator(chatId: chatId ?? this.chatId);
}

extension GiveawayParticipantStatusDisallowedCountryExtensions
    on GiveawayParticipantStatusDisallowedCountry {
  GiveawayParticipantStatusDisallowedCountry copyWith({
    String? userCountryCode,
  }) => GiveawayParticipantStatusDisallowedCountry(
    userCountryCode: userCountryCode ?? this.userCountryCode,
  );
}

extension GiveawayInfoExtensions on GiveawayInfo {
  TResult map<TResult extends Object?>({
    required TResult Function(GiveawayInfoOngoing value) ongoing,
    required TResult Function(GiveawayInfoCompleted value) completed,
  }) {
    switch (getConstructor()) {
      case GiveawayInfoOngoing.constructor:
        return ongoing.call(this as GiveawayInfoOngoing);
      case GiveawayInfoCompleted.constructor:
        return completed.call(this as GiveawayInfoCompleted);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(GiveawayInfoOngoing value)? ongoing,
    TResult Function(GiveawayInfoCompleted value)? completed,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case GiveawayInfoOngoing.constructor:
        if (ongoing != null) {
          return ongoing.call(this as GiveawayInfoOngoing);
        }
        break;
      case GiveawayInfoCompleted.constructor:
        if (completed != null) {
          return completed.call(this as GiveawayInfoCompleted);
        }
        break;
    }
    return orElse.call();
  }
}

extension GiveawayInfoOngoingExtensions on GiveawayInfoOngoing {
  GiveawayInfoOngoing copyWith({
    int? creationDate,
    GiveawayParticipantStatus? status,
    bool? isEnded,
  }) => GiveawayInfoOngoing(
    creationDate: creationDate ?? this.creationDate,
    status: status ?? this.status,
    isEnded: isEnded ?? this.isEnded,
  );
}

extension GiveawayInfoCompletedExtensions on GiveawayInfoCompleted {
  GiveawayInfoCompleted copyWith({
    int? creationDate,
    int? actualWinnersSelectionDate,
    bool? wasRefunded,
    bool? isWinner,
    int? winnerCount,
    int? activationCount,
    String? giftCode,
    int? wonStarCount,
  }) => GiveawayInfoCompleted(
    creationDate: creationDate ?? this.creationDate,
    actualWinnersSelectionDate:
        actualWinnersSelectionDate ?? this.actualWinnersSelectionDate,
    wasRefunded: wasRefunded ?? this.wasRefunded,
    isWinner: isWinner ?? this.isWinner,
    winnerCount: winnerCount ?? this.winnerCount,
    activationCount: activationCount ?? this.activationCount,
    giftCode: giftCode ?? this.giftCode,
    wonStarCount: wonStarCount ?? this.wonStarCount,
  );
}

extension GiveawayPrizeExtensions on GiveawayPrize {
  TResult map<TResult extends Object?>({
    required TResult Function(GiveawayPrizePremium value) premium,
    required TResult Function(GiveawayPrizeStars value) stars,
  }) {
    switch (getConstructor()) {
      case GiveawayPrizePremium.constructor:
        return premium.call(this as GiveawayPrizePremium);
      case GiveawayPrizeStars.constructor:
        return stars.call(this as GiveawayPrizeStars);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(GiveawayPrizePremium value)? premium,
    TResult Function(GiveawayPrizeStars value)? stars,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case GiveawayPrizePremium.constructor:
        if (premium != null) {
          return premium.call(this as GiveawayPrizePremium);
        }
        break;
      case GiveawayPrizeStars.constructor:
        if (stars != null) {
          return stars.call(this as GiveawayPrizeStars);
        }
        break;
    }
    return orElse.call();
  }
}

extension GiveawayPrizePremiumExtensions on GiveawayPrizePremium {
  GiveawayPrizePremium copyWith({int? monthCount}) =>
      GiveawayPrizePremium(monthCount: monthCount ?? this.monthCount);
}

extension GiveawayPrizeStarsExtensions on GiveawayPrizeStars {
  GiveawayPrizeStars copyWith({int? starCount}) =>
      GiveawayPrizeStars(starCount: starCount ?? this.starCount);
}

extension AccentColorExtensions on AccentColor {
  AccentColor copyWith({
    int? id,
    int? builtInAccentColorId,
    List<int>? lightThemeColors,
    List<int>? darkThemeColors,
    int? minChannelChatBoostLevel,
  }) => AccentColor(
    id: id ?? this.id,
    builtInAccentColorId: builtInAccentColorId ?? this.builtInAccentColorId,
    lightThemeColors: lightThemeColors ?? this.lightThemeColors,
    darkThemeColors: darkThemeColors ?? this.darkThemeColors,
    minChannelChatBoostLevel:
        minChannelChatBoostLevel ?? this.minChannelChatBoostLevel,
  );
}

extension ProfileAccentColorsExtensions on ProfileAccentColors {
  ProfileAccentColors copyWith({
    List<int>? paletteColors,
    List<int>? backgroundColors,
    List<int>? storyColors,
  }) => ProfileAccentColors(
    paletteColors: paletteColors ?? this.paletteColors,
    backgroundColors: backgroundColors ?? this.backgroundColors,
    storyColors: storyColors ?? this.storyColors,
  );
}

extension ProfileAccentColorExtensions on ProfileAccentColor {
  ProfileAccentColor copyWith({
    int? id,
    ProfileAccentColors? lightThemeColors,
    ProfileAccentColors? darkThemeColors,
    int? minSupergroupChatBoostLevel,
    int? minChannelChatBoostLevel,
  }) => ProfileAccentColor(
    id: id ?? this.id,
    lightThemeColors: lightThemeColors ?? this.lightThemeColors,
    darkThemeColors: darkThemeColors ?? this.darkThemeColors,
    minSupergroupChatBoostLevel:
        minSupergroupChatBoostLevel ?? this.minSupergroupChatBoostLevel,
    minChannelChatBoostLevel:
        minChannelChatBoostLevel ?? this.minChannelChatBoostLevel,
  );
}

extension EmojiStatusTypeExtensions on EmojiStatusType {
  TResult map<TResult extends Object?>({
    required TResult Function(EmojiStatusTypeCustomEmoji value) customEmoji,
    required TResult Function(EmojiStatusTypeUpgradedGift value) upgradedGift,
  }) {
    switch (getConstructor()) {
      case EmojiStatusTypeCustomEmoji.constructor:
        return customEmoji.call(this as EmojiStatusTypeCustomEmoji);
      case EmojiStatusTypeUpgradedGift.constructor:
        return upgradedGift.call(this as EmojiStatusTypeUpgradedGift);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(EmojiStatusTypeCustomEmoji value)? customEmoji,
    TResult Function(EmojiStatusTypeUpgradedGift value)? upgradedGift,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case EmojiStatusTypeCustomEmoji.constructor:
        if (customEmoji != null) {
          return customEmoji.call(this as EmojiStatusTypeCustomEmoji);
        }
        break;
      case EmojiStatusTypeUpgradedGift.constructor:
        if (upgradedGift != null) {
          return upgradedGift.call(this as EmojiStatusTypeUpgradedGift);
        }
        break;
    }
    return orElse.call();
  }
}

extension EmojiStatusTypeCustomEmojiExtensions on EmojiStatusTypeCustomEmoji {
  EmojiStatusTypeCustomEmoji copyWith({int? customEmojiId}) =>
      EmojiStatusTypeCustomEmoji(
        customEmojiId: customEmojiId ?? this.customEmojiId,
      );
}

extension EmojiStatusTypeUpgradedGiftExtensions on EmojiStatusTypeUpgradedGift {
  EmojiStatusTypeUpgradedGift copyWith({
    int? upgradedGiftId,
    String? giftTitle,
    String? giftName,
    int? modelCustomEmojiId,
    int? symbolCustomEmojiId,
    UpgradedGiftBackdropColors? backdropColors,
  }) => EmojiStatusTypeUpgradedGift(
    upgradedGiftId: upgradedGiftId ?? this.upgradedGiftId,
    giftTitle: giftTitle ?? this.giftTitle,
    giftName: giftName ?? this.giftName,
    modelCustomEmojiId: modelCustomEmojiId ?? this.modelCustomEmojiId,
    symbolCustomEmojiId: symbolCustomEmojiId ?? this.symbolCustomEmojiId,
    backdropColors: backdropColors ?? this.backdropColors,
  );
}

extension EmojiStatusExtensions on EmojiStatus {
  EmojiStatus copyWith({EmojiStatusType? type, int? expirationDate}) =>
      EmojiStatus(
        type: type ?? this.type,
        expirationDate: expirationDate ?? this.expirationDate,
      );
}

extension EmojiStatusesExtensions on EmojiStatuses {
  EmojiStatuses copyWith({List<EmojiStatus>? emojiStatuses}) =>
      EmojiStatuses(emojiStatuses: emojiStatuses ?? this.emojiStatuses);
}

extension EmojiStatusCustomEmojisExtensions on EmojiStatusCustomEmojis {
  EmojiStatusCustomEmojis copyWith({List<int>? customEmojiIds}) =>
      EmojiStatusCustomEmojis(
        customEmojiIds: customEmojiIds ?? this.customEmojiIds,
      );
}

extension UsernamesExtensions on Usernames {
  Usernames copyWith({
    List<String>? activeUsernames,
    List<String>? disabledUsernames,
    String? editableUsername,
  }) => Usernames(
    activeUsernames: activeUsernames ?? this.activeUsernames,
    disabledUsernames: disabledUsernames ?? this.disabledUsernames,
    editableUsername: editableUsername ?? this.editableUsername,
  );
}

extension UserExtensions on User {
  User copyWith({
    int? id,
    String? firstName,
    String? lastName,
    Usernames? usernames,
    String? phoneNumber,
    UserStatus? status,
    ProfilePhoto? profilePhoto,
    int? accentColorId,
    int? backgroundCustomEmojiId,
    int? profileAccentColorId,
    int? profileBackgroundCustomEmojiId,
    EmojiStatus? emojiStatus,
    bool? isContact,
    bool? isMutualContact,
    bool? isCloseFriend,
    VerificationStatus? verificationStatus,
    bool? isPremium,
    bool? isSupport,
    String? restrictionReason,
    bool? hasActiveStories,
    bool? hasUnreadActiveStories,
    bool? restrictsNewChats,
    int? paidMessageStarCount,
    bool? haveAccess,
    UserType? type,
    String? languageCode,
    bool? addedToAttachmentMenu,
  }) => User(
    id: id ?? this.id,
    firstName: firstName ?? this.firstName,
    lastName: lastName ?? this.lastName,
    usernames: usernames ?? this.usernames,
    phoneNumber: phoneNumber ?? this.phoneNumber,
    status: status ?? this.status,
    profilePhoto: profilePhoto ?? this.profilePhoto,
    accentColorId: accentColorId ?? this.accentColorId,
    backgroundCustomEmojiId:
        backgroundCustomEmojiId ?? this.backgroundCustomEmojiId,
    profileAccentColorId: profileAccentColorId ?? this.profileAccentColorId,
    profileBackgroundCustomEmojiId:
        profileBackgroundCustomEmojiId ?? this.profileBackgroundCustomEmojiId,
    emojiStatus: emojiStatus ?? this.emojiStatus,
    isContact: isContact ?? this.isContact,
    isMutualContact: isMutualContact ?? this.isMutualContact,
    isCloseFriend: isCloseFriend ?? this.isCloseFriend,
    verificationStatus: verificationStatus ?? this.verificationStatus,
    isPremium: isPremium ?? this.isPremium,
    isSupport: isSupport ?? this.isSupport,
    restrictionReason: restrictionReason ?? this.restrictionReason,
    hasActiveStories: hasActiveStories ?? this.hasActiveStories,
    hasUnreadActiveStories:
        hasUnreadActiveStories ?? this.hasUnreadActiveStories,
    restrictsNewChats: restrictsNewChats ?? this.restrictsNewChats,
    paidMessageStarCount: paidMessageStarCount ?? this.paidMessageStarCount,
    haveAccess: haveAccess ?? this.haveAccess,
    type: type ?? this.type,
    languageCode: languageCode ?? this.languageCode,
    addedToAttachmentMenu: addedToAttachmentMenu ?? this.addedToAttachmentMenu,
  );
}

extension BotInfoExtensions on BotInfo {
  BotInfo copyWith({
    String? shortDescription,
    String? description,
    Photo? photo,
    Animation? animation,
    BotMenuButton? menuButton,
    List<BotCommand>? commands,
    String? privacyPolicyUrl,
    ChatAdministratorRights? defaultGroupAdministratorRights,
    ChatAdministratorRights? defaultChannelAdministratorRights,
    AffiliateProgramInfo? affiliateProgram,
    int? webAppBackgroundLightColor,
    int? webAppBackgroundDarkColor,
    int? webAppHeaderLightColor,
    int? webAppHeaderDarkColor,
    BotVerificationParameters? verificationParameters,
    bool? canGetRevenueStatistics,
    bool? canManageEmojiStatus,
    bool? hasMediaPreviews,
    InternalLinkType? editCommandsLink,
    InternalLinkType? editDescriptionLink,
    InternalLinkType? editDescriptionMediaLink,
    InternalLinkType? editSettingsLink,
  }) => BotInfo(
    shortDescription: shortDescription ?? this.shortDescription,
    description: description ?? this.description,
    photo: photo ?? this.photo,
    animation: animation ?? this.animation,
    menuButton: menuButton ?? this.menuButton,
    commands: commands ?? this.commands,
    privacyPolicyUrl: privacyPolicyUrl ?? this.privacyPolicyUrl,
    defaultGroupAdministratorRights:
        defaultGroupAdministratorRights ?? this.defaultGroupAdministratorRights,
    defaultChannelAdministratorRights:
        defaultChannelAdministratorRights ??
        this.defaultChannelAdministratorRights,
    affiliateProgram: affiliateProgram ?? this.affiliateProgram,
    webAppBackgroundLightColor:
        webAppBackgroundLightColor ?? this.webAppBackgroundLightColor,
    webAppBackgroundDarkColor:
        webAppBackgroundDarkColor ?? this.webAppBackgroundDarkColor,
    webAppHeaderLightColor:
        webAppHeaderLightColor ?? this.webAppHeaderLightColor,
    webAppHeaderDarkColor: webAppHeaderDarkColor ?? this.webAppHeaderDarkColor,
    verificationParameters:
        verificationParameters ?? this.verificationParameters,
    canGetRevenueStatistics:
        canGetRevenueStatistics ?? this.canGetRevenueStatistics,
    canManageEmojiStatus: canManageEmojiStatus ?? this.canManageEmojiStatus,
    hasMediaPreviews: hasMediaPreviews ?? this.hasMediaPreviews,
    editCommandsLink: editCommandsLink ?? this.editCommandsLink,
    editDescriptionLink: editDescriptionLink ?? this.editDescriptionLink,
    editDescriptionMediaLink:
        editDescriptionMediaLink ?? this.editDescriptionMediaLink,
    editSettingsLink: editSettingsLink ?? this.editSettingsLink,
  );
}

extension UserFullInfoExtensions on UserFullInfo {
  UserFullInfo copyWith({
    ChatPhoto? personalPhoto,
    ChatPhoto? photo,
    ChatPhoto? publicPhoto,
    BlockList? blockList,
    bool? canBeCalled,
    bool? supportsVideoCalls,
    bool? hasPrivateCalls,
    bool? hasPrivateForwards,
    bool? hasRestrictedVoiceAndVideoNoteMessages,
    bool? hasPostedToProfileStories,
    bool? hasSponsoredMessagesEnabled,
    bool? needPhoneNumberPrivacyException,
    bool? setChatBackground,
    FormattedText? bio,
    Birthdate? birthdate,
    int? personalChatId,
    int? giftCount,
    int? groupInCommonCount,
    int? incomingPaidMessageStarCount,
    int? outgoingPaidMessageStarCount,
    GiftSettings? giftSettings,
    BotVerification? botVerification,
    BusinessInfo? businessInfo,
    BotInfo? botInfo,
  }) => UserFullInfo(
    personalPhoto: personalPhoto ?? this.personalPhoto,
    photo: photo ?? this.photo,
    publicPhoto: publicPhoto ?? this.publicPhoto,
    blockList: blockList ?? this.blockList,
    canBeCalled: canBeCalled ?? this.canBeCalled,
    supportsVideoCalls: supportsVideoCalls ?? this.supportsVideoCalls,
    hasPrivateCalls: hasPrivateCalls ?? this.hasPrivateCalls,
    hasPrivateForwards: hasPrivateForwards ?? this.hasPrivateForwards,
    hasRestrictedVoiceAndVideoNoteMessages:
        hasRestrictedVoiceAndVideoNoteMessages ??
        this.hasRestrictedVoiceAndVideoNoteMessages,
    hasPostedToProfileStories:
        hasPostedToProfileStories ?? this.hasPostedToProfileStories,
    hasSponsoredMessagesEnabled:
        hasSponsoredMessagesEnabled ?? this.hasSponsoredMessagesEnabled,
    needPhoneNumberPrivacyException:
        needPhoneNumberPrivacyException ?? this.needPhoneNumberPrivacyException,
    setChatBackground: setChatBackground ?? this.setChatBackground,
    bio: bio ?? this.bio,
    birthdate: birthdate ?? this.birthdate,
    personalChatId: personalChatId ?? this.personalChatId,
    giftCount: giftCount ?? this.giftCount,
    groupInCommonCount: groupInCommonCount ?? this.groupInCommonCount,
    incomingPaidMessageStarCount:
        incomingPaidMessageStarCount ?? this.incomingPaidMessageStarCount,
    outgoingPaidMessageStarCount:
        outgoingPaidMessageStarCount ?? this.outgoingPaidMessageStarCount,
    giftSettings: giftSettings ?? this.giftSettings,
    botVerification: botVerification ?? this.botVerification,
    businessInfo: businessInfo ?? this.businessInfo,
    botInfo: botInfo ?? this.botInfo,
  );
}

extension UsersExtensions on Users {
  Users copyWith({int? totalCount, List<int>? userIds}) => Users(
    totalCount: totalCount ?? this.totalCount,
    userIds: userIds ?? this.userIds,
  );
}

extension FoundUsersExtensions on FoundUsers {
  FoundUsers copyWith({List<int>? userIds, String? nextOffset}) => FoundUsers(
    userIds: userIds ?? this.userIds,
    nextOffset: nextOffset ?? this.nextOffset,
  );
}

extension ChatAdministratorExtensions on ChatAdministrator {
  ChatAdministrator copyWith({
    int? userId,
    String? customTitle,
    bool? isOwner,
  }) => ChatAdministrator(
    userId: userId ?? this.userId,
    customTitle: customTitle ?? this.customTitle,
    isOwner: isOwner ?? this.isOwner,
  );
}

extension ChatAdministratorsExtensions on ChatAdministrators {
  ChatAdministrators copyWith({List<ChatAdministrator>? administrators}) =>
      ChatAdministrators(administrators: administrators ?? this.administrators);
}

extension ChatMemberStatusExtensions on ChatMemberStatus {
  TResult map<TResult extends Object?>({
    required TResult Function(ChatMemberStatusCreator value) creator,
    required TResult Function(ChatMemberStatusAdministrator value)
    administrator,
    required TResult Function(ChatMemberStatusMember value) member,
    required TResult Function(ChatMemberStatusRestricted value) restricted,
    required TResult Function(ChatMemberStatusLeft value) left,
    required TResult Function(ChatMemberStatusBanned value) banned,
  }) {
    switch (getConstructor()) {
      case ChatMemberStatusCreator.constructor:
        return creator.call(this as ChatMemberStatusCreator);
      case ChatMemberStatusAdministrator.constructor:
        return administrator.call(this as ChatMemberStatusAdministrator);
      case ChatMemberStatusMember.constructor:
        return member.call(this as ChatMemberStatusMember);
      case ChatMemberStatusRestricted.constructor:
        return restricted.call(this as ChatMemberStatusRestricted);
      case ChatMemberStatusLeft.constructor:
        return left.call(this as ChatMemberStatusLeft);
      case ChatMemberStatusBanned.constructor:
        return banned.call(this as ChatMemberStatusBanned);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ChatMemberStatusCreator value)? creator,
    TResult Function(ChatMemberStatusAdministrator value)? administrator,
    TResult Function(ChatMemberStatusMember value)? member,
    TResult Function(ChatMemberStatusRestricted value)? restricted,
    TResult Function(ChatMemberStatusLeft value)? left,
    TResult Function(ChatMemberStatusBanned value)? banned,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ChatMemberStatusCreator.constructor:
        if (creator != null) {
          return creator.call(this as ChatMemberStatusCreator);
        }
        break;
      case ChatMemberStatusAdministrator.constructor:
        if (administrator != null) {
          return administrator.call(this as ChatMemberStatusAdministrator);
        }
        break;
      case ChatMemberStatusMember.constructor:
        if (member != null) {
          return member.call(this as ChatMemberStatusMember);
        }
        break;
      case ChatMemberStatusRestricted.constructor:
        if (restricted != null) {
          return restricted.call(this as ChatMemberStatusRestricted);
        }
        break;
      case ChatMemberStatusLeft.constructor:
        if (left != null) {
          return left.call(this as ChatMemberStatusLeft);
        }
        break;
      case ChatMemberStatusBanned.constructor:
        if (banned != null) {
          return banned.call(this as ChatMemberStatusBanned);
        }
        break;
    }
    return orElse.call();
  }
}

extension ChatMemberStatusCreatorExtensions on ChatMemberStatusCreator {
  ChatMemberStatusCreator copyWith({
    String? customTitle,
    bool? isAnonymous,
    bool? isMember,
  }) => ChatMemberStatusCreator(
    customTitle: customTitle ?? this.customTitle,
    isAnonymous: isAnonymous ?? this.isAnonymous,
    isMember: isMember ?? this.isMember,
  );
}

extension ChatMemberStatusAdministratorExtensions
    on ChatMemberStatusAdministrator {
  ChatMemberStatusAdministrator copyWith({
    String? customTitle,
    bool? canBeEdited,
    ChatAdministratorRights? rights,
  }) => ChatMemberStatusAdministrator(
    customTitle: customTitle ?? this.customTitle,
    canBeEdited: canBeEdited ?? this.canBeEdited,
    rights: rights ?? this.rights,
  );
}

extension ChatMemberStatusMemberExtensions on ChatMemberStatusMember {
  ChatMemberStatusMember copyWith({int? memberUntilDate}) =>
      ChatMemberStatusMember(
        memberUntilDate: memberUntilDate ?? this.memberUntilDate,
      );
}

extension ChatMemberStatusRestrictedExtensions on ChatMemberStatusRestricted {
  ChatMemberStatusRestricted copyWith({
    bool? isMember,
    int? restrictedUntilDate,
    ChatPermissions? permissions,
  }) => ChatMemberStatusRestricted(
    isMember: isMember ?? this.isMember,
    restrictedUntilDate: restrictedUntilDate ?? this.restrictedUntilDate,
    permissions: permissions ?? this.permissions,
  );
}

extension ChatMemberStatusBannedExtensions on ChatMemberStatusBanned {
  ChatMemberStatusBanned copyWith({int? bannedUntilDate}) =>
      ChatMemberStatusBanned(
        bannedUntilDate: bannedUntilDate ?? this.bannedUntilDate,
      );
}

extension ChatMemberExtensions on ChatMember {
  ChatMember copyWith({
    MessageSender? memberId,
    int? inviterUserId,
    int? joinedChatDate,
    ChatMemberStatus? status,
  }) => ChatMember(
    memberId: memberId ?? this.memberId,
    inviterUserId: inviterUserId ?? this.inviterUserId,
    joinedChatDate: joinedChatDate ?? this.joinedChatDate,
    status: status ?? this.status,
  );
}

extension ChatMembersExtensions on ChatMembers {
  ChatMembers copyWith({int? totalCount, List<ChatMember>? members}) =>
      ChatMembers(
        totalCount: totalCount ?? this.totalCount,
        members: members ?? this.members,
      );
}

extension ChatMembersFilterExtensions on ChatMembersFilter {
  TResult map<TResult extends Object?>({
    required TResult Function(ChatMembersFilterContacts value) contacts,
    required TResult Function(ChatMembersFilterAdministrators value)
    administrators,
    required TResult Function(ChatMembersFilterMembers value) members,
    required TResult Function(ChatMembersFilterMention value) mention,
    required TResult Function(ChatMembersFilterRestricted value) restricted,
    required TResult Function(ChatMembersFilterBanned value) banned,
    required TResult Function(ChatMembersFilterBots value) bots,
  }) {
    switch (getConstructor()) {
      case ChatMembersFilterContacts.constructor:
        return contacts.call(this as ChatMembersFilterContacts);
      case ChatMembersFilterAdministrators.constructor:
        return administrators.call(this as ChatMembersFilterAdministrators);
      case ChatMembersFilterMembers.constructor:
        return members.call(this as ChatMembersFilterMembers);
      case ChatMembersFilterMention.constructor:
        return mention.call(this as ChatMembersFilterMention);
      case ChatMembersFilterRestricted.constructor:
        return restricted.call(this as ChatMembersFilterRestricted);
      case ChatMembersFilterBanned.constructor:
        return banned.call(this as ChatMembersFilterBanned);
      case ChatMembersFilterBots.constructor:
        return bots.call(this as ChatMembersFilterBots);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ChatMembersFilterContacts value)? contacts,
    TResult Function(ChatMembersFilterAdministrators value)? administrators,
    TResult Function(ChatMembersFilterMembers value)? members,
    TResult Function(ChatMembersFilterMention value)? mention,
    TResult Function(ChatMembersFilterRestricted value)? restricted,
    TResult Function(ChatMembersFilterBanned value)? banned,
    TResult Function(ChatMembersFilterBots value)? bots,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ChatMembersFilterContacts.constructor:
        if (contacts != null) {
          return contacts.call(this as ChatMembersFilterContacts);
        }
        break;
      case ChatMembersFilterAdministrators.constructor:
        if (administrators != null) {
          return administrators.call(this as ChatMembersFilterAdministrators);
        }
        break;
      case ChatMembersFilterMembers.constructor:
        if (members != null) {
          return members.call(this as ChatMembersFilterMembers);
        }
        break;
      case ChatMembersFilterMention.constructor:
        if (mention != null) {
          return mention.call(this as ChatMembersFilterMention);
        }
        break;
      case ChatMembersFilterRestricted.constructor:
        if (restricted != null) {
          return restricted.call(this as ChatMembersFilterRestricted);
        }
        break;
      case ChatMembersFilterBanned.constructor:
        if (banned != null) {
          return banned.call(this as ChatMembersFilterBanned);
        }
        break;
      case ChatMembersFilterBots.constructor:
        if (bots != null) {
          return bots.call(this as ChatMembersFilterBots);
        }
        break;
    }
    return orElse.call();
  }
}

extension ChatMembersFilterMentionExtensions on ChatMembersFilterMention {
  ChatMembersFilterMention copyWith({int? messageThreadId}) =>
      ChatMembersFilterMention(
        messageThreadId: messageThreadId ?? this.messageThreadId,
      );
}

extension SupergroupMembersFilterExtensions on SupergroupMembersFilter {
  TResult map<TResult extends Object?>({
    required TResult Function(SupergroupMembersFilterRecent value) recent,
    required TResult Function(SupergroupMembersFilterContacts value) contacts,
    required TResult Function(SupergroupMembersFilterAdministrators value)
    administrators,
    required TResult Function(SupergroupMembersFilterSearch value) search,
    required TResult Function(SupergroupMembersFilterRestricted value)
    restricted,
    required TResult Function(SupergroupMembersFilterBanned value) banned,
    required TResult Function(SupergroupMembersFilterMention value) mention,
    required TResult Function(SupergroupMembersFilterBots value) bots,
  }) {
    switch (getConstructor()) {
      case SupergroupMembersFilterRecent.constructor:
        return recent.call(this as SupergroupMembersFilterRecent);
      case SupergroupMembersFilterContacts.constructor:
        return contacts.call(this as SupergroupMembersFilterContacts);
      case SupergroupMembersFilterAdministrators.constructor:
        return administrators.call(
          this as SupergroupMembersFilterAdministrators,
        );
      case SupergroupMembersFilterSearch.constructor:
        return search.call(this as SupergroupMembersFilterSearch);
      case SupergroupMembersFilterRestricted.constructor:
        return restricted.call(this as SupergroupMembersFilterRestricted);
      case SupergroupMembersFilterBanned.constructor:
        return banned.call(this as SupergroupMembersFilterBanned);
      case SupergroupMembersFilterMention.constructor:
        return mention.call(this as SupergroupMembersFilterMention);
      case SupergroupMembersFilterBots.constructor:
        return bots.call(this as SupergroupMembersFilterBots);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(SupergroupMembersFilterRecent value)? recent,
    TResult Function(SupergroupMembersFilterContacts value)? contacts,
    TResult Function(SupergroupMembersFilterAdministrators value)?
    administrators,
    TResult Function(SupergroupMembersFilterSearch value)? search,
    TResult Function(SupergroupMembersFilterRestricted value)? restricted,
    TResult Function(SupergroupMembersFilterBanned value)? banned,
    TResult Function(SupergroupMembersFilterMention value)? mention,
    TResult Function(SupergroupMembersFilterBots value)? bots,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case SupergroupMembersFilterRecent.constructor:
        if (recent != null) {
          return recent.call(this as SupergroupMembersFilterRecent);
        }
        break;
      case SupergroupMembersFilterContacts.constructor:
        if (contacts != null) {
          return contacts.call(this as SupergroupMembersFilterContacts);
        }
        break;
      case SupergroupMembersFilterAdministrators.constructor:
        if (administrators != null) {
          return administrators.call(
            this as SupergroupMembersFilterAdministrators,
          );
        }
        break;
      case SupergroupMembersFilterSearch.constructor:
        if (search != null) {
          return search.call(this as SupergroupMembersFilterSearch);
        }
        break;
      case SupergroupMembersFilterRestricted.constructor:
        if (restricted != null) {
          return restricted.call(this as SupergroupMembersFilterRestricted);
        }
        break;
      case SupergroupMembersFilterBanned.constructor:
        if (banned != null) {
          return banned.call(this as SupergroupMembersFilterBanned);
        }
        break;
      case SupergroupMembersFilterMention.constructor:
        if (mention != null) {
          return mention.call(this as SupergroupMembersFilterMention);
        }
        break;
      case SupergroupMembersFilterBots.constructor:
        if (bots != null) {
          return bots.call(this as SupergroupMembersFilterBots);
        }
        break;
    }
    return orElse.call();
  }
}

extension SupergroupMembersFilterContactsExtensions
    on SupergroupMembersFilterContacts {
  SupergroupMembersFilterContacts copyWith({String? query}) =>
      SupergroupMembersFilterContacts(query: query ?? this.query);
}

extension SupergroupMembersFilterSearchExtensions
    on SupergroupMembersFilterSearch {
  SupergroupMembersFilterSearch copyWith({String? query}) =>
      SupergroupMembersFilterSearch(query: query ?? this.query);
}

extension SupergroupMembersFilterRestrictedExtensions
    on SupergroupMembersFilterRestricted {
  SupergroupMembersFilterRestricted copyWith({String? query}) =>
      SupergroupMembersFilterRestricted(query: query ?? this.query);
}

extension SupergroupMembersFilterBannedExtensions
    on SupergroupMembersFilterBanned {
  SupergroupMembersFilterBanned copyWith({String? query}) =>
      SupergroupMembersFilterBanned(query: query ?? this.query);
}

extension SupergroupMembersFilterMentionExtensions
    on SupergroupMembersFilterMention {
  SupergroupMembersFilterMention copyWith({
    String? query,
    int? messageThreadId,
  }) => SupergroupMembersFilterMention(
    query: query ?? this.query,
    messageThreadId: messageThreadId ?? this.messageThreadId,
  );
}

extension ChatInviteLinkExtensions on ChatInviteLink {
  ChatInviteLink copyWith({
    String? inviteLink,
    String? name,
    int? creatorUserId,
    int? date,
    int? editDate,
    int? expirationDate,
    StarSubscriptionPricing? subscriptionPricing,
    int? memberLimit,
    int? memberCount,
    int? expiredMemberCount,
    int? pendingJoinRequestCount,
    bool? createsJoinRequest,
    bool? isPrimary,
    bool? isRevoked,
  }) => ChatInviteLink(
    inviteLink: inviteLink ?? this.inviteLink,
    name: name ?? this.name,
    creatorUserId: creatorUserId ?? this.creatorUserId,
    date: date ?? this.date,
    editDate: editDate ?? this.editDate,
    expirationDate: expirationDate ?? this.expirationDate,
    subscriptionPricing: subscriptionPricing ?? this.subscriptionPricing,
    memberLimit: memberLimit ?? this.memberLimit,
    memberCount: memberCount ?? this.memberCount,
    expiredMemberCount: expiredMemberCount ?? this.expiredMemberCount,
    pendingJoinRequestCount:
        pendingJoinRequestCount ?? this.pendingJoinRequestCount,
    createsJoinRequest: createsJoinRequest ?? this.createsJoinRequest,
    isPrimary: isPrimary ?? this.isPrimary,
    isRevoked: isRevoked ?? this.isRevoked,
  );
}

extension ChatInviteLinksExtensions on ChatInviteLinks {
  ChatInviteLinks copyWith({
    int? totalCount,
    List<ChatInviteLink>? inviteLinks,
  }) => ChatInviteLinks(
    totalCount: totalCount ?? this.totalCount,
    inviteLinks: inviteLinks ?? this.inviteLinks,
  );
}

extension ChatInviteLinkCountExtensions on ChatInviteLinkCount {
  ChatInviteLinkCount copyWith({
    int? userId,
    int? inviteLinkCount,
    int? revokedInviteLinkCount,
  }) => ChatInviteLinkCount(
    userId: userId ?? this.userId,
    inviteLinkCount: inviteLinkCount ?? this.inviteLinkCount,
    revokedInviteLinkCount:
        revokedInviteLinkCount ?? this.revokedInviteLinkCount,
  );
}

extension ChatInviteLinkCountsExtensions on ChatInviteLinkCounts {
  ChatInviteLinkCounts copyWith({
    List<ChatInviteLinkCount>? inviteLinkCounts,
  }) => ChatInviteLinkCounts(
    inviteLinkCounts: inviteLinkCounts ?? this.inviteLinkCounts,
  );
}

extension ChatInviteLinkMemberExtensions on ChatInviteLinkMember {
  ChatInviteLinkMember copyWith({
    int? userId,
    int? joinedChatDate,
    bool? viaChatFolderInviteLink,
    int? approverUserId,
  }) => ChatInviteLinkMember(
    userId: userId ?? this.userId,
    joinedChatDate: joinedChatDate ?? this.joinedChatDate,
    viaChatFolderInviteLink:
        viaChatFolderInviteLink ?? this.viaChatFolderInviteLink,
    approverUserId: approverUserId ?? this.approverUserId,
  );
}

extension ChatInviteLinkMembersExtensions on ChatInviteLinkMembers {
  ChatInviteLinkMembers copyWith({
    int? totalCount,
    List<ChatInviteLinkMember>? members,
  }) => ChatInviteLinkMembers(
    totalCount: totalCount ?? this.totalCount,
    members: members ?? this.members,
  );
}

extension InviteLinkChatTypeExtensions on InviteLinkChatType {
  TResult map<TResult extends Object?>({
    required TResult Function(InviteLinkChatTypeBasicGroup value) basicGroup,
    required TResult Function(InviteLinkChatTypeSupergroup value) supergroup,
    required TResult Function(InviteLinkChatTypeChannel value) channel,
  }) {
    switch (getConstructor()) {
      case InviteLinkChatTypeBasicGroup.constructor:
        return basicGroup.call(this as InviteLinkChatTypeBasicGroup);
      case InviteLinkChatTypeSupergroup.constructor:
        return supergroup.call(this as InviteLinkChatTypeSupergroup);
      case InviteLinkChatTypeChannel.constructor:
        return channel.call(this as InviteLinkChatTypeChannel);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InviteLinkChatTypeBasicGroup value)? basicGroup,
    TResult Function(InviteLinkChatTypeSupergroup value)? supergroup,
    TResult Function(InviteLinkChatTypeChannel value)? channel,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InviteLinkChatTypeBasicGroup.constructor:
        if (basicGroup != null) {
          return basicGroup.call(this as InviteLinkChatTypeBasicGroup);
        }
        break;
      case InviteLinkChatTypeSupergroup.constructor:
        if (supergroup != null) {
          return supergroup.call(this as InviteLinkChatTypeSupergroup);
        }
        break;
      case InviteLinkChatTypeChannel.constructor:
        if (channel != null) {
          return channel.call(this as InviteLinkChatTypeChannel);
        }
        break;
    }
    return orElse.call();
  }
}

extension ChatInviteLinkSubscriptionInfoExtensions
    on ChatInviteLinkSubscriptionInfo {
  ChatInviteLinkSubscriptionInfo copyWith({
    StarSubscriptionPricing? pricing,
    bool? canReuse,
    int? formId,
  }) => ChatInviteLinkSubscriptionInfo(
    pricing: pricing ?? this.pricing,
    canReuse: canReuse ?? this.canReuse,
    formId: formId ?? this.formId,
  );
}

extension ChatInviteLinkInfoExtensions on ChatInviteLinkInfo {
  ChatInviteLinkInfo copyWith({
    int? chatId,
    int? accessibleFor,
    InviteLinkChatType? type,
    String? title,
    ChatPhotoInfo? photo,
    int? accentColorId,
    String? description,
    int? memberCount,
    List<int>? memberUserIds,
    ChatInviteLinkSubscriptionInfo? subscriptionInfo,
    bool? createsJoinRequest,
    bool? isPublic,
    VerificationStatus? verificationStatus,
  }) => ChatInviteLinkInfo(
    chatId: chatId ?? this.chatId,
    accessibleFor: accessibleFor ?? this.accessibleFor,
    type: type ?? this.type,
    title: title ?? this.title,
    photo: photo ?? this.photo,
    accentColorId: accentColorId ?? this.accentColorId,
    description: description ?? this.description,
    memberCount: memberCount ?? this.memberCount,
    memberUserIds: memberUserIds ?? this.memberUserIds,
    subscriptionInfo: subscriptionInfo ?? this.subscriptionInfo,
    createsJoinRequest: createsJoinRequest ?? this.createsJoinRequest,
    isPublic: isPublic ?? this.isPublic,
    verificationStatus: verificationStatus ?? this.verificationStatus,
  );
}

extension ChatJoinRequestExtensions on ChatJoinRequest {
  ChatJoinRequest copyWith({int? userId, int? date, String? bio}) =>
      ChatJoinRequest(
        userId: userId ?? this.userId,
        date: date ?? this.date,
        bio: bio ?? this.bio,
      );
}

extension ChatJoinRequestsExtensions on ChatJoinRequests {
  ChatJoinRequests copyWith({
    int? totalCount,
    List<ChatJoinRequest>? requests,
  }) => ChatJoinRequests(
    totalCount: totalCount ?? this.totalCount,
    requests: requests ?? this.requests,
  );
}

extension ChatJoinRequestsInfoExtensions on ChatJoinRequestsInfo {
  ChatJoinRequestsInfo copyWith({int? totalCount, List<int>? userIds}) =>
      ChatJoinRequestsInfo(
        totalCount: totalCount ?? this.totalCount,
        userIds: userIds ?? this.userIds,
      );
}

extension BasicGroupExtensions on BasicGroup {
  BasicGroup copyWith({
    int? id,
    int? memberCount,
    ChatMemberStatus? status,
    bool? isActive,
    int? upgradedToSupergroupId,
  }) => BasicGroup(
    id: id ?? this.id,
    memberCount: memberCount ?? this.memberCount,
    status: status ?? this.status,
    isActive: isActive ?? this.isActive,
    upgradedToSupergroupId:
        upgradedToSupergroupId ?? this.upgradedToSupergroupId,
  );
}

extension BasicGroupFullInfoExtensions on BasicGroupFullInfo {
  BasicGroupFullInfo copyWith({
    ChatPhoto? photo,
    String? description,
    int? creatorUserId,
    List<ChatMember>? members,
    bool? canHideMembers,
    bool? canToggleAggressiveAntiSpam,
    ChatInviteLink? inviteLink,
    List<BotCommands>? botCommands,
  }) => BasicGroupFullInfo(
    photo: photo ?? this.photo,
    description: description ?? this.description,
    creatorUserId: creatorUserId ?? this.creatorUserId,
    members: members ?? this.members,
    canHideMembers: canHideMembers ?? this.canHideMembers,
    canToggleAggressiveAntiSpam:
        canToggleAggressiveAntiSpam ?? this.canToggleAggressiveAntiSpam,
    inviteLink: inviteLink ?? this.inviteLink,
    botCommands: botCommands ?? this.botCommands,
  );
}

extension SupergroupExtensions on Supergroup {
  Supergroup copyWith({
    int? id,
    Usernames? usernames,
    int? date,
    ChatMemberStatus? status,
    int? memberCount,
    int? boostLevel,
    bool? hasAutomaticTranslation,
    bool? hasLinkedChat,
    bool? hasLocation,
    bool? signMessages,
    bool? showMessageSender,
    bool? joinToSendMessages,
    bool? joinByRequest,
    bool? isSlowModeEnabled,
    bool? isChannel,
    bool? isBroadcastGroup,
    bool? isForum,
    bool? isDirectMessagesGroup,
    bool? isAdministeredDirectMessagesGroup,
    VerificationStatus? verificationStatus,
    bool? hasDirectMessagesGroup,
    bool? hasForumTabs,
    bool? hasSensitiveContent,
    String? restrictionReason,
    int? paidMessageStarCount,
    bool? hasActiveStories,
    bool? hasUnreadActiveStories,
  }) => Supergroup(
    id: id ?? this.id,
    usernames: usernames ?? this.usernames,
    date: date ?? this.date,
    status: status ?? this.status,
    memberCount: memberCount ?? this.memberCount,
    boostLevel: boostLevel ?? this.boostLevel,
    hasAutomaticTranslation:
        hasAutomaticTranslation ?? this.hasAutomaticTranslation,
    hasLinkedChat: hasLinkedChat ?? this.hasLinkedChat,
    hasLocation: hasLocation ?? this.hasLocation,
    signMessages: signMessages ?? this.signMessages,
    showMessageSender: showMessageSender ?? this.showMessageSender,
    joinToSendMessages: joinToSendMessages ?? this.joinToSendMessages,
    joinByRequest: joinByRequest ?? this.joinByRequest,
    isSlowModeEnabled: isSlowModeEnabled ?? this.isSlowModeEnabled,
    isChannel: isChannel ?? this.isChannel,
    isBroadcastGroup: isBroadcastGroup ?? this.isBroadcastGroup,
    isForum: isForum ?? this.isForum,
    isDirectMessagesGroup: isDirectMessagesGroup ?? this.isDirectMessagesGroup,
    isAdministeredDirectMessagesGroup:
        isAdministeredDirectMessagesGroup ??
        this.isAdministeredDirectMessagesGroup,
    verificationStatus: verificationStatus ?? this.verificationStatus,
    hasDirectMessagesGroup:
        hasDirectMessagesGroup ?? this.hasDirectMessagesGroup,
    hasForumTabs: hasForumTabs ?? this.hasForumTabs,
    hasSensitiveContent: hasSensitiveContent ?? this.hasSensitiveContent,
    restrictionReason: restrictionReason ?? this.restrictionReason,
    paidMessageStarCount: paidMessageStarCount ?? this.paidMessageStarCount,
    hasActiveStories: hasActiveStories ?? this.hasActiveStories,
    hasUnreadActiveStories:
        hasUnreadActiveStories ?? this.hasUnreadActiveStories,
  );
}

extension SupergroupFullInfoExtensions on SupergroupFullInfo {
  SupergroupFullInfo copyWith({
    ChatPhoto? photo,
    String? description,
    int? memberCount,
    int? administratorCount,
    int? restrictedCount,
    int? bannedCount,
    int? linkedChatId,
    int? directMessagesChatId,
    int? slowModeDelay,
    double? slowModeDelayExpiresIn,
    bool? canEnablePaidMessages,
    bool? canEnablePaidReaction,
    bool? canGetMembers,
    bool? hasHiddenMembers,
    bool? canHideMembers,
    bool? canSetStickerSet,
    bool? canSetLocation,
    bool? canGetStatistics,
    bool? canGetRevenueStatistics,
    bool? canGetStarRevenueStatistics,
    bool? canSendGift,
    bool? canToggleAggressiveAntiSpam,
    bool? isAllHistoryAvailable,
    bool? canHaveSponsoredMessages,
    bool? hasAggressiveAntiSpamEnabled,
    bool? hasPaidMediaAllowed,
    bool? hasPinnedStories,
    int? giftCount,
    int? myBoostCount,
    int? unrestrictBoostCount,
    int? outgoingPaidMessageStarCount,
    int? stickerSetId,
    int? customEmojiStickerSetId,
    ChatLocation? location,
    ChatInviteLink? inviteLink,
    List<BotCommands>? botCommands,
    BotVerification? botVerification,
    int? upgradedFromBasicGroupId,
    int? upgradedFromMaxMessageId,
  }) => SupergroupFullInfo(
    photo: photo ?? this.photo,
    description: description ?? this.description,
    memberCount: memberCount ?? this.memberCount,
    administratorCount: administratorCount ?? this.administratorCount,
    restrictedCount: restrictedCount ?? this.restrictedCount,
    bannedCount: bannedCount ?? this.bannedCount,
    linkedChatId: linkedChatId ?? this.linkedChatId,
    directMessagesChatId: directMessagesChatId ?? this.directMessagesChatId,
    slowModeDelay: slowModeDelay ?? this.slowModeDelay,
    slowModeDelayExpiresIn:
        slowModeDelayExpiresIn ?? this.slowModeDelayExpiresIn,
    canEnablePaidMessages: canEnablePaidMessages ?? this.canEnablePaidMessages,
    canEnablePaidReaction: canEnablePaidReaction ?? this.canEnablePaidReaction,
    canGetMembers: canGetMembers ?? this.canGetMembers,
    hasHiddenMembers: hasHiddenMembers ?? this.hasHiddenMembers,
    canHideMembers: canHideMembers ?? this.canHideMembers,
    canSetStickerSet: canSetStickerSet ?? this.canSetStickerSet,
    canSetLocation: canSetLocation ?? this.canSetLocation,
    canGetStatistics: canGetStatistics ?? this.canGetStatistics,
    canGetRevenueStatistics:
        canGetRevenueStatistics ?? this.canGetRevenueStatistics,
    canGetStarRevenueStatistics:
        canGetStarRevenueStatistics ?? this.canGetStarRevenueStatistics,
    canSendGift: canSendGift ?? this.canSendGift,
    canToggleAggressiveAntiSpam:
        canToggleAggressiveAntiSpam ?? this.canToggleAggressiveAntiSpam,
    isAllHistoryAvailable: isAllHistoryAvailable ?? this.isAllHistoryAvailable,
    canHaveSponsoredMessages:
        canHaveSponsoredMessages ?? this.canHaveSponsoredMessages,
    hasAggressiveAntiSpamEnabled:
        hasAggressiveAntiSpamEnabled ?? this.hasAggressiveAntiSpamEnabled,
    hasPaidMediaAllowed: hasPaidMediaAllowed ?? this.hasPaidMediaAllowed,
    hasPinnedStories: hasPinnedStories ?? this.hasPinnedStories,
    giftCount: giftCount ?? this.giftCount,
    myBoostCount: myBoostCount ?? this.myBoostCount,
    unrestrictBoostCount: unrestrictBoostCount ?? this.unrestrictBoostCount,
    outgoingPaidMessageStarCount:
        outgoingPaidMessageStarCount ?? this.outgoingPaidMessageStarCount,
    stickerSetId: stickerSetId ?? this.stickerSetId,
    customEmojiStickerSetId:
        customEmojiStickerSetId ?? this.customEmojiStickerSetId,
    location: location ?? this.location,
    inviteLink: inviteLink ?? this.inviteLink,
    botCommands: botCommands ?? this.botCommands,
    botVerification: botVerification ?? this.botVerification,
    upgradedFromBasicGroupId:
        upgradedFromBasicGroupId ?? this.upgradedFromBasicGroupId,
    upgradedFromMaxMessageId:
        upgradedFromMaxMessageId ?? this.upgradedFromMaxMessageId,
  );
}

extension SecretChatStateExtensions on SecretChatState {
  TResult map<TResult extends Object?>({
    required TResult Function(SecretChatStatePending value) pending,
    required TResult Function(SecretChatStateReady value) ready,
    required TResult Function(SecretChatStateClosed value) closed,
  }) {
    switch (getConstructor()) {
      case SecretChatStatePending.constructor:
        return pending.call(this as SecretChatStatePending);
      case SecretChatStateReady.constructor:
        return ready.call(this as SecretChatStateReady);
      case SecretChatStateClosed.constructor:
        return closed.call(this as SecretChatStateClosed);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(SecretChatStatePending value)? pending,
    TResult Function(SecretChatStateReady value)? ready,
    TResult Function(SecretChatStateClosed value)? closed,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case SecretChatStatePending.constructor:
        if (pending != null) {
          return pending.call(this as SecretChatStatePending);
        }
        break;
      case SecretChatStateReady.constructor:
        if (ready != null) {
          return ready.call(this as SecretChatStateReady);
        }
        break;
      case SecretChatStateClosed.constructor:
        if (closed != null) {
          return closed.call(this as SecretChatStateClosed);
        }
        break;
    }
    return orElse.call();
  }
}

extension SecretChatExtensions on SecretChat {
  SecretChat copyWith({
    int? id,
    int? userId,
    SecretChatState? state,
    bool? isOutbound,
    String? keyHash,
    int? layer,
  }) => SecretChat(
    id: id ?? this.id,
    userId: userId ?? this.userId,
    state: state ?? this.state,
    isOutbound: isOutbound ?? this.isOutbound,
    keyHash: keyHash ?? this.keyHash,
    layer: layer ?? this.layer,
  );
}

extension MessageSenderExtensions on MessageSender {
  TResult map<TResult extends Object?>({
    required TResult Function(MessageSenderUser value) user,
    required TResult Function(MessageSenderChat value) chat,
  }) {
    switch (getConstructor()) {
      case MessageSenderUser.constructor:
        return user.call(this as MessageSenderUser);
      case MessageSenderChat.constructor:
        return chat.call(this as MessageSenderChat);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(MessageSenderUser value)? user,
    TResult Function(MessageSenderChat value)? chat,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case MessageSenderUser.constructor:
        if (user != null) {
          return user.call(this as MessageSenderUser);
        }
        break;
      case MessageSenderChat.constructor:
        if (chat != null) {
          return chat.call(this as MessageSenderChat);
        }
        break;
    }
    return orElse.call();
  }
}

extension MessageSenderUserExtensions on MessageSenderUser {
  MessageSenderUser copyWith({int? userId}) =>
      MessageSenderUser(userId: userId ?? this.userId);
}

extension MessageSenderChatExtensions on MessageSenderChat {
  MessageSenderChat copyWith({int? chatId}) =>
      MessageSenderChat(chatId: chatId ?? this.chatId);
}

extension MessageSendersExtensions on MessageSenders {
  MessageSenders copyWith({int? totalCount, List<MessageSender>? senders}) =>
      MessageSenders(
        totalCount: totalCount ?? this.totalCount,
        senders: senders ?? this.senders,
      );
}

extension ChatMessageSenderExtensions on ChatMessageSender {
  ChatMessageSender copyWith({MessageSender? sender, bool? needsPremium}) =>
      ChatMessageSender(
        sender: sender ?? this.sender,
        needsPremium: needsPremium ?? this.needsPremium,
      );
}

extension ChatMessageSendersExtensions on ChatMessageSenders {
  ChatMessageSenders copyWith({List<ChatMessageSender>? senders}) =>
      ChatMessageSenders(senders: senders ?? this.senders);
}

extension MessageReadDateExtensions on MessageReadDate {
  TResult map<TResult extends Object?>({
    required TResult Function(MessageReadDateRead value) read,
    required TResult Function(MessageReadDateUnread value) unread,
    required TResult Function(MessageReadDateTooOld value) tooOld,
    required TResult Function(MessageReadDateUserPrivacyRestricted value)
    userPrivacyRestricted,
    required TResult Function(MessageReadDateMyPrivacyRestricted value)
    myPrivacyRestricted,
  }) {
    switch (getConstructor()) {
      case MessageReadDateRead.constructor:
        return read.call(this as MessageReadDateRead);
      case MessageReadDateUnread.constructor:
        return unread.call(this as MessageReadDateUnread);
      case MessageReadDateTooOld.constructor:
        return tooOld.call(this as MessageReadDateTooOld);
      case MessageReadDateUserPrivacyRestricted.constructor:
        return userPrivacyRestricted.call(
          this as MessageReadDateUserPrivacyRestricted,
        );
      case MessageReadDateMyPrivacyRestricted.constructor:
        return myPrivacyRestricted.call(
          this as MessageReadDateMyPrivacyRestricted,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(MessageReadDateRead value)? read,
    TResult Function(MessageReadDateUnread value)? unread,
    TResult Function(MessageReadDateTooOld value)? tooOld,
    TResult Function(MessageReadDateUserPrivacyRestricted value)?
    userPrivacyRestricted,
    TResult Function(MessageReadDateMyPrivacyRestricted value)?
    myPrivacyRestricted,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case MessageReadDateRead.constructor:
        if (read != null) {
          return read.call(this as MessageReadDateRead);
        }
        break;
      case MessageReadDateUnread.constructor:
        if (unread != null) {
          return unread.call(this as MessageReadDateUnread);
        }
        break;
      case MessageReadDateTooOld.constructor:
        if (tooOld != null) {
          return tooOld.call(this as MessageReadDateTooOld);
        }
        break;
      case MessageReadDateUserPrivacyRestricted.constructor:
        if (userPrivacyRestricted != null) {
          return userPrivacyRestricted.call(
            this as MessageReadDateUserPrivacyRestricted,
          );
        }
        break;
      case MessageReadDateMyPrivacyRestricted.constructor:
        if (myPrivacyRestricted != null) {
          return myPrivacyRestricted.call(
            this as MessageReadDateMyPrivacyRestricted,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension MessageReadDateReadExtensions on MessageReadDateRead {
  MessageReadDateRead copyWith({int? readDate}) =>
      MessageReadDateRead(readDate: readDate ?? this.readDate);
}

extension MessageViewerExtensions on MessageViewer {
  MessageViewer copyWith({int? userId, int? viewDate}) => MessageViewer(
    userId: userId ?? this.userId,
    viewDate: viewDate ?? this.viewDate,
  );
}

extension MessageViewersExtensions on MessageViewers {
  MessageViewers copyWith({List<MessageViewer>? viewers}) =>
      MessageViewers(viewers: viewers ?? this.viewers);
}

extension MessageOriginExtensions on MessageOrigin {
  TResult map<TResult extends Object?>({
    required TResult Function(MessageOriginUser value) user,
    required TResult Function(MessageOriginHiddenUser value) hiddenUser,
    required TResult Function(MessageOriginChat value) chat,
    required TResult Function(MessageOriginChannel value) channel,
  }) {
    switch (getConstructor()) {
      case MessageOriginUser.constructor:
        return user.call(this as MessageOriginUser);
      case MessageOriginHiddenUser.constructor:
        return hiddenUser.call(this as MessageOriginHiddenUser);
      case MessageOriginChat.constructor:
        return chat.call(this as MessageOriginChat);
      case MessageOriginChannel.constructor:
        return channel.call(this as MessageOriginChannel);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(MessageOriginUser value)? user,
    TResult Function(MessageOriginHiddenUser value)? hiddenUser,
    TResult Function(MessageOriginChat value)? chat,
    TResult Function(MessageOriginChannel value)? channel,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case MessageOriginUser.constructor:
        if (user != null) {
          return user.call(this as MessageOriginUser);
        }
        break;
      case MessageOriginHiddenUser.constructor:
        if (hiddenUser != null) {
          return hiddenUser.call(this as MessageOriginHiddenUser);
        }
        break;
      case MessageOriginChat.constructor:
        if (chat != null) {
          return chat.call(this as MessageOriginChat);
        }
        break;
      case MessageOriginChannel.constructor:
        if (channel != null) {
          return channel.call(this as MessageOriginChannel);
        }
        break;
    }
    return orElse.call();
  }
}

extension MessageOriginUserExtensions on MessageOriginUser {
  MessageOriginUser copyWith({int? senderUserId}) =>
      MessageOriginUser(senderUserId: senderUserId ?? this.senderUserId);
}

extension MessageOriginHiddenUserExtensions on MessageOriginHiddenUser {
  MessageOriginHiddenUser copyWith({String? senderName}) =>
      MessageOriginHiddenUser(senderName: senderName ?? this.senderName);
}

extension MessageOriginChatExtensions on MessageOriginChat {
  MessageOriginChat copyWith({int? senderChatId, String? authorSignature}) =>
      MessageOriginChat(
        senderChatId: senderChatId ?? this.senderChatId,
        authorSignature: authorSignature ?? this.authorSignature,
      );
}

extension MessageOriginChannelExtensions on MessageOriginChannel {
  MessageOriginChannel copyWith({
    int? chatId,
    int? messageId,
    String? authorSignature,
  }) => MessageOriginChannel(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    authorSignature: authorSignature ?? this.authorSignature,
  );
}

extension ForwardSourceExtensions on ForwardSource {
  ForwardSource copyWith({
    int? chatId,
    int? messageId,
    MessageSender? senderId,
    String? senderName,
    int? date,
    bool? isOutgoing,
  }) => ForwardSource(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    senderId: senderId ?? this.senderId,
    senderName: senderName ?? this.senderName,
    date: date ?? this.date,
    isOutgoing: isOutgoing ?? this.isOutgoing,
  );
}

extension ReactionTypeExtensions on ReactionType {
  TResult map<TResult extends Object?>({
    required TResult Function(ReactionTypeEmoji value) emoji,
    required TResult Function(ReactionTypeCustomEmoji value) customEmoji,
    required TResult Function(ReactionTypePaid value) paid,
  }) {
    switch (getConstructor()) {
      case ReactionTypeEmoji.constructor:
        return emoji.call(this as ReactionTypeEmoji);
      case ReactionTypeCustomEmoji.constructor:
        return customEmoji.call(this as ReactionTypeCustomEmoji);
      case ReactionTypePaid.constructor:
        return paid.call(this as ReactionTypePaid);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ReactionTypeEmoji value)? emoji,
    TResult Function(ReactionTypeCustomEmoji value)? customEmoji,
    TResult Function(ReactionTypePaid value)? paid,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ReactionTypeEmoji.constructor:
        if (emoji != null) {
          return emoji.call(this as ReactionTypeEmoji);
        }
        break;
      case ReactionTypeCustomEmoji.constructor:
        if (customEmoji != null) {
          return customEmoji.call(this as ReactionTypeCustomEmoji);
        }
        break;
      case ReactionTypePaid.constructor:
        if (paid != null) {
          return paid.call(this as ReactionTypePaid);
        }
        break;
    }
    return orElse.call();
  }
}

extension ReactionTypeEmojiExtensions on ReactionTypeEmoji {
  ReactionTypeEmoji copyWith({String? emoji}) =>
      ReactionTypeEmoji(emoji: emoji ?? this.emoji);
}

extension ReactionTypeCustomEmojiExtensions on ReactionTypeCustomEmoji {
  ReactionTypeCustomEmoji copyWith({int? customEmojiId}) =>
      ReactionTypeCustomEmoji(
        customEmojiId: customEmojiId ?? this.customEmojiId,
      );
}

extension PaidReactionTypeExtensions on PaidReactionType {
  TResult map<TResult extends Object?>({
    required TResult Function(PaidReactionTypeRegular value) regular,
    required TResult Function(PaidReactionTypeAnonymous value) anonymous,
    required TResult Function(PaidReactionTypeChat value) chat,
  }) {
    switch (getConstructor()) {
      case PaidReactionTypeRegular.constructor:
        return regular.call(this as PaidReactionTypeRegular);
      case PaidReactionTypeAnonymous.constructor:
        return anonymous.call(this as PaidReactionTypeAnonymous);
      case PaidReactionTypeChat.constructor:
        return chat.call(this as PaidReactionTypeChat);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PaidReactionTypeRegular value)? regular,
    TResult Function(PaidReactionTypeAnonymous value)? anonymous,
    TResult Function(PaidReactionTypeChat value)? chat,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PaidReactionTypeRegular.constructor:
        if (regular != null) {
          return regular.call(this as PaidReactionTypeRegular);
        }
        break;
      case PaidReactionTypeAnonymous.constructor:
        if (anonymous != null) {
          return anonymous.call(this as PaidReactionTypeAnonymous);
        }
        break;
      case PaidReactionTypeChat.constructor:
        if (chat != null) {
          return chat.call(this as PaidReactionTypeChat);
        }
        break;
    }
    return orElse.call();
  }
}

extension PaidReactionTypeChatExtensions on PaidReactionTypeChat {
  PaidReactionTypeChat copyWith({int? chatId}) =>
      PaidReactionTypeChat(chatId: chatId ?? this.chatId);
}

extension PaidReactorExtensions on PaidReactor {
  PaidReactor copyWith({
    MessageSender? senderId,
    int? starCount,
    bool? isTop,
    bool? isMe,
    bool? isAnonymous,
  }) => PaidReactor(
    senderId: senderId ?? this.senderId,
    starCount: starCount ?? this.starCount,
    isTop: isTop ?? this.isTop,
    isMe: isMe ?? this.isMe,
    isAnonymous: isAnonymous ?? this.isAnonymous,
  );
}

extension MessageForwardInfoExtensions on MessageForwardInfo {
  MessageForwardInfo copyWith({
    MessageOrigin? origin,
    int? date,
    ForwardSource? source,
    String? publicServiceAnnouncementType,
  }) => MessageForwardInfo(
    origin: origin ?? this.origin,
    date: date ?? this.date,
    source: source ?? this.source,
    publicServiceAnnouncementType:
        publicServiceAnnouncementType ?? this.publicServiceAnnouncementType,
  );
}

extension MessageImportInfoExtensions on MessageImportInfo {
  MessageImportInfo copyWith({String? senderName, int? date}) =>
      MessageImportInfo(
        senderName: senderName ?? this.senderName,
        date: date ?? this.date,
      );
}

extension MessageReplyInfoExtensions on MessageReplyInfo {
  MessageReplyInfo copyWith({
    int? replyCount,
    List<MessageSender>? recentReplierIds,
    int? lastReadInboxMessageId,
    int? lastReadOutboxMessageId,
    int? lastMessageId,
  }) => MessageReplyInfo(
    replyCount: replyCount ?? this.replyCount,
    recentReplierIds: recentReplierIds ?? this.recentReplierIds,
    lastReadInboxMessageId:
        lastReadInboxMessageId ?? this.lastReadInboxMessageId,
    lastReadOutboxMessageId:
        lastReadOutboxMessageId ?? this.lastReadOutboxMessageId,
    lastMessageId: lastMessageId ?? this.lastMessageId,
  );
}

extension MessageReactionExtensions on MessageReaction {
  MessageReaction copyWith({
    ReactionType? type,
    int? totalCount,
    bool? isChosen,
    MessageSender? usedSenderId,
    List<MessageSender>? recentSenderIds,
  }) => MessageReaction(
    type: type ?? this.type,
    totalCount: totalCount ?? this.totalCount,
    isChosen: isChosen ?? this.isChosen,
    usedSenderId: usedSenderId ?? this.usedSenderId,
    recentSenderIds: recentSenderIds ?? this.recentSenderIds,
  );
}

extension MessageReactionsExtensions on MessageReactions {
  MessageReactions copyWith({
    List<MessageReaction>? reactions,
    bool? areTags,
    List<PaidReactor>? paidReactors,
    bool? canGetAddedReactions,
  }) => MessageReactions(
    reactions: reactions ?? this.reactions,
    areTags: areTags ?? this.areTags,
    paidReactors: paidReactors ?? this.paidReactors,
    canGetAddedReactions: canGetAddedReactions ?? this.canGetAddedReactions,
  );
}

extension MessageInteractionInfoExtensions on MessageInteractionInfo {
  MessageInteractionInfo copyWith({
    int? viewCount,
    int? forwardCount,
    MessageReplyInfo? replyInfo,
    MessageReactions? reactions,
  }) => MessageInteractionInfo(
    viewCount: viewCount ?? this.viewCount,
    forwardCount: forwardCount ?? this.forwardCount,
    replyInfo: replyInfo ?? this.replyInfo,
    reactions: reactions ?? this.reactions,
  );
}

extension UnreadReactionExtensions on UnreadReaction {
  UnreadReaction copyWith({
    ReactionType? type,
    MessageSender? senderId,
    bool? isBig,
  }) => UnreadReaction(
    type: type ?? this.type,
    senderId: senderId ?? this.senderId,
    isBig: isBig ?? this.isBig,
  );
}

extension MessageTopicExtensions on MessageTopic {
  TResult map<TResult extends Object?>({
    required TResult Function(MessageTopicForum value) forum,
    required TResult Function(MessageTopicDirectMessages value) directMessages,
    required TResult Function(MessageTopicSavedMessages value) savedMessages,
  }) {
    switch (getConstructor()) {
      case MessageTopicForum.constructor:
        return forum.call(this as MessageTopicForum);
      case MessageTopicDirectMessages.constructor:
        return directMessages.call(this as MessageTopicDirectMessages);
      case MessageTopicSavedMessages.constructor:
        return savedMessages.call(this as MessageTopicSavedMessages);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(MessageTopicForum value)? forum,
    TResult Function(MessageTopicDirectMessages value)? directMessages,
    TResult Function(MessageTopicSavedMessages value)? savedMessages,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case MessageTopicForum.constructor:
        if (forum != null) {
          return forum.call(this as MessageTopicForum);
        }
        break;
      case MessageTopicDirectMessages.constructor:
        if (directMessages != null) {
          return directMessages.call(this as MessageTopicDirectMessages);
        }
        break;
      case MessageTopicSavedMessages.constructor:
        if (savedMessages != null) {
          return savedMessages.call(this as MessageTopicSavedMessages);
        }
        break;
    }
    return orElse.call();
  }
}

extension MessageTopicForumExtensions on MessageTopicForum {
  MessageTopicForum copyWith({int? forumTopicId}) =>
      MessageTopicForum(forumTopicId: forumTopicId ?? this.forumTopicId);
}

extension MessageTopicDirectMessagesExtensions on MessageTopicDirectMessages {
  MessageTopicDirectMessages copyWith({int? directMessagesChatTopicId}) =>
      MessageTopicDirectMessages(
        directMessagesChatTopicId:
            directMessagesChatTopicId ?? this.directMessagesChatTopicId,
      );
}

extension MessageTopicSavedMessagesExtensions on MessageTopicSavedMessages {
  MessageTopicSavedMessages copyWith({int? savedMessagesTopicId}) =>
      MessageTopicSavedMessages(
        savedMessagesTopicId: savedMessagesTopicId ?? this.savedMessagesTopicId,
      );
}

extension MessageEffectTypeExtensions on MessageEffectType {
  TResult map<TResult extends Object?>({
    required TResult Function(MessageEffectTypeEmojiReaction value)
    emojiReaction,
    required TResult Function(MessageEffectTypePremiumSticker value)
    premiumSticker,
  }) {
    switch (getConstructor()) {
      case MessageEffectTypeEmojiReaction.constructor:
        return emojiReaction.call(this as MessageEffectTypeEmojiReaction);
      case MessageEffectTypePremiumSticker.constructor:
        return premiumSticker.call(this as MessageEffectTypePremiumSticker);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(MessageEffectTypeEmojiReaction value)? emojiReaction,
    TResult Function(MessageEffectTypePremiumSticker value)? premiumSticker,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case MessageEffectTypeEmojiReaction.constructor:
        if (emojiReaction != null) {
          return emojiReaction.call(this as MessageEffectTypeEmojiReaction);
        }
        break;
      case MessageEffectTypePremiumSticker.constructor:
        if (premiumSticker != null) {
          return premiumSticker.call(this as MessageEffectTypePremiumSticker);
        }
        break;
    }
    return orElse.call();
  }
}

extension MessageEffectTypeEmojiReactionExtensions
    on MessageEffectTypeEmojiReaction {
  MessageEffectTypeEmojiReaction copyWith({
    Sticker? selectAnimation,
    Sticker? effectAnimation,
  }) => MessageEffectTypeEmojiReaction(
    selectAnimation: selectAnimation ?? this.selectAnimation,
    effectAnimation: effectAnimation ?? this.effectAnimation,
  );
}

extension MessageEffectTypePremiumStickerExtensions
    on MessageEffectTypePremiumSticker {
  MessageEffectTypePremiumSticker copyWith({Sticker? sticker}) =>
      MessageEffectTypePremiumSticker(sticker: sticker ?? this.sticker);
}

extension MessageEffectExtensions on MessageEffect {
  MessageEffect copyWith({
    int? id,
    Sticker? staticIcon,
    String? emoji,
    bool? isPremium,
    MessageEffectType? type,
  }) => MessageEffect(
    id: id ?? this.id,
    staticIcon: staticIcon ?? this.staticIcon,
    emoji: emoji ?? this.emoji,
    isPremium: isPremium ?? this.isPremium,
    type: type ?? this.type,
  );
}

extension MessageSendingStateExtensions on MessageSendingState {
  TResult map<TResult extends Object?>({
    required TResult Function(MessageSendingStatePending value) pending,
    required TResult Function(MessageSendingStateFailed value) failed,
  }) {
    switch (getConstructor()) {
      case MessageSendingStatePending.constructor:
        return pending.call(this as MessageSendingStatePending);
      case MessageSendingStateFailed.constructor:
        return failed.call(this as MessageSendingStateFailed);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(MessageSendingStatePending value)? pending,
    TResult Function(MessageSendingStateFailed value)? failed,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case MessageSendingStatePending.constructor:
        if (pending != null) {
          return pending.call(this as MessageSendingStatePending);
        }
        break;
      case MessageSendingStateFailed.constructor:
        if (failed != null) {
          return failed.call(this as MessageSendingStateFailed);
        }
        break;
    }
    return orElse.call();
  }
}

extension MessageSendingStatePendingExtensions on MessageSendingStatePending {
  MessageSendingStatePending copyWith({int? sendingId}) =>
      MessageSendingStatePending(sendingId: sendingId ?? this.sendingId);
}

extension MessageSendingStateFailedExtensions on MessageSendingStateFailed {
  MessageSendingStateFailed copyWith({
    TdError? error,
    bool? canRetry,
    bool? needAnotherSender,
    bool? needAnotherReplyQuote,
    bool? needDropReply,
    int? requiredPaidMessageStarCount,
    double? retryAfter,
  }) => MessageSendingStateFailed(
    error: error ?? this.error,
    canRetry: canRetry ?? this.canRetry,
    needAnotherSender: needAnotherSender ?? this.needAnotherSender,
    needAnotherReplyQuote: needAnotherReplyQuote ?? this.needAnotherReplyQuote,
    needDropReply: needDropReply ?? this.needDropReply,
    requiredPaidMessageStarCount:
        requiredPaidMessageStarCount ?? this.requiredPaidMessageStarCount,
    retryAfter: retryAfter ?? this.retryAfter,
  );
}

extension TextQuoteExtensions on TextQuote {
  TextQuote copyWith({FormattedText? text, int? position, bool? isManual}) =>
      TextQuote(
        text: text ?? this.text,
        position: position ?? this.position,
        isManual: isManual ?? this.isManual,
      );
}

extension InputTextQuoteExtensions on InputTextQuote {
  InputTextQuote copyWith({FormattedText? text, int? position}) =>
      InputTextQuote(
        text: text ?? this.text,
        position: position ?? this.position,
      );
}

extension MessageReplyToExtensions on MessageReplyTo {
  TResult map<TResult extends Object?>({
    required TResult Function(MessageReplyToMessage value) message,
    required TResult Function(MessageReplyToStory value) story,
  }) {
    switch (getConstructor()) {
      case MessageReplyToMessage.constructor:
        return message.call(this as MessageReplyToMessage);
      case MessageReplyToStory.constructor:
        return story.call(this as MessageReplyToStory);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(MessageReplyToMessage value)? message,
    TResult Function(MessageReplyToStory value)? story,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case MessageReplyToMessage.constructor:
        if (message != null) {
          return message.call(this as MessageReplyToMessage);
        }
        break;
      case MessageReplyToStory.constructor:
        if (story != null) {
          return story.call(this as MessageReplyToStory);
        }
        break;
    }
    return orElse.call();
  }
}

extension MessageReplyToMessageExtensions on MessageReplyToMessage {
  MessageReplyToMessage copyWith({
    int? chatId,
    int? messageId,
    TextQuote? quote,
    MessageOrigin? origin,
    int? originSendDate,
    MessageContent? content,
  }) => MessageReplyToMessage(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    quote: quote ?? this.quote,
    origin: origin ?? this.origin,
    originSendDate: originSendDate ?? this.originSendDate,
    content: content ?? this.content,
  );
}

extension MessageReplyToStoryExtensions on MessageReplyToStory {
  MessageReplyToStory copyWith({int? storyPosterChatId, int? storyId}) =>
      MessageReplyToStory(
        storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
        storyId: storyId ?? this.storyId,
      );
}

extension InputMessageReplyToExtensions on InputMessageReplyTo {
  TResult map<TResult extends Object?>({
    required TResult Function(InputMessageReplyToMessage value) message,
    required TResult Function(InputMessageReplyToExternalMessage value)
    externalMessage,
    required TResult Function(InputMessageReplyToStory value) story,
  }) {
    switch (getConstructor()) {
      case InputMessageReplyToMessage.constructor:
        return message.call(this as InputMessageReplyToMessage);
      case InputMessageReplyToExternalMessage.constructor:
        return externalMessage.call(this as InputMessageReplyToExternalMessage);
      case InputMessageReplyToStory.constructor:
        return story.call(this as InputMessageReplyToStory);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InputMessageReplyToMessage value)? message,
    TResult Function(InputMessageReplyToExternalMessage value)? externalMessage,
    TResult Function(InputMessageReplyToStory value)? story,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InputMessageReplyToMessage.constructor:
        if (message != null) {
          return message.call(this as InputMessageReplyToMessage);
        }
        break;
      case InputMessageReplyToExternalMessage.constructor:
        if (externalMessage != null) {
          return externalMessage.call(
            this as InputMessageReplyToExternalMessage,
          );
        }
        break;
      case InputMessageReplyToStory.constructor:
        if (story != null) {
          return story.call(this as InputMessageReplyToStory);
        }
        break;
    }
    return orElse.call();
  }
}

extension InputMessageReplyToMessageExtensions on InputMessageReplyToMessage {
  InputMessageReplyToMessage copyWith({
    int? messageId,
    InputTextQuote? quote,
  }) => InputMessageReplyToMessage(
    messageId: messageId ?? this.messageId,
    quote: quote ?? this.quote,
  );
}

extension InputMessageReplyToExternalMessageExtensions
    on InputMessageReplyToExternalMessage {
  InputMessageReplyToExternalMessage copyWith({
    int? chatId,
    int? messageId,
    InputTextQuote? quote,
  }) => InputMessageReplyToExternalMessage(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    quote: quote ?? this.quote,
  );
}

extension InputMessageReplyToStoryExtensions on InputMessageReplyToStory {
  InputMessageReplyToStory copyWith({int? storyPosterChatId, int? storyId}) =>
      InputMessageReplyToStory(
        storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
        storyId: storyId ?? this.storyId,
      );
}

extension FactCheckExtensions on FactCheck {
  FactCheck copyWith({FormattedText? text, String? countryCode}) => FactCheck(
    text: text ?? this.text,
    countryCode: countryCode ?? this.countryCode,
  );
}

extension MessageExtensions on Message {
  Message copyWith({
    int? id,
    MessageSender? senderId,
    int? chatId,
    MessageSendingState? sendingState,
    MessageSchedulingState? schedulingState,
    bool? isOutgoing,
    bool? isPinned,
    bool? isFromOffline,
    bool? canBeSaved,
    bool? hasTimestampedMedia,
    bool? isChannelPost,
    bool? containsUnreadMention,
    int? date,
    int? editDate,
    MessageForwardInfo? forwardInfo,
    MessageImportInfo? importInfo,
    MessageInteractionInfo? interactionInfo,
    List<UnreadReaction>? unreadReactions,
    FactCheck? factCheck,
    MessageReplyTo? replyTo,
    int? messageThreadId,
    MessageTopic? topicId,
    MessageSelfDestructType? selfDestructType,
    double? selfDestructIn,
    double? autoDeleteIn,
    int? viaBotUserId,
    int? senderBusinessBotUserId,
    int? senderBoostCount,
    int? paidMessageStarCount,
    String? authorSignature,
    int? mediaAlbumId,
    int? effectId,
    bool? hasSensitiveContent,
    String? restrictionReason,
    MessageContent? content,
    ReplyMarkup? replyMarkup,
  }) => Message(
    id: id ?? this.id,
    senderId: senderId ?? this.senderId,
    chatId: chatId ?? this.chatId,
    sendingState: sendingState ?? this.sendingState,
    schedulingState: schedulingState ?? this.schedulingState,
    isOutgoing: isOutgoing ?? this.isOutgoing,
    isPinned: isPinned ?? this.isPinned,
    isFromOffline: isFromOffline ?? this.isFromOffline,
    canBeSaved: canBeSaved ?? this.canBeSaved,
    hasTimestampedMedia: hasTimestampedMedia ?? this.hasTimestampedMedia,
    isChannelPost: isChannelPost ?? this.isChannelPost,
    containsUnreadMention: containsUnreadMention ?? this.containsUnreadMention,
    date: date ?? this.date,
    editDate: editDate ?? this.editDate,
    forwardInfo: forwardInfo ?? this.forwardInfo,
    importInfo: importInfo ?? this.importInfo,
    interactionInfo: interactionInfo ?? this.interactionInfo,
    unreadReactions: unreadReactions ?? this.unreadReactions,
    factCheck: factCheck ?? this.factCheck,
    replyTo: replyTo ?? this.replyTo,
    messageThreadId: messageThreadId ?? this.messageThreadId,
    topicId: topicId ?? this.topicId,
    selfDestructType: selfDestructType ?? this.selfDestructType,
    selfDestructIn: selfDestructIn ?? this.selfDestructIn,
    autoDeleteIn: autoDeleteIn ?? this.autoDeleteIn,
    viaBotUserId: viaBotUserId ?? this.viaBotUserId,
    senderBusinessBotUserId:
        senderBusinessBotUserId ?? this.senderBusinessBotUserId,
    senderBoostCount: senderBoostCount ?? this.senderBoostCount,
    paidMessageStarCount: paidMessageStarCount ?? this.paidMessageStarCount,
    authorSignature: authorSignature ?? this.authorSignature,
    mediaAlbumId: mediaAlbumId ?? this.mediaAlbumId,
    effectId: effectId ?? this.effectId,
    hasSensitiveContent: hasSensitiveContent ?? this.hasSensitiveContent,
    restrictionReason: restrictionReason ?? this.restrictionReason,
    content: content ?? this.content,
    replyMarkup: replyMarkup ?? this.replyMarkup,
  );
}

extension MessagesExtensions on Messages {
  Messages copyWith({int? totalCount, List<Message>? messages}) => Messages(
    totalCount: totalCount ?? this.totalCount,
    messages: messages ?? this.messages,
  );
}

extension FoundMessagesExtensions on FoundMessages {
  FoundMessages copyWith({
    int? totalCount,
    List<Message>? messages,
    String? nextOffset,
  }) => FoundMessages(
    totalCount: totalCount ?? this.totalCount,
    messages: messages ?? this.messages,
    nextOffset: nextOffset ?? this.nextOffset,
  );
}

extension FoundChatMessagesExtensions on FoundChatMessages {
  FoundChatMessages copyWith({
    int? totalCount,
    List<Message>? messages,
    int? nextFromMessageId,
  }) => FoundChatMessages(
    totalCount: totalCount ?? this.totalCount,
    messages: messages ?? this.messages,
    nextFromMessageId: nextFromMessageId ?? this.nextFromMessageId,
  );
}

extension MessagePositionExtensions on MessagePosition {
  MessagePosition copyWith({int? position, int? messageId, int? date}) =>
      MessagePosition(
        position: position ?? this.position,
        messageId: messageId ?? this.messageId,
        date: date ?? this.date,
      );
}

extension MessagePositionsExtensions on MessagePositions {
  MessagePositions copyWith({
    int? totalCount,
    List<MessagePosition>? positions,
  }) => MessagePositions(
    totalCount: totalCount ?? this.totalCount,
    positions: positions ?? this.positions,
  );
}

extension MessageCalendarDayExtensions on MessageCalendarDay {
  MessageCalendarDay copyWith({int? totalCount, Message? message}) =>
      MessageCalendarDay(
        totalCount: totalCount ?? this.totalCount,
        message: message ?? this.message,
      );
}

extension MessageCalendarExtensions on MessageCalendar {
  MessageCalendar copyWith({int? totalCount, List<MessageCalendarDay>? days}) =>
      MessageCalendar(
        totalCount: totalCount ?? this.totalCount,
        days: days ?? this.days,
      );
}

extension BusinessMessageExtensions on BusinessMessage {
  BusinessMessage copyWith({Message? message, Message? replyToMessage}) =>
      BusinessMessage(
        message: message ?? this.message,
        replyToMessage: replyToMessage ?? this.replyToMessage,
      );
}

extension BusinessMessagesExtensions on BusinessMessages {
  BusinessMessages copyWith({List<BusinessMessage>? messages}) =>
      BusinessMessages(messages: messages ?? this.messages);
}

extension MessageSourceExtensions on MessageSource {
  TResult map<TResult extends Object?>({
    required TResult Function(MessageSourceChatHistory value) chatHistory,
    required TResult Function(MessageSourceMessageThreadHistory value)
    messageThreadHistory,
    required TResult Function(MessageSourceForumTopicHistory value)
    forumTopicHistory,
    required TResult Function(MessageSourceDirectMessagesChatTopicHistory value)
    directMessagesChatTopicHistory,
    required TResult Function(MessageSourceHistoryPreview value) historyPreview,
    required TResult Function(MessageSourceChatList value) chatList,
    required TResult Function(MessageSourceSearch value) search,
    required TResult Function(MessageSourceChatEventLog value) chatEventLog,
    required TResult Function(MessageSourceNotification value) notification,
    required TResult Function(MessageSourceScreenshot value) screenshot,
    required TResult Function(MessageSourceOther value) other,
  }) {
    switch (getConstructor()) {
      case MessageSourceChatHistory.constructor:
        return chatHistory.call(this as MessageSourceChatHistory);
      case MessageSourceMessageThreadHistory.constructor:
        return messageThreadHistory.call(
          this as MessageSourceMessageThreadHistory,
        );
      case MessageSourceForumTopicHistory.constructor:
        return forumTopicHistory.call(this as MessageSourceForumTopicHistory);
      case MessageSourceDirectMessagesChatTopicHistory.constructor:
        return directMessagesChatTopicHistory.call(
          this as MessageSourceDirectMessagesChatTopicHistory,
        );
      case MessageSourceHistoryPreview.constructor:
        return historyPreview.call(this as MessageSourceHistoryPreview);
      case MessageSourceChatList.constructor:
        return chatList.call(this as MessageSourceChatList);
      case MessageSourceSearch.constructor:
        return search.call(this as MessageSourceSearch);
      case MessageSourceChatEventLog.constructor:
        return chatEventLog.call(this as MessageSourceChatEventLog);
      case MessageSourceNotification.constructor:
        return notification.call(this as MessageSourceNotification);
      case MessageSourceScreenshot.constructor:
        return screenshot.call(this as MessageSourceScreenshot);
      case MessageSourceOther.constructor:
        return other.call(this as MessageSourceOther);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(MessageSourceChatHistory value)? chatHistory,
    TResult Function(MessageSourceMessageThreadHistory value)?
    messageThreadHistory,
    TResult Function(MessageSourceForumTopicHistory value)? forumTopicHistory,
    TResult Function(MessageSourceDirectMessagesChatTopicHistory value)?
    directMessagesChatTopicHistory,
    TResult Function(MessageSourceHistoryPreview value)? historyPreview,
    TResult Function(MessageSourceChatList value)? chatList,
    TResult Function(MessageSourceSearch value)? search,
    TResult Function(MessageSourceChatEventLog value)? chatEventLog,
    TResult Function(MessageSourceNotification value)? notification,
    TResult Function(MessageSourceScreenshot value)? screenshot,
    TResult Function(MessageSourceOther value)? other,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case MessageSourceChatHistory.constructor:
        if (chatHistory != null) {
          return chatHistory.call(this as MessageSourceChatHistory);
        }
        break;
      case MessageSourceMessageThreadHistory.constructor:
        if (messageThreadHistory != null) {
          return messageThreadHistory.call(
            this as MessageSourceMessageThreadHistory,
          );
        }
        break;
      case MessageSourceForumTopicHistory.constructor:
        if (forumTopicHistory != null) {
          return forumTopicHistory.call(this as MessageSourceForumTopicHistory);
        }
        break;
      case MessageSourceDirectMessagesChatTopicHistory.constructor:
        if (directMessagesChatTopicHistory != null) {
          return directMessagesChatTopicHistory.call(
            this as MessageSourceDirectMessagesChatTopicHistory,
          );
        }
        break;
      case MessageSourceHistoryPreview.constructor:
        if (historyPreview != null) {
          return historyPreview.call(this as MessageSourceHistoryPreview);
        }
        break;
      case MessageSourceChatList.constructor:
        if (chatList != null) {
          return chatList.call(this as MessageSourceChatList);
        }
        break;
      case MessageSourceSearch.constructor:
        if (search != null) {
          return search.call(this as MessageSourceSearch);
        }
        break;
      case MessageSourceChatEventLog.constructor:
        if (chatEventLog != null) {
          return chatEventLog.call(this as MessageSourceChatEventLog);
        }
        break;
      case MessageSourceNotification.constructor:
        if (notification != null) {
          return notification.call(this as MessageSourceNotification);
        }
        break;
      case MessageSourceScreenshot.constructor:
        if (screenshot != null) {
          return screenshot.call(this as MessageSourceScreenshot);
        }
        break;
      case MessageSourceOther.constructor:
        if (other != null) {
          return other.call(this as MessageSourceOther);
        }
        break;
    }
    return orElse.call();
  }
}

extension AdvertisementSponsorExtensions on AdvertisementSponsor {
  AdvertisementSponsor copyWith({String? url, Photo? photo, String? info}) =>
      AdvertisementSponsor(
        url: url ?? this.url,
        photo: photo ?? this.photo,
        info: info ?? this.info,
      );
}

extension SponsoredMessageExtensions on SponsoredMessage {
  SponsoredMessage copyWith({
    int? messageId,
    bool? isRecommended,
    bool? canBeReported,
    MessageContent? content,
    AdvertisementSponsor? sponsor,
    String? title,
    String? buttonText,
    int? accentColorId,
    int? backgroundCustomEmojiId,
    String? additionalInfo,
  }) => SponsoredMessage(
    messageId: messageId ?? this.messageId,
    isRecommended: isRecommended ?? this.isRecommended,
    canBeReported: canBeReported ?? this.canBeReported,
    content: content ?? this.content,
    sponsor: sponsor ?? this.sponsor,
    title: title ?? this.title,
    buttonText: buttonText ?? this.buttonText,
    accentColorId: accentColorId ?? this.accentColorId,
    backgroundCustomEmojiId:
        backgroundCustomEmojiId ?? this.backgroundCustomEmojiId,
    additionalInfo: additionalInfo ?? this.additionalInfo,
  );
}

extension SponsoredMessagesExtensions on SponsoredMessages {
  SponsoredMessages copyWith({
    List<SponsoredMessage>? messages,
    int? messagesBetween,
  }) => SponsoredMessages(
    messages: messages ?? this.messages,
    messagesBetween: messagesBetween ?? this.messagesBetween,
  );
}

extension SponsoredChatExtensions on SponsoredChat {
  SponsoredChat copyWith({
    int? uniqueId,
    int? chatId,
    String? sponsorInfo,
    String? additionalInfo,
  }) => SponsoredChat(
    uniqueId: uniqueId ?? this.uniqueId,
    chatId: chatId ?? this.chatId,
    sponsorInfo: sponsorInfo ?? this.sponsorInfo,
    additionalInfo: additionalInfo ?? this.additionalInfo,
  );
}

extension SponsoredChatsExtensions on SponsoredChats {
  SponsoredChats copyWith({List<SponsoredChat>? chats}) =>
      SponsoredChats(chats: chats ?? this.chats);
}

extension VideoMessageAdvertisementExtensions on VideoMessageAdvertisement {
  VideoMessageAdvertisement copyWith({
    int? uniqueId,
    String? text,
    int? minDisplayDuration,
    int? maxDisplayDuration,
    bool? canBeReported,
    AdvertisementSponsor? sponsor,
    String? title,
    String? additionalInfo,
  }) => VideoMessageAdvertisement(
    uniqueId: uniqueId ?? this.uniqueId,
    text: text ?? this.text,
    minDisplayDuration: minDisplayDuration ?? this.minDisplayDuration,
    maxDisplayDuration: maxDisplayDuration ?? this.maxDisplayDuration,
    canBeReported: canBeReported ?? this.canBeReported,
    sponsor: sponsor ?? this.sponsor,
    title: title ?? this.title,
    additionalInfo: additionalInfo ?? this.additionalInfo,
  );
}

extension VideoMessageAdvertisementsExtensions on VideoMessageAdvertisements {
  VideoMessageAdvertisements copyWith({
    List<VideoMessageAdvertisement>? advertisements,
    int? startDelay,
    int? betweenDelay,
  }) => VideoMessageAdvertisements(
    advertisements: advertisements ?? this.advertisements,
    startDelay: startDelay ?? this.startDelay,
    betweenDelay: betweenDelay ?? this.betweenDelay,
  );
}

extension ReportOptionExtensions on ReportOption {
  ReportOption copyWith({String? id, String? text}) =>
      ReportOption(id: id ?? this.id, text: text ?? this.text);
}

extension ReportSponsoredResultExtensions on ReportSponsoredResult {
  TResult map<TResult extends Object?>({
    required TResult Function(ReportSponsoredResultOk value) ok,
    required TResult Function(ReportSponsoredResultFailed value) failed,
    required TResult Function(ReportSponsoredResultOptionRequired value)
    optionRequired,
    required TResult Function(ReportSponsoredResultAdsHidden value) adsHidden,
    required TResult Function(ReportSponsoredResultPremiumRequired value)
    premiumRequired,
  }) {
    switch (getConstructor()) {
      case ReportSponsoredResultOk.constructor:
        return ok.call(this as ReportSponsoredResultOk);
      case ReportSponsoredResultFailed.constructor:
        return failed.call(this as ReportSponsoredResultFailed);
      case ReportSponsoredResultOptionRequired.constructor:
        return optionRequired.call(this as ReportSponsoredResultOptionRequired);
      case ReportSponsoredResultAdsHidden.constructor:
        return adsHidden.call(this as ReportSponsoredResultAdsHidden);
      case ReportSponsoredResultPremiumRequired.constructor:
        return premiumRequired.call(
          this as ReportSponsoredResultPremiumRequired,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ReportSponsoredResultOk value)? ok,
    TResult Function(ReportSponsoredResultFailed value)? failed,
    TResult Function(ReportSponsoredResultOptionRequired value)? optionRequired,
    TResult Function(ReportSponsoredResultAdsHidden value)? adsHidden,
    TResult Function(ReportSponsoredResultPremiumRequired value)?
    premiumRequired,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ReportSponsoredResultOk.constructor:
        if (ok != null) {
          return ok.call(this as ReportSponsoredResultOk);
        }
        break;
      case ReportSponsoredResultFailed.constructor:
        if (failed != null) {
          return failed.call(this as ReportSponsoredResultFailed);
        }
        break;
      case ReportSponsoredResultOptionRequired.constructor:
        if (optionRequired != null) {
          return optionRequired.call(
            this as ReportSponsoredResultOptionRequired,
          );
        }
        break;
      case ReportSponsoredResultAdsHidden.constructor:
        if (adsHidden != null) {
          return adsHidden.call(this as ReportSponsoredResultAdsHidden);
        }
        break;
      case ReportSponsoredResultPremiumRequired.constructor:
        if (premiumRequired != null) {
          return premiumRequired.call(
            this as ReportSponsoredResultPremiumRequired,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension ReportSponsoredResultOptionRequiredExtensions
    on ReportSponsoredResultOptionRequired {
  ReportSponsoredResultOptionRequired copyWith({
    String? title,
    List<ReportOption>? options,
  }) => ReportSponsoredResultOptionRequired(
    title: title ?? this.title,
    options: options ?? this.options,
  );
}

extension FileDownloadExtensions on FileDownload {
  FileDownload copyWith({
    int? fileId,
    Message? message,
    int? addDate,
    int? completeDate,
    bool? isPaused,
  }) => FileDownload(
    fileId: fileId ?? this.fileId,
    message: message ?? this.message,
    addDate: addDate ?? this.addDate,
    completeDate: completeDate ?? this.completeDate,
    isPaused: isPaused ?? this.isPaused,
  );
}

extension DownloadedFileCountsExtensions on DownloadedFileCounts {
  DownloadedFileCounts copyWith({
    int? activeCount,
    int? pausedCount,
    int? completedCount,
  }) => DownloadedFileCounts(
    activeCount: activeCount ?? this.activeCount,
    pausedCount: pausedCount ?? this.pausedCount,
    completedCount: completedCount ?? this.completedCount,
  );
}

extension FoundFileDownloadsExtensions on FoundFileDownloads {
  FoundFileDownloads copyWith({
    DownloadedFileCounts? totalCounts,
    List<FileDownload>? files,
    String? nextOffset,
  }) => FoundFileDownloads(
    totalCounts: totalCounts ?? this.totalCounts,
    files: files ?? this.files,
    nextOffset: nextOffset ?? this.nextOffset,
  );
}

extension NotificationSettingsScopeExtensions on NotificationSettingsScope {
  TResult map<TResult extends Object?>({
    required TResult Function(NotificationSettingsScopePrivateChats value)
    privateChats,
    required TResult Function(NotificationSettingsScopeGroupChats value)
    groupChats,
    required TResult Function(NotificationSettingsScopeChannelChats value)
    channelChats,
  }) {
    switch (getConstructor()) {
      case NotificationSettingsScopePrivateChats.constructor:
        return privateChats.call(this as NotificationSettingsScopePrivateChats);
      case NotificationSettingsScopeGroupChats.constructor:
        return groupChats.call(this as NotificationSettingsScopeGroupChats);
      case NotificationSettingsScopeChannelChats.constructor:
        return channelChats.call(this as NotificationSettingsScopeChannelChats);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(NotificationSettingsScopePrivateChats value)? privateChats,
    TResult Function(NotificationSettingsScopeGroupChats value)? groupChats,
    TResult Function(NotificationSettingsScopeChannelChats value)? channelChats,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case NotificationSettingsScopePrivateChats.constructor:
        if (privateChats != null) {
          return privateChats.call(
            this as NotificationSettingsScopePrivateChats,
          );
        }
        break;
      case NotificationSettingsScopeGroupChats.constructor:
        if (groupChats != null) {
          return groupChats.call(this as NotificationSettingsScopeGroupChats);
        }
        break;
      case NotificationSettingsScopeChannelChats.constructor:
        if (channelChats != null) {
          return channelChats.call(
            this as NotificationSettingsScopeChannelChats,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension ChatNotificationSettingsExtensions on ChatNotificationSettings {
  ChatNotificationSettings copyWith({
    bool? useDefaultMuteFor,
    int? muteFor,
    bool? useDefaultSound,
    int? soundId,
    bool? useDefaultShowPreview,
    bool? showPreview,
    bool? useDefaultMuteStories,
    bool? muteStories,
    bool? useDefaultStorySound,
    int? storySoundId,
    bool? useDefaultShowStoryPoster,
    bool? showStoryPoster,
    bool? useDefaultDisablePinnedMessageNotifications,
    bool? disablePinnedMessageNotifications,
    bool? useDefaultDisableMentionNotifications,
    bool? disableMentionNotifications,
  }) => ChatNotificationSettings(
    useDefaultMuteFor: useDefaultMuteFor ?? this.useDefaultMuteFor,
    muteFor: muteFor ?? this.muteFor,
    useDefaultSound: useDefaultSound ?? this.useDefaultSound,
    soundId: soundId ?? this.soundId,
    useDefaultShowPreview: useDefaultShowPreview ?? this.useDefaultShowPreview,
    showPreview: showPreview ?? this.showPreview,
    useDefaultMuteStories: useDefaultMuteStories ?? this.useDefaultMuteStories,
    muteStories: muteStories ?? this.muteStories,
    useDefaultStorySound: useDefaultStorySound ?? this.useDefaultStorySound,
    storySoundId: storySoundId ?? this.storySoundId,
    useDefaultShowStoryPoster:
        useDefaultShowStoryPoster ?? this.useDefaultShowStoryPoster,
    showStoryPoster: showStoryPoster ?? this.showStoryPoster,
    useDefaultDisablePinnedMessageNotifications:
        useDefaultDisablePinnedMessageNotifications ??
        this.useDefaultDisablePinnedMessageNotifications,
    disablePinnedMessageNotifications:
        disablePinnedMessageNotifications ??
        this.disablePinnedMessageNotifications,
    useDefaultDisableMentionNotifications:
        useDefaultDisableMentionNotifications ??
        this.useDefaultDisableMentionNotifications,
    disableMentionNotifications:
        disableMentionNotifications ?? this.disableMentionNotifications,
  );
}

extension ScopeNotificationSettingsExtensions on ScopeNotificationSettings {
  ScopeNotificationSettings copyWith({
    int? muteFor,
    int? soundId,
    bool? showPreview,
    bool? useDefaultMuteStories,
    bool? muteStories,
    int? storySoundId,
    bool? showStoryPoster,
    bool? disablePinnedMessageNotifications,
    bool? disableMentionNotifications,
  }) => ScopeNotificationSettings(
    muteFor: muteFor ?? this.muteFor,
    soundId: soundId ?? this.soundId,
    showPreview: showPreview ?? this.showPreview,
    useDefaultMuteStories: useDefaultMuteStories ?? this.useDefaultMuteStories,
    muteStories: muteStories ?? this.muteStories,
    storySoundId: storySoundId ?? this.storySoundId,
    showStoryPoster: showStoryPoster ?? this.showStoryPoster,
    disablePinnedMessageNotifications:
        disablePinnedMessageNotifications ??
        this.disablePinnedMessageNotifications,
    disableMentionNotifications:
        disableMentionNotifications ?? this.disableMentionNotifications,
  );
}

extension ReactionNotificationSourceExtensions on ReactionNotificationSource {
  TResult map<TResult extends Object?>({
    required TResult Function(ReactionNotificationSourceNone value) none,
    required TResult Function(ReactionNotificationSourceContacts value)
    contacts,
    required TResult Function(ReactionNotificationSourceAll value) all,
  }) {
    switch (getConstructor()) {
      case ReactionNotificationSourceNone.constructor:
        return none.call(this as ReactionNotificationSourceNone);
      case ReactionNotificationSourceContacts.constructor:
        return contacts.call(this as ReactionNotificationSourceContacts);
      case ReactionNotificationSourceAll.constructor:
        return all.call(this as ReactionNotificationSourceAll);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ReactionNotificationSourceNone value)? none,
    TResult Function(ReactionNotificationSourceContacts value)? contacts,
    TResult Function(ReactionNotificationSourceAll value)? all,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ReactionNotificationSourceNone.constructor:
        if (none != null) {
          return none.call(this as ReactionNotificationSourceNone);
        }
        break;
      case ReactionNotificationSourceContacts.constructor:
        if (contacts != null) {
          return contacts.call(this as ReactionNotificationSourceContacts);
        }
        break;
      case ReactionNotificationSourceAll.constructor:
        if (all != null) {
          return all.call(this as ReactionNotificationSourceAll);
        }
        break;
    }
    return orElse.call();
  }
}

extension ReactionNotificationSettingsExtensions
    on ReactionNotificationSettings {
  ReactionNotificationSettings copyWith({
    ReactionNotificationSource? messageReactionSource,
    ReactionNotificationSource? storyReactionSource,
    int? soundId,
    bool? showPreview,
  }) => ReactionNotificationSettings(
    messageReactionSource: messageReactionSource ?? this.messageReactionSource,
    storyReactionSource: storyReactionSource ?? this.storyReactionSource,
    soundId: soundId ?? this.soundId,
    showPreview: showPreview ?? this.showPreview,
  );
}

extension DraftMessageExtensions on DraftMessage {
  DraftMessage copyWith({
    InputMessageReplyTo? replyTo,
    int? date,
    InputMessageContent? inputMessageText,
    int? effectId,
  }) => DraftMessage(
    replyTo: replyTo ?? this.replyTo,
    date: date ?? this.date,
    inputMessageText: inputMessageText ?? this.inputMessageText,
    effectId: effectId ?? this.effectId,
  );
}

extension ChatTypeExtensions on ChatType {
  TResult map<TResult extends Object?>({
    required TResult Function(ChatTypePrivate value) private,
    required TResult Function(ChatTypeBasicGroup value) basicGroup,
    required TResult Function(ChatTypeSupergroup value) supergroup,
    required TResult Function(ChatTypeSecret value) secret,
  }) {
    switch (getConstructor()) {
      case ChatTypePrivate.constructor:
        return private.call(this as ChatTypePrivate);
      case ChatTypeBasicGroup.constructor:
        return basicGroup.call(this as ChatTypeBasicGroup);
      case ChatTypeSupergroup.constructor:
        return supergroup.call(this as ChatTypeSupergroup);
      case ChatTypeSecret.constructor:
        return secret.call(this as ChatTypeSecret);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ChatTypePrivate value)? private,
    TResult Function(ChatTypeBasicGroup value)? basicGroup,
    TResult Function(ChatTypeSupergroup value)? supergroup,
    TResult Function(ChatTypeSecret value)? secret,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ChatTypePrivate.constructor:
        if (private != null) {
          return private.call(this as ChatTypePrivate);
        }
        break;
      case ChatTypeBasicGroup.constructor:
        if (basicGroup != null) {
          return basicGroup.call(this as ChatTypeBasicGroup);
        }
        break;
      case ChatTypeSupergroup.constructor:
        if (supergroup != null) {
          return supergroup.call(this as ChatTypeSupergroup);
        }
        break;
      case ChatTypeSecret.constructor:
        if (secret != null) {
          return secret.call(this as ChatTypeSecret);
        }
        break;
    }
    return orElse.call();
  }
}

extension ChatTypePrivateExtensions on ChatTypePrivate {
  ChatTypePrivate copyWith({int? userId}) =>
      ChatTypePrivate(userId: userId ?? this.userId);
}

extension ChatTypeBasicGroupExtensions on ChatTypeBasicGroup {
  ChatTypeBasicGroup copyWith({int? basicGroupId}) =>
      ChatTypeBasicGroup(basicGroupId: basicGroupId ?? this.basicGroupId);
}

extension ChatTypeSupergroupExtensions on ChatTypeSupergroup {
  ChatTypeSupergroup copyWith({int? supergroupId, bool? isChannel}) =>
      ChatTypeSupergroup(
        supergroupId: supergroupId ?? this.supergroupId,
        isChannel: isChannel ?? this.isChannel,
      );
}

extension ChatTypeSecretExtensions on ChatTypeSecret {
  ChatTypeSecret copyWith({int? secretChatId, int? userId}) => ChatTypeSecret(
    secretChatId: secretChatId ?? this.secretChatId,
    userId: userId ?? this.userId,
  );
}

extension ChatFolderIconExtensions on ChatFolderIcon {
  ChatFolderIcon copyWith({String? name}) =>
      ChatFolderIcon(name: name ?? this.name);
}

extension ChatFolderNameExtensions on ChatFolderName {
  ChatFolderName copyWith({FormattedText? text, bool? animateCustomEmoji}) =>
      ChatFolderName(
        text: text ?? this.text,
        animateCustomEmoji: animateCustomEmoji ?? this.animateCustomEmoji,
      );
}

extension ChatFolderExtensions on ChatFolder {
  ChatFolder copyWith({
    ChatFolderName? name,
    ChatFolderIcon? icon,
    int? colorId,
    bool? isShareable,
    List<int>? pinnedChatIds,
    List<int>? includedChatIds,
    List<int>? excludedChatIds,
    bool? excludeMuted,
    bool? excludeRead,
    bool? excludeArchived,
    bool? includeContacts,
    bool? includeNonContacts,
    bool? includeBots,
    bool? includeGroups,
    bool? includeChannels,
  }) => ChatFolder(
    name: name ?? this.name,
    icon: icon ?? this.icon,
    colorId: colorId ?? this.colorId,
    isShareable: isShareable ?? this.isShareable,
    pinnedChatIds: pinnedChatIds ?? this.pinnedChatIds,
    includedChatIds: includedChatIds ?? this.includedChatIds,
    excludedChatIds: excludedChatIds ?? this.excludedChatIds,
    excludeMuted: excludeMuted ?? this.excludeMuted,
    excludeRead: excludeRead ?? this.excludeRead,
    excludeArchived: excludeArchived ?? this.excludeArchived,
    includeContacts: includeContacts ?? this.includeContacts,
    includeNonContacts: includeNonContacts ?? this.includeNonContacts,
    includeBots: includeBots ?? this.includeBots,
    includeGroups: includeGroups ?? this.includeGroups,
    includeChannels: includeChannels ?? this.includeChannels,
  );
}

extension ChatFolderInfoExtensions on ChatFolderInfo {
  ChatFolderInfo copyWith({
    int? id,
    ChatFolderName? name,
    ChatFolderIcon? icon,
    int? colorId,
    bool? isShareable,
    bool? hasMyInviteLinks,
  }) => ChatFolderInfo(
    id: id ?? this.id,
    name: name ?? this.name,
    icon: icon ?? this.icon,
    colorId: colorId ?? this.colorId,
    isShareable: isShareable ?? this.isShareable,
    hasMyInviteLinks: hasMyInviteLinks ?? this.hasMyInviteLinks,
  );
}

extension ChatFolderInviteLinkExtensions on ChatFolderInviteLink {
  ChatFolderInviteLink copyWith({
    String? inviteLink,
    String? name,
    List<int>? chatIds,
  }) => ChatFolderInviteLink(
    inviteLink: inviteLink ?? this.inviteLink,
    name: name ?? this.name,
    chatIds: chatIds ?? this.chatIds,
  );
}

extension ChatFolderInviteLinksExtensions on ChatFolderInviteLinks {
  ChatFolderInviteLinks copyWith({List<ChatFolderInviteLink>? inviteLinks}) =>
      ChatFolderInviteLinks(inviteLinks: inviteLinks ?? this.inviteLinks);
}

extension ChatFolderInviteLinkInfoExtensions on ChatFolderInviteLinkInfo {
  ChatFolderInviteLinkInfo copyWith({
    ChatFolderInfo? chatFolderInfo,
    List<int>? missingChatIds,
    List<int>? addedChatIds,
  }) => ChatFolderInviteLinkInfo(
    chatFolderInfo: chatFolderInfo ?? this.chatFolderInfo,
    missingChatIds: missingChatIds ?? this.missingChatIds,
    addedChatIds: addedChatIds ?? this.addedChatIds,
  );
}

extension RecommendedChatFolderExtensions on RecommendedChatFolder {
  RecommendedChatFolder copyWith({ChatFolder? folder, String? description}) =>
      RecommendedChatFolder(
        folder: folder ?? this.folder,
        description: description ?? this.description,
      );
}

extension RecommendedChatFoldersExtensions on RecommendedChatFolders {
  RecommendedChatFolders copyWith({List<RecommendedChatFolder>? chatFolders}) =>
      RecommendedChatFolders(chatFolders: chatFolders ?? this.chatFolders);
}

extension ArchiveChatListSettingsExtensions on ArchiveChatListSettings {
  ArchiveChatListSettings copyWith({
    bool? archiveAndMuteNewChatsFromUnknownUsers,
    bool? keepUnmutedChatsArchived,
    bool? keepChatsFromFoldersArchived,
  }) => ArchiveChatListSettings(
    archiveAndMuteNewChatsFromUnknownUsers:
        archiveAndMuteNewChatsFromUnknownUsers ??
        this.archiveAndMuteNewChatsFromUnknownUsers,
    keepUnmutedChatsArchived:
        keepUnmutedChatsArchived ?? this.keepUnmutedChatsArchived,
    keepChatsFromFoldersArchived:
        keepChatsFromFoldersArchived ?? this.keepChatsFromFoldersArchived,
  );
}

extension ChatListExtensions on ChatList {
  TResult map<TResult extends Object?>({
    required TResult Function(ChatListMain value) main,
    required TResult Function(ChatListArchive value) archive,
    required TResult Function(ChatListFolder value) folder,
  }) {
    switch (getConstructor()) {
      case ChatListMain.constructor:
        return main.call(this as ChatListMain);
      case ChatListArchive.constructor:
        return archive.call(this as ChatListArchive);
      case ChatListFolder.constructor:
        return folder.call(this as ChatListFolder);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ChatListMain value)? main,
    TResult Function(ChatListArchive value)? archive,
    TResult Function(ChatListFolder value)? folder,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ChatListMain.constructor:
        if (main != null) {
          return main.call(this as ChatListMain);
        }
        break;
      case ChatListArchive.constructor:
        if (archive != null) {
          return archive.call(this as ChatListArchive);
        }
        break;
      case ChatListFolder.constructor:
        if (folder != null) {
          return folder.call(this as ChatListFolder);
        }
        break;
    }
    return orElse.call();
  }
}

extension ChatListFolderExtensions on ChatListFolder {
  ChatListFolder copyWith({int? chatFolderId}) =>
      ChatListFolder(chatFolderId: chatFolderId ?? this.chatFolderId);
}

extension ChatListsExtensions on ChatLists {
  ChatLists copyWith({List<ChatList>? chatLists}) =>
      ChatLists(chatLists: chatLists ?? this.chatLists);
}

extension ChatSourceExtensions on ChatSource {
  TResult map<TResult extends Object?>({
    required TResult Function(ChatSourceMtprotoProxy value) mtprotoProxy,
    required TResult Function(ChatSourcePublicServiceAnnouncement value)
    publicServiceAnnouncement,
  }) {
    switch (getConstructor()) {
      case ChatSourceMtprotoProxy.constructor:
        return mtprotoProxy.call(this as ChatSourceMtprotoProxy);
      case ChatSourcePublicServiceAnnouncement.constructor:
        return publicServiceAnnouncement.call(
          this as ChatSourcePublicServiceAnnouncement,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ChatSourceMtprotoProxy value)? mtprotoProxy,
    TResult Function(ChatSourcePublicServiceAnnouncement value)?
    publicServiceAnnouncement,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ChatSourceMtprotoProxy.constructor:
        if (mtprotoProxy != null) {
          return mtprotoProxy.call(this as ChatSourceMtprotoProxy);
        }
        break;
      case ChatSourcePublicServiceAnnouncement.constructor:
        if (publicServiceAnnouncement != null) {
          return publicServiceAnnouncement.call(
            this as ChatSourcePublicServiceAnnouncement,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension ChatSourcePublicServiceAnnouncementExtensions
    on ChatSourcePublicServiceAnnouncement {
  ChatSourcePublicServiceAnnouncement copyWith({String? type, String? text}) =>
      ChatSourcePublicServiceAnnouncement(
        type: type ?? this.type,
        text: text ?? this.text,
      );
}

extension ChatPositionExtensions on ChatPosition {
  ChatPosition copyWith({
    ChatList? list,
    int? order,
    bool? isPinned,
    ChatSource? source,
  }) => ChatPosition(
    list: list ?? this.list,
    order: order ?? this.order,
    isPinned: isPinned ?? this.isPinned,
    source: source ?? this.source,
  );
}

extension ChatAvailableReactionsExtensions on ChatAvailableReactions {
  TResult map<TResult extends Object?>({
    required TResult Function(ChatAvailableReactionsAll value) all,
    required TResult Function(ChatAvailableReactionsSome value) some,
  }) {
    switch (getConstructor()) {
      case ChatAvailableReactionsAll.constructor:
        return all.call(this as ChatAvailableReactionsAll);
      case ChatAvailableReactionsSome.constructor:
        return some.call(this as ChatAvailableReactionsSome);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ChatAvailableReactionsAll value)? all,
    TResult Function(ChatAvailableReactionsSome value)? some,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ChatAvailableReactionsAll.constructor:
        if (all != null) {
          return all.call(this as ChatAvailableReactionsAll);
        }
        break;
      case ChatAvailableReactionsSome.constructor:
        if (some != null) {
          return some.call(this as ChatAvailableReactionsSome);
        }
        break;
    }
    return orElse.call();
  }
}

extension ChatAvailableReactionsAllExtensions on ChatAvailableReactionsAll {
  ChatAvailableReactionsAll copyWith({int? maxReactionCount}) =>
      ChatAvailableReactionsAll(
        maxReactionCount: maxReactionCount ?? this.maxReactionCount,
      );
}

extension ChatAvailableReactionsSomeExtensions on ChatAvailableReactionsSome {
  ChatAvailableReactionsSome copyWith({
    List<ReactionType>? reactions,
    int? maxReactionCount,
  }) => ChatAvailableReactionsSome(
    reactions: reactions ?? this.reactions,
    maxReactionCount: maxReactionCount ?? this.maxReactionCount,
  );
}

extension SavedMessagesTagExtensions on SavedMessagesTag {
  SavedMessagesTag copyWith({ReactionType? tag, String? label, int? count}) =>
      SavedMessagesTag(
        tag: tag ?? this.tag,
        label: label ?? this.label,
        count: count ?? this.count,
      );
}

extension SavedMessagesTagsExtensions on SavedMessagesTags {
  SavedMessagesTags copyWith({List<SavedMessagesTag>? tags}) =>
      SavedMessagesTags(tags: tags ?? this.tags);
}

extension BusinessBotManageBarExtensions on BusinessBotManageBar {
  BusinessBotManageBar copyWith({
    int? botUserId,
    String? manageUrl,
    bool? isBotPaused,
    bool? canBotReply,
  }) => BusinessBotManageBar(
    botUserId: botUserId ?? this.botUserId,
    manageUrl: manageUrl ?? this.manageUrl,
    isBotPaused: isBotPaused ?? this.isBotPaused,
    canBotReply: canBotReply ?? this.canBotReply,
  );
}

extension VideoChatExtensions on VideoChat {
  VideoChat copyWith({
    int? groupCallId,
    bool? hasParticipants,
    MessageSender? defaultParticipantId,
  }) => VideoChat(
    groupCallId: groupCallId ?? this.groupCallId,
    hasParticipants: hasParticipants ?? this.hasParticipants,
    defaultParticipantId: defaultParticipantId ?? this.defaultParticipantId,
  );
}

extension ChatExtensions on Chat {
  Chat copyWith({
    int? id,
    ChatType? type,
    String? title,
    ChatPhotoInfo? photo,
    int? accentColorId,
    int? backgroundCustomEmojiId,
    int? profileAccentColorId,
    int? profileBackgroundCustomEmojiId,
    ChatPermissions? permissions,
    Message? lastMessage,
    List<ChatPosition>? positions,
    List<ChatList>? chatLists,
    MessageSender? messageSenderId,
    BlockList? blockList,
    bool? hasProtectedContent,
    bool? isTranslatable,
    bool? isMarkedAsUnread,
    bool? viewAsTopics,
    bool? hasScheduledMessages,
    bool? canBeDeletedOnlyForSelf,
    bool? canBeDeletedForAllUsers,
    bool? canBeReported,
    bool? defaultDisableNotification,
    int? unreadCount,
    int? lastReadInboxMessageId,
    int? lastReadOutboxMessageId,
    int? unreadMentionCount,
    int? unreadReactionCount,
    ChatNotificationSettings? notificationSettings,
    ChatAvailableReactions? availableReactions,
    int? messageAutoDeleteTime,
    EmojiStatus? emojiStatus,
    ChatBackground? background,
    String? themeName,
    ChatActionBar? actionBar,
    BusinessBotManageBar? businessBotManageBar,
    VideoChat? videoChat,
    ChatJoinRequestsInfo? pendingJoinRequests,
    int? replyMarkupMessageId,
    DraftMessage? draftMessage,
    String? clientData,
  }) => Chat(
    id: id ?? this.id,
    type: type ?? this.type,
    title: title ?? this.title,
    photo: photo ?? this.photo,
    accentColorId: accentColorId ?? this.accentColorId,
    backgroundCustomEmojiId:
        backgroundCustomEmojiId ?? this.backgroundCustomEmojiId,
    profileAccentColorId: profileAccentColorId ?? this.profileAccentColorId,
    profileBackgroundCustomEmojiId:
        profileBackgroundCustomEmojiId ?? this.profileBackgroundCustomEmojiId,
    permissions: permissions ?? this.permissions,
    lastMessage: lastMessage ?? this.lastMessage,
    positions: positions ?? this.positions,
    chatLists: chatLists ?? this.chatLists,
    messageSenderId: messageSenderId ?? this.messageSenderId,
    blockList: blockList ?? this.blockList,
    hasProtectedContent: hasProtectedContent ?? this.hasProtectedContent,
    isTranslatable: isTranslatable ?? this.isTranslatable,
    isMarkedAsUnread: isMarkedAsUnread ?? this.isMarkedAsUnread,
    viewAsTopics: viewAsTopics ?? this.viewAsTopics,
    hasScheduledMessages: hasScheduledMessages ?? this.hasScheduledMessages,
    canBeDeletedOnlyForSelf:
        canBeDeletedOnlyForSelf ?? this.canBeDeletedOnlyForSelf,
    canBeDeletedForAllUsers:
        canBeDeletedForAllUsers ?? this.canBeDeletedForAllUsers,
    canBeReported: canBeReported ?? this.canBeReported,
    defaultDisableNotification:
        defaultDisableNotification ?? this.defaultDisableNotification,
    unreadCount: unreadCount ?? this.unreadCount,
    lastReadInboxMessageId:
        lastReadInboxMessageId ?? this.lastReadInboxMessageId,
    lastReadOutboxMessageId:
        lastReadOutboxMessageId ?? this.lastReadOutboxMessageId,
    unreadMentionCount: unreadMentionCount ?? this.unreadMentionCount,
    unreadReactionCount: unreadReactionCount ?? this.unreadReactionCount,
    notificationSettings: notificationSettings ?? this.notificationSettings,
    availableReactions: availableReactions ?? this.availableReactions,
    messageAutoDeleteTime: messageAutoDeleteTime ?? this.messageAutoDeleteTime,
    emojiStatus: emojiStatus ?? this.emojiStatus,
    background: background ?? this.background,
    themeName: themeName ?? this.themeName,
    actionBar: actionBar ?? this.actionBar,
    businessBotManageBar: businessBotManageBar ?? this.businessBotManageBar,
    videoChat: videoChat ?? this.videoChat,
    pendingJoinRequests: pendingJoinRequests ?? this.pendingJoinRequests,
    replyMarkupMessageId: replyMarkupMessageId ?? this.replyMarkupMessageId,
    draftMessage: draftMessage ?? this.draftMessage,
    clientData: clientData ?? this.clientData,
  );
}

extension ChatsExtensions on Chats {
  Chats copyWith({int? totalCount, List<int>? chatIds}) => Chats(
    totalCount: totalCount ?? this.totalCount,
    chatIds: chatIds ?? this.chatIds,
  );
}

extension FailedToAddMemberExtensions on FailedToAddMember {
  FailedToAddMember copyWith({
    int? userId,
    bool? premiumWouldAllowInvite,
    bool? premiumRequiredToSendMessages,
  }) => FailedToAddMember(
    userId: userId ?? this.userId,
    premiumWouldAllowInvite:
        premiumWouldAllowInvite ?? this.premiumWouldAllowInvite,
    premiumRequiredToSendMessages:
        premiumRequiredToSendMessages ?? this.premiumRequiredToSendMessages,
  );
}

extension FailedToAddMembersExtensions on FailedToAddMembers {
  FailedToAddMembers copyWith({List<FailedToAddMember>? failedToAddMembers}) =>
      FailedToAddMembers(
        failedToAddMembers: failedToAddMembers ?? this.failedToAddMembers,
      );
}

extension CreatedBasicGroupChatExtensions on CreatedBasicGroupChat {
  CreatedBasicGroupChat copyWith({
    int? chatId,
    FailedToAddMembers? failedToAddMembers,
  }) => CreatedBasicGroupChat(
    chatId: chatId ?? this.chatId,
    failedToAddMembers: failedToAddMembers ?? this.failedToAddMembers,
  );
}

extension PublicChatTypeExtensions on PublicChatType {
  TResult map<TResult extends Object?>({
    required TResult Function(PublicChatTypeHasUsername value) hasUsername,
    required TResult Function(PublicChatTypeIsLocationBased value)
    isLocationBased,
  }) {
    switch (getConstructor()) {
      case PublicChatTypeHasUsername.constructor:
        return hasUsername.call(this as PublicChatTypeHasUsername);
      case PublicChatTypeIsLocationBased.constructor:
        return isLocationBased.call(this as PublicChatTypeIsLocationBased);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PublicChatTypeHasUsername value)? hasUsername,
    TResult Function(PublicChatTypeIsLocationBased value)? isLocationBased,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PublicChatTypeHasUsername.constructor:
        if (hasUsername != null) {
          return hasUsername.call(this as PublicChatTypeHasUsername);
        }
        break;
      case PublicChatTypeIsLocationBased.constructor:
        if (isLocationBased != null) {
          return isLocationBased.call(this as PublicChatTypeIsLocationBased);
        }
        break;
    }
    return orElse.call();
  }
}

extension AccountInfoExtensions on AccountInfo {
  AccountInfo copyWith({
    int? registrationMonth,
    int? registrationYear,
    String? phoneNumberCountryCode,
    int? lastNameChangeDate,
    int? lastPhotoChangeDate,
  }) => AccountInfo(
    registrationMonth: registrationMonth ?? this.registrationMonth,
    registrationYear: registrationYear ?? this.registrationYear,
    phoneNumberCountryCode:
        phoneNumberCountryCode ?? this.phoneNumberCountryCode,
    lastNameChangeDate: lastNameChangeDate ?? this.lastNameChangeDate,
    lastPhotoChangeDate: lastPhotoChangeDate ?? this.lastPhotoChangeDate,
  );
}

extension ChatActionBarExtensions on ChatActionBar {
  TResult map<TResult extends Object?>({
    required TResult Function(ChatActionBarReportSpam value) reportSpam,
    required TResult Function(ChatActionBarInviteMembers value) inviteMembers,
    required TResult Function(ChatActionBarReportAddBlock value) reportAddBlock,
    required TResult Function(ChatActionBarAddContact value) addContact,
    required TResult Function(ChatActionBarSharePhoneNumber value)
    sharePhoneNumber,
    required TResult Function(ChatActionBarJoinRequest value) joinRequest,
  }) {
    switch (getConstructor()) {
      case ChatActionBarReportSpam.constructor:
        return reportSpam.call(this as ChatActionBarReportSpam);
      case ChatActionBarInviteMembers.constructor:
        return inviteMembers.call(this as ChatActionBarInviteMembers);
      case ChatActionBarReportAddBlock.constructor:
        return reportAddBlock.call(this as ChatActionBarReportAddBlock);
      case ChatActionBarAddContact.constructor:
        return addContact.call(this as ChatActionBarAddContact);
      case ChatActionBarSharePhoneNumber.constructor:
        return sharePhoneNumber.call(this as ChatActionBarSharePhoneNumber);
      case ChatActionBarJoinRequest.constructor:
        return joinRequest.call(this as ChatActionBarJoinRequest);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ChatActionBarReportSpam value)? reportSpam,
    TResult Function(ChatActionBarInviteMembers value)? inviteMembers,
    TResult Function(ChatActionBarReportAddBlock value)? reportAddBlock,
    TResult Function(ChatActionBarAddContact value)? addContact,
    TResult Function(ChatActionBarSharePhoneNumber value)? sharePhoneNumber,
    TResult Function(ChatActionBarJoinRequest value)? joinRequest,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ChatActionBarReportSpam.constructor:
        if (reportSpam != null) {
          return reportSpam.call(this as ChatActionBarReportSpam);
        }
        break;
      case ChatActionBarInviteMembers.constructor:
        if (inviteMembers != null) {
          return inviteMembers.call(this as ChatActionBarInviteMembers);
        }
        break;
      case ChatActionBarReportAddBlock.constructor:
        if (reportAddBlock != null) {
          return reportAddBlock.call(this as ChatActionBarReportAddBlock);
        }
        break;
      case ChatActionBarAddContact.constructor:
        if (addContact != null) {
          return addContact.call(this as ChatActionBarAddContact);
        }
        break;
      case ChatActionBarSharePhoneNumber.constructor:
        if (sharePhoneNumber != null) {
          return sharePhoneNumber.call(this as ChatActionBarSharePhoneNumber);
        }
        break;
      case ChatActionBarJoinRequest.constructor:
        if (joinRequest != null) {
          return joinRequest.call(this as ChatActionBarJoinRequest);
        }
        break;
    }
    return orElse.call();
  }
}

extension ChatActionBarReportSpamExtensions on ChatActionBarReportSpam {
  ChatActionBarReportSpam copyWith({bool? canUnarchive}) =>
      ChatActionBarReportSpam(canUnarchive: canUnarchive ?? this.canUnarchive);
}

extension ChatActionBarReportAddBlockExtensions on ChatActionBarReportAddBlock {
  ChatActionBarReportAddBlock copyWith({
    bool? canUnarchive,
    AccountInfo? accountInfo,
  }) => ChatActionBarReportAddBlock(
    canUnarchive: canUnarchive ?? this.canUnarchive,
    accountInfo: accountInfo ?? this.accountInfo,
  );
}

extension ChatActionBarJoinRequestExtensions on ChatActionBarJoinRequest {
  ChatActionBarJoinRequest copyWith({
    String? title,
    bool? isChannel,
    int? requestDate,
  }) => ChatActionBarJoinRequest(
    title: title ?? this.title,
    isChannel: isChannel ?? this.isChannel,
    requestDate: requestDate ?? this.requestDate,
  );
}

extension KeyboardButtonTypeExtensions on KeyboardButtonType {
  TResult map<TResult extends Object?>({
    required TResult Function(KeyboardButtonTypeText value) text,
    required TResult Function(KeyboardButtonTypeRequestPhoneNumber value)
    requestPhoneNumber,
    required TResult Function(KeyboardButtonTypeRequestLocation value)
    requestLocation,
    required TResult Function(KeyboardButtonTypeRequestPoll value) requestPoll,
    required TResult Function(KeyboardButtonTypeRequestUsers value)
    requestUsers,
    required TResult Function(KeyboardButtonTypeRequestChat value) requestChat,
    required TResult Function(KeyboardButtonTypeWebApp value) webApp,
  }) {
    switch (getConstructor()) {
      case KeyboardButtonTypeText.constructor:
        return text.call(this as KeyboardButtonTypeText);
      case KeyboardButtonTypeRequestPhoneNumber.constructor:
        return requestPhoneNumber.call(
          this as KeyboardButtonTypeRequestPhoneNumber,
        );
      case KeyboardButtonTypeRequestLocation.constructor:
        return requestLocation.call(this as KeyboardButtonTypeRequestLocation);
      case KeyboardButtonTypeRequestPoll.constructor:
        return requestPoll.call(this as KeyboardButtonTypeRequestPoll);
      case KeyboardButtonTypeRequestUsers.constructor:
        return requestUsers.call(this as KeyboardButtonTypeRequestUsers);
      case KeyboardButtonTypeRequestChat.constructor:
        return requestChat.call(this as KeyboardButtonTypeRequestChat);
      case KeyboardButtonTypeWebApp.constructor:
        return webApp.call(this as KeyboardButtonTypeWebApp);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(KeyboardButtonTypeText value)? text,
    TResult Function(KeyboardButtonTypeRequestPhoneNumber value)?
    requestPhoneNumber,
    TResult Function(KeyboardButtonTypeRequestLocation value)? requestLocation,
    TResult Function(KeyboardButtonTypeRequestPoll value)? requestPoll,
    TResult Function(KeyboardButtonTypeRequestUsers value)? requestUsers,
    TResult Function(KeyboardButtonTypeRequestChat value)? requestChat,
    TResult Function(KeyboardButtonTypeWebApp value)? webApp,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case KeyboardButtonTypeText.constructor:
        if (text != null) {
          return text.call(this as KeyboardButtonTypeText);
        }
        break;
      case KeyboardButtonTypeRequestPhoneNumber.constructor:
        if (requestPhoneNumber != null) {
          return requestPhoneNumber.call(
            this as KeyboardButtonTypeRequestPhoneNumber,
          );
        }
        break;
      case KeyboardButtonTypeRequestLocation.constructor:
        if (requestLocation != null) {
          return requestLocation.call(
            this as KeyboardButtonTypeRequestLocation,
          );
        }
        break;
      case KeyboardButtonTypeRequestPoll.constructor:
        if (requestPoll != null) {
          return requestPoll.call(this as KeyboardButtonTypeRequestPoll);
        }
        break;
      case KeyboardButtonTypeRequestUsers.constructor:
        if (requestUsers != null) {
          return requestUsers.call(this as KeyboardButtonTypeRequestUsers);
        }
        break;
      case KeyboardButtonTypeRequestChat.constructor:
        if (requestChat != null) {
          return requestChat.call(this as KeyboardButtonTypeRequestChat);
        }
        break;
      case KeyboardButtonTypeWebApp.constructor:
        if (webApp != null) {
          return webApp.call(this as KeyboardButtonTypeWebApp);
        }
        break;
    }
    return orElse.call();
  }
}

extension KeyboardButtonTypeRequestPollExtensions
    on KeyboardButtonTypeRequestPoll {
  KeyboardButtonTypeRequestPoll copyWith({
    bool? forceRegular,
    bool? forceQuiz,
  }) => KeyboardButtonTypeRequestPoll(
    forceRegular: forceRegular ?? this.forceRegular,
    forceQuiz: forceQuiz ?? this.forceQuiz,
  );
}

extension KeyboardButtonTypeRequestUsersExtensions
    on KeyboardButtonTypeRequestUsers {
  KeyboardButtonTypeRequestUsers copyWith({
    int? id,
    bool? restrictUserIsBot,
    bool? userIsBot,
    bool? restrictUserIsPremium,
    bool? userIsPremium,
    int? maxQuantity,
    bool? requestName,
    bool? requestUsername,
    bool? requestPhoto,
  }) => KeyboardButtonTypeRequestUsers(
    id: id ?? this.id,
    restrictUserIsBot: restrictUserIsBot ?? this.restrictUserIsBot,
    userIsBot: userIsBot ?? this.userIsBot,
    restrictUserIsPremium: restrictUserIsPremium ?? this.restrictUserIsPremium,
    userIsPremium: userIsPremium ?? this.userIsPremium,
    maxQuantity: maxQuantity ?? this.maxQuantity,
    requestName: requestName ?? this.requestName,
    requestUsername: requestUsername ?? this.requestUsername,
    requestPhoto: requestPhoto ?? this.requestPhoto,
  );
}

extension KeyboardButtonTypeRequestChatExtensions
    on KeyboardButtonTypeRequestChat {
  KeyboardButtonTypeRequestChat copyWith({
    int? id,
    bool? chatIsChannel,
    bool? restrictChatIsForum,
    bool? chatIsForum,
    bool? restrictChatHasUsername,
    bool? chatHasUsername,
    bool? chatIsCreated,
    ChatAdministratorRights? userAdministratorRights,
    ChatAdministratorRights? botAdministratorRights,
    bool? botIsMember,
    bool? requestTitle,
    bool? requestUsername,
    bool? requestPhoto,
  }) => KeyboardButtonTypeRequestChat(
    id: id ?? this.id,
    chatIsChannel: chatIsChannel ?? this.chatIsChannel,
    restrictChatIsForum: restrictChatIsForum ?? this.restrictChatIsForum,
    chatIsForum: chatIsForum ?? this.chatIsForum,
    restrictChatHasUsername:
        restrictChatHasUsername ?? this.restrictChatHasUsername,
    chatHasUsername: chatHasUsername ?? this.chatHasUsername,
    chatIsCreated: chatIsCreated ?? this.chatIsCreated,
    userAdministratorRights:
        userAdministratorRights ?? this.userAdministratorRights,
    botAdministratorRights:
        botAdministratorRights ?? this.botAdministratorRights,
    botIsMember: botIsMember ?? this.botIsMember,
    requestTitle: requestTitle ?? this.requestTitle,
    requestUsername: requestUsername ?? this.requestUsername,
    requestPhoto: requestPhoto ?? this.requestPhoto,
  );
}

extension KeyboardButtonTypeWebAppExtensions on KeyboardButtonTypeWebApp {
  KeyboardButtonTypeWebApp copyWith({String? url}) =>
      KeyboardButtonTypeWebApp(url: url ?? this.url);
}

extension KeyboardButtonExtensions on KeyboardButton {
  KeyboardButton copyWith({String? text, KeyboardButtonType? type}) =>
      KeyboardButton(text: text ?? this.text, type: type ?? this.type);
}

extension InlineKeyboardButtonTypeExtensions on InlineKeyboardButtonType {
  TResult map<TResult extends Object?>({
    required TResult Function(InlineKeyboardButtonTypeUrl value) url,
    required TResult Function(InlineKeyboardButtonTypeLoginUrl value) loginUrl,
    required TResult Function(InlineKeyboardButtonTypeWebApp value) webApp,
    required TResult Function(InlineKeyboardButtonTypeCallback value) callback,
    required TResult Function(
      InlineKeyboardButtonTypeCallbackWithPassword value,
    )
    callbackWithPassword,
    required TResult Function(InlineKeyboardButtonTypeCallbackGame value)
    callbackGame,
    required TResult Function(InlineKeyboardButtonTypeSwitchInline value)
    switchInline,
    required TResult Function(InlineKeyboardButtonTypeBuy value) buy,
    required TResult Function(InlineKeyboardButtonTypeUser value) user,
    required TResult Function(InlineKeyboardButtonTypeCopyText value) copyText,
  }) {
    switch (getConstructor()) {
      case InlineKeyboardButtonTypeUrl.constructor:
        return url.call(this as InlineKeyboardButtonTypeUrl);
      case InlineKeyboardButtonTypeLoginUrl.constructor:
        return loginUrl.call(this as InlineKeyboardButtonTypeLoginUrl);
      case InlineKeyboardButtonTypeWebApp.constructor:
        return webApp.call(this as InlineKeyboardButtonTypeWebApp);
      case InlineKeyboardButtonTypeCallback.constructor:
        return callback.call(this as InlineKeyboardButtonTypeCallback);
      case InlineKeyboardButtonTypeCallbackWithPassword.constructor:
        return callbackWithPassword.call(
          this as InlineKeyboardButtonTypeCallbackWithPassword,
        );
      case InlineKeyboardButtonTypeCallbackGame.constructor:
        return callbackGame.call(this as InlineKeyboardButtonTypeCallbackGame);
      case InlineKeyboardButtonTypeSwitchInline.constructor:
        return switchInline.call(this as InlineKeyboardButtonTypeSwitchInline);
      case InlineKeyboardButtonTypeBuy.constructor:
        return buy.call(this as InlineKeyboardButtonTypeBuy);
      case InlineKeyboardButtonTypeUser.constructor:
        return user.call(this as InlineKeyboardButtonTypeUser);
      case InlineKeyboardButtonTypeCopyText.constructor:
        return copyText.call(this as InlineKeyboardButtonTypeCopyText);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InlineKeyboardButtonTypeUrl value)? url,
    TResult Function(InlineKeyboardButtonTypeLoginUrl value)? loginUrl,
    TResult Function(InlineKeyboardButtonTypeWebApp value)? webApp,
    TResult Function(InlineKeyboardButtonTypeCallback value)? callback,
    TResult Function(InlineKeyboardButtonTypeCallbackWithPassword value)?
    callbackWithPassword,
    TResult Function(InlineKeyboardButtonTypeCallbackGame value)? callbackGame,
    TResult Function(InlineKeyboardButtonTypeSwitchInline value)? switchInline,
    TResult Function(InlineKeyboardButtonTypeBuy value)? buy,
    TResult Function(InlineKeyboardButtonTypeUser value)? user,
    TResult Function(InlineKeyboardButtonTypeCopyText value)? copyText,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InlineKeyboardButtonTypeUrl.constructor:
        if (url != null) {
          return url.call(this as InlineKeyboardButtonTypeUrl);
        }
        break;
      case InlineKeyboardButtonTypeLoginUrl.constructor:
        if (loginUrl != null) {
          return loginUrl.call(this as InlineKeyboardButtonTypeLoginUrl);
        }
        break;
      case InlineKeyboardButtonTypeWebApp.constructor:
        if (webApp != null) {
          return webApp.call(this as InlineKeyboardButtonTypeWebApp);
        }
        break;
      case InlineKeyboardButtonTypeCallback.constructor:
        if (callback != null) {
          return callback.call(this as InlineKeyboardButtonTypeCallback);
        }
        break;
      case InlineKeyboardButtonTypeCallbackWithPassword.constructor:
        if (callbackWithPassword != null) {
          return callbackWithPassword.call(
            this as InlineKeyboardButtonTypeCallbackWithPassword,
          );
        }
        break;
      case InlineKeyboardButtonTypeCallbackGame.constructor:
        if (callbackGame != null) {
          return callbackGame.call(
            this as InlineKeyboardButtonTypeCallbackGame,
          );
        }
        break;
      case InlineKeyboardButtonTypeSwitchInline.constructor:
        if (switchInline != null) {
          return switchInline.call(
            this as InlineKeyboardButtonTypeSwitchInline,
          );
        }
        break;
      case InlineKeyboardButtonTypeBuy.constructor:
        if (buy != null) {
          return buy.call(this as InlineKeyboardButtonTypeBuy);
        }
        break;
      case InlineKeyboardButtonTypeUser.constructor:
        if (user != null) {
          return user.call(this as InlineKeyboardButtonTypeUser);
        }
        break;
      case InlineKeyboardButtonTypeCopyText.constructor:
        if (copyText != null) {
          return copyText.call(this as InlineKeyboardButtonTypeCopyText);
        }
        break;
    }
    return orElse.call();
  }
}

extension InlineKeyboardButtonTypeUrlExtensions on InlineKeyboardButtonTypeUrl {
  InlineKeyboardButtonTypeUrl copyWith({String? url}) =>
      InlineKeyboardButtonTypeUrl(url: url ?? this.url);
}

extension InlineKeyboardButtonTypeLoginUrlExtensions
    on InlineKeyboardButtonTypeLoginUrl {
  InlineKeyboardButtonTypeLoginUrl copyWith({
    String? url,
    int? id,
    String? forwardText,
  }) => InlineKeyboardButtonTypeLoginUrl(
    url: url ?? this.url,
    id: id ?? this.id,
    forwardText: forwardText ?? this.forwardText,
  );
}

extension InlineKeyboardButtonTypeWebAppExtensions
    on InlineKeyboardButtonTypeWebApp {
  InlineKeyboardButtonTypeWebApp copyWith({String? url}) =>
      InlineKeyboardButtonTypeWebApp(url: url ?? this.url);
}

extension InlineKeyboardButtonTypeCallbackExtensions
    on InlineKeyboardButtonTypeCallback {
  InlineKeyboardButtonTypeCallback copyWith({String? data}) =>
      InlineKeyboardButtonTypeCallback(data: data ?? this.data);
}

extension InlineKeyboardButtonTypeCallbackWithPasswordExtensions
    on InlineKeyboardButtonTypeCallbackWithPassword {
  InlineKeyboardButtonTypeCallbackWithPassword copyWith({String? data}) =>
      InlineKeyboardButtonTypeCallbackWithPassword(data: data ?? this.data);
}

extension InlineKeyboardButtonTypeSwitchInlineExtensions
    on InlineKeyboardButtonTypeSwitchInline {
  InlineKeyboardButtonTypeSwitchInline copyWith({
    String? query,
    TargetChat? targetChat,
  }) => InlineKeyboardButtonTypeSwitchInline(
    query: query ?? this.query,
    targetChat: targetChat ?? this.targetChat,
  );
}

extension InlineKeyboardButtonTypeUserExtensions
    on InlineKeyboardButtonTypeUser {
  InlineKeyboardButtonTypeUser copyWith({int? userId}) =>
      InlineKeyboardButtonTypeUser(userId: userId ?? this.userId);
}

extension InlineKeyboardButtonTypeCopyTextExtensions
    on InlineKeyboardButtonTypeCopyText {
  InlineKeyboardButtonTypeCopyText copyWith({String? text}) =>
      InlineKeyboardButtonTypeCopyText(text: text ?? this.text);
}

extension InlineKeyboardButtonExtensions on InlineKeyboardButton {
  InlineKeyboardButton copyWith({
    String? text,
    InlineKeyboardButtonType? type,
  }) => InlineKeyboardButton(text: text ?? this.text, type: type ?? this.type);
}

extension ReplyMarkupExtensions on ReplyMarkup {
  TResult map<TResult extends Object?>({
    required TResult Function(ReplyMarkupRemoveKeyboard value) removeKeyboard,
    required TResult Function(ReplyMarkupForceReply value) forceReply,
    required TResult Function(ReplyMarkupShowKeyboard value) showKeyboard,
    required TResult Function(ReplyMarkupInlineKeyboard value) inlineKeyboard,
  }) {
    switch (getConstructor()) {
      case ReplyMarkupRemoveKeyboard.constructor:
        return removeKeyboard.call(this as ReplyMarkupRemoveKeyboard);
      case ReplyMarkupForceReply.constructor:
        return forceReply.call(this as ReplyMarkupForceReply);
      case ReplyMarkupShowKeyboard.constructor:
        return showKeyboard.call(this as ReplyMarkupShowKeyboard);
      case ReplyMarkupInlineKeyboard.constructor:
        return inlineKeyboard.call(this as ReplyMarkupInlineKeyboard);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ReplyMarkupRemoveKeyboard value)? removeKeyboard,
    TResult Function(ReplyMarkupForceReply value)? forceReply,
    TResult Function(ReplyMarkupShowKeyboard value)? showKeyboard,
    TResult Function(ReplyMarkupInlineKeyboard value)? inlineKeyboard,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ReplyMarkupRemoveKeyboard.constructor:
        if (removeKeyboard != null) {
          return removeKeyboard.call(this as ReplyMarkupRemoveKeyboard);
        }
        break;
      case ReplyMarkupForceReply.constructor:
        if (forceReply != null) {
          return forceReply.call(this as ReplyMarkupForceReply);
        }
        break;
      case ReplyMarkupShowKeyboard.constructor:
        if (showKeyboard != null) {
          return showKeyboard.call(this as ReplyMarkupShowKeyboard);
        }
        break;
      case ReplyMarkupInlineKeyboard.constructor:
        if (inlineKeyboard != null) {
          return inlineKeyboard.call(this as ReplyMarkupInlineKeyboard);
        }
        break;
    }
    return orElse.call();
  }
}

extension ReplyMarkupRemoveKeyboardExtensions on ReplyMarkupRemoveKeyboard {
  ReplyMarkupRemoveKeyboard copyWith({bool? isPersonal}) =>
      ReplyMarkupRemoveKeyboard(isPersonal: isPersonal ?? this.isPersonal);
}

extension ReplyMarkupForceReplyExtensions on ReplyMarkupForceReply {
  ReplyMarkupForceReply copyWith({
    bool? isPersonal,
    String? inputFieldPlaceholder,
  }) => ReplyMarkupForceReply(
    isPersonal: isPersonal ?? this.isPersonal,
    inputFieldPlaceholder: inputFieldPlaceholder ?? this.inputFieldPlaceholder,
  );
}

extension ReplyMarkupShowKeyboardExtensions on ReplyMarkupShowKeyboard {
  ReplyMarkupShowKeyboard copyWith({
    List<List<KeyboardButton>>? rows,
    bool? isPersistent,
    bool? resizeKeyboard,
    bool? oneTime,
    bool? isPersonal,
    String? inputFieldPlaceholder,
  }) => ReplyMarkupShowKeyboard(
    rows: rows ?? this.rows,
    isPersistent: isPersistent ?? this.isPersistent,
    resizeKeyboard: resizeKeyboard ?? this.resizeKeyboard,
    oneTime: oneTime ?? this.oneTime,
    isPersonal: isPersonal ?? this.isPersonal,
    inputFieldPlaceholder: inputFieldPlaceholder ?? this.inputFieldPlaceholder,
  );
}

extension ReplyMarkupInlineKeyboardExtensions on ReplyMarkupInlineKeyboard {
  ReplyMarkupInlineKeyboard copyWith({
    List<List<InlineKeyboardButton>>? rows,
  }) => ReplyMarkupInlineKeyboard(rows: rows ?? this.rows);
}

extension LoginUrlInfoExtensions on LoginUrlInfo {
  TResult map<TResult extends Object?>({
    required TResult Function(LoginUrlInfoOpen value) open,
    required TResult Function(LoginUrlInfoRequestConfirmation value)
    requestConfirmation,
  }) {
    switch (getConstructor()) {
      case LoginUrlInfoOpen.constructor:
        return open.call(this as LoginUrlInfoOpen);
      case LoginUrlInfoRequestConfirmation.constructor:
        return requestConfirmation.call(
          this as LoginUrlInfoRequestConfirmation,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(LoginUrlInfoOpen value)? open,
    TResult Function(LoginUrlInfoRequestConfirmation value)?
    requestConfirmation,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case LoginUrlInfoOpen.constructor:
        if (open != null) {
          return open.call(this as LoginUrlInfoOpen);
        }
        break;
      case LoginUrlInfoRequestConfirmation.constructor:
        if (requestConfirmation != null) {
          return requestConfirmation.call(
            this as LoginUrlInfoRequestConfirmation,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension LoginUrlInfoOpenExtensions on LoginUrlInfoOpen {
  LoginUrlInfoOpen copyWith({String? url, bool? skipConfirmation}) =>
      LoginUrlInfoOpen(
        url: url ?? this.url,
        skipConfirmation: skipConfirmation ?? this.skipConfirmation,
      );
}

extension LoginUrlInfoRequestConfirmationExtensions
    on LoginUrlInfoRequestConfirmation {
  LoginUrlInfoRequestConfirmation copyWith({
    String? url,
    String? domain,
    int? botUserId,
    bool? requestWriteAccess,
  }) => LoginUrlInfoRequestConfirmation(
    url: url ?? this.url,
    domain: domain ?? this.domain,
    botUserId: botUserId ?? this.botUserId,
    requestWriteAccess: requestWriteAccess ?? this.requestWriteAccess,
  );
}

extension ThemeParametersExtensions on ThemeParameters {
  ThemeParameters copyWith({
    int? backgroundColor,
    int? secondaryBackgroundColor,
    int? headerBackgroundColor,
    int? bottomBarBackgroundColor,
    int? sectionBackgroundColor,
    int? sectionSeparatorColor,
    int? textColor,
    int? accentTextColor,
    int? sectionHeaderTextColor,
    int? subtitleTextColor,
    int? destructiveTextColor,
    int? hintColor,
    int? linkColor,
    int? buttonColor,
    int? buttonTextColor,
  }) => ThemeParameters(
    backgroundColor: backgroundColor ?? this.backgroundColor,
    secondaryBackgroundColor:
        secondaryBackgroundColor ?? this.secondaryBackgroundColor,
    headerBackgroundColor: headerBackgroundColor ?? this.headerBackgroundColor,
    bottomBarBackgroundColor:
        bottomBarBackgroundColor ?? this.bottomBarBackgroundColor,
    sectionBackgroundColor:
        sectionBackgroundColor ?? this.sectionBackgroundColor,
    sectionSeparatorColor: sectionSeparatorColor ?? this.sectionSeparatorColor,
    textColor: textColor ?? this.textColor,
    accentTextColor: accentTextColor ?? this.accentTextColor,
    sectionHeaderTextColor:
        sectionHeaderTextColor ?? this.sectionHeaderTextColor,
    subtitleTextColor: subtitleTextColor ?? this.subtitleTextColor,
    destructiveTextColor: destructiveTextColor ?? this.destructiveTextColor,
    hintColor: hintColor ?? this.hintColor,
    linkColor: linkColor ?? this.linkColor,
    buttonColor: buttonColor ?? this.buttonColor,
    buttonTextColor: buttonTextColor ?? this.buttonTextColor,
  );
}

extension WebAppOpenModeExtensions on WebAppOpenMode {
  TResult map<TResult extends Object?>({
    required TResult Function(WebAppOpenModeCompact value) compact,
    required TResult Function(WebAppOpenModeFullSize value) fullSize,
    required TResult Function(WebAppOpenModeFullScreen value) fullScreen,
  }) {
    switch (getConstructor()) {
      case WebAppOpenModeCompact.constructor:
        return compact.call(this as WebAppOpenModeCompact);
      case WebAppOpenModeFullSize.constructor:
        return fullSize.call(this as WebAppOpenModeFullSize);
      case WebAppOpenModeFullScreen.constructor:
        return fullScreen.call(this as WebAppOpenModeFullScreen);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(WebAppOpenModeCompact value)? compact,
    TResult Function(WebAppOpenModeFullSize value)? fullSize,
    TResult Function(WebAppOpenModeFullScreen value)? fullScreen,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case WebAppOpenModeCompact.constructor:
        if (compact != null) {
          return compact.call(this as WebAppOpenModeCompact);
        }
        break;
      case WebAppOpenModeFullSize.constructor:
        if (fullSize != null) {
          return fullSize.call(this as WebAppOpenModeFullSize);
        }
        break;
      case WebAppOpenModeFullScreen.constructor:
        if (fullScreen != null) {
          return fullScreen.call(this as WebAppOpenModeFullScreen);
        }
        break;
    }
    return orElse.call();
  }
}

extension FoundWebAppExtensions on FoundWebApp {
  FoundWebApp copyWith({
    WebApp? webApp,
    bool? requestWriteAccess,
    bool? skipConfirmation,
  }) => FoundWebApp(
    webApp: webApp ?? this.webApp,
    requestWriteAccess: requestWriteAccess ?? this.requestWriteAccess,
    skipConfirmation: skipConfirmation ?? this.skipConfirmation,
  );
}

extension WebAppInfoExtensions on WebAppInfo {
  WebAppInfo copyWith({int? launchId, String? url}) =>
      WebAppInfo(launchId: launchId ?? this.launchId, url: url ?? this.url);
}

extension MainWebAppExtensions on MainWebApp {
  MainWebApp copyWith({String? url, WebAppOpenMode? mode}) =>
      MainWebApp(url: url ?? this.url, mode: mode ?? this.mode);
}

extension WebAppOpenParametersExtensions on WebAppOpenParameters {
  WebAppOpenParameters copyWith({
    ThemeParameters? theme,
    String? applicationName,
    WebAppOpenMode? mode,
  }) => WebAppOpenParameters(
    theme: theme ?? this.theme,
    applicationName: applicationName ?? this.applicationName,
    mode: mode ?? this.mode,
  );
}

extension MessageThreadInfoExtensions on MessageThreadInfo {
  MessageThreadInfo copyWith({
    int? chatId,
    int? messageThreadId,
    MessageReplyInfo? replyInfo,
    int? unreadMessageCount,
    List<Message>? messages,
    DraftMessage? draftMessage,
  }) => MessageThreadInfo(
    chatId: chatId ?? this.chatId,
    messageThreadId: messageThreadId ?? this.messageThreadId,
    replyInfo: replyInfo ?? this.replyInfo,
    unreadMessageCount: unreadMessageCount ?? this.unreadMessageCount,
    messages: messages ?? this.messages,
    draftMessage: draftMessage ?? this.draftMessage,
  );
}

extension SavedMessagesTopicTypeExtensions on SavedMessagesTopicType {
  TResult map<TResult extends Object?>({
    required TResult Function(SavedMessagesTopicTypeMyNotes value) myNotes,
    required TResult Function(SavedMessagesTopicTypeAuthorHidden value)
    authorHidden,
    required TResult Function(SavedMessagesTopicTypeSavedFromChat value)
    savedFromChat,
  }) {
    switch (getConstructor()) {
      case SavedMessagesTopicTypeMyNotes.constructor:
        return myNotes.call(this as SavedMessagesTopicTypeMyNotes);
      case SavedMessagesTopicTypeAuthorHidden.constructor:
        return authorHidden.call(this as SavedMessagesTopicTypeAuthorHidden);
      case SavedMessagesTopicTypeSavedFromChat.constructor:
        return savedFromChat.call(this as SavedMessagesTopicTypeSavedFromChat);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(SavedMessagesTopicTypeMyNotes value)? myNotes,
    TResult Function(SavedMessagesTopicTypeAuthorHidden value)? authorHidden,
    TResult Function(SavedMessagesTopicTypeSavedFromChat value)? savedFromChat,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case SavedMessagesTopicTypeMyNotes.constructor:
        if (myNotes != null) {
          return myNotes.call(this as SavedMessagesTopicTypeMyNotes);
        }
        break;
      case SavedMessagesTopicTypeAuthorHidden.constructor:
        if (authorHidden != null) {
          return authorHidden.call(this as SavedMessagesTopicTypeAuthorHidden);
        }
        break;
      case SavedMessagesTopicTypeSavedFromChat.constructor:
        if (savedFromChat != null) {
          return savedFromChat.call(
            this as SavedMessagesTopicTypeSavedFromChat,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension SavedMessagesTopicTypeSavedFromChatExtensions
    on SavedMessagesTopicTypeSavedFromChat {
  SavedMessagesTopicTypeSavedFromChat copyWith({int? chatId}) =>
      SavedMessagesTopicTypeSavedFromChat(chatId: chatId ?? this.chatId);
}

extension SavedMessagesTopicExtensions on SavedMessagesTopic {
  SavedMessagesTopic copyWith({
    int? id,
    SavedMessagesTopicType? type,
    bool? isPinned,
    int? order,
    Message? lastMessage,
    DraftMessage? draftMessage,
  }) => SavedMessagesTopic(
    id: id ?? this.id,
    type: type ?? this.type,
    isPinned: isPinned ?? this.isPinned,
    order: order ?? this.order,
    lastMessage: lastMessage ?? this.lastMessage,
    draftMessage: draftMessage ?? this.draftMessage,
  );
}

extension DirectMessagesChatTopicExtensions on DirectMessagesChatTopic {
  DirectMessagesChatTopic copyWith({
    int? chatId,
    int? id,
    MessageSender? senderId,
    int? order,
    bool? canSendUnpaidMessages,
    bool? isMarkedAsUnread,
    int? unreadCount,
    int? lastReadInboxMessageId,
    int? lastReadOutboxMessageId,
    int? unreadReactionCount,
    Message? lastMessage,
    DraftMessage? draftMessage,
  }) => DirectMessagesChatTopic(
    chatId: chatId ?? this.chatId,
    id: id ?? this.id,
    senderId: senderId ?? this.senderId,
    order: order ?? this.order,
    canSendUnpaidMessages: canSendUnpaidMessages ?? this.canSendUnpaidMessages,
    isMarkedAsUnread: isMarkedAsUnread ?? this.isMarkedAsUnread,
    unreadCount: unreadCount ?? this.unreadCount,
    lastReadInboxMessageId:
        lastReadInboxMessageId ?? this.lastReadInboxMessageId,
    lastReadOutboxMessageId:
        lastReadOutboxMessageId ?? this.lastReadOutboxMessageId,
    unreadReactionCount: unreadReactionCount ?? this.unreadReactionCount,
    lastMessage: lastMessage ?? this.lastMessage,
    draftMessage: draftMessage ?? this.draftMessage,
  );
}

extension ForumTopicIconExtensions on ForumTopicIcon {
  ForumTopicIcon copyWith({int? color, int? customEmojiId}) => ForumTopicIcon(
    color: color ?? this.color,
    customEmojiId: customEmojiId ?? this.customEmojiId,
  );
}

extension ForumTopicInfoExtensions on ForumTopicInfo {
  ForumTopicInfo copyWith({
    int? chatId,
    int? forumTopicId,
    int? messageThreadId,
    String? name,
    ForumTopicIcon? icon,
    int? creationDate,
    MessageSender? creatorId,
    bool? isGeneral,
    bool? isOutgoing,
    bool? isClosed,
    bool? isHidden,
  }) => ForumTopicInfo(
    chatId: chatId ?? this.chatId,
    forumTopicId: forumTopicId ?? this.forumTopicId,
    messageThreadId: messageThreadId ?? this.messageThreadId,
    name: name ?? this.name,
    icon: icon ?? this.icon,
    creationDate: creationDate ?? this.creationDate,
    creatorId: creatorId ?? this.creatorId,
    isGeneral: isGeneral ?? this.isGeneral,
    isOutgoing: isOutgoing ?? this.isOutgoing,
    isClosed: isClosed ?? this.isClosed,
    isHidden: isHidden ?? this.isHidden,
  );
}

extension ForumTopicExtensions on ForumTopic {
  ForumTopic copyWith({
    ForumTopicInfo? info,
    Message? lastMessage,
    int? order,
    bool? isPinned,
    int? unreadCount,
    int? lastReadInboxMessageId,
    int? lastReadOutboxMessageId,
    int? unreadMentionCount,
    int? unreadReactionCount,
    ChatNotificationSettings? notificationSettings,
    DraftMessage? draftMessage,
  }) => ForumTopic(
    info: info ?? this.info,
    lastMessage: lastMessage ?? this.lastMessage,
    order: order ?? this.order,
    isPinned: isPinned ?? this.isPinned,
    unreadCount: unreadCount ?? this.unreadCount,
    lastReadInboxMessageId:
        lastReadInboxMessageId ?? this.lastReadInboxMessageId,
    lastReadOutboxMessageId:
        lastReadOutboxMessageId ?? this.lastReadOutboxMessageId,
    unreadMentionCount: unreadMentionCount ?? this.unreadMentionCount,
    unreadReactionCount: unreadReactionCount ?? this.unreadReactionCount,
    notificationSettings: notificationSettings ?? this.notificationSettings,
    draftMessage: draftMessage ?? this.draftMessage,
  );
}

extension ForumTopicsExtensions on ForumTopics {
  ForumTopics copyWith({
    int? totalCount,
    List<ForumTopic>? topics,
    int? nextOffsetDate,
    int? nextOffsetMessageId,
    int? nextOffsetMessageThreadId,
  }) => ForumTopics(
    totalCount: totalCount ?? this.totalCount,
    topics: topics ?? this.topics,
    nextOffsetDate: nextOffsetDate ?? this.nextOffsetDate,
    nextOffsetMessageId: nextOffsetMessageId ?? this.nextOffsetMessageId,
    nextOffsetMessageThreadId:
        nextOffsetMessageThreadId ?? this.nextOffsetMessageThreadId,
  );
}

extension LinkPreviewOptionsExtensions on LinkPreviewOptions {
  LinkPreviewOptions copyWith({
    bool? isDisabled,
    String? url,
    bool? forceSmallMedia,
    bool? forceLargeMedia,
    bool? showAboveText,
  }) => LinkPreviewOptions(
    isDisabled: isDisabled ?? this.isDisabled,
    url: url ?? this.url,
    forceSmallMedia: forceSmallMedia ?? this.forceSmallMedia,
    forceLargeMedia: forceLargeMedia ?? this.forceLargeMedia,
    showAboveText: showAboveText ?? this.showAboveText,
  );
}

extension SharedUserExtensions on SharedUser {
  SharedUser copyWith({
    int? userId,
    String? firstName,
    String? lastName,
    String? username,
    Photo? photo,
  }) => SharedUser(
    userId: userId ?? this.userId,
    firstName: firstName ?? this.firstName,
    lastName: lastName ?? this.lastName,
    username: username ?? this.username,
    photo: photo ?? this.photo,
  );
}

extension SharedChatExtensions on SharedChat {
  SharedChat copyWith({
    int? chatId,
    String? title,
    String? username,
    Photo? photo,
  }) => SharedChat(
    chatId: chatId ?? this.chatId,
    title: title ?? this.title,
    username: username ?? this.username,
    photo: photo ?? this.photo,
  );
}

extension ThemeSettingsExtensions on ThemeSettings {
  ThemeSettings copyWith({
    int? accentColor,
    Background? background,
    BackgroundFill? outgoingMessageFill,
    bool? animateOutgoingMessageFill,
    int? outgoingMessageAccentColor,
  }) => ThemeSettings(
    accentColor: accentColor ?? this.accentColor,
    background: background ?? this.background,
    outgoingMessageFill: outgoingMessageFill ?? this.outgoingMessageFill,
    animateOutgoingMessageFill:
        animateOutgoingMessageFill ?? this.animateOutgoingMessageFill,
    outgoingMessageAccentColor:
        outgoingMessageAccentColor ?? this.outgoingMessageAccentColor,
  );
}

extension RichTextExtensions on RichText {
  TResult map<TResult extends Object?>({
    required TResult Function(RichTextPlain value) plain,
    required TResult Function(RichTextBold value) bold,
    required TResult Function(RichTextItalic value) italic,
    required TResult Function(RichTextUnderline value) underline,
    required TResult Function(RichTextStrikethrough value) strikethrough,
    required TResult Function(RichTextFixed value) fixed,
    required TResult Function(RichTextUrl value) url,
    required TResult Function(RichTextEmailAddress value) emailAddress,
    required TResult Function(RichTextSubscript value) subscript,
    required TResult Function(RichTextSuperscript value) superscript,
    required TResult Function(RichTextMarked value) marked,
    required TResult Function(RichTextPhoneNumber value) phoneNumber,
    required TResult Function(RichTextIcon value) icon,
    required TResult Function(RichTextReference value) reference,
    required TResult Function(RichTextAnchor value) anchor,
    required TResult Function(RichTextAnchorLink value) anchorLink,
    required TResult Function(RichTexts value) s,
  }) {
    switch (getConstructor()) {
      case RichTextPlain.constructor:
        return plain.call(this as RichTextPlain);
      case RichTextBold.constructor:
        return bold.call(this as RichTextBold);
      case RichTextItalic.constructor:
        return italic.call(this as RichTextItalic);
      case RichTextUnderline.constructor:
        return underline.call(this as RichTextUnderline);
      case RichTextStrikethrough.constructor:
        return strikethrough.call(this as RichTextStrikethrough);
      case RichTextFixed.constructor:
        return fixed.call(this as RichTextFixed);
      case RichTextUrl.constructor:
        return url.call(this as RichTextUrl);
      case RichTextEmailAddress.constructor:
        return emailAddress.call(this as RichTextEmailAddress);
      case RichTextSubscript.constructor:
        return subscript.call(this as RichTextSubscript);
      case RichTextSuperscript.constructor:
        return superscript.call(this as RichTextSuperscript);
      case RichTextMarked.constructor:
        return marked.call(this as RichTextMarked);
      case RichTextPhoneNumber.constructor:
        return phoneNumber.call(this as RichTextPhoneNumber);
      case RichTextIcon.constructor:
        return icon.call(this as RichTextIcon);
      case RichTextReference.constructor:
        return reference.call(this as RichTextReference);
      case RichTextAnchor.constructor:
        return anchor.call(this as RichTextAnchor);
      case RichTextAnchorLink.constructor:
        return anchorLink.call(this as RichTextAnchorLink);
      case RichTexts.constructor:
        return s.call(this as RichTexts);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(RichTextPlain value)? plain,
    TResult Function(RichTextBold value)? bold,
    TResult Function(RichTextItalic value)? italic,
    TResult Function(RichTextUnderline value)? underline,
    TResult Function(RichTextStrikethrough value)? strikethrough,
    TResult Function(RichTextFixed value)? fixed,
    TResult Function(RichTextUrl value)? url,
    TResult Function(RichTextEmailAddress value)? emailAddress,
    TResult Function(RichTextSubscript value)? subscript,
    TResult Function(RichTextSuperscript value)? superscript,
    TResult Function(RichTextMarked value)? marked,
    TResult Function(RichTextPhoneNumber value)? phoneNumber,
    TResult Function(RichTextIcon value)? icon,
    TResult Function(RichTextReference value)? reference,
    TResult Function(RichTextAnchor value)? anchor,
    TResult Function(RichTextAnchorLink value)? anchorLink,
    TResult Function(RichTexts value)? s,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case RichTextPlain.constructor:
        if (plain != null) {
          return plain.call(this as RichTextPlain);
        }
        break;
      case RichTextBold.constructor:
        if (bold != null) {
          return bold.call(this as RichTextBold);
        }
        break;
      case RichTextItalic.constructor:
        if (italic != null) {
          return italic.call(this as RichTextItalic);
        }
        break;
      case RichTextUnderline.constructor:
        if (underline != null) {
          return underline.call(this as RichTextUnderline);
        }
        break;
      case RichTextStrikethrough.constructor:
        if (strikethrough != null) {
          return strikethrough.call(this as RichTextStrikethrough);
        }
        break;
      case RichTextFixed.constructor:
        if (fixed != null) {
          return fixed.call(this as RichTextFixed);
        }
        break;
      case RichTextUrl.constructor:
        if (url != null) {
          return url.call(this as RichTextUrl);
        }
        break;
      case RichTextEmailAddress.constructor:
        if (emailAddress != null) {
          return emailAddress.call(this as RichTextEmailAddress);
        }
        break;
      case RichTextSubscript.constructor:
        if (subscript != null) {
          return subscript.call(this as RichTextSubscript);
        }
        break;
      case RichTextSuperscript.constructor:
        if (superscript != null) {
          return superscript.call(this as RichTextSuperscript);
        }
        break;
      case RichTextMarked.constructor:
        if (marked != null) {
          return marked.call(this as RichTextMarked);
        }
        break;
      case RichTextPhoneNumber.constructor:
        if (phoneNumber != null) {
          return phoneNumber.call(this as RichTextPhoneNumber);
        }
        break;
      case RichTextIcon.constructor:
        if (icon != null) {
          return icon.call(this as RichTextIcon);
        }
        break;
      case RichTextReference.constructor:
        if (reference != null) {
          return reference.call(this as RichTextReference);
        }
        break;
      case RichTextAnchor.constructor:
        if (anchor != null) {
          return anchor.call(this as RichTextAnchor);
        }
        break;
      case RichTextAnchorLink.constructor:
        if (anchorLink != null) {
          return anchorLink.call(this as RichTextAnchorLink);
        }
        break;
      case RichTexts.constructor:
        if (s != null) {
          return s.call(this as RichTexts);
        }
        break;
    }
    return orElse.call();
  }
}

extension RichTextPlainExtensions on RichTextPlain {
  RichTextPlain copyWith({String? text}) =>
      RichTextPlain(text: text ?? this.text);
}

extension RichTextBoldExtensions on RichTextBold {
  RichTextBold copyWith({RichText? text}) =>
      RichTextBold(text: text ?? this.text);
}

extension RichTextItalicExtensions on RichTextItalic {
  RichTextItalic copyWith({RichText? text}) =>
      RichTextItalic(text: text ?? this.text);
}

extension RichTextUnderlineExtensions on RichTextUnderline {
  RichTextUnderline copyWith({RichText? text}) =>
      RichTextUnderline(text: text ?? this.text);
}

extension RichTextStrikethroughExtensions on RichTextStrikethrough {
  RichTextStrikethrough copyWith({RichText? text}) =>
      RichTextStrikethrough(text: text ?? this.text);
}

extension RichTextFixedExtensions on RichTextFixed {
  RichTextFixed copyWith({RichText? text}) =>
      RichTextFixed(text: text ?? this.text);
}

extension RichTextUrlExtensions on RichTextUrl {
  RichTextUrl copyWith({RichText? text, String? url, bool? isCached}) =>
      RichTextUrl(
        text: text ?? this.text,
        url: url ?? this.url,
        isCached: isCached ?? this.isCached,
      );
}

extension RichTextEmailAddressExtensions on RichTextEmailAddress {
  RichTextEmailAddress copyWith({RichText? text, String? emailAddress}) =>
      RichTextEmailAddress(
        text: text ?? this.text,
        emailAddress: emailAddress ?? this.emailAddress,
      );
}

extension RichTextSubscriptExtensions on RichTextSubscript {
  RichTextSubscript copyWith({RichText? text}) =>
      RichTextSubscript(text: text ?? this.text);
}

extension RichTextSuperscriptExtensions on RichTextSuperscript {
  RichTextSuperscript copyWith({RichText? text}) =>
      RichTextSuperscript(text: text ?? this.text);
}

extension RichTextMarkedExtensions on RichTextMarked {
  RichTextMarked copyWith({RichText? text}) =>
      RichTextMarked(text: text ?? this.text);
}

extension RichTextPhoneNumberExtensions on RichTextPhoneNumber {
  RichTextPhoneNumber copyWith({RichText? text, String? phoneNumber}) =>
      RichTextPhoneNumber(
        text: text ?? this.text,
        phoneNumber: phoneNumber ?? this.phoneNumber,
      );
}

extension RichTextIconExtensions on RichTextIcon {
  RichTextIcon copyWith({Document? document, int? width, int? height}) =>
      RichTextIcon(
        document: document ?? this.document,
        width: width ?? this.width,
        height: height ?? this.height,
      );
}

extension RichTextReferenceExtensions on RichTextReference {
  RichTextReference copyWith({
    RichText? text,
    String? anchorName,
    String? url,
  }) => RichTextReference(
    text: text ?? this.text,
    anchorName: anchorName ?? this.anchorName,
    url: url ?? this.url,
  );
}

extension RichTextAnchorExtensions on RichTextAnchor {
  RichTextAnchor copyWith({String? name}) =>
      RichTextAnchor(name: name ?? this.name);
}

extension RichTextAnchorLinkExtensions on RichTextAnchorLink {
  RichTextAnchorLink copyWith({
    RichText? text,
    String? anchorName,
    String? url,
  }) => RichTextAnchorLink(
    text: text ?? this.text,
    anchorName: anchorName ?? this.anchorName,
    url: url ?? this.url,
  );
}

extension RichTextsExtensions on RichTexts {
  RichTexts copyWith({List<RichText>? texts}) =>
      RichTexts(texts: texts ?? this.texts);
}

extension PageBlockCaptionExtensions on PageBlockCaption {
  PageBlockCaption copyWith({RichText? text, RichText? credit}) =>
      PageBlockCaption(text: text ?? this.text, credit: credit ?? this.credit);
}

extension PageBlockListItemExtensions on PageBlockListItem {
  PageBlockListItem copyWith({String? label, List<PageBlock>? pageBlocks}) =>
      PageBlockListItem(
        label: label ?? this.label,
        pageBlocks: pageBlocks ?? this.pageBlocks,
      );
}

extension PageBlockHorizontalAlignmentExtensions
    on PageBlockHorizontalAlignment {
  TResult map<TResult extends Object?>({
    required TResult Function(PageBlockHorizontalAlignmentLeft value) left,
    required TResult Function(PageBlockHorizontalAlignmentCenter value) center,
    required TResult Function(PageBlockHorizontalAlignmentRight value) right,
  }) {
    switch (getConstructor()) {
      case PageBlockHorizontalAlignmentLeft.constructor:
        return left.call(this as PageBlockHorizontalAlignmentLeft);
      case PageBlockHorizontalAlignmentCenter.constructor:
        return center.call(this as PageBlockHorizontalAlignmentCenter);
      case PageBlockHorizontalAlignmentRight.constructor:
        return right.call(this as PageBlockHorizontalAlignmentRight);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PageBlockHorizontalAlignmentLeft value)? left,
    TResult Function(PageBlockHorizontalAlignmentCenter value)? center,
    TResult Function(PageBlockHorizontalAlignmentRight value)? right,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PageBlockHorizontalAlignmentLeft.constructor:
        if (left != null) {
          return left.call(this as PageBlockHorizontalAlignmentLeft);
        }
        break;
      case PageBlockHorizontalAlignmentCenter.constructor:
        if (center != null) {
          return center.call(this as PageBlockHorizontalAlignmentCenter);
        }
        break;
      case PageBlockHorizontalAlignmentRight.constructor:
        if (right != null) {
          return right.call(this as PageBlockHorizontalAlignmentRight);
        }
        break;
    }
    return orElse.call();
  }
}

extension PageBlockVerticalAlignmentExtensions on PageBlockVerticalAlignment {
  TResult map<TResult extends Object?>({
    required TResult Function(PageBlockVerticalAlignmentTop value) top,
    required TResult Function(PageBlockVerticalAlignmentMiddle value) middle,
    required TResult Function(PageBlockVerticalAlignmentBottom value) bottom,
  }) {
    switch (getConstructor()) {
      case PageBlockVerticalAlignmentTop.constructor:
        return top.call(this as PageBlockVerticalAlignmentTop);
      case PageBlockVerticalAlignmentMiddle.constructor:
        return middle.call(this as PageBlockVerticalAlignmentMiddle);
      case PageBlockVerticalAlignmentBottom.constructor:
        return bottom.call(this as PageBlockVerticalAlignmentBottom);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PageBlockVerticalAlignmentTop value)? top,
    TResult Function(PageBlockVerticalAlignmentMiddle value)? middle,
    TResult Function(PageBlockVerticalAlignmentBottom value)? bottom,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PageBlockVerticalAlignmentTop.constructor:
        if (top != null) {
          return top.call(this as PageBlockVerticalAlignmentTop);
        }
        break;
      case PageBlockVerticalAlignmentMiddle.constructor:
        if (middle != null) {
          return middle.call(this as PageBlockVerticalAlignmentMiddle);
        }
        break;
      case PageBlockVerticalAlignmentBottom.constructor:
        if (bottom != null) {
          return bottom.call(this as PageBlockVerticalAlignmentBottom);
        }
        break;
    }
    return orElse.call();
  }
}

extension PageBlockTableCellExtensions on PageBlockTableCell {
  PageBlockTableCell copyWith({
    RichText? text,
    bool? isHeader,
    int? colspan,
    int? rowspan,
    PageBlockHorizontalAlignment? align,
    PageBlockVerticalAlignment? valign,
  }) => PageBlockTableCell(
    text: text ?? this.text,
    isHeader: isHeader ?? this.isHeader,
    colspan: colspan ?? this.colspan,
    rowspan: rowspan ?? this.rowspan,
    align: align ?? this.align,
    valign: valign ?? this.valign,
  );
}

extension PageBlockRelatedArticleExtensions on PageBlockRelatedArticle {
  PageBlockRelatedArticle copyWith({
    String? url,
    String? title,
    String? description,
    Photo? photo,
    String? author,
    int? publishDate,
  }) => PageBlockRelatedArticle(
    url: url ?? this.url,
    title: title ?? this.title,
    description: description ?? this.description,
    photo: photo ?? this.photo,
    author: author ?? this.author,
    publishDate: publishDate ?? this.publishDate,
  );
}

extension PageBlockExtensions on PageBlock {
  TResult map<TResult extends Object?>({
    required TResult Function(PageBlockTitle value) title,
    required TResult Function(PageBlockSubtitle value) subtitle,
    required TResult Function(PageBlockAuthorDate value) authorDate,
    required TResult Function(PageBlockHeader value) header,
    required TResult Function(PageBlockSubheader value) subheader,
    required TResult Function(PageBlockKicker value) kicker,
    required TResult Function(PageBlockParagraph value) paragraph,
    required TResult Function(PageBlockPreformatted value) preformatted,
    required TResult Function(PageBlockFooter value) footer,
    required TResult Function(PageBlockDivider value) divider,
    required TResult Function(PageBlockAnchor value) anchor,
    required TResult Function(PageBlockList value) list,
    required TResult Function(PageBlockBlockQuote value) blockQuote,
    required TResult Function(PageBlockPullQuote value) pullQuote,
    required TResult Function(PageBlockAnimation value) animation,
    required TResult Function(PageBlockAudio value) audio,
    required TResult Function(PageBlockPhoto value) photo,
    required TResult Function(PageBlockVideo value) video,
    required TResult Function(PageBlockVoiceNote value) voiceNote,
    required TResult Function(PageBlockCover value) cover,
    required TResult Function(PageBlockEmbedded value) embedded,
    required TResult Function(PageBlockEmbeddedPost value) embeddedPost,
    required TResult Function(PageBlockCollage value) collage,
    required TResult Function(PageBlockSlideshow value) slideshow,
    required TResult Function(PageBlockChatLink value) chatLink,
    required TResult Function(PageBlockTable value) table,
    required TResult Function(PageBlockDetails value) details,
    required TResult Function(PageBlockRelatedArticles value) relatedArticles,
    required TResult Function(PageBlockMap value) map,
  }) {
    switch (getConstructor()) {
      case PageBlockTitle.constructor:
        return title.call(this as PageBlockTitle);
      case PageBlockSubtitle.constructor:
        return subtitle.call(this as PageBlockSubtitle);
      case PageBlockAuthorDate.constructor:
        return authorDate.call(this as PageBlockAuthorDate);
      case PageBlockHeader.constructor:
        return header.call(this as PageBlockHeader);
      case PageBlockSubheader.constructor:
        return subheader.call(this as PageBlockSubheader);
      case PageBlockKicker.constructor:
        return kicker.call(this as PageBlockKicker);
      case PageBlockParagraph.constructor:
        return paragraph.call(this as PageBlockParagraph);
      case PageBlockPreformatted.constructor:
        return preformatted.call(this as PageBlockPreformatted);
      case PageBlockFooter.constructor:
        return footer.call(this as PageBlockFooter);
      case PageBlockDivider.constructor:
        return divider.call(this as PageBlockDivider);
      case PageBlockAnchor.constructor:
        return anchor.call(this as PageBlockAnchor);
      case PageBlockList.constructor:
        return list.call(this as PageBlockList);
      case PageBlockBlockQuote.constructor:
        return blockQuote.call(this as PageBlockBlockQuote);
      case PageBlockPullQuote.constructor:
        return pullQuote.call(this as PageBlockPullQuote);
      case PageBlockAnimation.constructor:
        return animation.call(this as PageBlockAnimation);
      case PageBlockAudio.constructor:
        return audio.call(this as PageBlockAudio);
      case PageBlockPhoto.constructor:
        return photo.call(this as PageBlockPhoto);
      case PageBlockVideo.constructor:
        return video.call(this as PageBlockVideo);
      case PageBlockVoiceNote.constructor:
        return voiceNote.call(this as PageBlockVoiceNote);
      case PageBlockCover.constructor:
        return cover.call(this as PageBlockCover);
      case PageBlockEmbedded.constructor:
        return embedded.call(this as PageBlockEmbedded);
      case PageBlockEmbeddedPost.constructor:
        return embeddedPost.call(this as PageBlockEmbeddedPost);
      case PageBlockCollage.constructor:
        return collage.call(this as PageBlockCollage);
      case PageBlockSlideshow.constructor:
        return slideshow.call(this as PageBlockSlideshow);
      case PageBlockChatLink.constructor:
        return chatLink.call(this as PageBlockChatLink);
      case PageBlockTable.constructor:
        return table.call(this as PageBlockTable);
      case PageBlockDetails.constructor:
        return details.call(this as PageBlockDetails);
      case PageBlockRelatedArticles.constructor:
        return relatedArticles.call(this as PageBlockRelatedArticles);
      case PageBlockMap.constructor:
        return map.call(this as PageBlockMap);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PageBlockTitle value)? title,
    TResult Function(PageBlockSubtitle value)? subtitle,
    TResult Function(PageBlockAuthorDate value)? authorDate,
    TResult Function(PageBlockHeader value)? header,
    TResult Function(PageBlockSubheader value)? subheader,
    TResult Function(PageBlockKicker value)? kicker,
    TResult Function(PageBlockParagraph value)? paragraph,
    TResult Function(PageBlockPreformatted value)? preformatted,
    TResult Function(PageBlockFooter value)? footer,
    TResult Function(PageBlockDivider value)? divider,
    TResult Function(PageBlockAnchor value)? anchor,
    TResult Function(PageBlockList value)? list,
    TResult Function(PageBlockBlockQuote value)? blockQuote,
    TResult Function(PageBlockPullQuote value)? pullQuote,
    TResult Function(PageBlockAnimation value)? animation,
    TResult Function(PageBlockAudio value)? audio,
    TResult Function(PageBlockPhoto value)? photo,
    TResult Function(PageBlockVideo value)? video,
    TResult Function(PageBlockVoiceNote value)? voiceNote,
    TResult Function(PageBlockCover value)? cover,
    TResult Function(PageBlockEmbedded value)? embedded,
    TResult Function(PageBlockEmbeddedPost value)? embeddedPost,
    TResult Function(PageBlockCollage value)? collage,
    TResult Function(PageBlockSlideshow value)? slideshow,
    TResult Function(PageBlockChatLink value)? chatLink,
    TResult Function(PageBlockTable value)? table,
    TResult Function(PageBlockDetails value)? details,
    TResult Function(PageBlockRelatedArticles value)? relatedArticles,
    TResult Function(PageBlockMap value)? map,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PageBlockTitle.constructor:
        if (title != null) {
          return title.call(this as PageBlockTitle);
        }
        break;
      case PageBlockSubtitle.constructor:
        if (subtitle != null) {
          return subtitle.call(this as PageBlockSubtitle);
        }
        break;
      case PageBlockAuthorDate.constructor:
        if (authorDate != null) {
          return authorDate.call(this as PageBlockAuthorDate);
        }
        break;
      case PageBlockHeader.constructor:
        if (header != null) {
          return header.call(this as PageBlockHeader);
        }
        break;
      case PageBlockSubheader.constructor:
        if (subheader != null) {
          return subheader.call(this as PageBlockSubheader);
        }
        break;
      case PageBlockKicker.constructor:
        if (kicker != null) {
          return kicker.call(this as PageBlockKicker);
        }
        break;
      case PageBlockParagraph.constructor:
        if (paragraph != null) {
          return paragraph.call(this as PageBlockParagraph);
        }
        break;
      case PageBlockPreformatted.constructor:
        if (preformatted != null) {
          return preformatted.call(this as PageBlockPreformatted);
        }
        break;
      case PageBlockFooter.constructor:
        if (footer != null) {
          return footer.call(this as PageBlockFooter);
        }
        break;
      case PageBlockDivider.constructor:
        if (divider != null) {
          return divider.call(this as PageBlockDivider);
        }
        break;
      case PageBlockAnchor.constructor:
        if (anchor != null) {
          return anchor.call(this as PageBlockAnchor);
        }
        break;
      case PageBlockList.constructor:
        if (list != null) {
          return list.call(this as PageBlockList);
        }
        break;
      case PageBlockBlockQuote.constructor:
        if (blockQuote != null) {
          return blockQuote.call(this as PageBlockBlockQuote);
        }
        break;
      case PageBlockPullQuote.constructor:
        if (pullQuote != null) {
          return pullQuote.call(this as PageBlockPullQuote);
        }
        break;
      case PageBlockAnimation.constructor:
        if (animation != null) {
          return animation.call(this as PageBlockAnimation);
        }
        break;
      case PageBlockAudio.constructor:
        if (audio != null) {
          return audio.call(this as PageBlockAudio);
        }
        break;
      case PageBlockPhoto.constructor:
        if (photo != null) {
          return photo.call(this as PageBlockPhoto);
        }
        break;
      case PageBlockVideo.constructor:
        if (video != null) {
          return video.call(this as PageBlockVideo);
        }
        break;
      case PageBlockVoiceNote.constructor:
        if (voiceNote != null) {
          return voiceNote.call(this as PageBlockVoiceNote);
        }
        break;
      case PageBlockCover.constructor:
        if (cover != null) {
          return cover.call(this as PageBlockCover);
        }
        break;
      case PageBlockEmbedded.constructor:
        if (embedded != null) {
          return embedded.call(this as PageBlockEmbedded);
        }
        break;
      case PageBlockEmbeddedPost.constructor:
        if (embeddedPost != null) {
          return embeddedPost.call(this as PageBlockEmbeddedPost);
        }
        break;
      case PageBlockCollage.constructor:
        if (collage != null) {
          return collage.call(this as PageBlockCollage);
        }
        break;
      case PageBlockSlideshow.constructor:
        if (slideshow != null) {
          return slideshow.call(this as PageBlockSlideshow);
        }
        break;
      case PageBlockChatLink.constructor:
        if (chatLink != null) {
          return chatLink.call(this as PageBlockChatLink);
        }
        break;
      case PageBlockTable.constructor:
        if (table != null) {
          return table.call(this as PageBlockTable);
        }
        break;
      case PageBlockDetails.constructor:
        if (details != null) {
          return details.call(this as PageBlockDetails);
        }
        break;
      case PageBlockRelatedArticles.constructor:
        if (relatedArticles != null) {
          return relatedArticles.call(this as PageBlockRelatedArticles);
        }
        break;
      case PageBlockMap.constructor:
        if (map != null) {
          return map.call(this as PageBlockMap);
        }
        break;
    }
    return orElse.call();
  }
}

extension PageBlockTitleExtensions on PageBlockTitle {
  PageBlockTitle copyWith({RichText? title}) =>
      PageBlockTitle(title: title ?? this.title);
}

extension PageBlockSubtitleExtensions on PageBlockSubtitle {
  PageBlockSubtitle copyWith({RichText? subtitle}) =>
      PageBlockSubtitle(subtitle: subtitle ?? this.subtitle);
}

extension PageBlockAuthorDateExtensions on PageBlockAuthorDate {
  PageBlockAuthorDate copyWith({RichText? author, int? publishDate}) =>
      PageBlockAuthorDate(
        author: author ?? this.author,
        publishDate: publishDate ?? this.publishDate,
      );
}

extension PageBlockHeaderExtensions on PageBlockHeader {
  PageBlockHeader copyWith({RichText? header}) =>
      PageBlockHeader(header: header ?? this.header);
}

extension PageBlockSubheaderExtensions on PageBlockSubheader {
  PageBlockSubheader copyWith({RichText? subheader}) =>
      PageBlockSubheader(subheader: subheader ?? this.subheader);
}

extension PageBlockKickerExtensions on PageBlockKicker {
  PageBlockKicker copyWith({RichText? kicker}) =>
      PageBlockKicker(kicker: kicker ?? this.kicker);
}

extension PageBlockParagraphExtensions on PageBlockParagraph {
  PageBlockParagraph copyWith({RichText? text}) =>
      PageBlockParagraph(text: text ?? this.text);
}

extension PageBlockPreformattedExtensions on PageBlockPreformatted {
  PageBlockPreformatted copyWith({RichText? text, String? language}) =>
      PageBlockPreformatted(
        text: text ?? this.text,
        language: language ?? this.language,
      );
}

extension PageBlockFooterExtensions on PageBlockFooter {
  PageBlockFooter copyWith({RichText? footer}) =>
      PageBlockFooter(footer: footer ?? this.footer);
}

extension PageBlockAnchorExtensions on PageBlockAnchor {
  PageBlockAnchor copyWith({String? name}) =>
      PageBlockAnchor(name: name ?? this.name);
}

extension PageBlockListExtensions on PageBlockList {
  PageBlockList copyWith({List<PageBlockListItem>? items}) =>
      PageBlockList(items: items ?? this.items);
}

extension PageBlockBlockQuoteExtensions on PageBlockBlockQuote {
  PageBlockBlockQuote copyWith({RichText? text, RichText? credit}) =>
      PageBlockBlockQuote(
        text: text ?? this.text,
        credit: credit ?? this.credit,
      );
}

extension PageBlockPullQuoteExtensions on PageBlockPullQuote {
  PageBlockPullQuote copyWith({RichText? text, RichText? credit}) =>
      PageBlockPullQuote(
        text: text ?? this.text,
        credit: credit ?? this.credit,
      );
}

extension PageBlockAnimationExtensions on PageBlockAnimation {
  PageBlockAnimation copyWith({
    Animation? animation,
    PageBlockCaption? caption,
    bool? needAutoplay,
  }) => PageBlockAnimation(
    animation: animation ?? this.animation,
    caption: caption ?? this.caption,
    needAutoplay: needAutoplay ?? this.needAutoplay,
  );
}

extension PageBlockAudioExtensions on PageBlockAudio {
  PageBlockAudio copyWith({Audio? audio, PageBlockCaption? caption}) =>
      PageBlockAudio(
        audio: audio ?? this.audio,
        caption: caption ?? this.caption,
      );
}

extension PageBlockPhotoExtensions on PageBlockPhoto {
  PageBlockPhoto copyWith({
    Photo? photo,
    PageBlockCaption? caption,
    String? url,
  }) => PageBlockPhoto(
    photo: photo ?? this.photo,
    caption: caption ?? this.caption,
    url: url ?? this.url,
  );
}

extension PageBlockVideoExtensions on PageBlockVideo {
  PageBlockVideo copyWith({
    Video? video,
    PageBlockCaption? caption,
    bool? needAutoplay,
    bool? isLooped,
  }) => PageBlockVideo(
    video: video ?? this.video,
    caption: caption ?? this.caption,
    needAutoplay: needAutoplay ?? this.needAutoplay,
    isLooped: isLooped ?? this.isLooped,
  );
}

extension PageBlockVoiceNoteExtensions on PageBlockVoiceNote {
  PageBlockVoiceNote copyWith({
    VoiceNote? voiceNote,
    PageBlockCaption? caption,
  }) => PageBlockVoiceNote(
    voiceNote: voiceNote ?? this.voiceNote,
    caption: caption ?? this.caption,
  );
}

extension PageBlockCoverExtensions on PageBlockCover {
  PageBlockCover copyWith({PageBlock? cover}) =>
      PageBlockCover(cover: cover ?? this.cover);
}

extension PageBlockEmbeddedExtensions on PageBlockEmbedded {
  PageBlockEmbedded copyWith({
    String? url,
    String? html,
    Photo? posterPhoto,
    int? width,
    int? height,
    PageBlockCaption? caption,
    bool? isFullWidth,
    bool? allowScrolling,
  }) => PageBlockEmbedded(
    url: url ?? this.url,
    html: html ?? this.html,
    posterPhoto: posterPhoto ?? this.posterPhoto,
    width: width ?? this.width,
    height: height ?? this.height,
    caption: caption ?? this.caption,
    isFullWidth: isFullWidth ?? this.isFullWidth,
    allowScrolling: allowScrolling ?? this.allowScrolling,
  );
}

extension PageBlockEmbeddedPostExtensions on PageBlockEmbeddedPost {
  PageBlockEmbeddedPost copyWith({
    String? url,
    String? author,
    Photo? authorPhoto,
    int? date,
    List<PageBlock>? pageBlocks,
    PageBlockCaption? caption,
  }) => PageBlockEmbeddedPost(
    url: url ?? this.url,
    author: author ?? this.author,
    authorPhoto: authorPhoto ?? this.authorPhoto,
    date: date ?? this.date,
    pageBlocks: pageBlocks ?? this.pageBlocks,
    caption: caption ?? this.caption,
  );
}

extension PageBlockCollageExtensions on PageBlockCollage {
  PageBlockCollage copyWith({
    List<PageBlock>? pageBlocks,
    PageBlockCaption? caption,
  }) => PageBlockCollage(
    pageBlocks: pageBlocks ?? this.pageBlocks,
    caption: caption ?? this.caption,
  );
}

extension PageBlockSlideshowExtensions on PageBlockSlideshow {
  PageBlockSlideshow copyWith({
    List<PageBlock>? pageBlocks,
    PageBlockCaption? caption,
  }) => PageBlockSlideshow(
    pageBlocks: pageBlocks ?? this.pageBlocks,
    caption: caption ?? this.caption,
  );
}

extension PageBlockChatLinkExtensions on PageBlockChatLink {
  PageBlockChatLink copyWith({
    String? title,
    ChatPhotoInfo? photo,
    int? accentColorId,
    String? username,
  }) => PageBlockChatLink(
    title: title ?? this.title,
    photo: photo ?? this.photo,
    accentColorId: accentColorId ?? this.accentColorId,
    username: username ?? this.username,
  );
}

extension PageBlockTableExtensions on PageBlockTable {
  PageBlockTable copyWith({
    RichText? caption,
    List<List<PageBlockTableCell>>? cells,
    bool? isBordered,
    bool? isStriped,
  }) => PageBlockTable(
    caption: caption ?? this.caption,
    cells: cells ?? this.cells,
    isBordered: isBordered ?? this.isBordered,
    isStriped: isStriped ?? this.isStriped,
  );
}

extension PageBlockDetailsExtensions on PageBlockDetails {
  PageBlockDetails copyWith({
    RichText? header,
    List<PageBlock>? pageBlocks,
    bool? isOpen,
  }) => PageBlockDetails(
    header: header ?? this.header,
    pageBlocks: pageBlocks ?? this.pageBlocks,
    isOpen: isOpen ?? this.isOpen,
  );
}

extension PageBlockRelatedArticlesExtensions on PageBlockRelatedArticles {
  PageBlockRelatedArticles copyWith({
    RichText? header,
    List<PageBlockRelatedArticle>? articles,
  }) => PageBlockRelatedArticles(
    header: header ?? this.header,
    articles: articles ?? this.articles,
  );
}

extension PageBlockMapExtensions on PageBlockMap {
  PageBlockMap copyWith({
    Location? location,
    int? zoom,
    int? width,
    int? height,
    PageBlockCaption? caption,
  }) => PageBlockMap(
    location: location ?? this.location,
    zoom: zoom ?? this.zoom,
    width: width ?? this.width,
    height: height ?? this.height,
    caption: caption ?? this.caption,
  );
}

extension WebPageInstantViewExtensions on WebPageInstantView {
  WebPageInstantView copyWith({
    List<PageBlock>? pageBlocks,
    int? viewCount,
    int? version,
    bool? isRtl,
    bool? isFull,
    InternalLinkType? feedbackLink,
  }) => WebPageInstantView(
    pageBlocks: pageBlocks ?? this.pageBlocks,
    viewCount: viewCount ?? this.viewCount,
    version: version ?? this.version,
    isRtl: isRtl ?? this.isRtl,
    isFull: isFull ?? this.isFull,
    feedbackLink: feedbackLink ?? this.feedbackLink,
  );
}

extension LinkPreviewAlbumMediaExtensions on LinkPreviewAlbumMedia {
  TResult map<TResult extends Object?>({
    required TResult Function(LinkPreviewAlbumMediaPhoto value) photo,
    required TResult Function(LinkPreviewAlbumMediaVideo value) video,
  }) {
    switch (getConstructor()) {
      case LinkPreviewAlbumMediaPhoto.constructor:
        return photo.call(this as LinkPreviewAlbumMediaPhoto);
      case LinkPreviewAlbumMediaVideo.constructor:
        return video.call(this as LinkPreviewAlbumMediaVideo);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(LinkPreviewAlbumMediaPhoto value)? photo,
    TResult Function(LinkPreviewAlbumMediaVideo value)? video,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case LinkPreviewAlbumMediaPhoto.constructor:
        if (photo != null) {
          return photo.call(this as LinkPreviewAlbumMediaPhoto);
        }
        break;
      case LinkPreviewAlbumMediaVideo.constructor:
        if (video != null) {
          return video.call(this as LinkPreviewAlbumMediaVideo);
        }
        break;
    }
    return orElse.call();
  }
}

extension LinkPreviewAlbumMediaPhotoExtensions on LinkPreviewAlbumMediaPhoto {
  LinkPreviewAlbumMediaPhoto copyWith({Photo? photo}) =>
      LinkPreviewAlbumMediaPhoto(photo: photo ?? this.photo);
}

extension LinkPreviewAlbumMediaVideoExtensions on LinkPreviewAlbumMediaVideo {
  LinkPreviewAlbumMediaVideo copyWith({Video? video}) =>
      LinkPreviewAlbumMediaVideo(video: video ?? this.video);
}

extension LinkPreviewTypeExtensions on LinkPreviewType {
  TResult map<TResult extends Object?>({
    required TResult Function(LinkPreviewTypeAlbum value) album,
    required TResult Function(LinkPreviewTypeAnimation value) animation,
    required TResult Function(LinkPreviewTypeApp value) app,
    required TResult Function(LinkPreviewTypeArticle value) article,
    required TResult Function(LinkPreviewTypeAudio value) audio,
    required TResult Function(LinkPreviewTypeBackground value) background,
    required TResult Function(LinkPreviewTypeChannelBoost value) channelBoost,
    required TResult Function(LinkPreviewTypeChat value) chat,
    required TResult Function(LinkPreviewTypeDocument value) document,
    required TResult Function(LinkPreviewTypeEmbeddedAnimationPlayer value)
    embeddedAnimationPlayer,
    required TResult Function(LinkPreviewTypeEmbeddedAudioPlayer value)
    embeddedAudioPlayer,
    required TResult Function(LinkPreviewTypeEmbeddedVideoPlayer value)
    embeddedVideoPlayer,
    required TResult Function(LinkPreviewTypeExternalAudio value) externalAudio,
    required TResult Function(LinkPreviewTypeExternalVideo value) externalVideo,
    required TResult Function(LinkPreviewTypeGroupCall value) groupCall,
    required TResult Function(LinkPreviewTypeInvoice value) invoice,
    required TResult Function(LinkPreviewTypeMessage value) message,
    required TResult Function(LinkPreviewTypePhoto value) photo,
    required TResult Function(LinkPreviewTypePremiumGiftCode value)
    premiumGiftCode,
    required TResult Function(LinkPreviewTypeShareableChatFolder value)
    shareableChatFolder,
    required TResult Function(LinkPreviewTypeSticker value) sticker,
    required TResult Function(LinkPreviewTypeStickerSet value) stickerSet,
    required TResult Function(LinkPreviewTypeStory value) story,
    required TResult Function(LinkPreviewTypeSupergroupBoost value)
    supergroupBoost,
    required TResult Function(LinkPreviewTypeTheme value) theme,
    required TResult Function(LinkPreviewTypeUnsupported value) unsupported,
    required TResult Function(LinkPreviewTypeUpgradedGift value) upgradedGift,
    required TResult Function(LinkPreviewTypeUser value) user,
    required TResult Function(LinkPreviewTypeVideo value) video,
    required TResult Function(LinkPreviewTypeVideoChat value) videoChat,
    required TResult Function(LinkPreviewTypeVideoNote value) videoNote,
    required TResult Function(LinkPreviewTypeVoiceNote value) voiceNote,
    required TResult Function(LinkPreviewTypeWebApp value) webApp,
  }) {
    switch (getConstructor()) {
      case LinkPreviewTypeAlbum.constructor:
        return album.call(this as LinkPreviewTypeAlbum);
      case LinkPreviewTypeAnimation.constructor:
        return animation.call(this as LinkPreviewTypeAnimation);
      case LinkPreviewTypeApp.constructor:
        return app.call(this as LinkPreviewTypeApp);
      case LinkPreviewTypeArticle.constructor:
        return article.call(this as LinkPreviewTypeArticle);
      case LinkPreviewTypeAudio.constructor:
        return audio.call(this as LinkPreviewTypeAudio);
      case LinkPreviewTypeBackground.constructor:
        return background.call(this as LinkPreviewTypeBackground);
      case LinkPreviewTypeChannelBoost.constructor:
        return channelBoost.call(this as LinkPreviewTypeChannelBoost);
      case LinkPreviewTypeChat.constructor:
        return chat.call(this as LinkPreviewTypeChat);
      case LinkPreviewTypeDocument.constructor:
        return document.call(this as LinkPreviewTypeDocument);
      case LinkPreviewTypeEmbeddedAnimationPlayer.constructor:
        return embeddedAnimationPlayer.call(
          this as LinkPreviewTypeEmbeddedAnimationPlayer,
        );
      case LinkPreviewTypeEmbeddedAudioPlayer.constructor:
        return embeddedAudioPlayer.call(
          this as LinkPreviewTypeEmbeddedAudioPlayer,
        );
      case LinkPreviewTypeEmbeddedVideoPlayer.constructor:
        return embeddedVideoPlayer.call(
          this as LinkPreviewTypeEmbeddedVideoPlayer,
        );
      case LinkPreviewTypeExternalAudio.constructor:
        return externalAudio.call(this as LinkPreviewTypeExternalAudio);
      case LinkPreviewTypeExternalVideo.constructor:
        return externalVideo.call(this as LinkPreviewTypeExternalVideo);
      case LinkPreviewTypeGroupCall.constructor:
        return groupCall.call(this as LinkPreviewTypeGroupCall);
      case LinkPreviewTypeInvoice.constructor:
        return invoice.call(this as LinkPreviewTypeInvoice);
      case LinkPreviewTypeMessage.constructor:
        return message.call(this as LinkPreviewTypeMessage);
      case LinkPreviewTypePhoto.constructor:
        return photo.call(this as LinkPreviewTypePhoto);
      case LinkPreviewTypePremiumGiftCode.constructor:
        return premiumGiftCode.call(this as LinkPreviewTypePremiumGiftCode);
      case LinkPreviewTypeShareableChatFolder.constructor:
        return shareableChatFolder.call(
          this as LinkPreviewTypeShareableChatFolder,
        );
      case LinkPreviewTypeSticker.constructor:
        return sticker.call(this as LinkPreviewTypeSticker);
      case LinkPreviewTypeStickerSet.constructor:
        return stickerSet.call(this as LinkPreviewTypeStickerSet);
      case LinkPreviewTypeStory.constructor:
        return story.call(this as LinkPreviewTypeStory);
      case LinkPreviewTypeSupergroupBoost.constructor:
        return supergroupBoost.call(this as LinkPreviewTypeSupergroupBoost);
      case LinkPreviewTypeTheme.constructor:
        return theme.call(this as LinkPreviewTypeTheme);
      case LinkPreviewTypeUnsupported.constructor:
        return unsupported.call(this as LinkPreviewTypeUnsupported);
      case LinkPreviewTypeUpgradedGift.constructor:
        return upgradedGift.call(this as LinkPreviewTypeUpgradedGift);
      case LinkPreviewTypeUser.constructor:
        return user.call(this as LinkPreviewTypeUser);
      case LinkPreviewTypeVideo.constructor:
        return video.call(this as LinkPreviewTypeVideo);
      case LinkPreviewTypeVideoChat.constructor:
        return videoChat.call(this as LinkPreviewTypeVideoChat);
      case LinkPreviewTypeVideoNote.constructor:
        return videoNote.call(this as LinkPreviewTypeVideoNote);
      case LinkPreviewTypeVoiceNote.constructor:
        return voiceNote.call(this as LinkPreviewTypeVoiceNote);
      case LinkPreviewTypeWebApp.constructor:
        return webApp.call(this as LinkPreviewTypeWebApp);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(LinkPreviewTypeAlbum value)? album,
    TResult Function(LinkPreviewTypeAnimation value)? animation,
    TResult Function(LinkPreviewTypeApp value)? app,
    TResult Function(LinkPreviewTypeArticle value)? article,
    TResult Function(LinkPreviewTypeAudio value)? audio,
    TResult Function(LinkPreviewTypeBackground value)? background,
    TResult Function(LinkPreviewTypeChannelBoost value)? channelBoost,
    TResult Function(LinkPreviewTypeChat value)? chat,
    TResult Function(LinkPreviewTypeDocument value)? document,
    TResult Function(LinkPreviewTypeEmbeddedAnimationPlayer value)?
    embeddedAnimationPlayer,
    TResult Function(LinkPreviewTypeEmbeddedAudioPlayer value)?
    embeddedAudioPlayer,
    TResult Function(LinkPreviewTypeEmbeddedVideoPlayer value)?
    embeddedVideoPlayer,
    TResult Function(LinkPreviewTypeExternalAudio value)? externalAudio,
    TResult Function(LinkPreviewTypeExternalVideo value)? externalVideo,
    TResult Function(LinkPreviewTypeGroupCall value)? groupCall,
    TResult Function(LinkPreviewTypeInvoice value)? invoice,
    TResult Function(LinkPreviewTypeMessage value)? message,
    TResult Function(LinkPreviewTypePhoto value)? photo,
    TResult Function(LinkPreviewTypePremiumGiftCode value)? premiumGiftCode,
    TResult Function(LinkPreviewTypeShareableChatFolder value)?
    shareableChatFolder,
    TResult Function(LinkPreviewTypeSticker value)? sticker,
    TResult Function(LinkPreviewTypeStickerSet value)? stickerSet,
    TResult Function(LinkPreviewTypeStory value)? story,
    TResult Function(LinkPreviewTypeSupergroupBoost value)? supergroupBoost,
    TResult Function(LinkPreviewTypeTheme value)? theme,
    TResult Function(LinkPreviewTypeUnsupported value)? unsupported,
    TResult Function(LinkPreviewTypeUpgradedGift value)? upgradedGift,
    TResult Function(LinkPreviewTypeUser value)? user,
    TResult Function(LinkPreviewTypeVideo value)? video,
    TResult Function(LinkPreviewTypeVideoChat value)? videoChat,
    TResult Function(LinkPreviewTypeVideoNote value)? videoNote,
    TResult Function(LinkPreviewTypeVoiceNote value)? voiceNote,
    TResult Function(LinkPreviewTypeWebApp value)? webApp,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case LinkPreviewTypeAlbum.constructor:
        if (album != null) {
          return album.call(this as LinkPreviewTypeAlbum);
        }
        break;
      case LinkPreviewTypeAnimation.constructor:
        if (animation != null) {
          return animation.call(this as LinkPreviewTypeAnimation);
        }
        break;
      case LinkPreviewTypeApp.constructor:
        if (app != null) {
          return app.call(this as LinkPreviewTypeApp);
        }
        break;
      case LinkPreviewTypeArticle.constructor:
        if (article != null) {
          return article.call(this as LinkPreviewTypeArticle);
        }
        break;
      case LinkPreviewTypeAudio.constructor:
        if (audio != null) {
          return audio.call(this as LinkPreviewTypeAudio);
        }
        break;
      case LinkPreviewTypeBackground.constructor:
        if (background != null) {
          return background.call(this as LinkPreviewTypeBackground);
        }
        break;
      case LinkPreviewTypeChannelBoost.constructor:
        if (channelBoost != null) {
          return channelBoost.call(this as LinkPreviewTypeChannelBoost);
        }
        break;
      case LinkPreviewTypeChat.constructor:
        if (chat != null) {
          return chat.call(this as LinkPreviewTypeChat);
        }
        break;
      case LinkPreviewTypeDocument.constructor:
        if (document != null) {
          return document.call(this as LinkPreviewTypeDocument);
        }
        break;
      case LinkPreviewTypeEmbeddedAnimationPlayer.constructor:
        if (embeddedAnimationPlayer != null) {
          return embeddedAnimationPlayer.call(
            this as LinkPreviewTypeEmbeddedAnimationPlayer,
          );
        }
        break;
      case LinkPreviewTypeEmbeddedAudioPlayer.constructor:
        if (embeddedAudioPlayer != null) {
          return embeddedAudioPlayer.call(
            this as LinkPreviewTypeEmbeddedAudioPlayer,
          );
        }
        break;
      case LinkPreviewTypeEmbeddedVideoPlayer.constructor:
        if (embeddedVideoPlayer != null) {
          return embeddedVideoPlayer.call(
            this as LinkPreviewTypeEmbeddedVideoPlayer,
          );
        }
        break;
      case LinkPreviewTypeExternalAudio.constructor:
        if (externalAudio != null) {
          return externalAudio.call(this as LinkPreviewTypeExternalAudio);
        }
        break;
      case LinkPreviewTypeExternalVideo.constructor:
        if (externalVideo != null) {
          return externalVideo.call(this as LinkPreviewTypeExternalVideo);
        }
        break;
      case LinkPreviewTypeGroupCall.constructor:
        if (groupCall != null) {
          return groupCall.call(this as LinkPreviewTypeGroupCall);
        }
        break;
      case LinkPreviewTypeInvoice.constructor:
        if (invoice != null) {
          return invoice.call(this as LinkPreviewTypeInvoice);
        }
        break;
      case LinkPreviewTypeMessage.constructor:
        if (message != null) {
          return message.call(this as LinkPreviewTypeMessage);
        }
        break;
      case LinkPreviewTypePhoto.constructor:
        if (photo != null) {
          return photo.call(this as LinkPreviewTypePhoto);
        }
        break;
      case LinkPreviewTypePremiumGiftCode.constructor:
        if (premiumGiftCode != null) {
          return premiumGiftCode.call(this as LinkPreviewTypePremiumGiftCode);
        }
        break;
      case LinkPreviewTypeShareableChatFolder.constructor:
        if (shareableChatFolder != null) {
          return shareableChatFolder.call(
            this as LinkPreviewTypeShareableChatFolder,
          );
        }
        break;
      case LinkPreviewTypeSticker.constructor:
        if (sticker != null) {
          return sticker.call(this as LinkPreviewTypeSticker);
        }
        break;
      case LinkPreviewTypeStickerSet.constructor:
        if (stickerSet != null) {
          return stickerSet.call(this as LinkPreviewTypeStickerSet);
        }
        break;
      case LinkPreviewTypeStory.constructor:
        if (story != null) {
          return story.call(this as LinkPreviewTypeStory);
        }
        break;
      case LinkPreviewTypeSupergroupBoost.constructor:
        if (supergroupBoost != null) {
          return supergroupBoost.call(this as LinkPreviewTypeSupergroupBoost);
        }
        break;
      case LinkPreviewTypeTheme.constructor:
        if (theme != null) {
          return theme.call(this as LinkPreviewTypeTheme);
        }
        break;
      case LinkPreviewTypeUnsupported.constructor:
        if (unsupported != null) {
          return unsupported.call(this as LinkPreviewTypeUnsupported);
        }
        break;
      case LinkPreviewTypeUpgradedGift.constructor:
        if (upgradedGift != null) {
          return upgradedGift.call(this as LinkPreviewTypeUpgradedGift);
        }
        break;
      case LinkPreviewTypeUser.constructor:
        if (user != null) {
          return user.call(this as LinkPreviewTypeUser);
        }
        break;
      case LinkPreviewTypeVideo.constructor:
        if (video != null) {
          return video.call(this as LinkPreviewTypeVideo);
        }
        break;
      case LinkPreviewTypeVideoChat.constructor:
        if (videoChat != null) {
          return videoChat.call(this as LinkPreviewTypeVideoChat);
        }
        break;
      case LinkPreviewTypeVideoNote.constructor:
        if (videoNote != null) {
          return videoNote.call(this as LinkPreviewTypeVideoNote);
        }
        break;
      case LinkPreviewTypeVoiceNote.constructor:
        if (voiceNote != null) {
          return voiceNote.call(this as LinkPreviewTypeVoiceNote);
        }
        break;
      case LinkPreviewTypeWebApp.constructor:
        if (webApp != null) {
          return webApp.call(this as LinkPreviewTypeWebApp);
        }
        break;
    }
    return orElse.call();
  }
}

extension LinkPreviewTypeAlbumExtensions on LinkPreviewTypeAlbum {
  LinkPreviewTypeAlbum copyWith({
    List<LinkPreviewAlbumMedia>? media,
    String? caption,
  }) => LinkPreviewTypeAlbum(
    media: media ?? this.media,
    caption: caption ?? this.caption,
  );
}

extension LinkPreviewTypeAnimationExtensions on LinkPreviewTypeAnimation {
  LinkPreviewTypeAnimation copyWith({Animation? animation}) =>
      LinkPreviewTypeAnimation(animation: animation ?? this.animation);
}

extension LinkPreviewTypeAppExtensions on LinkPreviewTypeApp {
  LinkPreviewTypeApp copyWith({Photo? photo}) =>
      LinkPreviewTypeApp(photo: photo ?? this.photo);
}

extension LinkPreviewTypeArticleExtensions on LinkPreviewTypeArticle {
  LinkPreviewTypeArticle copyWith({Photo? photo}) =>
      LinkPreviewTypeArticle(photo: photo ?? this.photo);
}

extension LinkPreviewTypeAudioExtensions on LinkPreviewTypeAudio {
  LinkPreviewTypeAudio copyWith({Audio? audio}) =>
      LinkPreviewTypeAudio(audio: audio ?? this.audio);
}

extension LinkPreviewTypeBackgroundExtensions on LinkPreviewTypeBackground {
  LinkPreviewTypeBackground copyWith({
    Document? document,
    BackgroundType? backgroundType,
  }) => LinkPreviewTypeBackground(
    document: document ?? this.document,
    backgroundType: backgroundType ?? this.backgroundType,
  );
}

extension LinkPreviewTypeChannelBoostExtensions on LinkPreviewTypeChannelBoost {
  LinkPreviewTypeChannelBoost copyWith({ChatPhoto? photo}) =>
      LinkPreviewTypeChannelBoost(photo: photo ?? this.photo);
}

extension LinkPreviewTypeChatExtensions on LinkPreviewTypeChat {
  LinkPreviewTypeChat copyWith({
    InviteLinkChatType? type,
    ChatPhoto? photo,
    bool? createsJoinRequest,
  }) => LinkPreviewTypeChat(
    type: type ?? this.type,
    photo: photo ?? this.photo,
    createsJoinRequest: createsJoinRequest ?? this.createsJoinRequest,
  );
}

extension LinkPreviewTypeDocumentExtensions on LinkPreviewTypeDocument {
  LinkPreviewTypeDocument copyWith({Document? document}) =>
      LinkPreviewTypeDocument(document: document ?? this.document);
}

extension LinkPreviewTypeEmbeddedAnimationPlayerExtensions
    on LinkPreviewTypeEmbeddedAnimationPlayer {
  LinkPreviewTypeEmbeddedAnimationPlayer copyWith({
    String? url,
    Photo? thumbnail,
    int? duration,
    int? width,
    int? height,
  }) => LinkPreviewTypeEmbeddedAnimationPlayer(
    url: url ?? this.url,
    thumbnail: thumbnail ?? this.thumbnail,
    duration: duration ?? this.duration,
    width: width ?? this.width,
    height: height ?? this.height,
  );
}

extension LinkPreviewTypeEmbeddedAudioPlayerExtensions
    on LinkPreviewTypeEmbeddedAudioPlayer {
  LinkPreviewTypeEmbeddedAudioPlayer copyWith({
    String? url,
    Photo? thumbnail,
    int? duration,
    int? width,
    int? height,
  }) => LinkPreviewTypeEmbeddedAudioPlayer(
    url: url ?? this.url,
    thumbnail: thumbnail ?? this.thumbnail,
    duration: duration ?? this.duration,
    width: width ?? this.width,
    height: height ?? this.height,
  );
}

extension LinkPreviewTypeEmbeddedVideoPlayerExtensions
    on LinkPreviewTypeEmbeddedVideoPlayer {
  LinkPreviewTypeEmbeddedVideoPlayer copyWith({
    String? url,
    Photo? thumbnail,
    int? duration,
    int? width,
    int? height,
  }) => LinkPreviewTypeEmbeddedVideoPlayer(
    url: url ?? this.url,
    thumbnail: thumbnail ?? this.thumbnail,
    duration: duration ?? this.duration,
    width: width ?? this.width,
    height: height ?? this.height,
  );
}

extension LinkPreviewTypeExternalAudioExtensions
    on LinkPreviewTypeExternalAudio {
  LinkPreviewTypeExternalAudio copyWith({
    String? url,
    String? mimeType,
    int? duration,
  }) => LinkPreviewTypeExternalAudio(
    url: url ?? this.url,
    mimeType: mimeType ?? this.mimeType,
    duration: duration ?? this.duration,
  );
}

extension LinkPreviewTypeExternalVideoExtensions
    on LinkPreviewTypeExternalVideo {
  LinkPreviewTypeExternalVideo copyWith({
    String? url,
    String? mimeType,
    int? width,
    int? height,
    int? duration,
  }) => LinkPreviewTypeExternalVideo(
    url: url ?? this.url,
    mimeType: mimeType ?? this.mimeType,
    width: width ?? this.width,
    height: height ?? this.height,
    duration: duration ?? this.duration,
  );
}

extension LinkPreviewTypePhotoExtensions on LinkPreviewTypePhoto {
  LinkPreviewTypePhoto copyWith({Photo? photo}) =>
      LinkPreviewTypePhoto(photo: photo ?? this.photo);
}

extension LinkPreviewTypeStickerExtensions on LinkPreviewTypeSticker {
  LinkPreviewTypeSticker copyWith({Sticker? sticker}) =>
      LinkPreviewTypeSticker(sticker: sticker ?? this.sticker);
}

extension LinkPreviewTypeStickerSetExtensions on LinkPreviewTypeStickerSet {
  LinkPreviewTypeStickerSet copyWith({List<Sticker>? stickers}) =>
      LinkPreviewTypeStickerSet(stickers: stickers ?? this.stickers);
}

extension LinkPreviewTypeStoryExtensions on LinkPreviewTypeStory {
  LinkPreviewTypeStory copyWith({int? storyPosterChatId, int? storyId}) =>
      LinkPreviewTypeStory(
        storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
        storyId: storyId ?? this.storyId,
      );
}

extension LinkPreviewTypeSupergroupBoostExtensions
    on LinkPreviewTypeSupergroupBoost {
  LinkPreviewTypeSupergroupBoost copyWith({ChatPhoto? photo}) =>
      LinkPreviewTypeSupergroupBoost(photo: photo ?? this.photo);
}

extension LinkPreviewTypeThemeExtensions on LinkPreviewTypeTheme {
  LinkPreviewTypeTheme copyWith({
    List<Document>? documents,
    ThemeSettings? settings,
  }) => LinkPreviewTypeTheme(
    documents: documents ?? this.documents,
    settings: settings ?? this.settings,
  );
}

extension LinkPreviewTypeUpgradedGiftExtensions on LinkPreviewTypeUpgradedGift {
  LinkPreviewTypeUpgradedGift copyWith({UpgradedGift? gift}) =>
      LinkPreviewTypeUpgradedGift(gift: gift ?? this.gift);
}

extension LinkPreviewTypeUserExtensions on LinkPreviewTypeUser {
  LinkPreviewTypeUser copyWith({ChatPhoto? photo, bool? isBot}) =>
      LinkPreviewTypeUser(
        photo: photo ?? this.photo,
        isBot: isBot ?? this.isBot,
      );
}

extension LinkPreviewTypeVideoExtensions on LinkPreviewTypeVideo {
  LinkPreviewTypeVideo copyWith({
    Video? video,
    Photo? cover,
    int? startTimestamp,
  }) => LinkPreviewTypeVideo(
    video: video ?? this.video,
    cover: cover ?? this.cover,
    startTimestamp: startTimestamp ?? this.startTimestamp,
  );
}

extension LinkPreviewTypeVideoChatExtensions on LinkPreviewTypeVideoChat {
  LinkPreviewTypeVideoChat copyWith({ChatPhoto? photo, bool? isLiveStream}) =>
      LinkPreviewTypeVideoChat(
        photo: photo ?? this.photo,
        isLiveStream: isLiveStream ?? this.isLiveStream,
      );
}

extension LinkPreviewTypeVideoNoteExtensions on LinkPreviewTypeVideoNote {
  LinkPreviewTypeVideoNote copyWith({VideoNote? videoNote}) =>
      LinkPreviewTypeVideoNote(videoNote: videoNote ?? this.videoNote);
}

extension LinkPreviewTypeVoiceNoteExtensions on LinkPreviewTypeVoiceNote {
  LinkPreviewTypeVoiceNote copyWith({VoiceNote? voiceNote}) =>
      LinkPreviewTypeVoiceNote(voiceNote: voiceNote ?? this.voiceNote);
}

extension LinkPreviewTypeWebAppExtensions on LinkPreviewTypeWebApp {
  LinkPreviewTypeWebApp copyWith({Photo? photo}) =>
      LinkPreviewTypeWebApp(photo: photo ?? this.photo);
}

extension LinkPreviewExtensions on LinkPreview {
  LinkPreview copyWith({
    String? url,
    String? displayUrl,
    String? siteName,
    String? title,
    FormattedText? description,
    String? author,
    LinkPreviewType? type,
    bool? hasLargeMedia,
    bool? showLargeMedia,
    bool? showMediaAboveDescription,
    bool? skipConfirmation,
    bool? showAboveText,
    int? instantViewVersion,
  }) => LinkPreview(
    url: url ?? this.url,
    displayUrl: displayUrl ?? this.displayUrl,
    siteName: siteName ?? this.siteName,
    title: title ?? this.title,
    description: description ?? this.description,
    author: author ?? this.author,
    type: type ?? this.type,
    hasLargeMedia: hasLargeMedia ?? this.hasLargeMedia,
    showLargeMedia: showLargeMedia ?? this.showLargeMedia,
    showMediaAboveDescription:
        showMediaAboveDescription ?? this.showMediaAboveDescription,
    skipConfirmation: skipConfirmation ?? this.skipConfirmation,
    showAboveText: showAboveText ?? this.showAboveText,
    instantViewVersion: instantViewVersion ?? this.instantViewVersion,
  );
}

extension CountryInfoExtensions on CountryInfo {
  CountryInfo copyWith({
    String? countryCode,
    String? name,
    String? englishName,
    bool? isHidden,
    List<String>? callingCodes,
  }) => CountryInfo(
    countryCode: countryCode ?? this.countryCode,
    name: name ?? this.name,
    englishName: englishName ?? this.englishName,
    isHidden: isHidden ?? this.isHidden,
    callingCodes: callingCodes ?? this.callingCodes,
  );
}

extension CountriesExtensions on Countries {
  Countries copyWith({List<CountryInfo>? countries}) =>
      Countries(countries: countries ?? this.countries);
}

extension PhoneNumberInfoExtensions on PhoneNumberInfo {
  PhoneNumberInfo copyWith({
    CountryInfo? country,
    String? countryCallingCode,
    String? formattedPhoneNumber,
    bool? isAnonymous,
  }) => PhoneNumberInfo(
    country: country ?? this.country,
    countryCallingCode: countryCallingCode ?? this.countryCallingCode,
    formattedPhoneNumber: formattedPhoneNumber ?? this.formattedPhoneNumber,
    isAnonymous: isAnonymous ?? this.isAnonymous,
  );
}

extension CollectibleItemTypeExtensions on CollectibleItemType {
  TResult map<TResult extends Object?>({
    required TResult Function(CollectibleItemTypeUsername value) username,
    required TResult Function(CollectibleItemTypePhoneNumber value) phoneNumber,
  }) {
    switch (getConstructor()) {
      case CollectibleItemTypeUsername.constructor:
        return username.call(this as CollectibleItemTypeUsername);
      case CollectibleItemTypePhoneNumber.constructor:
        return phoneNumber.call(this as CollectibleItemTypePhoneNumber);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(CollectibleItemTypeUsername value)? username,
    TResult Function(CollectibleItemTypePhoneNumber value)? phoneNumber,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case CollectibleItemTypeUsername.constructor:
        if (username != null) {
          return username.call(this as CollectibleItemTypeUsername);
        }
        break;
      case CollectibleItemTypePhoneNumber.constructor:
        if (phoneNumber != null) {
          return phoneNumber.call(this as CollectibleItemTypePhoneNumber);
        }
        break;
    }
    return orElse.call();
  }
}

extension CollectibleItemTypeUsernameExtensions on CollectibleItemTypeUsername {
  CollectibleItemTypeUsername copyWith({String? username}) =>
      CollectibleItemTypeUsername(username: username ?? this.username);
}

extension CollectibleItemTypePhoneNumberExtensions
    on CollectibleItemTypePhoneNumber {
  CollectibleItemTypePhoneNumber copyWith({String? phoneNumber}) =>
      CollectibleItemTypePhoneNumber(
        phoneNumber: phoneNumber ?? this.phoneNumber,
      );
}

extension CollectibleItemInfoExtensions on CollectibleItemInfo {
  CollectibleItemInfo copyWith({
    int? purchaseDate,
    String? currency,
    int? amount,
    String? cryptocurrency,
    int? cryptocurrencyAmount,
    String? url,
  }) => CollectibleItemInfo(
    purchaseDate: purchaseDate ?? this.purchaseDate,
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    cryptocurrency: cryptocurrency ?? this.cryptocurrency,
    cryptocurrencyAmount: cryptocurrencyAmount ?? this.cryptocurrencyAmount,
    url: url ?? this.url,
  );
}

extension BankCardActionOpenUrlExtensions on BankCardActionOpenUrl {
  BankCardActionOpenUrl copyWith({String? text, String? url}) =>
      BankCardActionOpenUrl(text: text ?? this.text, url: url ?? this.url);
}

extension BankCardInfoExtensions on BankCardInfo {
  BankCardInfo copyWith({
    String? title,
    List<BankCardActionOpenUrl>? actions,
  }) => BankCardInfo(
    title: title ?? this.title,
    actions: actions ?? this.actions,
  );
}

extension AddressExtensions on Address {
  Address copyWith({
    String? countryCode,
    String? state,
    String? city,
    String? streetLine1,
    String? streetLine2,
    String? postalCode,
  }) => Address(
    countryCode: countryCode ?? this.countryCode,
    state: state ?? this.state,
    city: city ?? this.city,
    streetLine1: streetLine1 ?? this.streetLine1,
    streetLine2: streetLine2 ?? this.streetLine2,
    postalCode: postalCode ?? this.postalCode,
  );
}

extension LocationAddressExtensions on LocationAddress {
  LocationAddress copyWith({
    String? countryCode,
    String? state,
    String? city,
    String? street,
  }) => LocationAddress(
    countryCode: countryCode ?? this.countryCode,
    state: state ?? this.state,
    city: city ?? this.city,
    street: street ?? this.street,
  );
}

extension LabeledPricePartExtensions on LabeledPricePart {
  LabeledPricePart copyWith({String? label, int? amount}) => LabeledPricePart(
    label: label ?? this.label,
    amount: amount ?? this.amount,
  );
}

extension InvoiceExtensions on Invoice {
  Invoice copyWith({
    String? currency,
    List<LabeledPricePart>? priceParts,
    int? subscriptionPeriod,
    int? maxTipAmount,
    List<int>? suggestedTipAmounts,
    String? recurringPaymentTermsOfServiceUrl,
    String? termsOfServiceUrl,
    bool? isTest,
    bool? needName,
    bool? needPhoneNumber,
    bool? needEmailAddress,
    bool? needShippingAddress,
    bool? sendPhoneNumberToProvider,
    bool? sendEmailAddressToProvider,
    bool? isFlexible,
  }) => Invoice(
    currency: currency ?? this.currency,
    priceParts: priceParts ?? this.priceParts,
    subscriptionPeriod: subscriptionPeriod ?? this.subscriptionPeriod,
    maxTipAmount: maxTipAmount ?? this.maxTipAmount,
    suggestedTipAmounts: suggestedTipAmounts ?? this.suggestedTipAmounts,
    recurringPaymentTermsOfServiceUrl:
        recurringPaymentTermsOfServiceUrl ??
        this.recurringPaymentTermsOfServiceUrl,
    termsOfServiceUrl: termsOfServiceUrl ?? this.termsOfServiceUrl,
    isTest: isTest ?? this.isTest,
    needName: needName ?? this.needName,
    needPhoneNumber: needPhoneNumber ?? this.needPhoneNumber,
    needEmailAddress: needEmailAddress ?? this.needEmailAddress,
    needShippingAddress: needShippingAddress ?? this.needShippingAddress,
    sendPhoneNumberToProvider:
        sendPhoneNumberToProvider ?? this.sendPhoneNumberToProvider,
    sendEmailAddressToProvider:
        sendEmailAddressToProvider ?? this.sendEmailAddressToProvider,
    isFlexible: isFlexible ?? this.isFlexible,
  );
}

extension OrderInfoExtensions on OrderInfo {
  OrderInfo copyWith({
    String? name,
    String? phoneNumber,
    String? emailAddress,
    Address? shippingAddress,
  }) => OrderInfo(
    name: name ?? this.name,
    phoneNumber: phoneNumber ?? this.phoneNumber,
    emailAddress: emailAddress ?? this.emailAddress,
    shippingAddress: shippingAddress ?? this.shippingAddress,
  );
}

extension ShippingOptionExtensions on ShippingOption {
  ShippingOption copyWith({
    String? id,
    String? title,
    List<LabeledPricePart>? priceParts,
  }) => ShippingOption(
    id: id ?? this.id,
    title: title ?? this.title,
    priceParts: priceParts ?? this.priceParts,
  );
}

extension SavedCredentialsExtensions on SavedCredentials {
  SavedCredentials copyWith({String? id, String? title}) =>
      SavedCredentials(id: id ?? this.id, title: title ?? this.title);
}

extension InputCredentialsExtensions on InputCredentials {
  TResult map<TResult extends Object?>({
    required TResult Function(InputCredentialsSaved value) saved,
    required TResult Function(InputCredentialsNew value) $new,
    required TResult Function(InputCredentialsApplePay value) applePay,
    required TResult Function(InputCredentialsGooglePay value) googlePay,
  }) {
    switch (getConstructor()) {
      case InputCredentialsSaved.constructor:
        return saved.call(this as InputCredentialsSaved);
      case InputCredentialsNew.constructor:
        return $new.call(this as InputCredentialsNew);
      case InputCredentialsApplePay.constructor:
        return applePay.call(this as InputCredentialsApplePay);
      case InputCredentialsGooglePay.constructor:
        return googlePay.call(this as InputCredentialsGooglePay);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InputCredentialsSaved value)? saved,
    TResult Function(InputCredentialsNew value)? $new,
    TResult Function(InputCredentialsApplePay value)? applePay,
    TResult Function(InputCredentialsGooglePay value)? googlePay,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InputCredentialsSaved.constructor:
        if (saved != null) {
          return saved.call(this as InputCredentialsSaved);
        }
        break;
      case InputCredentialsNew.constructor:
        if ($new != null) {
          return $new.call(this as InputCredentialsNew);
        }
        break;
      case InputCredentialsApplePay.constructor:
        if (applePay != null) {
          return applePay.call(this as InputCredentialsApplePay);
        }
        break;
      case InputCredentialsGooglePay.constructor:
        if (googlePay != null) {
          return googlePay.call(this as InputCredentialsGooglePay);
        }
        break;
    }
    return orElse.call();
  }
}

extension InputCredentialsSavedExtensions on InputCredentialsSaved {
  InputCredentialsSaved copyWith({String? savedCredentialsId}) =>
      InputCredentialsSaved(
        savedCredentialsId: savedCredentialsId ?? this.savedCredentialsId,
      );
}

extension InputCredentialsNewExtensions on InputCredentialsNew {
  InputCredentialsNew copyWith({String? data, bool? allowSave}) =>
      InputCredentialsNew(
        data: data ?? this.data,
        allowSave: allowSave ?? this.allowSave,
      );
}

extension InputCredentialsApplePayExtensions on InputCredentialsApplePay {
  InputCredentialsApplePay copyWith({String? data}) =>
      InputCredentialsApplePay(data: data ?? this.data);
}

extension InputCredentialsGooglePayExtensions on InputCredentialsGooglePay {
  InputCredentialsGooglePay copyWith({String? data}) =>
      InputCredentialsGooglePay(data: data ?? this.data);
}

extension PaymentProviderExtensions on PaymentProvider {
  TResult map<TResult extends Object?>({
    required TResult Function(PaymentProviderSmartGlocal value) smartGlocal,
    required TResult Function(PaymentProviderStripe value) stripe,
    required TResult Function(PaymentProviderOther value) other,
  }) {
    switch (getConstructor()) {
      case PaymentProviderSmartGlocal.constructor:
        return smartGlocal.call(this as PaymentProviderSmartGlocal);
      case PaymentProviderStripe.constructor:
        return stripe.call(this as PaymentProviderStripe);
      case PaymentProviderOther.constructor:
        return other.call(this as PaymentProviderOther);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PaymentProviderSmartGlocal value)? smartGlocal,
    TResult Function(PaymentProviderStripe value)? stripe,
    TResult Function(PaymentProviderOther value)? other,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PaymentProviderSmartGlocal.constructor:
        if (smartGlocal != null) {
          return smartGlocal.call(this as PaymentProviderSmartGlocal);
        }
        break;
      case PaymentProviderStripe.constructor:
        if (stripe != null) {
          return stripe.call(this as PaymentProviderStripe);
        }
        break;
      case PaymentProviderOther.constructor:
        if (other != null) {
          return other.call(this as PaymentProviderOther);
        }
        break;
    }
    return orElse.call();
  }
}

extension PaymentProviderSmartGlocalExtensions on PaymentProviderSmartGlocal {
  PaymentProviderSmartGlocal copyWith({
    String? publicToken,
    String? tokenizeUrl,
  }) => PaymentProviderSmartGlocal(
    publicToken: publicToken ?? this.publicToken,
    tokenizeUrl: tokenizeUrl ?? this.tokenizeUrl,
  );
}

extension PaymentProviderStripeExtensions on PaymentProviderStripe {
  PaymentProviderStripe copyWith({
    String? publishableKey,
    bool? needCountry,
    bool? needPostalCode,
    bool? needCardholderName,
  }) => PaymentProviderStripe(
    publishableKey: publishableKey ?? this.publishableKey,
    needCountry: needCountry ?? this.needCountry,
    needPostalCode: needPostalCode ?? this.needPostalCode,
    needCardholderName: needCardholderName ?? this.needCardholderName,
  );
}

extension PaymentProviderOtherExtensions on PaymentProviderOther {
  PaymentProviderOther copyWith({String? url}) =>
      PaymentProviderOther(url: url ?? this.url);
}

extension PaymentOptionExtensions on PaymentOption {
  PaymentOption copyWith({String? title, String? url}) =>
      PaymentOption(title: title ?? this.title, url: url ?? this.url);
}

extension PaymentFormTypeExtensions on PaymentFormType {
  TResult map<TResult extends Object?>({
    required TResult Function(PaymentFormTypeRegular value) regular,
    required TResult Function(PaymentFormTypeStars value) stars,
    required TResult Function(PaymentFormTypeStarSubscription value)
    starSubscription,
  }) {
    switch (getConstructor()) {
      case PaymentFormTypeRegular.constructor:
        return regular.call(this as PaymentFormTypeRegular);
      case PaymentFormTypeStars.constructor:
        return stars.call(this as PaymentFormTypeStars);
      case PaymentFormTypeStarSubscription.constructor:
        return starSubscription.call(this as PaymentFormTypeStarSubscription);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PaymentFormTypeRegular value)? regular,
    TResult Function(PaymentFormTypeStars value)? stars,
    TResult Function(PaymentFormTypeStarSubscription value)? starSubscription,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PaymentFormTypeRegular.constructor:
        if (regular != null) {
          return regular.call(this as PaymentFormTypeRegular);
        }
        break;
      case PaymentFormTypeStars.constructor:
        if (stars != null) {
          return stars.call(this as PaymentFormTypeStars);
        }
        break;
      case PaymentFormTypeStarSubscription.constructor:
        if (starSubscription != null) {
          return starSubscription.call(this as PaymentFormTypeStarSubscription);
        }
        break;
    }
    return orElse.call();
  }
}

extension PaymentFormTypeRegularExtensions on PaymentFormTypeRegular {
  PaymentFormTypeRegular copyWith({
    Invoice? invoice,
    int? paymentProviderUserId,
    PaymentProvider? paymentProvider,
    List<PaymentOption>? additionalPaymentOptions,
    OrderInfo? savedOrderInfo,
    List<SavedCredentials>? savedCredentials,
    bool? canSaveCredentials,
    bool? needPassword,
  }) => PaymentFormTypeRegular(
    invoice: invoice ?? this.invoice,
    paymentProviderUserId: paymentProviderUserId ?? this.paymentProviderUserId,
    paymentProvider: paymentProvider ?? this.paymentProvider,
    additionalPaymentOptions:
        additionalPaymentOptions ?? this.additionalPaymentOptions,
    savedOrderInfo: savedOrderInfo ?? this.savedOrderInfo,
    savedCredentials: savedCredentials ?? this.savedCredentials,
    canSaveCredentials: canSaveCredentials ?? this.canSaveCredentials,
    needPassword: needPassword ?? this.needPassword,
  );
}

extension PaymentFormTypeStarsExtensions on PaymentFormTypeStars {
  PaymentFormTypeStars copyWith({int? starCount}) =>
      PaymentFormTypeStars(starCount: starCount ?? this.starCount);
}

extension PaymentFormTypeStarSubscriptionExtensions
    on PaymentFormTypeStarSubscription {
  PaymentFormTypeStarSubscription copyWith({
    StarSubscriptionPricing? pricing,
  }) => PaymentFormTypeStarSubscription(pricing: pricing ?? this.pricing);
}

extension PaymentFormExtensions on PaymentForm {
  PaymentForm copyWith({
    int? id,
    PaymentFormType? type,
    int? sellerBotUserId,
    ProductInfo? productInfo,
  }) => PaymentForm(
    id: id ?? this.id,
    type: type ?? this.type,
    sellerBotUserId: sellerBotUserId ?? this.sellerBotUserId,
    productInfo: productInfo ?? this.productInfo,
  );
}

extension ValidatedOrderInfoExtensions on ValidatedOrderInfo {
  ValidatedOrderInfo copyWith({
    String? orderInfoId,
    List<ShippingOption>? shippingOptions,
  }) => ValidatedOrderInfo(
    orderInfoId: orderInfoId ?? this.orderInfoId,
    shippingOptions: shippingOptions ?? this.shippingOptions,
  );
}

extension PaymentResultExtensions on PaymentResult {
  PaymentResult copyWith({bool? success, String? verificationUrl}) =>
      PaymentResult(
        success: success ?? this.success,
        verificationUrl: verificationUrl ?? this.verificationUrl,
      );
}

extension PaymentReceiptTypeExtensions on PaymentReceiptType {
  TResult map<TResult extends Object?>({
    required TResult Function(PaymentReceiptTypeRegular value) regular,
    required TResult Function(PaymentReceiptTypeStars value) stars,
  }) {
    switch (getConstructor()) {
      case PaymentReceiptTypeRegular.constructor:
        return regular.call(this as PaymentReceiptTypeRegular);
      case PaymentReceiptTypeStars.constructor:
        return stars.call(this as PaymentReceiptTypeStars);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PaymentReceiptTypeRegular value)? regular,
    TResult Function(PaymentReceiptTypeStars value)? stars,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PaymentReceiptTypeRegular.constructor:
        if (regular != null) {
          return regular.call(this as PaymentReceiptTypeRegular);
        }
        break;
      case PaymentReceiptTypeStars.constructor:
        if (stars != null) {
          return stars.call(this as PaymentReceiptTypeStars);
        }
        break;
    }
    return orElse.call();
  }
}

extension PaymentReceiptTypeRegularExtensions on PaymentReceiptTypeRegular {
  PaymentReceiptTypeRegular copyWith({
    int? paymentProviderUserId,
    Invoice? invoice,
    OrderInfo? orderInfo,
    ShippingOption? shippingOption,
    String? credentialsTitle,
    int? tipAmount,
  }) => PaymentReceiptTypeRegular(
    paymentProviderUserId: paymentProviderUserId ?? this.paymentProviderUserId,
    invoice: invoice ?? this.invoice,
    orderInfo: orderInfo ?? this.orderInfo,
    shippingOption: shippingOption ?? this.shippingOption,
    credentialsTitle: credentialsTitle ?? this.credentialsTitle,
    tipAmount: tipAmount ?? this.tipAmount,
  );
}

extension PaymentReceiptTypeStarsExtensions on PaymentReceiptTypeStars {
  PaymentReceiptTypeStars copyWith({int? starCount, String? transactionId}) =>
      PaymentReceiptTypeStars(
        starCount: starCount ?? this.starCount,
        transactionId: transactionId ?? this.transactionId,
      );
}

extension PaymentReceiptExtensions on PaymentReceipt {
  PaymentReceipt copyWith({
    ProductInfo? productInfo,
    int? date,
    int? sellerBotUserId,
    PaymentReceiptType? type,
  }) => PaymentReceipt(
    productInfo: productInfo ?? this.productInfo,
    date: date ?? this.date,
    sellerBotUserId: sellerBotUserId ?? this.sellerBotUserId,
    type: type ?? this.type,
  );
}

extension InputInvoiceExtensions on InputInvoice {
  TResult map<TResult extends Object?>({
    required TResult Function(InputInvoiceMessage value) message,
    required TResult Function(InputInvoiceName value) name,
    required TResult Function(InputInvoiceTelegram value) telegram,
  }) {
    switch (getConstructor()) {
      case InputInvoiceMessage.constructor:
        return message.call(this as InputInvoiceMessage);
      case InputInvoiceName.constructor:
        return name.call(this as InputInvoiceName);
      case InputInvoiceTelegram.constructor:
        return telegram.call(this as InputInvoiceTelegram);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InputInvoiceMessage value)? message,
    TResult Function(InputInvoiceName value)? name,
    TResult Function(InputInvoiceTelegram value)? telegram,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InputInvoiceMessage.constructor:
        if (message != null) {
          return message.call(this as InputInvoiceMessage);
        }
        break;
      case InputInvoiceName.constructor:
        if (name != null) {
          return name.call(this as InputInvoiceName);
        }
        break;
      case InputInvoiceTelegram.constructor:
        if (telegram != null) {
          return telegram.call(this as InputInvoiceTelegram);
        }
        break;
    }
    return orElse.call();
  }
}

extension InputInvoiceMessageExtensions on InputInvoiceMessage {
  InputInvoiceMessage copyWith({int? chatId, int? messageId}) =>
      InputInvoiceMessage(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension InputInvoiceNameExtensions on InputInvoiceName {
  InputInvoiceName copyWith({String? name}) =>
      InputInvoiceName(name: name ?? this.name);
}

extension InputInvoiceTelegramExtensions on InputInvoiceTelegram {
  InputInvoiceTelegram copyWith({TelegramPaymentPurpose? purpose}) =>
      InputInvoiceTelegram(purpose: purpose ?? this.purpose);
}

extension PaidMediaExtensions on PaidMedia {
  TResult map<TResult extends Object?>({
    required TResult Function(PaidMediaPreview value) preview,
    required TResult Function(PaidMediaPhoto value) photo,
    required TResult Function(PaidMediaVideo value) video,
    required TResult Function(PaidMediaUnsupported value) unsupported,
  }) {
    switch (getConstructor()) {
      case PaidMediaPreview.constructor:
        return preview.call(this as PaidMediaPreview);
      case PaidMediaPhoto.constructor:
        return photo.call(this as PaidMediaPhoto);
      case PaidMediaVideo.constructor:
        return video.call(this as PaidMediaVideo);
      case PaidMediaUnsupported.constructor:
        return unsupported.call(this as PaidMediaUnsupported);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PaidMediaPreview value)? preview,
    TResult Function(PaidMediaPhoto value)? photo,
    TResult Function(PaidMediaVideo value)? video,
    TResult Function(PaidMediaUnsupported value)? unsupported,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PaidMediaPreview.constructor:
        if (preview != null) {
          return preview.call(this as PaidMediaPreview);
        }
        break;
      case PaidMediaPhoto.constructor:
        if (photo != null) {
          return photo.call(this as PaidMediaPhoto);
        }
        break;
      case PaidMediaVideo.constructor:
        if (video != null) {
          return video.call(this as PaidMediaVideo);
        }
        break;
      case PaidMediaUnsupported.constructor:
        if (unsupported != null) {
          return unsupported.call(this as PaidMediaUnsupported);
        }
        break;
    }
    return orElse.call();
  }
}

extension PaidMediaPreviewExtensions on PaidMediaPreview {
  PaidMediaPreview copyWith({
    int? width,
    int? height,
    int? duration,
    Minithumbnail? minithumbnail,
  }) => PaidMediaPreview(
    width: width ?? this.width,
    height: height ?? this.height,
    duration: duration ?? this.duration,
    minithumbnail: minithumbnail ?? this.minithumbnail,
  );
}

extension PaidMediaPhotoExtensions on PaidMediaPhoto {
  PaidMediaPhoto copyWith({Photo? photo}) =>
      PaidMediaPhoto(photo: photo ?? this.photo);
}

extension PaidMediaVideoExtensions on PaidMediaVideo {
  PaidMediaVideo copyWith({Video? video, Photo? cover, int? startTimestamp}) =>
      PaidMediaVideo(
        video: video ?? this.video,
        cover: cover ?? this.cover,
        startTimestamp: startTimestamp ?? this.startTimestamp,
      );
}

extension GiveawayParametersExtensions on GiveawayParameters {
  GiveawayParameters copyWith({
    int? boostedChatId,
    List<int>? additionalChatIds,
    int? winnersSelectionDate,
    bool? onlyNewMembers,
    bool? hasPublicWinners,
    List<String>? countryCodes,
    String? prizeDescription,
  }) => GiveawayParameters(
    boostedChatId: boostedChatId ?? this.boostedChatId,
    additionalChatIds: additionalChatIds ?? this.additionalChatIds,
    winnersSelectionDate: winnersSelectionDate ?? this.winnersSelectionDate,
    onlyNewMembers: onlyNewMembers ?? this.onlyNewMembers,
    hasPublicWinners: hasPublicWinners ?? this.hasPublicWinners,
    countryCodes: countryCodes ?? this.countryCodes,
    prizeDescription: prizeDescription ?? this.prizeDescription,
  );
}

extension DatedFileExtensions on DatedFile {
  DatedFile copyWith({File? file, int? date}) =>
      DatedFile(file: file ?? this.file, date: date ?? this.date);
}

extension PassportElementTypeExtensions on PassportElementType {
  TResult map<TResult extends Object?>({
    required TResult Function(PassportElementTypePersonalDetails value)
    personalDetails,
    required TResult Function(PassportElementTypePassport value) passport,
    required TResult Function(PassportElementTypeDriverLicense value)
    driverLicense,
    required TResult Function(PassportElementTypeIdentityCard value)
    identityCard,
    required TResult Function(PassportElementTypeInternalPassport value)
    internalPassport,
    required TResult Function(PassportElementTypeAddress value) address,
    required TResult Function(PassportElementTypeUtilityBill value) utilityBill,
    required TResult Function(PassportElementTypeBankStatement value)
    bankStatement,
    required TResult Function(PassportElementTypeRentalAgreement value)
    rentalAgreement,
    required TResult Function(PassportElementTypePassportRegistration value)
    passportRegistration,
    required TResult Function(PassportElementTypeTemporaryRegistration value)
    temporaryRegistration,
    required TResult Function(PassportElementTypePhoneNumber value) phoneNumber,
    required TResult Function(PassportElementTypeEmailAddress value)
    emailAddress,
  }) {
    switch (getConstructor()) {
      case PassportElementTypePersonalDetails.constructor:
        return personalDetails.call(this as PassportElementTypePersonalDetails);
      case PassportElementTypePassport.constructor:
        return passport.call(this as PassportElementTypePassport);
      case PassportElementTypeDriverLicense.constructor:
        return driverLicense.call(this as PassportElementTypeDriverLicense);
      case PassportElementTypeIdentityCard.constructor:
        return identityCard.call(this as PassportElementTypeIdentityCard);
      case PassportElementTypeInternalPassport.constructor:
        return internalPassport.call(
          this as PassportElementTypeInternalPassport,
        );
      case PassportElementTypeAddress.constructor:
        return address.call(this as PassportElementTypeAddress);
      case PassportElementTypeUtilityBill.constructor:
        return utilityBill.call(this as PassportElementTypeUtilityBill);
      case PassportElementTypeBankStatement.constructor:
        return bankStatement.call(this as PassportElementTypeBankStatement);
      case PassportElementTypeRentalAgreement.constructor:
        return rentalAgreement.call(this as PassportElementTypeRentalAgreement);
      case PassportElementTypePassportRegistration.constructor:
        return passportRegistration.call(
          this as PassportElementTypePassportRegistration,
        );
      case PassportElementTypeTemporaryRegistration.constructor:
        return temporaryRegistration.call(
          this as PassportElementTypeTemporaryRegistration,
        );
      case PassportElementTypePhoneNumber.constructor:
        return phoneNumber.call(this as PassportElementTypePhoneNumber);
      case PassportElementTypeEmailAddress.constructor:
        return emailAddress.call(this as PassportElementTypeEmailAddress);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PassportElementTypePersonalDetails value)? personalDetails,
    TResult Function(PassportElementTypePassport value)? passport,
    TResult Function(PassportElementTypeDriverLicense value)? driverLicense,
    TResult Function(PassportElementTypeIdentityCard value)? identityCard,
    TResult Function(PassportElementTypeInternalPassport value)?
    internalPassport,
    TResult Function(PassportElementTypeAddress value)? address,
    TResult Function(PassportElementTypeUtilityBill value)? utilityBill,
    TResult Function(PassportElementTypeBankStatement value)? bankStatement,
    TResult Function(PassportElementTypeRentalAgreement value)? rentalAgreement,
    TResult Function(PassportElementTypePassportRegistration value)?
    passportRegistration,
    TResult Function(PassportElementTypeTemporaryRegistration value)?
    temporaryRegistration,
    TResult Function(PassportElementTypePhoneNumber value)? phoneNumber,
    TResult Function(PassportElementTypeEmailAddress value)? emailAddress,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PassportElementTypePersonalDetails.constructor:
        if (personalDetails != null) {
          return personalDetails.call(
            this as PassportElementTypePersonalDetails,
          );
        }
        break;
      case PassportElementTypePassport.constructor:
        if (passport != null) {
          return passport.call(this as PassportElementTypePassport);
        }
        break;
      case PassportElementTypeDriverLicense.constructor:
        if (driverLicense != null) {
          return driverLicense.call(this as PassportElementTypeDriverLicense);
        }
        break;
      case PassportElementTypeIdentityCard.constructor:
        if (identityCard != null) {
          return identityCard.call(this as PassportElementTypeIdentityCard);
        }
        break;
      case PassportElementTypeInternalPassport.constructor:
        if (internalPassport != null) {
          return internalPassport.call(
            this as PassportElementTypeInternalPassport,
          );
        }
        break;
      case PassportElementTypeAddress.constructor:
        if (address != null) {
          return address.call(this as PassportElementTypeAddress);
        }
        break;
      case PassportElementTypeUtilityBill.constructor:
        if (utilityBill != null) {
          return utilityBill.call(this as PassportElementTypeUtilityBill);
        }
        break;
      case PassportElementTypeBankStatement.constructor:
        if (bankStatement != null) {
          return bankStatement.call(this as PassportElementTypeBankStatement);
        }
        break;
      case PassportElementTypeRentalAgreement.constructor:
        if (rentalAgreement != null) {
          return rentalAgreement.call(
            this as PassportElementTypeRentalAgreement,
          );
        }
        break;
      case PassportElementTypePassportRegistration.constructor:
        if (passportRegistration != null) {
          return passportRegistration.call(
            this as PassportElementTypePassportRegistration,
          );
        }
        break;
      case PassportElementTypeTemporaryRegistration.constructor:
        if (temporaryRegistration != null) {
          return temporaryRegistration.call(
            this as PassportElementTypeTemporaryRegistration,
          );
        }
        break;
      case PassportElementTypePhoneNumber.constructor:
        if (phoneNumber != null) {
          return phoneNumber.call(this as PassportElementTypePhoneNumber);
        }
        break;
      case PassportElementTypeEmailAddress.constructor:
        if (emailAddress != null) {
          return emailAddress.call(this as PassportElementTypeEmailAddress);
        }
        break;
    }
    return orElse.call();
  }
}

extension DateExtensions on Date {
  Date copyWith({int? day, int? month, int? year}) => Date(
    day: day ?? this.day,
    month: month ?? this.month,
    year: year ?? this.year,
  );
}

extension PersonalDetailsExtensions on PersonalDetails {
  PersonalDetails copyWith({
    String? firstName,
    String? middleName,
    String? lastName,
    String? nativeFirstName,
    String? nativeMiddleName,
    String? nativeLastName,
    Date? birthdate,
    String? gender,
    String? countryCode,
    String? residenceCountryCode,
  }) => PersonalDetails(
    firstName: firstName ?? this.firstName,
    middleName: middleName ?? this.middleName,
    lastName: lastName ?? this.lastName,
    nativeFirstName: nativeFirstName ?? this.nativeFirstName,
    nativeMiddleName: nativeMiddleName ?? this.nativeMiddleName,
    nativeLastName: nativeLastName ?? this.nativeLastName,
    birthdate: birthdate ?? this.birthdate,
    gender: gender ?? this.gender,
    countryCode: countryCode ?? this.countryCode,
    residenceCountryCode: residenceCountryCode ?? this.residenceCountryCode,
  );
}

extension IdentityDocumentExtensions on IdentityDocument {
  IdentityDocument copyWith({
    String? number,
    Date? expirationDate,
    DatedFile? frontSide,
    DatedFile? reverseSide,
    DatedFile? selfie,
    List<DatedFile>? translation,
  }) => IdentityDocument(
    number: number ?? this.number,
    expirationDate: expirationDate ?? this.expirationDate,
    frontSide: frontSide ?? this.frontSide,
    reverseSide: reverseSide ?? this.reverseSide,
    selfie: selfie ?? this.selfie,
    translation: translation ?? this.translation,
  );
}

extension InputIdentityDocumentExtensions on InputIdentityDocument {
  InputIdentityDocument copyWith({
    String? number,
    Date? expirationDate,
    InputFile? frontSide,
    InputFile? reverseSide,
    InputFile? selfie,
    List<InputFile>? translation,
  }) => InputIdentityDocument(
    number: number ?? this.number,
    expirationDate: expirationDate ?? this.expirationDate,
    frontSide: frontSide ?? this.frontSide,
    reverseSide: reverseSide ?? this.reverseSide,
    selfie: selfie ?? this.selfie,
    translation: translation ?? this.translation,
  );
}

extension PersonalDocumentExtensions on PersonalDocument {
  PersonalDocument copyWith({
    List<DatedFile>? files,
    List<DatedFile>? translation,
  }) => PersonalDocument(
    files: files ?? this.files,
    translation: translation ?? this.translation,
  );
}

extension InputPersonalDocumentExtensions on InputPersonalDocument {
  InputPersonalDocument copyWith({
    List<InputFile>? files,
    List<InputFile>? translation,
  }) => InputPersonalDocument(
    files: files ?? this.files,
    translation: translation ?? this.translation,
  );
}

extension PassportElementExtensions on PassportElement {
  TResult map<TResult extends Object?>({
    required TResult Function(PassportElementPersonalDetails value)
    personalDetails,
    required TResult Function(PassportElementPassport value) passport,
    required TResult Function(PassportElementDriverLicense value) driverLicense,
    required TResult Function(PassportElementIdentityCard value) identityCard,
    required TResult Function(PassportElementInternalPassport value)
    internalPassport,
    required TResult Function(PassportElementAddress value) address,
    required TResult Function(PassportElementUtilityBill value) utilityBill,
    required TResult Function(PassportElementBankStatement value) bankStatement,
    required TResult Function(PassportElementRentalAgreement value)
    rentalAgreement,
    required TResult Function(PassportElementPassportRegistration value)
    passportRegistration,
    required TResult Function(PassportElementTemporaryRegistration value)
    temporaryRegistration,
    required TResult Function(PassportElementPhoneNumber value) phoneNumber,
    required TResult Function(PassportElementEmailAddress value) emailAddress,
  }) {
    switch (getConstructor()) {
      case PassportElementPersonalDetails.constructor:
        return personalDetails.call(this as PassportElementPersonalDetails);
      case PassportElementPassport.constructor:
        return passport.call(this as PassportElementPassport);
      case PassportElementDriverLicense.constructor:
        return driverLicense.call(this as PassportElementDriverLicense);
      case PassportElementIdentityCard.constructor:
        return identityCard.call(this as PassportElementIdentityCard);
      case PassportElementInternalPassport.constructor:
        return internalPassport.call(this as PassportElementInternalPassport);
      case PassportElementAddress.constructor:
        return address.call(this as PassportElementAddress);
      case PassportElementUtilityBill.constructor:
        return utilityBill.call(this as PassportElementUtilityBill);
      case PassportElementBankStatement.constructor:
        return bankStatement.call(this as PassportElementBankStatement);
      case PassportElementRentalAgreement.constructor:
        return rentalAgreement.call(this as PassportElementRentalAgreement);
      case PassportElementPassportRegistration.constructor:
        return passportRegistration.call(
          this as PassportElementPassportRegistration,
        );
      case PassportElementTemporaryRegistration.constructor:
        return temporaryRegistration.call(
          this as PassportElementTemporaryRegistration,
        );
      case PassportElementPhoneNumber.constructor:
        return phoneNumber.call(this as PassportElementPhoneNumber);
      case PassportElementEmailAddress.constructor:
        return emailAddress.call(this as PassportElementEmailAddress);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PassportElementPersonalDetails value)? personalDetails,
    TResult Function(PassportElementPassport value)? passport,
    TResult Function(PassportElementDriverLicense value)? driverLicense,
    TResult Function(PassportElementIdentityCard value)? identityCard,
    TResult Function(PassportElementInternalPassport value)? internalPassport,
    TResult Function(PassportElementAddress value)? address,
    TResult Function(PassportElementUtilityBill value)? utilityBill,
    TResult Function(PassportElementBankStatement value)? bankStatement,
    TResult Function(PassportElementRentalAgreement value)? rentalAgreement,
    TResult Function(PassportElementPassportRegistration value)?
    passportRegistration,
    TResult Function(PassportElementTemporaryRegistration value)?
    temporaryRegistration,
    TResult Function(PassportElementPhoneNumber value)? phoneNumber,
    TResult Function(PassportElementEmailAddress value)? emailAddress,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PassportElementPersonalDetails.constructor:
        if (personalDetails != null) {
          return personalDetails.call(this as PassportElementPersonalDetails);
        }
        break;
      case PassportElementPassport.constructor:
        if (passport != null) {
          return passport.call(this as PassportElementPassport);
        }
        break;
      case PassportElementDriverLicense.constructor:
        if (driverLicense != null) {
          return driverLicense.call(this as PassportElementDriverLicense);
        }
        break;
      case PassportElementIdentityCard.constructor:
        if (identityCard != null) {
          return identityCard.call(this as PassportElementIdentityCard);
        }
        break;
      case PassportElementInternalPassport.constructor:
        if (internalPassport != null) {
          return internalPassport.call(this as PassportElementInternalPassport);
        }
        break;
      case PassportElementAddress.constructor:
        if (address != null) {
          return address.call(this as PassportElementAddress);
        }
        break;
      case PassportElementUtilityBill.constructor:
        if (utilityBill != null) {
          return utilityBill.call(this as PassportElementUtilityBill);
        }
        break;
      case PassportElementBankStatement.constructor:
        if (bankStatement != null) {
          return bankStatement.call(this as PassportElementBankStatement);
        }
        break;
      case PassportElementRentalAgreement.constructor:
        if (rentalAgreement != null) {
          return rentalAgreement.call(this as PassportElementRentalAgreement);
        }
        break;
      case PassportElementPassportRegistration.constructor:
        if (passportRegistration != null) {
          return passportRegistration.call(
            this as PassportElementPassportRegistration,
          );
        }
        break;
      case PassportElementTemporaryRegistration.constructor:
        if (temporaryRegistration != null) {
          return temporaryRegistration.call(
            this as PassportElementTemporaryRegistration,
          );
        }
        break;
      case PassportElementPhoneNumber.constructor:
        if (phoneNumber != null) {
          return phoneNumber.call(this as PassportElementPhoneNumber);
        }
        break;
      case PassportElementEmailAddress.constructor:
        if (emailAddress != null) {
          return emailAddress.call(this as PassportElementEmailAddress);
        }
        break;
    }
    return orElse.call();
  }
}

extension PassportElementPersonalDetailsExtensions
    on PassportElementPersonalDetails {
  PassportElementPersonalDetails copyWith({PersonalDetails? personalDetails}) =>
      PassportElementPersonalDetails(
        personalDetails: personalDetails ?? this.personalDetails,
      );
}

extension PassportElementPassportExtensions on PassportElementPassport {
  PassportElementPassport copyWith({IdentityDocument? passport}) =>
      PassportElementPassport(passport: passport ?? this.passport);
}

extension PassportElementDriverLicenseExtensions
    on PassportElementDriverLicense {
  PassportElementDriverLicense copyWith({IdentityDocument? driverLicense}) =>
      PassportElementDriverLicense(
        driverLicense: driverLicense ?? this.driverLicense,
      );
}

extension PassportElementIdentityCardExtensions on PassportElementIdentityCard {
  PassportElementIdentityCard copyWith({IdentityDocument? identityCard}) =>
      PassportElementIdentityCard(
        identityCard: identityCard ?? this.identityCard,
      );
}

extension PassportElementInternalPassportExtensions
    on PassportElementInternalPassport {
  PassportElementInternalPassport copyWith({
    IdentityDocument? internalPassport,
  }) => PassportElementInternalPassport(
    internalPassport: internalPassport ?? this.internalPassport,
  );
}

extension PassportElementAddressExtensions on PassportElementAddress {
  PassportElementAddress copyWith({Address? address}) =>
      PassportElementAddress(address: address ?? this.address);
}

extension PassportElementUtilityBillExtensions on PassportElementUtilityBill {
  PassportElementUtilityBill copyWith({PersonalDocument? utilityBill}) =>
      PassportElementUtilityBill(utilityBill: utilityBill ?? this.utilityBill);
}

extension PassportElementBankStatementExtensions
    on PassportElementBankStatement {
  PassportElementBankStatement copyWith({PersonalDocument? bankStatement}) =>
      PassportElementBankStatement(
        bankStatement: bankStatement ?? this.bankStatement,
      );
}

extension PassportElementRentalAgreementExtensions
    on PassportElementRentalAgreement {
  PassportElementRentalAgreement copyWith({
    PersonalDocument? rentalAgreement,
  }) => PassportElementRentalAgreement(
    rentalAgreement: rentalAgreement ?? this.rentalAgreement,
  );
}

extension PassportElementPassportRegistrationExtensions
    on PassportElementPassportRegistration {
  PassportElementPassportRegistration copyWith({
    PersonalDocument? passportRegistration,
  }) => PassportElementPassportRegistration(
    passportRegistration: passportRegistration ?? this.passportRegistration,
  );
}

extension PassportElementTemporaryRegistrationExtensions
    on PassportElementTemporaryRegistration {
  PassportElementTemporaryRegistration copyWith({
    PersonalDocument? temporaryRegistration,
  }) => PassportElementTemporaryRegistration(
    temporaryRegistration: temporaryRegistration ?? this.temporaryRegistration,
  );
}

extension PassportElementPhoneNumberExtensions on PassportElementPhoneNumber {
  PassportElementPhoneNumber copyWith({String? phoneNumber}) =>
      PassportElementPhoneNumber(phoneNumber: phoneNumber ?? this.phoneNumber);
}

extension PassportElementEmailAddressExtensions on PassportElementEmailAddress {
  PassportElementEmailAddress copyWith({String? emailAddress}) =>
      PassportElementEmailAddress(
        emailAddress: emailAddress ?? this.emailAddress,
      );
}

extension InputPassportElementExtensions on InputPassportElement {
  TResult map<TResult extends Object?>({
    required TResult Function(InputPassportElementPersonalDetails value)
    personalDetails,
    required TResult Function(InputPassportElementPassport value) passport,
    required TResult Function(InputPassportElementDriverLicense value)
    driverLicense,
    required TResult Function(InputPassportElementIdentityCard value)
    identityCard,
    required TResult Function(InputPassportElementInternalPassport value)
    internalPassport,
    required TResult Function(InputPassportElementAddress value) address,
    required TResult Function(InputPassportElementUtilityBill value)
    utilityBill,
    required TResult Function(InputPassportElementBankStatement value)
    bankStatement,
    required TResult Function(InputPassportElementRentalAgreement value)
    rentalAgreement,
    required TResult Function(InputPassportElementPassportRegistration value)
    passportRegistration,
    required TResult Function(InputPassportElementTemporaryRegistration value)
    temporaryRegistration,
    required TResult Function(InputPassportElementPhoneNumber value)
    phoneNumber,
    required TResult Function(InputPassportElementEmailAddress value)
    emailAddress,
  }) {
    switch (getConstructor()) {
      case InputPassportElementPersonalDetails.constructor:
        return personalDetails.call(
          this as InputPassportElementPersonalDetails,
        );
      case InputPassportElementPassport.constructor:
        return passport.call(this as InputPassportElementPassport);
      case InputPassportElementDriverLicense.constructor:
        return driverLicense.call(this as InputPassportElementDriverLicense);
      case InputPassportElementIdentityCard.constructor:
        return identityCard.call(this as InputPassportElementIdentityCard);
      case InputPassportElementInternalPassport.constructor:
        return internalPassport.call(
          this as InputPassportElementInternalPassport,
        );
      case InputPassportElementAddress.constructor:
        return address.call(this as InputPassportElementAddress);
      case InputPassportElementUtilityBill.constructor:
        return utilityBill.call(this as InputPassportElementUtilityBill);
      case InputPassportElementBankStatement.constructor:
        return bankStatement.call(this as InputPassportElementBankStatement);
      case InputPassportElementRentalAgreement.constructor:
        return rentalAgreement.call(
          this as InputPassportElementRentalAgreement,
        );
      case InputPassportElementPassportRegistration.constructor:
        return passportRegistration.call(
          this as InputPassportElementPassportRegistration,
        );
      case InputPassportElementTemporaryRegistration.constructor:
        return temporaryRegistration.call(
          this as InputPassportElementTemporaryRegistration,
        );
      case InputPassportElementPhoneNumber.constructor:
        return phoneNumber.call(this as InputPassportElementPhoneNumber);
      case InputPassportElementEmailAddress.constructor:
        return emailAddress.call(this as InputPassportElementEmailAddress);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InputPassportElementPersonalDetails value)?
    personalDetails,
    TResult Function(InputPassportElementPassport value)? passport,
    TResult Function(InputPassportElementDriverLicense value)? driverLicense,
    TResult Function(InputPassportElementIdentityCard value)? identityCard,
    TResult Function(InputPassportElementInternalPassport value)?
    internalPassport,
    TResult Function(InputPassportElementAddress value)? address,
    TResult Function(InputPassportElementUtilityBill value)? utilityBill,
    TResult Function(InputPassportElementBankStatement value)? bankStatement,
    TResult Function(InputPassportElementRentalAgreement value)?
    rentalAgreement,
    TResult Function(InputPassportElementPassportRegistration value)?
    passportRegistration,
    TResult Function(InputPassportElementTemporaryRegistration value)?
    temporaryRegistration,
    TResult Function(InputPassportElementPhoneNumber value)? phoneNumber,
    TResult Function(InputPassportElementEmailAddress value)? emailAddress,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InputPassportElementPersonalDetails.constructor:
        if (personalDetails != null) {
          return personalDetails.call(
            this as InputPassportElementPersonalDetails,
          );
        }
        break;
      case InputPassportElementPassport.constructor:
        if (passport != null) {
          return passport.call(this as InputPassportElementPassport);
        }
        break;
      case InputPassportElementDriverLicense.constructor:
        if (driverLicense != null) {
          return driverLicense.call(this as InputPassportElementDriverLicense);
        }
        break;
      case InputPassportElementIdentityCard.constructor:
        if (identityCard != null) {
          return identityCard.call(this as InputPassportElementIdentityCard);
        }
        break;
      case InputPassportElementInternalPassport.constructor:
        if (internalPassport != null) {
          return internalPassport.call(
            this as InputPassportElementInternalPassport,
          );
        }
        break;
      case InputPassportElementAddress.constructor:
        if (address != null) {
          return address.call(this as InputPassportElementAddress);
        }
        break;
      case InputPassportElementUtilityBill.constructor:
        if (utilityBill != null) {
          return utilityBill.call(this as InputPassportElementUtilityBill);
        }
        break;
      case InputPassportElementBankStatement.constructor:
        if (bankStatement != null) {
          return bankStatement.call(this as InputPassportElementBankStatement);
        }
        break;
      case InputPassportElementRentalAgreement.constructor:
        if (rentalAgreement != null) {
          return rentalAgreement.call(
            this as InputPassportElementRentalAgreement,
          );
        }
        break;
      case InputPassportElementPassportRegistration.constructor:
        if (passportRegistration != null) {
          return passportRegistration.call(
            this as InputPassportElementPassportRegistration,
          );
        }
        break;
      case InputPassportElementTemporaryRegistration.constructor:
        if (temporaryRegistration != null) {
          return temporaryRegistration.call(
            this as InputPassportElementTemporaryRegistration,
          );
        }
        break;
      case InputPassportElementPhoneNumber.constructor:
        if (phoneNumber != null) {
          return phoneNumber.call(this as InputPassportElementPhoneNumber);
        }
        break;
      case InputPassportElementEmailAddress.constructor:
        if (emailAddress != null) {
          return emailAddress.call(this as InputPassportElementEmailAddress);
        }
        break;
    }
    return orElse.call();
  }
}

extension InputPassportElementPersonalDetailsExtensions
    on InputPassportElementPersonalDetails {
  InputPassportElementPersonalDetails copyWith({
    PersonalDetails? personalDetails,
  }) => InputPassportElementPersonalDetails(
    personalDetails: personalDetails ?? this.personalDetails,
  );
}

extension InputPassportElementPassportExtensions
    on InputPassportElementPassport {
  InputPassportElementPassport copyWith({InputIdentityDocument? passport}) =>
      InputPassportElementPassport(passport: passport ?? this.passport);
}

extension InputPassportElementDriverLicenseExtensions
    on InputPassportElementDriverLicense {
  InputPassportElementDriverLicense copyWith({
    InputIdentityDocument? driverLicense,
  }) => InputPassportElementDriverLicense(
    driverLicense: driverLicense ?? this.driverLicense,
  );
}

extension InputPassportElementIdentityCardExtensions
    on InputPassportElementIdentityCard {
  InputPassportElementIdentityCard copyWith({
    InputIdentityDocument? identityCard,
  }) => InputPassportElementIdentityCard(
    identityCard: identityCard ?? this.identityCard,
  );
}

extension InputPassportElementInternalPassportExtensions
    on InputPassportElementInternalPassport {
  InputPassportElementInternalPassport copyWith({
    InputIdentityDocument? internalPassport,
  }) => InputPassportElementInternalPassport(
    internalPassport: internalPassport ?? this.internalPassport,
  );
}

extension InputPassportElementAddressExtensions on InputPassportElementAddress {
  InputPassportElementAddress copyWith({Address? address}) =>
      InputPassportElementAddress(address: address ?? this.address);
}

extension InputPassportElementUtilityBillExtensions
    on InputPassportElementUtilityBill {
  InputPassportElementUtilityBill copyWith({
    InputPersonalDocument? utilityBill,
  }) => InputPassportElementUtilityBill(
    utilityBill: utilityBill ?? this.utilityBill,
  );
}

extension InputPassportElementBankStatementExtensions
    on InputPassportElementBankStatement {
  InputPassportElementBankStatement copyWith({
    InputPersonalDocument? bankStatement,
  }) => InputPassportElementBankStatement(
    bankStatement: bankStatement ?? this.bankStatement,
  );
}

extension InputPassportElementRentalAgreementExtensions
    on InputPassportElementRentalAgreement {
  InputPassportElementRentalAgreement copyWith({
    InputPersonalDocument? rentalAgreement,
  }) => InputPassportElementRentalAgreement(
    rentalAgreement: rentalAgreement ?? this.rentalAgreement,
  );
}

extension InputPassportElementPassportRegistrationExtensions
    on InputPassportElementPassportRegistration {
  InputPassportElementPassportRegistration copyWith({
    InputPersonalDocument? passportRegistration,
  }) => InputPassportElementPassportRegistration(
    passportRegistration: passportRegistration ?? this.passportRegistration,
  );
}

extension InputPassportElementTemporaryRegistrationExtensions
    on InputPassportElementTemporaryRegistration {
  InputPassportElementTemporaryRegistration copyWith({
    InputPersonalDocument? temporaryRegistration,
  }) => InputPassportElementTemporaryRegistration(
    temporaryRegistration: temporaryRegistration ?? this.temporaryRegistration,
  );
}

extension InputPassportElementPhoneNumberExtensions
    on InputPassportElementPhoneNumber {
  InputPassportElementPhoneNumber copyWith({String? phoneNumber}) =>
      InputPassportElementPhoneNumber(
        phoneNumber: phoneNumber ?? this.phoneNumber,
      );
}

extension InputPassportElementEmailAddressExtensions
    on InputPassportElementEmailAddress {
  InputPassportElementEmailAddress copyWith({String? emailAddress}) =>
      InputPassportElementEmailAddress(
        emailAddress: emailAddress ?? this.emailAddress,
      );
}

extension PassportElementsExtensions on PassportElements {
  PassportElements copyWith({List<PassportElement>? elements}) =>
      PassportElements(elements: elements ?? this.elements);
}

extension PassportElementErrorSourceExtensions on PassportElementErrorSource {
  TResult map<TResult extends Object?>({
    required TResult Function(PassportElementErrorSourceUnspecified value)
    unspecified,
    required TResult Function(PassportElementErrorSourceDataField value)
    dataField,
    required TResult Function(PassportElementErrorSourceFrontSide value)
    frontSide,
    required TResult Function(PassportElementErrorSourceReverseSide value)
    reverseSide,
    required TResult Function(PassportElementErrorSourceSelfie value) selfie,
    required TResult Function(PassportElementErrorSourceTranslationFile value)
    translationFile,
    required TResult Function(PassportElementErrorSourceTranslationFiles value)
    translationFiles,
    required TResult Function(PassportElementErrorSourceFile value) file,
    required TResult Function(PassportElementErrorSourceFiles value) files,
  }) {
    switch (getConstructor()) {
      case PassportElementErrorSourceUnspecified.constructor:
        return unspecified.call(this as PassportElementErrorSourceUnspecified);
      case PassportElementErrorSourceDataField.constructor:
        return dataField.call(this as PassportElementErrorSourceDataField);
      case PassportElementErrorSourceFrontSide.constructor:
        return frontSide.call(this as PassportElementErrorSourceFrontSide);
      case PassportElementErrorSourceReverseSide.constructor:
        return reverseSide.call(this as PassportElementErrorSourceReverseSide);
      case PassportElementErrorSourceSelfie.constructor:
        return selfie.call(this as PassportElementErrorSourceSelfie);
      case PassportElementErrorSourceTranslationFile.constructor:
        return translationFile.call(
          this as PassportElementErrorSourceTranslationFile,
        );
      case PassportElementErrorSourceTranslationFiles.constructor:
        return translationFiles.call(
          this as PassportElementErrorSourceTranslationFiles,
        );
      case PassportElementErrorSourceFile.constructor:
        return file.call(this as PassportElementErrorSourceFile);
      case PassportElementErrorSourceFiles.constructor:
        return files.call(this as PassportElementErrorSourceFiles);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PassportElementErrorSourceUnspecified value)? unspecified,
    TResult Function(PassportElementErrorSourceDataField value)? dataField,
    TResult Function(PassportElementErrorSourceFrontSide value)? frontSide,
    TResult Function(PassportElementErrorSourceReverseSide value)? reverseSide,
    TResult Function(PassportElementErrorSourceSelfie value)? selfie,
    TResult Function(PassportElementErrorSourceTranslationFile value)?
    translationFile,
    TResult Function(PassportElementErrorSourceTranslationFiles value)?
    translationFiles,
    TResult Function(PassportElementErrorSourceFile value)? file,
    TResult Function(PassportElementErrorSourceFiles value)? files,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PassportElementErrorSourceUnspecified.constructor:
        if (unspecified != null) {
          return unspecified.call(
            this as PassportElementErrorSourceUnspecified,
          );
        }
        break;
      case PassportElementErrorSourceDataField.constructor:
        if (dataField != null) {
          return dataField.call(this as PassportElementErrorSourceDataField);
        }
        break;
      case PassportElementErrorSourceFrontSide.constructor:
        if (frontSide != null) {
          return frontSide.call(this as PassportElementErrorSourceFrontSide);
        }
        break;
      case PassportElementErrorSourceReverseSide.constructor:
        if (reverseSide != null) {
          return reverseSide.call(
            this as PassportElementErrorSourceReverseSide,
          );
        }
        break;
      case PassportElementErrorSourceSelfie.constructor:
        if (selfie != null) {
          return selfie.call(this as PassportElementErrorSourceSelfie);
        }
        break;
      case PassportElementErrorSourceTranslationFile.constructor:
        if (translationFile != null) {
          return translationFile.call(
            this as PassportElementErrorSourceTranslationFile,
          );
        }
        break;
      case PassportElementErrorSourceTranslationFiles.constructor:
        if (translationFiles != null) {
          return translationFiles.call(
            this as PassportElementErrorSourceTranslationFiles,
          );
        }
        break;
      case PassportElementErrorSourceFile.constructor:
        if (file != null) {
          return file.call(this as PassportElementErrorSourceFile);
        }
        break;
      case PassportElementErrorSourceFiles.constructor:
        if (files != null) {
          return files.call(this as PassportElementErrorSourceFiles);
        }
        break;
    }
    return orElse.call();
  }
}

extension PassportElementErrorSourceDataFieldExtensions
    on PassportElementErrorSourceDataField {
  PassportElementErrorSourceDataField copyWith({String? fieldName}) =>
      PassportElementErrorSourceDataField(
        fieldName: fieldName ?? this.fieldName,
      );
}

extension PassportElementErrorSourceTranslationFileExtensions
    on PassportElementErrorSourceTranslationFile {
  PassportElementErrorSourceTranslationFile copyWith({int? fileIndex}) =>
      PassportElementErrorSourceTranslationFile(
        fileIndex: fileIndex ?? this.fileIndex,
      );
}

extension PassportElementErrorSourceFileExtensions
    on PassportElementErrorSourceFile {
  PassportElementErrorSourceFile copyWith({int? fileIndex}) =>
      PassportElementErrorSourceFile(fileIndex: fileIndex ?? this.fileIndex);
}

extension PassportElementErrorExtensions on PassportElementError {
  PassportElementError copyWith({
    PassportElementType? type,
    String? message,
    PassportElementErrorSource? source,
  }) => PassportElementError(
    type: type ?? this.type,
    message: message ?? this.message,
    source: source ?? this.source,
  );
}

extension PassportSuitableElementExtensions on PassportSuitableElement {
  PassportSuitableElement copyWith({
    PassportElementType? type,
    bool? isSelfieRequired,
    bool? isTranslationRequired,
    bool? isNativeNameRequired,
  }) => PassportSuitableElement(
    type: type ?? this.type,
    isSelfieRequired: isSelfieRequired ?? this.isSelfieRequired,
    isTranslationRequired: isTranslationRequired ?? this.isTranslationRequired,
    isNativeNameRequired: isNativeNameRequired ?? this.isNativeNameRequired,
  );
}

extension PassportRequiredElementExtensions on PassportRequiredElement {
  PassportRequiredElement copyWith({
    List<PassportSuitableElement>? suitableElements,
  }) => PassportRequiredElement(
    suitableElements: suitableElements ?? this.suitableElements,
  );
}

extension PassportAuthorizationFormExtensions on PassportAuthorizationForm {
  PassportAuthorizationForm copyWith({
    int? id,
    List<PassportRequiredElement>? requiredElements,
    String? privacyPolicyUrl,
  }) => PassportAuthorizationForm(
    id: id ?? this.id,
    requiredElements: requiredElements ?? this.requiredElements,
    privacyPolicyUrl: privacyPolicyUrl ?? this.privacyPolicyUrl,
  );
}

extension PassportElementsWithErrorsExtensions on PassportElementsWithErrors {
  PassportElementsWithErrors copyWith({
    List<PassportElement>? elements,
    List<PassportElementError>? errors,
  }) => PassportElementsWithErrors(
    elements: elements ?? this.elements,
    errors: errors ?? this.errors,
  );
}

extension EncryptedCredentialsExtensions on EncryptedCredentials {
  EncryptedCredentials copyWith({String? data, String? hash, String? secret}) =>
      EncryptedCredentials(
        data: data ?? this.data,
        hash: hash ?? this.hash,
        secret: secret ?? this.secret,
      );
}

extension EncryptedPassportElementExtensions on EncryptedPassportElement {
  EncryptedPassportElement copyWith({
    PassportElementType? type,
    String? data,
    DatedFile? frontSide,
    DatedFile? reverseSide,
    DatedFile? selfie,
    List<DatedFile>? translation,
    List<DatedFile>? files,
    String? value,
    String? hash,
  }) => EncryptedPassportElement(
    type: type ?? this.type,
    data: data ?? this.data,
    frontSide: frontSide ?? this.frontSide,
    reverseSide: reverseSide ?? this.reverseSide,
    selfie: selfie ?? this.selfie,
    translation: translation ?? this.translation,
    files: files ?? this.files,
    value: value ?? this.value,
    hash: hash ?? this.hash,
  );
}

extension InputPassportElementErrorSourceExtensions
    on InputPassportElementErrorSource {
  TResult map<TResult extends Object?>({
    required TResult Function(InputPassportElementErrorSourceUnspecified value)
    unspecified,
    required TResult Function(InputPassportElementErrorSourceDataField value)
    dataField,
    required TResult Function(InputPassportElementErrorSourceFrontSide value)
    frontSide,
    required TResult Function(InputPassportElementErrorSourceReverseSide value)
    reverseSide,
    required TResult Function(InputPassportElementErrorSourceSelfie value)
    selfie,
    required TResult Function(
      InputPassportElementErrorSourceTranslationFile value,
    )
    translationFile,
    required TResult Function(
      InputPassportElementErrorSourceTranslationFiles value,
    )
    translationFiles,
    required TResult Function(InputPassportElementErrorSourceFile value) file,
    required TResult Function(InputPassportElementErrorSourceFiles value) files,
  }) {
    switch (getConstructor()) {
      case InputPassportElementErrorSourceUnspecified.constructor:
        return unspecified.call(
          this as InputPassportElementErrorSourceUnspecified,
        );
      case InputPassportElementErrorSourceDataField.constructor:
        return dataField.call(this as InputPassportElementErrorSourceDataField);
      case InputPassportElementErrorSourceFrontSide.constructor:
        return frontSide.call(this as InputPassportElementErrorSourceFrontSide);
      case InputPassportElementErrorSourceReverseSide.constructor:
        return reverseSide.call(
          this as InputPassportElementErrorSourceReverseSide,
        );
      case InputPassportElementErrorSourceSelfie.constructor:
        return selfie.call(this as InputPassportElementErrorSourceSelfie);
      case InputPassportElementErrorSourceTranslationFile.constructor:
        return translationFile.call(
          this as InputPassportElementErrorSourceTranslationFile,
        );
      case InputPassportElementErrorSourceTranslationFiles.constructor:
        return translationFiles.call(
          this as InputPassportElementErrorSourceTranslationFiles,
        );
      case InputPassportElementErrorSourceFile.constructor:
        return file.call(this as InputPassportElementErrorSourceFile);
      case InputPassportElementErrorSourceFiles.constructor:
        return files.call(this as InputPassportElementErrorSourceFiles);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InputPassportElementErrorSourceUnspecified value)?
    unspecified,
    TResult Function(InputPassportElementErrorSourceDataField value)? dataField,
    TResult Function(InputPassportElementErrorSourceFrontSide value)? frontSide,
    TResult Function(InputPassportElementErrorSourceReverseSide value)?
    reverseSide,
    TResult Function(InputPassportElementErrorSourceSelfie value)? selfie,
    TResult Function(InputPassportElementErrorSourceTranslationFile value)?
    translationFile,
    TResult Function(InputPassportElementErrorSourceTranslationFiles value)?
    translationFiles,
    TResult Function(InputPassportElementErrorSourceFile value)? file,
    TResult Function(InputPassportElementErrorSourceFiles value)? files,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InputPassportElementErrorSourceUnspecified.constructor:
        if (unspecified != null) {
          return unspecified.call(
            this as InputPassportElementErrorSourceUnspecified,
          );
        }
        break;
      case InputPassportElementErrorSourceDataField.constructor:
        if (dataField != null) {
          return dataField.call(
            this as InputPassportElementErrorSourceDataField,
          );
        }
        break;
      case InputPassportElementErrorSourceFrontSide.constructor:
        if (frontSide != null) {
          return frontSide.call(
            this as InputPassportElementErrorSourceFrontSide,
          );
        }
        break;
      case InputPassportElementErrorSourceReverseSide.constructor:
        if (reverseSide != null) {
          return reverseSide.call(
            this as InputPassportElementErrorSourceReverseSide,
          );
        }
        break;
      case InputPassportElementErrorSourceSelfie.constructor:
        if (selfie != null) {
          return selfie.call(this as InputPassportElementErrorSourceSelfie);
        }
        break;
      case InputPassportElementErrorSourceTranslationFile.constructor:
        if (translationFile != null) {
          return translationFile.call(
            this as InputPassportElementErrorSourceTranslationFile,
          );
        }
        break;
      case InputPassportElementErrorSourceTranslationFiles.constructor:
        if (translationFiles != null) {
          return translationFiles.call(
            this as InputPassportElementErrorSourceTranslationFiles,
          );
        }
        break;
      case InputPassportElementErrorSourceFile.constructor:
        if (file != null) {
          return file.call(this as InputPassportElementErrorSourceFile);
        }
        break;
      case InputPassportElementErrorSourceFiles.constructor:
        if (files != null) {
          return files.call(this as InputPassportElementErrorSourceFiles);
        }
        break;
    }
    return orElse.call();
  }
}

extension InputPassportElementErrorSourceUnspecifiedExtensions
    on InputPassportElementErrorSourceUnspecified {
  InputPassportElementErrorSourceUnspecified copyWith({String? elementHash}) =>
      InputPassportElementErrorSourceUnspecified(
        elementHash: elementHash ?? this.elementHash,
      );
}

extension InputPassportElementErrorSourceDataFieldExtensions
    on InputPassportElementErrorSourceDataField {
  InputPassportElementErrorSourceDataField copyWith({
    String? fieldName,
    String? dataHash,
  }) => InputPassportElementErrorSourceDataField(
    fieldName: fieldName ?? this.fieldName,
    dataHash: dataHash ?? this.dataHash,
  );
}

extension InputPassportElementErrorSourceFrontSideExtensions
    on InputPassportElementErrorSourceFrontSide {
  InputPassportElementErrorSourceFrontSide copyWith({String? fileHash}) =>
      InputPassportElementErrorSourceFrontSide(
        fileHash: fileHash ?? this.fileHash,
      );
}

extension InputPassportElementErrorSourceReverseSideExtensions
    on InputPassportElementErrorSourceReverseSide {
  InputPassportElementErrorSourceReverseSide copyWith({String? fileHash}) =>
      InputPassportElementErrorSourceReverseSide(
        fileHash: fileHash ?? this.fileHash,
      );
}

extension InputPassportElementErrorSourceSelfieExtensions
    on InputPassportElementErrorSourceSelfie {
  InputPassportElementErrorSourceSelfie copyWith({String? fileHash}) =>
      InputPassportElementErrorSourceSelfie(
        fileHash: fileHash ?? this.fileHash,
      );
}

extension InputPassportElementErrorSourceTranslationFileExtensions
    on InputPassportElementErrorSourceTranslationFile {
  InputPassportElementErrorSourceTranslationFile copyWith({String? fileHash}) =>
      InputPassportElementErrorSourceTranslationFile(
        fileHash: fileHash ?? this.fileHash,
      );
}

extension InputPassportElementErrorSourceTranslationFilesExtensions
    on InputPassportElementErrorSourceTranslationFiles {
  InputPassportElementErrorSourceTranslationFiles copyWith({
    List<String>? fileHashes,
  }) => InputPassportElementErrorSourceTranslationFiles(
    fileHashes: fileHashes ?? this.fileHashes,
  );
}

extension InputPassportElementErrorSourceFileExtensions
    on InputPassportElementErrorSourceFile {
  InputPassportElementErrorSourceFile copyWith({String? fileHash}) =>
      InputPassportElementErrorSourceFile(fileHash: fileHash ?? this.fileHash);
}

extension InputPassportElementErrorSourceFilesExtensions
    on InputPassportElementErrorSourceFiles {
  InputPassportElementErrorSourceFiles copyWith({List<String>? fileHashes}) =>
      InputPassportElementErrorSourceFiles(
        fileHashes: fileHashes ?? this.fileHashes,
      );
}

extension InputPassportElementErrorExtensions on InputPassportElementError {
  InputPassportElementError copyWith({
    PassportElementType? type,
    String? message,
    InputPassportElementErrorSource? source,
  }) => InputPassportElementError(
    type: type ?? this.type,
    message: message ?? this.message,
    source: source ?? this.source,
  );
}

extension MessageContentExtensions on MessageContent {
  TResult map<TResult extends Object?>({
    required TResult Function(MessageText value) messageText,
    required TResult Function(MessageAnimation value) messageAnimation,
    required TResult Function(MessageAudio value) messageAudio,
    required TResult Function(MessageDocument value) messageDocument,
    required TResult Function(MessagePaidMedia value) messagePaidMedia,
    required TResult Function(MessagePhoto value) messagePhoto,
    required TResult Function(MessageSticker value) messageSticker,
    required TResult Function(MessageVideo value) messageVideo,
    required TResult Function(MessageVideoNote value) messageVideoNote,
    required TResult Function(MessageVoiceNote value) messageVoiceNote,
    required TResult Function(MessageExpiredPhoto value) messageExpiredPhoto,
    required TResult Function(MessageExpiredVideo value) messageExpiredVideo,
    required TResult Function(MessageExpiredVideoNote value)
    messageExpiredVideoNote,
    required TResult Function(MessageExpiredVoiceNote value)
    messageExpiredVoiceNote,
    required TResult Function(MessageLocation value) messageLocation,
    required TResult Function(MessageVenue value) messageVenue,
    required TResult Function(MessageContact value) messageContact,
    required TResult Function(MessageAnimatedEmoji value) messageAnimatedEmoji,
    required TResult Function(MessageDice value) messageDice,
    required TResult Function(MessageGame value) messageGame,
    required TResult Function(MessagePoll value) messagePoll,
    required TResult Function(MessageStory value) messageStory,
    required TResult Function(MessageChecklist value) messageChecklist,
    required TResult Function(MessageInvoice value) messageInvoice,
    required TResult Function(MessageCall value) messageCall,
    required TResult Function(MessageGroupCall value) messageGroupCall,
    required TResult Function(MessageVideoChatScheduled value)
    messageVideoChatScheduled,
    required TResult Function(MessageVideoChatStarted value)
    messageVideoChatStarted,
    required TResult Function(MessageVideoChatEnded value)
    messageVideoChatEnded,
    required TResult Function(MessageInviteVideoChatParticipants value)
    messageInviteVideoChatParticipants,
    required TResult Function(MessageBasicGroupChatCreate value)
    messageBasicGroupChatCreate,
    required TResult Function(MessageSupergroupChatCreate value)
    messageSupergroupChatCreate,
    required TResult Function(MessageChatChangeTitle value)
    messageChatChangeTitle,
    required TResult Function(MessageChatChangePhoto value)
    messageChatChangePhoto,
    required TResult Function(MessageChatDeletePhoto value)
    messageChatDeletePhoto,
    required TResult Function(MessageChatAddMembers value)
    messageChatAddMembers,
    required TResult Function(MessageChatJoinByLink value)
    messageChatJoinByLink,
    required TResult Function(MessageChatJoinByRequest value)
    messageChatJoinByRequest,
    required TResult Function(MessageChatDeleteMember value)
    messageChatDeleteMember,
    required TResult Function(MessageChatUpgradeTo value) messageChatUpgradeTo,
    required TResult Function(MessageChatUpgradeFrom value)
    messageChatUpgradeFrom,
    required TResult Function(MessagePinMessage value) messagePinMessage,
    required TResult Function(MessageScreenshotTaken value)
    messageScreenshotTaken,
    required TResult Function(MessageChatSetBackground value)
    messageChatSetBackground,
    required TResult Function(MessageChatSetTheme value) messageChatSetTheme,
    required TResult Function(MessageChatSetMessageAutoDeleteTime value)
    messageChatSetMessageAutoDeleteTime,
    required TResult Function(MessageChatBoost value) messageChatBoost,
    required TResult Function(MessageForumTopicCreated value)
    messageForumTopicCreated,
    required TResult Function(MessageForumTopicEdited value)
    messageForumTopicEdited,
    required TResult Function(MessageForumTopicIsClosedToggled value)
    messageForumTopicIsClosedToggled,
    required TResult Function(MessageForumTopicIsHiddenToggled value)
    messageForumTopicIsHiddenToggled,
    required TResult Function(MessageSuggestProfilePhoto value)
    messageSuggestProfilePhoto,
    required TResult Function(MessageCustomServiceAction value)
    messageCustomServiceAction,
    required TResult Function(MessageGameScore value) messageGameScore,
    required TResult Function(MessagePaymentSuccessful value)
    messagePaymentSuccessful,
    required TResult Function(MessagePaymentSuccessfulBot value)
    messagePaymentSuccessfulBot,
    required TResult Function(MessagePaymentRefunded value)
    messagePaymentRefunded,
    required TResult Function(MessageGiftedPremium value) messageGiftedPremium,
    required TResult Function(MessagePremiumGiftCode value)
    messagePremiumGiftCode,
    required TResult Function(MessageGiveawayCreated value)
    messageGiveawayCreated,
    required TResult Function(MessageGiveaway value) messageGiveaway,
    required TResult Function(MessageGiveawayCompleted value)
    messageGiveawayCompleted,
    required TResult Function(MessageGiveawayWinners value)
    messageGiveawayWinners,
    required TResult Function(MessageGiftedStars value) messageGiftedStars,
    required TResult Function(MessageGiveawayPrizeStars value)
    messageGiveawayPrizeStars,
    required TResult Function(MessageGift value) messageGift,
    required TResult Function(MessageUpgradedGift value) messageUpgradedGift,
    required TResult Function(MessageRefundedUpgradedGift value)
    messageRefundedUpgradedGift,
    required TResult Function(MessagePaidMessagesRefunded value)
    messagePaidMessagesRefunded,
    required TResult Function(MessagePaidMessagePriceChanged value)
    messagePaidMessagePriceChanged,
    required TResult Function(MessageDirectMessagePriceChanged value)
    messageDirectMessagePriceChanged,
    required TResult Function(MessageChecklistTasksDone value)
    messageChecklistTasksDone,
    required TResult Function(MessageChecklistTasksAdded value)
    messageChecklistTasksAdded,
    required TResult Function(MessageContactRegistered value)
    messageContactRegistered,
    required TResult Function(MessageUsersShared value) messageUsersShared,
    required TResult Function(MessageChatShared value) messageChatShared,
    required TResult Function(MessageBotWriteAccessAllowed value)
    messageBotWriteAccessAllowed,
    required TResult Function(MessageWebAppDataSent value)
    messageWebAppDataSent,
    required TResult Function(MessageWebAppDataReceived value)
    messageWebAppDataReceived,
    required TResult Function(MessagePassportDataSent value)
    messagePassportDataSent,
    required TResult Function(MessagePassportDataReceived value)
    messagePassportDataReceived,
    required TResult Function(MessageProximityAlertTriggered value)
    messageProximityAlertTriggered,
    required TResult Function(MessageUnsupported value) messageUnsupported,
  }) {
    switch (getConstructor()) {
      case MessageText.constructor:
        return messageText.call(this as MessageText);
      case MessageAnimation.constructor:
        return messageAnimation.call(this as MessageAnimation);
      case MessageAudio.constructor:
        return messageAudio.call(this as MessageAudio);
      case MessageDocument.constructor:
        return messageDocument.call(this as MessageDocument);
      case MessagePaidMedia.constructor:
        return messagePaidMedia.call(this as MessagePaidMedia);
      case MessagePhoto.constructor:
        return messagePhoto.call(this as MessagePhoto);
      case MessageSticker.constructor:
        return messageSticker.call(this as MessageSticker);
      case MessageVideo.constructor:
        return messageVideo.call(this as MessageVideo);
      case MessageVideoNote.constructor:
        return messageVideoNote.call(this as MessageVideoNote);
      case MessageVoiceNote.constructor:
        return messageVoiceNote.call(this as MessageVoiceNote);
      case MessageExpiredPhoto.constructor:
        return messageExpiredPhoto.call(this as MessageExpiredPhoto);
      case MessageExpiredVideo.constructor:
        return messageExpiredVideo.call(this as MessageExpiredVideo);
      case MessageExpiredVideoNote.constructor:
        return messageExpiredVideoNote.call(this as MessageExpiredVideoNote);
      case MessageExpiredVoiceNote.constructor:
        return messageExpiredVoiceNote.call(this as MessageExpiredVoiceNote);
      case MessageLocation.constructor:
        return messageLocation.call(this as MessageLocation);
      case MessageVenue.constructor:
        return messageVenue.call(this as MessageVenue);
      case MessageContact.constructor:
        return messageContact.call(this as MessageContact);
      case MessageAnimatedEmoji.constructor:
        return messageAnimatedEmoji.call(this as MessageAnimatedEmoji);
      case MessageDice.constructor:
        return messageDice.call(this as MessageDice);
      case MessageGame.constructor:
        return messageGame.call(this as MessageGame);
      case MessagePoll.constructor:
        return messagePoll.call(this as MessagePoll);
      case MessageStory.constructor:
        return messageStory.call(this as MessageStory);
      case MessageChecklist.constructor:
        return messageChecklist.call(this as MessageChecklist);
      case MessageInvoice.constructor:
        return messageInvoice.call(this as MessageInvoice);
      case MessageCall.constructor:
        return messageCall.call(this as MessageCall);
      case MessageGroupCall.constructor:
        return messageGroupCall.call(this as MessageGroupCall);
      case MessageVideoChatScheduled.constructor:
        return messageVideoChatScheduled.call(
          this as MessageVideoChatScheduled,
        );
      case MessageVideoChatStarted.constructor:
        return messageVideoChatStarted.call(this as MessageVideoChatStarted);
      case MessageVideoChatEnded.constructor:
        return messageVideoChatEnded.call(this as MessageVideoChatEnded);
      case MessageInviteVideoChatParticipants.constructor:
        return messageInviteVideoChatParticipants.call(
          this as MessageInviteVideoChatParticipants,
        );
      case MessageBasicGroupChatCreate.constructor:
        return messageBasicGroupChatCreate.call(
          this as MessageBasicGroupChatCreate,
        );
      case MessageSupergroupChatCreate.constructor:
        return messageSupergroupChatCreate.call(
          this as MessageSupergroupChatCreate,
        );
      case MessageChatChangeTitle.constructor:
        return messageChatChangeTitle.call(this as MessageChatChangeTitle);
      case MessageChatChangePhoto.constructor:
        return messageChatChangePhoto.call(this as MessageChatChangePhoto);
      case MessageChatDeletePhoto.constructor:
        return messageChatDeletePhoto.call(this as MessageChatDeletePhoto);
      case MessageChatAddMembers.constructor:
        return messageChatAddMembers.call(this as MessageChatAddMembers);
      case MessageChatJoinByLink.constructor:
        return messageChatJoinByLink.call(this as MessageChatJoinByLink);
      case MessageChatJoinByRequest.constructor:
        return messageChatJoinByRequest.call(this as MessageChatJoinByRequest);
      case MessageChatDeleteMember.constructor:
        return messageChatDeleteMember.call(this as MessageChatDeleteMember);
      case MessageChatUpgradeTo.constructor:
        return messageChatUpgradeTo.call(this as MessageChatUpgradeTo);
      case MessageChatUpgradeFrom.constructor:
        return messageChatUpgradeFrom.call(this as MessageChatUpgradeFrom);
      case MessagePinMessage.constructor:
        return messagePinMessage.call(this as MessagePinMessage);
      case MessageScreenshotTaken.constructor:
        return messageScreenshotTaken.call(this as MessageScreenshotTaken);
      case MessageChatSetBackground.constructor:
        return messageChatSetBackground.call(this as MessageChatSetBackground);
      case MessageChatSetTheme.constructor:
        return messageChatSetTheme.call(this as MessageChatSetTheme);
      case MessageChatSetMessageAutoDeleteTime.constructor:
        return messageChatSetMessageAutoDeleteTime.call(
          this as MessageChatSetMessageAutoDeleteTime,
        );
      case MessageChatBoost.constructor:
        return messageChatBoost.call(this as MessageChatBoost);
      case MessageForumTopicCreated.constructor:
        return messageForumTopicCreated.call(this as MessageForumTopicCreated);
      case MessageForumTopicEdited.constructor:
        return messageForumTopicEdited.call(this as MessageForumTopicEdited);
      case MessageForumTopicIsClosedToggled.constructor:
        return messageForumTopicIsClosedToggled.call(
          this as MessageForumTopicIsClosedToggled,
        );
      case MessageForumTopicIsHiddenToggled.constructor:
        return messageForumTopicIsHiddenToggled.call(
          this as MessageForumTopicIsHiddenToggled,
        );
      case MessageSuggestProfilePhoto.constructor:
        return messageSuggestProfilePhoto.call(
          this as MessageSuggestProfilePhoto,
        );
      case MessageCustomServiceAction.constructor:
        return messageCustomServiceAction.call(
          this as MessageCustomServiceAction,
        );
      case MessageGameScore.constructor:
        return messageGameScore.call(this as MessageGameScore);
      case MessagePaymentSuccessful.constructor:
        return messagePaymentSuccessful.call(this as MessagePaymentSuccessful);
      case MessagePaymentSuccessfulBot.constructor:
        return messagePaymentSuccessfulBot.call(
          this as MessagePaymentSuccessfulBot,
        );
      case MessagePaymentRefunded.constructor:
        return messagePaymentRefunded.call(this as MessagePaymentRefunded);
      case MessageGiftedPremium.constructor:
        return messageGiftedPremium.call(this as MessageGiftedPremium);
      case MessagePremiumGiftCode.constructor:
        return messagePremiumGiftCode.call(this as MessagePremiumGiftCode);
      case MessageGiveawayCreated.constructor:
        return messageGiveawayCreated.call(this as MessageGiveawayCreated);
      case MessageGiveaway.constructor:
        return messageGiveaway.call(this as MessageGiveaway);
      case MessageGiveawayCompleted.constructor:
        return messageGiveawayCompleted.call(this as MessageGiveawayCompleted);
      case MessageGiveawayWinners.constructor:
        return messageGiveawayWinners.call(this as MessageGiveawayWinners);
      case MessageGiftedStars.constructor:
        return messageGiftedStars.call(this as MessageGiftedStars);
      case MessageGiveawayPrizeStars.constructor:
        return messageGiveawayPrizeStars.call(
          this as MessageGiveawayPrizeStars,
        );
      case MessageGift.constructor:
        return messageGift.call(this as MessageGift);
      case MessageUpgradedGift.constructor:
        return messageUpgradedGift.call(this as MessageUpgradedGift);
      case MessageRefundedUpgradedGift.constructor:
        return messageRefundedUpgradedGift.call(
          this as MessageRefundedUpgradedGift,
        );
      case MessagePaidMessagesRefunded.constructor:
        return messagePaidMessagesRefunded.call(
          this as MessagePaidMessagesRefunded,
        );
      case MessagePaidMessagePriceChanged.constructor:
        return messagePaidMessagePriceChanged.call(
          this as MessagePaidMessagePriceChanged,
        );
      case MessageDirectMessagePriceChanged.constructor:
        return messageDirectMessagePriceChanged.call(
          this as MessageDirectMessagePriceChanged,
        );
      case MessageChecklistTasksDone.constructor:
        return messageChecklistTasksDone.call(
          this as MessageChecklistTasksDone,
        );
      case MessageChecklistTasksAdded.constructor:
        return messageChecklistTasksAdded.call(
          this as MessageChecklistTasksAdded,
        );
      case MessageContactRegistered.constructor:
        return messageContactRegistered.call(this as MessageContactRegistered);
      case MessageUsersShared.constructor:
        return messageUsersShared.call(this as MessageUsersShared);
      case MessageChatShared.constructor:
        return messageChatShared.call(this as MessageChatShared);
      case MessageBotWriteAccessAllowed.constructor:
        return messageBotWriteAccessAllowed.call(
          this as MessageBotWriteAccessAllowed,
        );
      case MessageWebAppDataSent.constructor:
        return messageWebAppDataSent.call(this as MessageWebAppDataSent);
      case MessageWebAppDataReceived.constructor:
        return messageWebAppDataReceived.call(
          this as MessageWebAppDataReceived,
        );
      case MessagePassportDataSent.constructor:
        return messagePassportDataSent.call(this as MessagePassportDataSent);
      case MessagePassportDataReceived.constructor:
        return messagePassportDataReceived.call(
          this as MessagePassportDataReceived,
        );
      case MessageProximityAlertTriggered.constructor:
        return messageProximityAlertTriggered.call(
          this as MessageProximityAlertTriggered,
        );
      case MessageUnsupported.constructor:
        return messageUnsupported.call(this as MessageUnsupported);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(MessageText value)? messageText,
    TResult Function(MessageAnimation value)? messageAnimation,
    TResult Function(MessageAudio value)? messageAudio,
    TResult Function(MessageDocument value)? messageDocument,
    TResult Function(MessagePaidMedia value)? messagePaidMedia,
    TResult Function(MessagePhoto value)? messagePhoto,
    TResult Function(MessageSticker value)? messageSticker,
    TResult Function(MessageVideo value)? messageVideo,
    TResult Function(MessageVideoNote value)? messageVideoNote,
    TResult Function(MessageVoiceNote value)? messageVoiceNote,
    TResult Function(MessageExpiredPhoto value)? messageExpiredPhoto,
    TResult Function(MessageExpiredVideo value)? messageExpiredVideo,
    TResult Function(MessageExpiredVideoNote value)? messageExpiredVideoNote,
    TResult Function(MessageExpiredVoiceNote value)? messageExpiredVoiceNote,
    TResult Function(MessageLocation value)? messageLocation,
    TResult Function(MessageVenue value)? messageVenue,
    TResult Function(MessageContact value)? messageContact,
    TResult Function(MessageAnimatedEmoji value)? messageAnimatedEmoji,
    TResult Function(MessageDice value)? messageDice,
    TResult Function(MessageGame value)? messageGame,
    TResult Function(MessagePoll value)? messagePoll,
    TResult Function(MessageStory value)? messageStory,
    TResult Function(MessageChecklist value)? messageChecklist,
    TResult Function(MessageInvoice value)? messageInvoice,
    TResult Function(MessageCall value)? messageCall,
    TResult Function(MessageGroupCall value)? messageGroupCall,
    TResult Function(MessageVideoChatScheduled value)?
    messageVideoChatScheduled,
    TResult Function(MessageVideoChatStarted value)? messageVideoChatStarted,
    TResult Function(MessageVideoChatEnded value)? messageVideoChatEnded,
    TResult Function(MessageInviteVideoChatParticipants value)?
    messageInviteVideoChatParticipants,
    TResult Function(MessageBasicGroupChatCreate value)?
    messageBasicGroupChatCreate,
    TResult Function(MessageSupergroupChatCreate value)?
    messageSupergroupChatCreate,
    TResult Function(MessageChatChangeTitle value)? messageChatChangeTitle,
    TResult Function(MessageChatChangePhoto value)? messageChatChangePhoto,
    TResult Function(MessageChatDeletePhoto value)? messageChatDeletePhoto,
    TResult Function(MessageChatAddMembers value)? messageChatAddMembers,
    TResult Function(MessageChatJoinByLink value)? messageChatJoinByLink,
    TResult Function(MessageChatJoinByRequest value)? messageChatJoinByRequest,
    TResult Function(MessageChatDeleteMember value)? messageChatDeleteMember,
    TResult Function(MessageChatUpgradeTo value)? messageChatUpgradeTo,
    TResult Function(MessageChatUpgradeFrom value)? messageChatUpgradeFrom,
    TResult Function(MessagePinMessage value)? messagePinMessage,
    TResult Function(MessageScreenshotTaken value)? messageScreenshotTaken,
    TResult Function(MessageChatSetBackground value)? messageChatSetBackground,
    TResult Function(MessageChatSetTheme value)? messageChatSetTheme,
    TResult Function(MessageChatSetMessageAutoDeleteTime value)?
    messageChatSetMessageAutoDeleteTime,
    TResult Function(MessageChatBoost value)? messageChatBoost,
    TResult Function(MessageForumTopicCreated value)? messageForumTopicCreated,
    TResult Function(MessageForumTopicEdited value)? messageForumTopicEdited,
    TResult Function(MessageForumTopicIsClosedToggled value)?
    messageForumTopicIsClosedToggled,
    TResult Function(MessageForumTopicIsHiddenToggled value)?
    messageForumTopicIsHiddenToggled,
    TResult Function(MessageSuggestProfilePhoto value)?
    messageSuggestProfilePhoto,
    TResult Function(MessageCustomServiceAction value)?
    messageCustomServiceAction,
    TResult Function(MessageGameScore value)? messageGameScore,
    TResult Function(MessagePaymentSuccessful value)? messagePaymentSuccessful,
    TResult Function(MessagePaymentSuccessfulBot value)?
    messagePaymentSuccessfulBot,
    TResult Function(MessagePaymentRefunded value)? messagePaymentRefunded,
    TResult Function(MessageGiftedPremium value)? messageGiftedPremium,
    TResult Function(MessagePremiumGiftCode value)? messagePremiumGiftCode,
    TResult Function(MessageGiveawayCreated value)? messageGiveawayCreated,
    TResult Function(MessageGiveaway value)? messageGiveaway,
    TResult Function(MessageGiveawayCompleted value)? messageGiveawayCompleted,
    TResult Function(MessageGiveawayWinners value)? messageGiveawayWinners,
    TResult Function(MessageGiftedStars value)? messageGiftedStars,
    TResult Function(MessageGiveawayPrizeStars value)?
    messageGiveawayPrizeStars,
    TResult Function(MessageGift value)? messageGift,
    TResult Function(MessageUpgradedGift value)? messageUpgradedGift,
    TResult Function(MessageRefundedUpgradedGift value)?
    messageRefundedUpgradedGift,
    TResult Function(MessagePaidMessagesRefunded value)?
    messagePaidMessagesRefunded,
    TResult Function(MessagePaidMessagePriceChanged value)?
    messagePaidMessagePriceChanged,
    TResult Function(MessageDirectMessagePriceChanged value)?
    messageDirectMessagePriceChanged,
    TResult Function(MessageChecklistTasksDone value)?
    messageChecklistTasksDone,
    TResult Function(MessageChecklistTasksAdded value)?
    messageChecklistTasksAdded,
    TResult Function(MessageContactRegistered value)? messageContactRegistered,
    TResult Function(MessageUsersShared value)? messageUsersShared,
    TResult Function(MessageChatShared value)? messageChatShared,
    TResult Function(MessageBotWriteAccessAllowed value)?
    messageBotWriteAccessAllowed,
    TResult Function(MessageWebAppDataSent value)? messageWebAppDataSent,
    TResult Function(MessageWebAppDataReceived value)?
    messageWebAppDataReceived,
    TResult Function(MessagePassportDataSent value)? messagePassportDataSent,
    TResult Function(MessagePassportDataReceived value)?
    messagePassportDataReceived,
    TResult Function(MessageProximityAlertTriggered value)?
    messageProximityAlertTriggered,
    TResult Function(MessageUnsupported value)? messageUnsupported,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case MessageText.constructor:
        if (messageText != null) {
          return messageText.call(this as MessageText);
        }
        break;
      case MessageAnimation.constructor:
        if (messageAnimation != null) {
          return messageAnimation.call(this as MessageAnimation);
        }
        break;
      case MessageAudio.constructor:
        if (messageAudio != null) {
          return messageAudio.call(this as MessageAudio);
        }
        break;
      case MessageDocument.constructor:
        if (messageDocument != null) {
          return messageDocument.call(this as MessageDocument);
        }
        break;
      case MessagePaidMedia.constructor:
        if (messagePaidMedia != null) {
          return messagePaidMedia.call(this as MessagePaidMedia);
        }
        break;
      case MessagePhoto.constructor:
        if (messagePhoto != null) {
          return messagePhoto.call(this as MessagePhoto);
        }
        break;
      case MessageSticker.constructor:
        if (messageSticker != null) {
          return messageSticker.call(this as MessageSticker);
        }
        break;
      case MessageVideo.constructor:
        if (messageVideo != null) {
          return messageVideo.call(this as MessageVideo);
        }
        break;
      case MessageVideoNote.constructor:
        if (messageVideoNote != null) {
          return messageVideoNote.call(this as MessageVideoNote);
        }
        break;
      case MessageVoiceNote.constructor:
        if (messageVoiceNote != null) {
          return messageVoiceNote.call(this as MessageVoiceNote);
        }
        break;
      case MessageExpiredPhoto.constructor:
        if (messageExpiredPhoto != null) {
          return messageExpiredPhoto.call(this as MessageExpiredPhoto);
        }
        break;
      case MessageExpiredVideo.constructor:
        if (messageExpiredVideo != null) {
          return messageExpiredVideo.call(this as MessageExpiredVideo);
        }
        break;
      case MessageExpiredVideoNote.constructor:
        if (messageExpiredVideoNote != null) {
          return messageExpiredVideoNote.call(this as MessageExpiredVideoNote);
        }
        break;
      case MessageExpiredVoiceNote.constructor:
        if (messageExpiredVoiceNote != null) {
          return messageExpiredVoiceNote.call(this as MessageExpiredVoiceNote);
        }
        break;
      case MessageLocation.constructor:
        if (messageLocation != null) {
          return messageLocation.call(this as MessageLocation);
        }
        break;
      case MessageVenue.constructor:
        if (messageVenue != null) {
          return messageVenue.call(this as MessageVenue);
        }
        break;
      case MessageContact.constructor:
        if (messageContact != null) {
          return messageContact.call(this as MessageContact);
        }
        break;
      case MessageAnimatedEmoji.constructor:
        if (messageAnimatedEmoji != null) {
          return messageAnimatedEmoji.call(this as MessageAnimatedEmoji);
        }
        break;
      case MessageDice.constructor:
        if (messageDice != null) {
          return messageDice.call(this as MessageDice);
        }
        break;
      case MessageGame.constructor:
        if (messageGame != null) {
          return messageGame.call(this as MessageGame);
        }
        break;
      case MessagePoll.constructor:
        if (messagePoll != null) {
          return messagePoll.call(this as MessagePoll);
        }
        break;
      case MessageStory.constructor:
        if (messageStory != null) {
          return messageStory.call(this as MessageStory);
        }
        break;
      case MessageChecklist.constructor:
        if (messageChecklist != null) {
          return messageChecklist.call(this as MessageChecklist);
        }
        break;
      case MessageInvoice.constructor:
        if (messageInvoice != null) {
          return messageInvoice.call(this as MessageInvoice);
        }
        break;
      case MessageCall.constructor:
        if (messageCall != null) {
          return messageCall.call(this as MessageCall);
        }
        break;
      case MessageGroupCall.constructor:
        if (messageGroupCall != null) {
          return messageGroupCall.call(this as MessageGroupCall);
        }
        break;
      case MessageVideoChatScheduled.constructor:
        if (messageVideoChatScheduled != null) {
          return messageVideoChatScheduled.call(
            this as MessageVideoChatScheduled,
          );
        }
        break;
      case MessageVideoChatStarted.constructor:
        if (messageVideoChatStarted != null) {
          return messageVideoChatStarted.call(this as MessageVideoChatStarted);
        }
        break;
      case MessageVideoChatEnded.constructor:
        if (messageVideoChatEnded != null) {
          return messageVideoChatEnded.call(this as MessageVideoChatEnded);
        }
        break;
      case MessageInviteVideoChatParticipants.constructor:
        if (messageInviteVideoChatParticipants != null) {
          return messageInviteVideoChatParticipants.call(
            this as MessageInviteVideoChatParticipants,
          );
        }
        break;
      case MessageBasicGroupChatCreate.constructor:
        if (messageBasicGroupChatCreate != null) {
          return messageBasicGroupChatCreate.call(
            this as MessageBasicGroupChatCreate,
          );
        }
        break;
      case MessageSupergroupChatCreate.constructor:
        if (messageSupergroupChatCreate != null) {
          return messageSupergroupChatCreate.call(
            this as MessageSupergroupChatCreate,
          );
        }
        break;
      case MessageChatChangeTitle.constructor:
        if (messageChatChangeTitle != null) {
          return messageChatChangeTitle.call(this as MessageChatChangeTitle);
        }
        break;
      case MessageChatChangePhoto.constructor:
        if (messageChatChangePhoto != null) {
          return messageChatChangePhoto.call(this as MessageChatChangePhoto);
        }
        break;
      case MessageChatDeletePhoto.constructor:
        if (messageChatDeletePhoto != null) {
          return messageChatDeletePhoto.call(this as MessageChatDeletePhoto);
        }
        break;
      case MessageChatAddMembers.constructor:
        if (messageChatAddMembers != null) {
          return messageChatAddMembers.call(this as MessageChatAddMembers);
        }
        break;
      case MessageChatJoinByLink.constructor:
        if (messageChatJoinByLink != null) {
          return messageChatJoinByLink.call(this as MessageChatJoinByLink);
        }
        break;
      case MessageChatJoinByRequest.constructor:
        if (messageChatJoinByRequest != null) {
          return messageChatJoinByRequest.call(
            this as MessageChatJoinByRequest,
          );
        }
        break;
      case MessageChatDeleteMember.constructor:
        if (messageChatDeleteMember != null) {
          return messageChatDeleteMember.call(this as MessageChatDeleteMember);
        }
        break;
      case MessageChatUpgradeTo.constructor:
        if (messageChatUpgradeTo != null) {
          return messageChatUpgradeTo.call(this as MessageChatUpgradeTo);
        }
        break;
      case MessageChatUpgradeFrom.constructor:
        if (messageChatUpgradeFrom != null) {
          return messageChatUpgradeFrom.call(this as MessageChatUpgradeFrom);
        }
        break;
      case MessagePinMessage.constructor:
        if (messagePinMessage != null) {
          return messagePinMessage.call(this as MessagePinMessage);
        }
        break;
      case MessageScreenshotTaken.constructor:
        if (messageScreenshotTaken != null) {
          return messageScreenshotTaken.call(this as MessageScreenshotTaken);
        }
        break;
      case MessageChatSetBackground.constructor:
        if (messageChatSetBackground != null) {
          return messageChatSetBackground.call(
            this as MessageChatSetBackground,
          );
        }
        break;
      case MessageChatSetTheme.constructor:
        if (messageChatSetTheme != null) {
          return messageChatSetTheme.call(this as MessageChatSetTheme);
        }
        break;
      case MessageChatSetMessageAutoDeleteTime.constructor:
        if (messageChatSetMessageAutoDeleteTime != null) {
          return messageChatSetMessageAutoDeleteTime.call(
            this as MessageChatSetMessageAutoDeleteTime,
          );
        }
        break;
      case MessageChatBoost.constructor:
        if (messageChatBoost != null) {
          return messageChatBoost.call(this as MessageChatBoost);
        }
        break;
      case MessageForumTopicCreated.constructor:
        if (messageForumTopicCreated != null) {
          return messageForumTopicCreated.call(
            this as MessageForumTopicCreated,
          );
        }
        break;
      case MessageForumTopicEdited.constructor:
        if (messageForumTopicEdited != null) {
          return messageForumTopicEdited.call(this as MessageForumTopicEdited);
        }
        break;
      case MessageForumTopicIsClosedToggled.constructor:
        if (messageForumTopicIsClosedToggled != null) {
          return messageForumTopicIsClosedToggled.call(
            this as MessageForumTopicIsClosedToggled,
          );
        }
        break;
      case MessageForumTopicIsHiddenToggled.constructor:
        if (messageForumTopicIsHiddenToggled != null) {
          return messageForumTopicIsHiddenToggled.call(
            this as MessageForumTopicIsHiddenToggled,
          );
        }
        break;
      case MessageSuggestProfilePhoto.constructor:
        if (messageSuggestProfilePhoto != null) {
          return messageSuggestProfilePhoto.call(
            this as MessageSuggestProfilePhoto,
          );
        }
        break;
      case MessageCustomServiceAction.constructor:
        if (messageCustomServiceAction != null) {
          return messageCustomServiceAction.call(
            this as MessageCustomServiceAction,
          );
        }
        break;
      case MessageGameScore.constructor:
        if (messageGameScore != null) {
          return messageGameScore.call(this as MessageGameScore);
        }
        break;
      case MessagePaymentSuccessful.constructor:
        if (messagePaymentSuccessful != null) {
          return messagePaymentSuccessful.call(
            this as MessagePaymentSuccessful,
          );
        }
        break;
      case MessagePaymentSuccessfulBot.constructor:
        if (messagePaymentSuccessfulBot != null) {
          return messagePaymentSuccessfulBot.call(
            this as MessagePaymentSuccessfulBot,
          );
        }
        break;
      case MessagePaymentRefunded.constructor:
        if (messagePaymentRefunded != null) {
          return messagePaymentRefunded.call(this as MessagePaymentRefunded);
        }
        break;
      case MessageGiftedPremium.constructor:
        if (messageGiftedPremium != null) {
          return messageGiftedPremium.call(this as MessageGiftedPremium);
        }
        break;
      case MessagePremiumGiftCode.constructor:
        if (messagePremiumGiftCode != null) {
          return messagePremiumGiftCode.call(this as MessagePremiumGiftCode);
        }
        break;
      case MessageGiveawayCreated.constructor:
        if (messageGiveawayCreated != null) {
          return messageGiveawayCreated.call(this as MessageGiveawayCreated);
        }
        break;
      case MessageGiveaway.constructor:
        if (messageGiveaway != null) {
          return messageGiveaway.call(this as MessageGiveaway);
        }
        break;
      case MessageGiveawayCompleted.constructor:
        if (messageGiveawayCompleted != null) {
          return messageGiveawayCompleted.call(
            this as MessageGiveawayCompleted,
          );
        }
        break;
      case MessageGiveawayWinners.constructor:
        if (messageGiveawayWinners != null) {
          return messageGiveawayWinners.call(this as MessageGiveawayWinners);
        }
        break;
      case MessageGiftedStars.constructor:
        if (messageGiftedStars != null) {
          return messageGiftedStars.call(this as MessageGiftedStars);
        }
        break;
      case MessageGiveawayPrizeStars.constructor:
        if (messageGiveawayPrizeStars != null) {
          return messageGiveawayPrizeStars.call(
            this as MessageGiveawayPrizeStars,
          );
        }
        break;
      case MessageGift.constructor:
        if (messageGift != null) {
          return messageGift.call(this as MessageGift);
        }
        break;
      case MessageUpgradedGift.constructor:
        if (messageUpgradedGift != null) {
          return messageUpgradedGift.call(this as MessageUpgradedGift);
        }
        break;
      case MessageRefundedUpgradedGift.constructor:
        if (messageRefundedUpgradedGift != null) {
          return messageRefundedUpgradedGift.call(
            this as MessageRefundedUpgradedGift,
          );
        }
        break;
      case MessagePaidMessagesRefunded.constructor:
        if (messagePaidMessagesRefunded != null) {
          return messagePaidMessagesRefunded.call(
            this as MessagePaidMessagesRefunded,
          );
        }
        break;
      case MessagePaidMessagePriceChanged.constructor:
        if (messagePaidMessagePriceChanged != null) {
          return messagePaidMessagePriceChanged.call(
            this as MessagePaidMessagePriceChanged,
          );
        }
        break;
      case MessageDirectMessagePriceChanged.constructor:
        if (messageDirectMessagePriceChanged != null) {
          return messageDirectMessagePriceChanged.call(
            this as MessageDirectMessagePriceChanged,
          );
        }
        break;
      case MessageChecklistTasksDone.constructor:
        if (messageChecklistTasksDone != null) {
          return messageChecklistTasksDone.call(
            this as MessageChecklistTasksDone,
          );
        }
        break;
      case MessageChecklistTasksAdded.constructor:
        if (messageChecklistTasksAdded != null) {
          return messageChecklistTasksAdded.call(
            this as MessageChecklistTasksAdded,
          );
        }
        break;
      case MessageContactRegistered.constructor:
        if (messageContactRegistered != null) {
          return messageContactRegistered.call(
            this as MessageContactRegistered,
          );
        }
        break;
      case MessageUsersShared.constructor:
        if (messageUsersShared != null) {
          return messageUsersShared.call(this as MessageUsersShared);
        }
        break;
      case MessageChatShared.constructor:
        if (messageChatShared != null) {
          return messageChatShared.call(this as MessageChatShared);
        }
        break;
      case MessageBotWriteAccessAllowed.constructor:
        if (messageBotWriteAccessAllowed != null) {
          return messageBotWriteAccessAllowed.call(
            this as MessageBotWriteAccessAllowed,
          );
        }
        break;
      case MessageWebAppDataSent.constructor:
        if (messageWebAppDataSent != null) {
          return messageWebAppDataSent.call(this as MessageWebAppDataSent);
        }
        break;
      case MessageWebAppDataReceived.constructor:
        if (messageWebAppDataReceived != null) {
          return messageWebAppDataReceived.call(
            this as MessageWebAppDataReceived,
          );
        }
        break;
      case MessagePassportDataSent.constructor:
        if (messagePassportDataSent != null) {
          return messagePassportDataSent.call(this as MessagePassportDataSent);
        }
        break;
      case MessagePassportDataReceived.constructor:
        if (messagePassportDataReceived != null) {
          return messagePassportDataReceived.call(
            this as MessagePassportDataReceived,
          );
        }
        break;
      case MessageProximityAlertTriggered.constructor:
        if (messageProximityAlertTriggered != null) {
          return messageProximityAlertTriggered.call(
            this as MessageProximityAlertTriggered,
          );
        }
        break;
      case MessageUnsupported.constructor:
        if (messageUnsupported != null) {
          return messageUnsupported.call(this as MessageUnsupported);
        }
        break;
    }
    return orElse.call();
  }
}

extension MessageTextExtensions on MessageText {
  MessageText copyWith({
    FormattedText? text,
    LinkPreview? linkPreview,
    LinkPreviewOptions? linkPreviewOptions,
  }) => MessageText(
    text: text ?? this.text,
    linkPreview: linkPreview ?? this.linkPreview,
    linkPreviewOptions: linkPreviewOptions ?? this.linkPreviewOptions,
  );
}

extension MessageAnimationExtensions on MessageAnimation {
  MessageAnimation copyWith({
    Animation? animation,
    FormattedText? caption,
    bool? showCaptionAboveMedia,
    bool? hasSpoiler,
    bool? isSecret,
  }) => MessageAnimation(
    animation: animation ?? this.animation,
    caption: caption ?? this.caption,
    showCaptionAboveMedia: showCaptionAboveMedia ?? this.showCaptionAboveMedia,
    hasSpoiler: hasSpoiler ?? this.hasSpoiler,
    isSecret: isSecret ?? this.isSecret,
  );
}

extension MessageAudioExtensions on MessageAudio {
  MessageAudio copyWith({Audio? audio, FormattedText? caption}) => MessageAudio(
    audio: audio ?? this.audio,
    caption: caption ?? this.caption,
  );
}

extension MessageDocumentExtensions on MessageDocument {
  MessageDocument copyWith({Document? document, FormattedText? caption}) =>
      MessageDocument(
        document: document ?? this.document,
        caption: caption ?? this.caption,
      );
}

extension MessagePaidMediaExtensions on MessagePaidMedia {
  MessagePaidMedia copyWith({
    int? starCount,
    List<PaidMedia>? media,
    FormattedText? caption,
    bool? showCaptionAboveMedia,
  }) => MessagePaidMedia(
    starCount: starCount ?? this.starCount,
    media: media ?? this.media,
    caption: caption ?? this.caption,
    showCaptionAboveMedia: showCaptionAboveMedia ?? this.showCaptionAboveMedia,
  );
}

extension MessagePhotoExtensions on MessagePhoto {
  MessagePhoto copyWith({
    Photo? photo,
    FormattedText? caption,
    bool? showCaptionAboveMedia,
    bool? hasSpoiler,
    bool? isSecret,
  }) => MessagePhoto(
    photo: photo ?? this.photo,
    caption: caption ?? this.caption,
    showCaptionAboveMedia: showCaptionAboveMedia ?? this.showCaptionAboveMedia,
    hasSpoiler: hasSpoiler ?? this.hasSpoiler,
    isSecret: isSecret ?? this.isSecret,
  );
}

extension MessageStickerExtensions on MessageSticker {
  MessageSticker copyWith({Sticker? sticker, bool? isPremium}) =>
      MessageSticker(
        sticker: sticker ?? this.sticker,
        isPremium: isPremium ?? this.isPremium,
      );
}

extension MessageVideoExtensions on MessageVideo {
  MessageVideo copyWith({
    Video? video,
    List<AlternativeVideo>? alternativeVideos,
    List<VideoStoryboard>? storyboards,
    Photo? cover,
    int? startTimestamp,
    FormattedText? caption,
    bool? showCaptionAboveMedia,
    bool? hasSpoiler,
    bool? isSecret,
  }) => MessageVideo(
    video: video ?? this.video,
    alternativeVideos: alternativeVideos ?? this.alternativeVideos,
    storyboards: storyboards ?? this.storyboards,
    cover: cover ?? this.cover,
    startTimestamp: startTimestamp ?? this.startTimestamp,
    caption: caption ?? this.caption,
    showCaptionAboveMedia: showCaptionAboveMedia ?? this.showCaptionAboveMedia,
    hasSpoiler: hasSpoiler ?? this.hasSpoiler,
    isSecret: isSecret ?? this.isSecret,
  );
}

extension MessageVideoNoteExtensions on MessageVideoNote {
  MessageVideoNote copyWith({
    VideoNote? videoNote,
    bool? isViewed,
    bool? isSecret,
  }) => MessageVideoNote(
    videoNote: videoNote ?? this.videoNote,
    isViewed: isViewed ?? this.isViewed,
    isSecret: isSecret ?? this.isSecret,
  );
}

extension MessageVoiceNoteExtensions on MessageVoiceNote {
  MessageVoiceNote copyWith({
    VoiceNote? voiceNote,
    FormattedText? caption,
    bool? isListened,
  }) => MessageVoiceNote(
    voiceNote: voiceNote ?? this.voiceNote,
    caption: caption ?? this.caption,
    isListened: isListened ?? this.isListened,
  );
}

extension MessageLocationExtensions on MessageLocation {
  MessageLocation copyWith({
    Location? location,
    int? livePeriod,
    int? expiresIn,
    int? heading,
    int? proximityAlertRadius,
  }) => MessageLocation(
    location: location ?? this.location,
    livePeriod: livePeriod ?? this.livePeriod,
    expiresIn: expiresIn ?? this.expiresIn,
    heading: heading ?? this.heading,
    proximityAlertRadius: proximityAlertRadius ?? this.proximityAlertRadius,
  );
}

extension MessageVenueExtensions on MessageVenue {
  MessageVenue copyWith({Venue? venue}) =>
      MessageVenue(venue: venue ?? this.venue);
}

extension MessageContactExtensions on MessageContact {
  MessageContact copyWith({Contact? contact}) =>
      MessageContact(contact: contact ?? this.contact);
}

extension MessageAnimatedEmojiExtensions on MessageAnimatedEmoji {
  MessageAnimatedEmoji copyWith({
    AnimatedEmoji? animatedEmoji,
    String? emoji,
  }) => MessageAnimatedEmoji(
    animatedEmoji: animatedEmoji ?? this.animatedEmoji,
    emoji: emoji ?? this.emoji,
  );
}

extension MessageDiceExtensions on MessageDice {
  MessageDice copyWith({
    DiceStickers? initialState,
    DiceStickers? finalState,
    String? emoji,
    int? value,
    int? successAnimationFrameNumber,
  }) => MessageDice(
    initialState: initialState ?? this.initialState,
    finalState: finalState ?? this.finalState,
    emoji: emoji ?? this.emoji,
    value: value ?? this.value,
    successAnimationFrameNumber:
        successAnimationFrameNumber ?? this.successAnimationFrameNumber,
  );
}

extension MessageGameExtensions on MessageGame {
  MessageGame copyWith({Game? game}) => MessageGame(game: game ?? this.game);
}

extension MessagePollExtensions on MessagePoll {
  MessagePoll copyWith({Poll? poll}) => MessagePoll(poll: poll ?? this.poll);
}

extension MessageStoryExtensions on MessageStory {
  MessageStory copyWith({
    int? storyPosterChatId,
    int? storyId,
    bool? viaMention,
  }) => MessageStory(
    storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
    storyId: storyId ?? this.storyId,
    viaMention: viaMention ?? this.viaMention,
  );
}

extension MessageChecklistExtensions on MessageChecklist {
  MessageChecklist copyWith({Checklist? list}) =>
      MessageChecklist(list: list ?? this.list);
}

extension MessageInvoiceExtensions on MessageInvoice {
  MessageInvoice copyWith({
    ProductInfo? productInfo,
    String? currency,
    int? totalAmount,
    String? startParameter,
    bool? isTest,
    bool? needShippingAddress,
    int? receiptMessageId,
    PaidMedia? paidMedia,
    FormattedText? paidMediaCaption,
  }) => MessageInvoice(
    productInfo: productInfo ?? this.productInfo,
    currency: currency ?? this.currency,
    totalAmount: totalAmount ?? this.totalAmount,
    startParameter: startParameter ?? this.startParameter,
    isTest: isTest ?? this.isTest,
    needShippingAddress: needShippingAddress ?? this.needShippingAddress,
    receiptMessageId: receiptMessageId ?? this.receiptMessageId,
    paidMedia: paidMedia ?? this.paidMedia,
    paidMediaCaption: paidMediaCaption ?? this.paidMediaCaption,
  );
}

extension MessageCallExtensions on MessageCall {
  MessageCall copyWith({
    bool? isVideo,
    CallDiscardReason? discardReason,
    int? duration,
  }) => MessageCall(
    isVideo: isVideo ?? this.isVideo,
    discardReason: discardReason ?? this.discardReason,
    duration: duration ?? this.duration,
  );
}

extension MessageGroupCallExtensions on MessageGroupCall {
  MessageGroupCall copyWith({
    bool? isActive,
    bool? wasMissed,
    bool? isVideo,
    int? duration,
    List<MessageSender>? otherParticipantIds,
  }) => MessageGroupCall(
    isActive: isActive ?? this.isActive,
    wasMissed: wasMissed ?? this.wasMissed,
    isVideo: isVideo ?? this.isVideo,
    duration: duration ?? this.duration,
    otherParticipantIds: otherParticipantIds ?? this.otherParticipantIds,
  );
}

extension MessageVideoChatScheduledExtensions on MessageVideoChatScheduled {
  MessageVideoChatScheduled copyWith({int? groupCallId, int? startDate}) =>
      MessageVideoChatScheduled(
        groupCallId: groupCallId ?? this.groupCallId,
        startDate: startDate ?? this.startDate,
      );
}

extension MessageVideoChatStartedExtensions on MessageVideoChatStarted {
  MessageVideoChatStarted copyWith({int? groupCallId}) =>
      MessageVideoChatStarted(groupCallId: groupCallId ?? this.groupCallId);
}

extension MessageVideoChatEndedExtensions on MessageVideoChatEnded {
  MessageVideoChatEnded copyWith({int? duration}) =>
      MessageVideoChatEnded(duration: duration ?? this.duration);
}

extension MessageInviteVideoChatParticipantsExtensions
    on MessageInviteVideoChatParticipants {
  MessageInviteVideoChatParticipants copyWith({
    int? groupCallId,
    List<int>? userIds,
  }) => MessageInviteVideoChatParticipants(
    groupCallId: groupCallId ?? this.groupCallId,
    userIds: userIds ?? this.userIds,
  );
}

extension MessageBasicGroupChatCreateExtensions on MessageBasicGroupChatCreate {
  MessageBasicGroupChatCreate copyWith({
    String? title,
    List<int>? memberUserIds,
  }) => MessageBasicGroupChatCreate(
    title: title ?? this.title,
    memberUserIds: memberUserIds ?? this.memberUserIds,
  );
}

extension MessageSupergroupChatCreateExtensions on MessageSupergroupChatCreate {
  MessageSupergroupChatCreate copyWith({String? title}) =>
      MessageSupergroupChatCreate(title: title ?? this.title);
}

extension MessageChatChangeTitleExtensions on MessageChatChangeTitle {
  MessageChatChangeTitle copyWith({String? title}) =>
      MessageChatChangeTitle(title: title ?? this.title);
}

extension MessageChatChangePhotoExtensions on MessageChatChangePhoto {
  MessageChatChangePhoto copyWith({ChatPhoto? photo}) =>
      MessageChatChangePhoto(photo: photo ?? this.photo);
}

extension MessageChatAddMembersExtensions on MessageChatAddMembers {
  MessageChatAddMembers copyWith({List<int>? memberUserIds}) =>
      MessageChatAddMembers(memberUserIds: memberUserIds ?? this.memberUserIds);
}

extension MessageChatDeleteMemberExtensions on MessageChatDeleteMember {
  MessageChatDeleteMember copyWith({int? userId}) =>
      MessageChatDeleteMember(userId: userId ?? this.userId);
}

extension MessageChatUpgradeToExtensions on MessageChatUpgradeTo {
  MessageChatUpgradeTo copyWith({int? supergroupId}) =>
      MessageChatUpgradeTo(supergroupId: supergroupId ?? this.supergroupId);
}

extension MessageChatUpgradeFromExtensions on MessageChatUpgradeFrom {
  MessageChatUpgradeFrom copyWith({String? title, int? basicGroupId}) =>
      MessageChatUpgradeFrom(
        title: title ?? this.title,
        basicGroupId: basicGroupId ?? this.basicGroupId,
      );
}

extension MessagePinMessageExtensions on MessagePinMessage {
  MessagePinMessage copyWith({int? messageId}) =>
      MessagePinMessage(messageId: messageId ?? this.messageId);
}

extension MessageChatSetBackgroundExtensions on MessageChatSetBackground {
  MessageChatSetBackground copyWith({
    int? oldBackgroundMessageId,
    ChatBackground? background,
    bool? onlyForSelf,
  }) => MessageChatSetBackground(
    oldBackgroundMessageId:
        oldBackgroundMessageId ?? this.oldBackgroundMessageId,
    background: background ?? this.background,
    onlyForSelf: onlyForSelf ?? this.onlyForSelf,
  );
}

extension MessageChatSetThemeExtensions on MessageChatSetTheme {
  MessageChatSetTheme copyWith({String? themeName}) =>
      MessageChatSetTheme(themeName: themeName ?? this.themeName);
}

extension MessageChatSetMessageAutoDeleteTimeExtensions
    on MessageChatSetMessageAutoDeleteTime {
  MessageChatSetMessageAutoDeleteTime copyWith({
    int? messageAutoDeleteTime,
    int? fromUserId,
  }) => MessageChatSetMessageAutoDeleteTime(
    messageAutoDeleteTime: messageAutoDeleteTime ?? this.messageAutoDeleteTime,
    fromUserId: fromUserId ?? this.fromUserId,
  );
}

extension MessageChatBoostExtensions on MessageChatBoost {
  MessageChatBoost copyWith({int? boostCount}) =>
      MessageChatBoost(boostCount: boostCount ?? this.boostCount);
}

extension MessageForumTopicCreatedExtensions on MessageForumTopicCreated {
  MessageForumTopicCreated copyWith({String? name, ForumTopicIcon? icon}) =>
      MessageForumTopicCreated(
        name: name ?? this.name,
        icon: icon ?? this.icon,
      );
}

extension MessageForumTopicEditedExtensions on MessageForumTopicEdited {
  MessageForumTopicEdited copyWith({
    String? name,
    bool? editIconCustomEmojiId,
    int? iconCustomEmojiId,
  }) => MessageForumTopicEdited(
    name: name ?? this.name,
    editIconCustomEmojiId: editIconCustomEmojiId ?? this.editIconCustomEmojiId,
    iconCustomEmojiId: iconCustomEmojiId ?? this.iconCustomEmojiId,
  );
}

extension MessageForumTopicIsClosedToggledExtensions
    on MessageForumTopicIsClosedToggled {
  MessageForumTopicIsClosedToggled copyWith({bool? isClosed}) =>
      MessageForumTopicIsClosedToggled(isClosed: isClosed ?? this.isClosed);
}

extension MessageForumTopicIsHiddenToggledExtensions
    on MessageForumTopicIsHiddenToggled {
  MessageForumTopicIsHiddenToggled copyWith({bool? isHidden}) =>
      MessageForumTopicIsHiddenToggled(isHidden: isHidden ?? this.isHidden);
}

extension MessageSuggestProfilePhotoExtensions on MessageSuggestProfilePhoto {
  MessageSuggestProfilePhoto copyWith({ChatPhoto? photo}) =>
      MessageSuggestProfilePhoto(photo: photo ?? this.photo);
}

extension MessageCustomServiceActionExtensions on MessageCustomServiceAction {
  MessageCustomServiceAction copyWith({String? text}) =>
      MessageCustomServiceAction(text: text ?? this.text);
}

extension MessageGameScoreExtensions on MessageGameScore {
  MessageGameScore copyWith({int? gameMessageId, int? gameId, int? score}) =>
      MessageGameScore(
        gameMessageId: gameMessageId ?? this.gameMessageId,
        gameId: gameId ?? this.gameId,
        score: score ?? this.score,
      );
}

extension MessagePaymentSuccessfulExtensions on MessagePaymentSuccessful {
  MessagePaymentSuccessful copyWith({
    int? invoiceChatId,
    int? invoiceMessageId,
    String? currency,
    int? totalAmount,
    int? subscriptionUntilDate,
    bool? isRecurring,
    bool? isFirstRecurring,
    String? invoiceName,
  }) => MessagePaymentSuccessful(
    invoiceChatId: invoiceChatId ?? this.invoiceChatId,
    invoiceMessageId: invoiceMessageId ?? this.invoiceMessageId,
    currency: currency ?? this.currency,
    totalAmount: totalAmount ?? this.totalAmount,
    subscriptionUntilDate: subscriptionUntilDate ?? this.subscriptionUntilDate,
    isRecurring: isRecurring ?? this.isRecurring,
    isFirstRecurring: isFirstRecurring ?? this.isFirstRecurring,
    invoiceName: invoiceName ?? this.invoiceName,
  );
}

extension MessagePaymentSuccessfulBotExtensions on MessagePaymentSuccessfulBot {
  MessagePaymentSuccessfulBot copyWith({
    String? currency,
    int? totalAmount,
    int? subscriptionUntilDate,
    bool? isRecurring,
    bool? isFirstRecurring,
    String? invoicePayload,
    String? shippingOptionId,
    OrderInfo? orderInfo,
    String? telegramPaymentChargeId,
    String? providerPaymentChargeId,
  }) => MessagePaymentSuccessfulBot(
    currency: currency ?? this.currency,
    totalAmount: totalAmount ?? this.totalAmount,
    subscriptionUntilDate: subscriptionUntilDate ?? this.subscriptionUntilDate,
    isRecurring: isRecurring ?? this.isRecurring,
    isFirstRecurring: isFirstRecurring ?? this.isFirstRecurring,
    invoicePayload: invoicePayload ?? this.invoicePayload,
    shippingOptionId: shippingOptionId ?? this.shippingOptionId,
    orderInfo: orderInfo ?? this.orderInfo,
    telegramPaymentChargeId:
        telegramPaymentChargeId ?? this.telegramPaymentChargeId,
    providerPaymentChargeId:
        providerPaymentChargeId ?? this.providerPaymentChargeId,
  );
}

extension MessagePaymentRefundedExtensions on MessagePaymentRefunded {
  MessagePaymentRefunded copyWith({
    MessageSender? ownerId,
    String? currency,
    int? totalAmount,
    String? invoicePayload,
    String? telegramPaymentChargeId,
    String? providerPaymentChargeId,
  }) => MessagePaymentRefunded(
    ownerId: ownerId ?? this.ownerId,
    currency: currency ?? this.currency,
    totalAmount: totalAmount ?? this.totalAmount,
    invoicePayload: invoicePayload ?? this.invoicePayload,
    telegramPaymentChargeId:
        telegramPaymentChargeId ?? this.telegramPaymentChargeId,
    providerPaymentChargeId:
        providerPaymentChargeId ?? this.providerPaymentChargeId,
  );
}

extension MessageGiftedPremiumExtensions on MessageGiftedPremium {
  MessageGiftedPremium copyWith({
    int? gifterUserId,
    int? receiverUserId,
    FormattedText? text,
    String? currency,
    int? amount,
    String? cryptocurrency,
    int? cryptocurrencyAmount,
    int? monthCount,
    Sticker? sticker,
  }) => MessageGiftedPremium(
    gifterUserId: gifterUserId ?? this.gifterUserId,
    receiverUserId: receiverUserId ?? this.receiverUserId,
    text: text ?? this.text,
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    cryptocurrency: cryptocurrency ?? this.cryptocurrency,
    cryptocurrencyAmount: cryptocurrencyAmount ?? this.cryptocurrencyAmount,
    monthCount: monthCount ?? this.monthCount,
    sticker: sticker ?? this.sticker,
  );
}

extension MessagePremiumGiftCodeExtensions on MessagePremiumGiftCode {
  MessagePremiumGiftCode copyWith({
    MessageSender? creatorId,
    FormattedText? text,
    bool? isFromGiveaway,
    bool? isUnclaimed,
    String? currency,
    int? amount,
    String? cryptocurrency,
    int? cryptocurrencyAmount,
    int? monthCount,
    Sticker? sticker,
    String? code,
  }) => MessagePremiumGiftCode(
    creatorId: creatorId ?? this.creatorId,
    text: text ?? this.text,
    isFromGiveaway: isFromGiveaway ?? this.isFromGiveaway,
    isUnclaimed: isUnclaimed ?? this.isUnclaimed,
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    cryptocurrency: cryptocurrency ?? this.cryptocurrency,
    cryptocurrencyAmount: cryptocurrencyAmount ?? this.cryptocurrencyAmount,
    monthCount: monthCount ?? this.monthCount,
    sticker: sticker ?? this.sticker,
    code: code ?? this.code,
  );
}

extension MessageGiveawayCreatedExtensions on MessageGiveawayCreated {
  MessageGiveawayCreated copyWith({int? starCount}) =>
      MessageGiveawayCreated(starCount: starCount ?? this.starCount);
}

extension MessageGiveawayExtensions on MessageGiveaway {
  MessageGiveaway copyWith({
    GiveawayParameters? parameters,
    int? winnerCount,
    GiveawayPrize? prize,
    Sticker? sticker,
  }) => MessageGiveaway(
    parameters: parameters ?? this.parameters,
    winnerCount: winnerCount ?? this.winnerCount,
    prize: prize ?? this.prize,
    sticker: sticker ?? this.sticker,
  );
}

extension MessageGiveawayCompletedExtensions on MessageGiveawayCompleted {
  MessageGiveawayCompleted copyWith({
    int? giveawayMessageId,
    int? winnerCount,
    bool? isStarGiveaway,
    int? unclaimedPrizeCount,
  }) => MessageGiveawayCompleted(
    giveawayMessageId: giveawayMessageId ?? this.giveawayMessageId,
    winnerCount: winnerCount ?? this.winnerCount,
    isStarGiveaway: isStarGiveaway ?? this.isStarGiveaway,
    unclaimedPrizeCount: unclaimedPrizeCount ?? this.unclaimedPrizeCount,
  );
}

extension MessageGiveawayWinnersExtensions on MessageGiveawayWinners {
  MessageGiveawayWinners copyWith({
    int? boostedChatId,
    int? giveawayMessageId,
    int? additionalChatCount,
    int? actualWinnersSelectionDate,
    bool? onlyNewMembers,
    bool? wasRefunded,
    GiveawayPrize? prize,
    String? prizeDescription,
    int? winnerCount,
    List<int>? winnerUserIds,
    int? unclaimedPrizeCount,
  }) => MessageGiveawayWinners(
    boostedChatId: boostedChatId ?? this.boostedChatId,
    giveawayMessageId: giveawayMessageId ?? this.giveawayMessageId,
    additionalChatCount: additionalChatCount ?? this.additionalChatCount,
    actualWinnersSelectionDate:
        actualWinnersSelectionDate ?? this.actualWinnersSelectionDate,
    onlyNewMembers: onlyNewMembers ?? this.onlyNewMembers,
    wasRefunded: wasRefunded ?? this.wasRefunded,
    prize: prize ?? this.prize,
    prizeDescription: prizeDescription ?? this.prizeDescription,
    winnerCount: winnerCount ?? this.winnerCount,
    winnerUserIds: winnerUserIds ?? this.winnerUserIds,
    unclaimedPrizeCount: unclaimedPrizeCount ?? this.unclaimedPrizeCount,
  );
}

extension MessageGiftedStarsExtensions on MessageGiftedStars {
  MessageGiftedStars copyWith({
    int? gifterUserId,
    int? receiverUserId,
    String? currency,
    int? amount,
    String? cryptocurrency,
    int? cryptocurrencyAmount,
    int? starCount,
    String? transactionId,
    Sticker? sticker,
  }) => MessageGiftedStars(
    gifterUserId: gifterUserId ?? this.gifterUserId,
    receiverUserId: receiverUserId ?? this.receiverUserId,
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    cryptocurrency: cryptocurrency ?? this.cryptocurrency,
    cryptocurrencyAmount: cryptocurrencyAmount ?? this.cryptocurrencyAmount,
    starCount: starCount ?? this.starCount,
    transactionId: transactionId ?? this.transactionId,
    sticker: sticker ?? this.sticker,
  );
}

extension MessageGiveawayPrizeStarsExtensions on MessageGiveawayPrizeStars {
  MessageGiveawayPrizeStars copyWith({
    int? starCount,
    String? transactionId,
    int? boostedChatId,
    int? giveawayMessageId,
    bool? isUnclaimed,
    Sticker? sticker,
  }) => MessageGiveawayPrizeStars(
    starCount: starCount ?? this.starCount,
    transactionId: transactionId ?? this.transactionId,
    boostedChatId: boostedChatId ?? this.boostedChatId,
    giveawayMessageId: giveawayMessageId ?? this.giveawayMessageId,
    isUnclaimed: isUnclaimed ?? this.isUnclaimed,
    sticker: sticker ?? this.sticker,
  );
}

extension MessageGiftExtensions on MessageGift {
  MessageGift copyWith({
    Gift? gift,
    MessageSender? senderId,
    MessageSender? receiverId,
    String? receivedGiftId,
    FormattedText? text,
    int? sellStarCount,
    int? prepaidUpgradeStarCount,
    bool? isPrivate,
    bool? isSaved,
    bool? canBeUpgraded,
    bool? wasConverted,
    bool? wasUpgraded,
    bool? wasRefunded,
    String? upgradedReceivedGiftId,
  }) => MessageGift(
    gift: gift ?? this.gift,
    senderId: senderId ?? this.senderId,
    receiverId: receiverId ?? this.receiverId,
    receivedGiftId: receivedGiftId ?? this.receivedGiftId,
    text: text ?? this.text,
    sellStarCount: sellStarCount ?? this.sellStarCount,
    prepaidUpgradeStarCount:
        prepaidUpgradeStarCount ?? this.prepaidUpgradeStarCount,
    isPrivate: isPrivate ?? this.isPrivate,
    isSaved: isSaved ?? this.isSaved,
    canBeUpgraded: canBeUpgraded ?? this.canBeUpgraded,
    wasConverted: wasConverted ?? this.wasConverted,
    wasUpgraded: wasUpgraded ?? this.wasUpgraded,
    wasRefunded: wasRefunded ?? this.wasRefunded,
    upgradedReceivedGiftId:
        upgradedReceivedGiftId ?? this.upgradedReceivedGiftId,
  );
}

extension MessageUpgradedGiftExtensions on MessageUpgradedGift {
  MessageUpgradedGift copyWith({
    UpgradedGift? gift,
    MessageSender? senderId,
    MessageSender? receiverId,
    String? receivedGiftId,
    bool? isUpgrade,
    bool? isSaved,
    bool? canBeTransferred,
    bool? wasTransferred,
    int? lastResaleStarCount,
    int? transferStarCount,
    int? nextTransferDate,
    int? nextResaleDate,
    int? exportDate,
  }) => MessageUpgradedGift(
    gift: gift ?? this.gift,
    senderId: senderId ?? this.senderId,
    receiverId: receiverId ?? this.receiverId,
    receivedGiftId: receivedGiftId ?? this.receivedGiftId,
    isUpgrade: isUpgrade ?? this.isUpgrade,
    isSaved: isSaved ?? this.isSaved,
    canBeTransferred: canBeTransferred ?? this.canBeTransferred,
    wasTransferred: wasTransferred ?? this.wasTransferred,
    lastResaleStarCount: lastResaleStarCount ?? this.lastResaleStarCount,
    transferStarCount: transferStarCount ?? this.transferStarCount,
    nextTransferDate: nextTransferDate ?? this.nextTransferDate,
    nextResaleDate: nextResaleDate ?? this.nextResaleDate,
    exportDate: exportDate ?? this.exportDate,
  );
}

extension MessageRefundedUpgradedGiftExtensions on MessageRefundedUpgradedGift {
  MessageRefundedUpgradedGift copyWith({
    Gift? gift,
    MessageSender? senderId,
    MessageSender? receiverId,
    bool? isUpgrade,
  }) => MessageRefundedUpgradedGift(
    gift: gift ?? this.gift,
    senderId: senderId ?? this.senderId,
    receiverId: receiverId ?? this.receiverId,
    isUpgrade: isUpgrade ?? this.isUpgrade,
  );
}

extension MessagePaidMessagesRefundedExtensions on MessagePaidMessagesRefunded {
  MessagePaidMessagesRefunded copyWith({int? messageCount, int? starCount}) =>
      MessagePaidMessagesRefunded(
        messageCount: messageCount ?? this.messageCount,
        starCount: starCount ?? this.starCount,
      );
}

extension MessagePaidMessagePriceChangedExtensions
    on MessagePaidMessagePriceChanged {
  MessagePaidMessagePriceChanged copyWith({int? paidMessageStarCount}) =>
      MessagePaidMessagePriceChanged(
        paidMessageStarCount: paidMessageStarCount ?? this.paidMessageStarCount,
      );
}

extension MessageDirectMessagePriceChangedExtensions
    on MessageDirectMessagePriceChanged {
  MessageDirectMessagePriceChanged copyWith({
    bool? isEnabled,
    int? paidMessageStarCount,
  }) => MessageDirectMessagePriceChanged(
    isEnabled: isEnabled ?? this.isEnabled,
    paidMessageStarCount: paidMessageStarCount ?? this.paidMessageStarCount,
  );
}

extension MessageChecklistTasksDoneExtensions on MessageChecklistTasksDone {
  MessageChecklistTasksDone copyWith({
    int? checklistMessageId,
    List<int>? markedAsDoneTaskIds,
    List<int>? markedAsNotDoneTaskIds,
  }) => MessageChecklistTasksDone(
    checklistMessageId: checklistMessageId ?? this.checklistMessageId,
    markedAsDoneTaskIds: markedAsDoneTaskIds ?? this.markedAsDoneTaskIds,
    markedAsNotDoneTaskIds:
        markedAsNotDoneTaskIds ?? this.markedAsNotDoneTaskIds,
  );
}

extension MessageChecklistTasksAddedExtensions on MessageChecklistTasksAdded {
  MessageChecklistTasksAdded copyWith({
    int? checklistMessageId,
    List<ChecklistTask>? tasks,
  }) => MessageChecklistTasksAdded(
    checklistMessageId: checklistMessageId ?? this.checklistMessageId,
    tasks: tasks ?? this.tasks,
  );
}

extension MessageUsersSharedExtensions on MessageUsersShared {
  MessageUsersShared copyWith({List<SharedUser>? users, int? buttonId}) =>
      MessageUsersShared(
        users: users ?? this.users,
        buttonId: buttonId ?? this.buttonId,
      );
}

extension MessageChatSharedExtensions on MessageChatShared {
  MessageChatShared copyWith({SharedChat? chat, int? buttonId}) =>
      MessageChatShared(
        chat: chat ?? this.chat,
        buttonId: buttonId ?? this.buttonId,
      );
}

extension MessageBotWriteAccessAllowedExtensions
    on MessageBotWriteAccessAllowed {
  MessageBotWriteAccessAllowed copyWith({BotWriteAccessAllowReason? reason}) =>
      MessageBotWriteAccessAllowed(reason: reason ?? this.reason);
}

extension MessageWebAppDataSentExtensions on MessageWebAppDataSent {
  MessageWebAppDataSent copyWith({String? buttonText}) =>
      MessageWebAppDataSent(buttonText: buttonText ?? this.buttonText);
}

extension MessageWebAppDataReceivedExtensions on MessageWebAppDataReceived {
  MessageWebAppDataReceived copyWith({String? buttonText, String? data}) =>
      MessageWebAppDataReceived(
        buttonText: buttonText ?? this.buttonText,
        data: data ?? this.data,
      );
}

extension MessagePassportDataSentExtensions on MessagePassportDataSent {
  MessagePassportDataSent copyWith({List<PassportElementType>? types}) =>
      MessagePassportDataSent(types: types ?? this.types);
}

extension MessagePassportDataReceivedExtensions on MessagePassportDataReceived {
  MessagePassportDataReceived copyWith({
    List<EncryptedPassportElement>? elements,
    EncryptedCredentials? credentials,
  }) => MessagePassportDataReceived(
    elements: elements ?? this.elements,
    credentials: credentials ?? this.credentials,
  );
}

extension MessageProximityAlertTriggeredExtensions
    on MessageProximityAlertTriggered {
  MessageProximityAlertTriggered copyWith({
    MessageSender? travelerId,
    MessageSender? watcherId,
    int? distance,
  }) => MessageProximityAlertTriggered(
    travelerId: travelerId ?? this.travelerId,
    watcherId: watcherId ?? this.watcherId,
    distance: distance ?? this.distance,
  );
}

extension TextEntityTypeExtensions on TextEntityType {
  TResult map<TResult extends Object?>({
    required TResult Function(TextEntityTypeMention value) mention,
    required TResult Function(TextEntityTypeHashtag value) hashtag,
    required TResult Function(TextEntityTypeCashtag value) cashtag,
    required TResult Function(TextEntityTypeBotCommand value) botCommand,
    required TResult Function(TextEntityTypeUrl value) url,
    required TResult Function(TextEntityTypeEmailAddress value) emailAddress,
    required TResult Function(TextEntityTypePhoneNumber value) phoneNumber,
    required TResult Function(TextEntityTypeBankCardNumber value)
    bankCardNumber,
    required TResult Function(TextEntityTypeBold value) bold,
    required TResult Function(TextEntityTypeItalic value) italic,
    required TResult Function(TextEntityTypeUnderline value) underline,
    required TResult Function(TextEntityTypeStrikethrough value) strikethrough,
    required TResult Function(TextEntityTypeSpoiler value) spoiler,
    required TResult Function(TextEntityTypeCode value) code,
    required TResult Function(TextEntityTypePre value) pre,
    required TResult Function(TextEntityTypePreCode value) preCode,
    required TResult Function(TextEntityTypeBlockQuote value) blockQuote,
    required TResult Function(TextEntityTypeExpandableBlockQuote value)
    expandableBlockQuote,
    required TResult Function(TextEntityTypeTextUrl value) textUrl,
    required TResult Function(TextEntityTypeMentionName value) mentionName,
    required TResult Function(TextEntityTypeCustomEmoji value) customEmoji,
    required TResult Function(TextEntityTypeMediaTimestamp value)
    mediaTimestamp,
  }) {
    switch (getConstructor()) {
      case TextEntityTypeMention.constructor:
        return mention.call(this as TextEntityTypeMention);
      case TextEntityTypeHashtag.constructor:
        return hashtag.call(this as TextEntityTypeHashtag);
      case TextEntityTypeCashtag.constructor:
        return cashtag.call(this as TextEntityTypeCashtag);
      case TextEntityTypeBotCommand.constructor:
        return botCommand.call(this as TextEntityTypeBotCommand);
      case TextEntityTypeUrl.constructor:
        return url.call(this as TextEntityTypeUrl);
      case TextEntityTypeEmailAddress.constructor:
        return emailAddress.call(this as TextEntityTypeEmailAddress);
      case TextEntityTypePhoneNumber.constructor:
        return phoneNumber.call(this as TextEntityTypePhoneNumber);
      case TextEntityTypeBankCardNumber.constructor:
        return bankCardNumber.call(this as TextEntityTypeBankCardNumber);
      case TextEntityTypeBold.constructor:
        return bold.call(this as TextEntityTypeBold);
      case TextEntityTypeItalic.constructor:
        return italic.call(this as TextEntityTypeItalic);
      case TextEntityTypeUnderline.constructor:
        return underline.call(this as TextEntityTypeUnderline);
      case TextEntityTypeStrikethrough.constructor:
        return strikethrough.call(this as TextEntityTypeStrikethrough);
      case TextEntityTypeSpoiler.constructor:
        return spoiler.call(this as TextEntityTypeSpoiler);
      case TextEntityTypeCode.constructor:
        return code.call(this as TextEntityTypeCode);
      case TextEntityTypePre.constructor:
        return pre.call(this as TextEntityTypePre);
      case TextEntityTypePreCode.constructor:
        return preCode.call(this as TextEntityTypePreCode);
      case TextEntityTypeBlockQuote.constructor:
        return blockQuote.call(this as TextEntityTypeBlockQuote);
      case TextEntityTypeExpandableBlockQuote.constructor:
        return expandableBlockQuote.call(
          this as TextEntityTypeExpandableBlockQuote,
        );
      case TextEntityTypeTextUrl.constructor:
        return textUrl.call(this as TextEntityTypeTextUrl);
      case TextEntityTypeMentionName.constructor:
        return mentionName.call(this as TextEntityTypeMentionName);
      case TextEntityTypeCustomEmoji.constructor:
        return customEmoji.call(this as TextEntityTypeCustomEmoji);
      case TextEntityTypeMediaTimestamp.constructor:
        return mediaTimestamp.call(this as TextEntityTypeMediaTimestamp);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEntityTypeMention value)? mention,
    TResult Function(TextEntityTypeHashtag value)? hashtag,
    TResult Function(TextEntityTypeCashtag value)? cashtag,
    TResult Function(TextEntityTypeBotCommand value)? botCommand,
    TResult Function(TextEntityTypeUrl value)? url,
    TResult Function(TextEntityTypeEmailAddress value)? emailAddress,
    TResult Function(TextEntityTypePhoneNumber value)? phoneNumber,
    TResult Function(TextEntityTypeBankCardNumber value)? bankCardNumber,
    TResult Function(TextEntityTypeBold value)? bold,
    TResult Function(TextEntityTypeItalic value)? italic,
    TResult Function(TextEntityTypeUnderline value)? underline,
    TResult Function(TextEntityTypeStrikethrough value)? strikethrough,
    TResult Function(TextEntityTypeSpoiler value)? spoiler,
    TResult Function(TextEntityTypeCode value)? code,
    TResult Function(TextEntityTypePre value)? pre,
    TResult Function(TextEntityTypePreCode value)? preCode,
    TResult Function(TextEntityTypeBlockQuote value)? blockQuote,
    TResult Function(TextEntityTypeExpandableBlockQuote value)?
    expandableBlockQuote,
    TResult Function(TextEntityTypeTextUrl value)? textUrl,
    TResult Function(TextEntityTypeMentionName value)? mentionName,
    TResult Function(TextEntityTypeCustomEmoji value)? customEmoji,
    TResult Function(TextEntityTypeMediaTimestamp value)? mediaTimestamp,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case TextEntityTypeMention.constructor:
        if (mention != null) {
          return mention.call(this as TextEntityTypeMention);
        }
        break;
      case TextEntityTypeHashtag.constructor:
        if (hashtag != null) {
          return hashtag.call(this as TextEntityTypeHashtag);
        }
        break;
      case TextEntityTypeCashtag.constructor:
        if (cashtag != null) {
          return cashtag.call(this as TextEntityTypeCashtag);
        }
        break;
      case TextEntityTypeBotCommand.constructor:
        if (botCommand != null) {
          return botCommand.call(this as TextEntityTypeBotCommand);
        }
        break;
      case TextEntityTypeUrl.constructor:
        if (url != null) {
          return url.call(this as TextEntityTypeUrl);
        }
        break;
      case TextEntityTypeEmailAddress.constructor:
        if (emailAddress != null) {
          return emailAddress.call(this as TextEntityTypeEmailAddress);
        }
        break;
      case TextEntityTypePhoneNumber.constructor:
        if (phoneNumber != null) {
          return phoneNumber.call(this as TextEntityTypePhoneNumber);
        }
        break;
      case TextEntityTypeBankCardNumber.constructor:
        if (bankCardNumber != null) {
          return bankCardNumber.call(this as TextEntityTypeBankCardNumber);
        }
        break;
      case TextEntityTypeBold.constructor:
        if (bold != null) {
          return bold.call(this as TextEntityTypeBold);
        }
        break;
      case TextEntityTypeItalic.constructor:
        if (italic != null) {
          return italic.call(this as TextEntityTypeItalic);
        }
        break;
      case TextEntityTypeUnderline.constructor:
        if (underline != null) {
          return underline.call(this as TextEntityTypeUnderline);
        }
        break;
      case TextEntityTypeStrikethrough.constructor:
        if (strikethrough != null) {
          return strikethrough.call(this as TextEntityTypeStrikethrough);
        }
        break;
      case TextEntityTypeSpoiler.constructor:
        if (spoiler != null) {
          return spoiler.call(this as TextEntityTypeSpoiler);
        }
        break;
      case TextEntityTypeCode.constructor:
        if (code != null) {
          return code.call(this as TextEntityTypeCode);
        }
        break;
      case TextEntityTypePre.constructor:
        if (pre != null) {
          return pre.call(this as TextEntityTypePre);
        }
        break;
      case TextEntityTypePreCode.constructor:
        if (preCode != null) {
          return preCode.call(this as TextEntityTypePreCode);
        }
        break;
      case TextEntityTypeBlockQuote.constructor:
        if (blockQuote != null) {
          return blockQuote.call(this as TextEntityTypeBlockQuote);
        }
        break;
      case TextEntityTypeExpandableBlockQuote.constructor:
        if (expandableBlockQuote != null) {
          return expandableBlockQuote.call(
            this as TextEntityTypeExpandableBlockQuote,
          );
        }
        break;
      case TextEntityTypeTextUrl.constructor:
        if (textUrl != null) {
          return textUrl.call(this as TextEntityTypeTextUrl);
        }
        break;
      case TextEntityTypeMentionName.constructor:
        if (mentionName != null) {
          return mentionName.call(this as TextEntityTypeMentionName);
        }
        break;
      case TextEntityTypeCustomEmoji.constructor:
        if (customEmoji != null) {
          return customEmoji.call(this as TextEntityTypeCustomEmoji);
        }
        break;
      case TextEntityTypeMediaTimestamp.constructor:
        if (mediaTimestamp != null) {
          return mediaTimestamp.call(this as TextEntityTypeMediaTimestamp);
        }
        break;
    }
    return orElse.call();
  }
}

extension TextEntityTypePreCodeExtensions on TextEntityTypePreCode {
  TextEntityTypePreCode copyWith({String? language}) =>
      TextEntityTypePreCode(language: language ?? this.language);
}

extension TextEntityTypeTextUrlExtensions on TextEntityTypeTextUrl {
  TextEntityTypeTextUrl copyWith({String? url}) =>
      TextEntityTypeTextUrl(url: url ?? this.url);
}

extension TextEntityTypeMentionNameExtensions on TextEntityTypeMentionName {
  TextEntityTypeMentionName copyWith({int? userId}) =>
      TextEntityTypeMentionName(userId: userId ?? this.userId);
}

extension TextEntityTypeCustomEmojiExtensions on TextEntityTypeCustomEmoji {
  TextEntityTypeCustomEmoji copyWith({int? customEmojiId}) =>
      TextEntityTypeCustomEmoji(
        customEmojiId: customEmojiId ?? this.customEmojiId,
      );
}

extension TextEntityTypeMediaTimestampExtensions
    on TextEntityTypeMediaTimestamp {
  TextEntityTypeMediaTimestamp copyWith({int? mediaTimestamp}) =>
      TextEntityTypeMediaTimestamp(
        mediaTimestamp: mediaTimestamp ?? this.mediaTimestamp,
      );
}

extension InputThumbnailExtensions on InputThumbnail {
  InputThumbnail copyWith({InputFile? thumbnail, int? width, int? height}) =>
      InputThumbnail(
        thumbnail: thumbnail ?? this.thumbnail,
        width: width ?? this.width,
        height: height ?? this.height,
      );
}

extension InputPaidMediaTypeExtensions on InputPaidMediaType {
  TResult map<TResult extends Object?>({
    required TResult Function(InputPaidMediaTypePhoto value) photo,
    required TResult Function(InputPaidMediaTypeVideo value) video,
  }) {
    switch (getConstructor()) {
      case InputPaidMediaTypePhoto.constructor:
        return photo.call(this as InputPaidMediaTypePhoto);
      case InputPaidMediaTypeVideo.constructor:
        return video.call(this as InputPaidMediaTypeVideo);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InputPaidMediaTypePhoto value)? photo,
    TResult Function(InputPaidMediaTypeVideo value)? video,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InputPaidMediaTypePhoto.constructor:
        if (photo != null) {
          return photo.call(this as InputPaidMediaTypePhoto);
        }
        break;
      case InputPaidMediaTypeVideo.constructor:
        if (video != null) {
          return video.call(this as InputPaidMediaTypeVideo);
        }
        break;
    }
    return orElse.call();
  }
}

extension InputPaidMediaTypeVideoExtensions on InputPaidMediaTypeVideo {
  InputPaidMediaTypeVideo copyWith({
    InputFile? cover,
    int? startTimestamp,
    int? duration,
    bool? supportsStreaming,
  }) => InputPaidMediaTypeVideo(
    cover: cover ?? this.cover,
    startTimestamp: startTimestamp ?? this.startTimestamp,
    duration: duration ?? this.duration,
    supportsStreaming: supportsStreaming ?? this.supportsStreaming,
  );
}

extension InputPaidMediaExtensions on InputPaidMedia {
  InputPaidMedia copyWith({
    InputPaidMediaType? type,
    InputFile? media,
    InputThumbnail? thumbnail,
    List<int>? addedStickerFileIds,
    int? width,
    int? height,
  }) => InputPaidMedia(
    type: type ?? this.type,
    media: media ?? this.media,
    thumbnail: thumbnail ?? this.thumbnail,
    addedStickerFileIds: addedStickerFileIds ?? this.addedStickerFileIds,
    width: width ?? this.width,
    height: height ?? this.height,
  );
}

extension MessageSchedulingStateExtensions on MessageSchedulingState {
  TResult map<TResult extends Object?>({
    required TResult Function(MessageSchedulingStateSendAtDate value)
    sendAtDate,
    required TResult Function(MessageSchedulingStateSendWhenOnline value)
    sendWhenOnline,
    required TResult Function(
      MessageSchedulingStateSendWhenVideoProcessed value,
    )
    sendWhenVideoProcessed,
  }) {
    switch (getConstructor()) {
      case MessageSchedulingStateSendAtDate.constructor:
        return sendAtDate.call(this as MessageSchedulingStateSendAtDate);
      case MessageSchedulingStateSendWhenOnline.constructor:
        return sendWhenOnline.call(
          this as MessageSchedulingStateSendWhenOnline,
        );
      case MessageSchedulingStateSendWhenVideoProcessed.constructor:
        return sendWhenVideoProcessed.call(
          this as MessageSchedulingStateSendWhenVideoProcessed,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(MessageSchedulingStateSendAtDate value)? sendAtDate,
    TResult Function(MessageSchedulingStateSendWhenOnline value)?
    sendWhenOnline,
    TResult Function(MessageSchedulingStateSendWhenVideoProcessed value)?
    sendWhenVideoProcessed,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case MessageSchedulingStateSendAtDate.constructor:
        if (sendAtDate != null) {
          return sendAtDate.call(this as MessageSchedulingStateSendAtDate);
        }
        break;
      case MessageSchedulingStateSendWhenOnline.constructor:
        if (sendWhenOnline != null) {
          return sendWhenOnline.call(
            this as MessageSchedulingStateSendWhenOnline,
          );
        }
        break;
      case MessageSchedulingStateSendWhenVideoProcessed.constructor:
        if (sendWhenVideoProcessed != null) {
          return sendWhenVideoProcessed.call(
            this as MessageSchedulingStateSendWhenVideoProcessed,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension MessageSchedulingStateSendAtDateExtensions
    on MessageSchedulingStateSendAtDate {
  MessageSchedulingStateSendAtDate copyWith({int? sendDate}) =>
      MessageSchedulingStateSendAtDate(sendDate: sendDate ?? this.sendDate);
}

extension MessageSchedulingStateSendWhenVideoProcessedExtensions
    on MessageSchedulingStateSendWhenVideoProcessed {
  MessageSchedulingStateSendWhenVideoProcessed copyWith({int? sendDate}) =>
      MessageSchedulingStateSendWhenVideoProcessed(
        sendDate: sendDate ?? this.sendDate,
      );
}

extension MessageSelfDestructTypeExtensions on MessageSelfDestructType {
  TResult map<TResult extends Object?>({
    required TResult Function(MessageSelfDestructTypeTimer value) timer,
    required TResult Function(MessageSelfDestructTypeImmediately value)
    immediately,
  }) {
    switch (getConstructor()) {
      case MessageSelfDestructTypeTimer.constructor:
        return timer.call(this as MessageSelfDestructTypeTimer);
      case MessageSelfDestructTypeImmediately.constructor:
        return immediately.call(this as MessageSelfDestructTypeImmediately);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(MessageSelfDestructTypeTimer value)? timer,
    TResult Function(MessageSelfDestructTypeImmediately value)? immediately,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case MessageSelfDestructTypeTimer.constructor:
        if (timer != null) {
          return timer.call(this as MessageSelfDestructTypeTimer);
        }
        break;
      case MessageSelfDestructTypeImmediately.constructor:
        if (immediately != null) {
          return immediately.call(this as MessageSelfDestructTypeImmediately);
        }
        break;
    }
    return orElse.call();
  }
}

extension MessageSelfDestructTypeTimerExtensions
    on MessageSelfDestructTypeTimer {
  MessageSelfDestructTypeTimer copyWith({int? selfDestructTime}) =>
      MessageSelfDestructTypeTimer(
        selfDestructTime: selfDestructTime ?? this.selfDestructTime,
      );
}

extension MessageSendOptionsExtensions on MessageSendOptions {
  MessageSendOptions copyWith({
    int? directMessagesChatTopicId,
    bool? disableNotification,
    bool? fromBackground,
    bool? protectContent,
    bool? allowPaidBroadcast,
    int? paidMessageStarCount,
    bool? updateOrderOfInstalledStickerSets,
    MessageSchedulingState? schedulingState,
    int? effectId,
    int? sendingId,
    bool? onlyPreview,
  }) => MessageSendOptions(
    directMessagesChatTopicId:
        directMessagesChatTopicId ?? this.directMessagesChatTopicId,
    disableNotification: disableNotification ?? this.disableNotification,
    fromBackground: fromBackground ?? this.fromBackground,
    protectContent: protectContent ?? this.protectContent,
    allowPaidBroadcast: allowPaidBroadcast ?? this.allowPaidBroadcast,
    paidMessageStarCount: paidMessageStarCount ?? this.paidMessageStarCount,
    updateOrderOfInstalledStickerSets:
        updateOrderOfInstalledStickerSets ??
        this.updateOrderOfInstalledStickerSets,
    schedulingState: schedulingState ?? this.schedulingState,
    effectId: effectId ?? this.effectId,
    sendingId: sendingId ?? this.sendingId,
    onlyPreview: onlyPreview ?? this.onlyPreview,
  );
}

extension MessageCopyOptionsExtensions on MessageCopyOptions {
  MessageCopyOptions copyWith({
    bool? sendCopy,
    bool? replaceCaption,
    FormattedText? newCaption,
    bool? newShowCaptionAboveMedia,
  }) => MessageCopyOptions(
    sendCopy: sendCopy ?? this.sendCopy,
    replaceCaption: replaceCaption ?? this.replaceCaption,
    newCaption: newCaption ?? this.newCaption,
    newShowCaptionAboveMedia:
        newShowCaptionAboveMedia ?? this.newShowCaptionAboveMedia,
  );
}

extension InputMessageContentExtensions on InputMessageContent {
  TResult map<TResult extends Object?>({
    required TResult Function(InputMessageText value) inputMessageText,
    required TResult Function(InputMessageAnimation value)
    inputMessageAnimation,
    required TResult Function(InputMessageAudio value) inputMessageAudio,
    required TResult Function(InputMessageDocument value) inputMessageDocument,
    required TResult Function(InputMessagePaidMedia value)
    inputMessagePaidMedia,
    required TResult Function(InputMessagePhoto value) inputMessagePhoto,
    required TResult Function(InputMessageSticker value) inputMessageSticker,
    required TResult Function(InputMessageVideo value) inputMessageVideo,
    required TResult Function(InputMessageVideoNote value)
    inputMessageVideoNote,
    required TResult Function(InputMessageVoiceNote value)
    inputMessageVoiceNote,
    required TResult Function(InputMessageLocation value) inputMessageLocation,
    required TResult Function(InputMessageVenue value) inputMessageVenue,
    required TResult Function(InputMessageContact value) inputMessageContact,
    required TResult Function(InputMessageDice value) inputMessageDice,
    required TResult Function(InputMessageGame value) inputMessageGame,
    required TResult Function(InputMessageInvoice value) inputMessageInvoice,
    required TResult Function(InputMessagePoll value) inputMessagePoll,
    required TResult Function(InputMessageStory value) inputMessageStory,
    required TResult Function(InputMessageChecklist value)
    inputMessageChecklist,
    required TResult Function(InputMessageForwarded value)
    inputMessageForwarded,
  }) {
    switch (getConstructor()) {
      case InputMessageText.constructor:
        return inputMessageText.call(this as InputMessageText);
      case InputMessageAnimation.constructor:
        return inputMessageAnimation.call(this as InputMessageAnimation);
      case InputMessageAudio.constructor:
        return inputMessageAudio.call(this as InputMessageAudio);
      case InputMessageDocument.constructor:
        return inputMessageDocument.call(this as InputMessageDocument);
      case InputMessagePaidMedia.constructor:
        return inputMessagePaidMedia.call(this as InputMessagePaidMedia);
      case InputMessagePhoto.constructor:
        return inputMessagePhoto.call(this as InputMessagePhoto);
      case InputMessageSticker.constructor:
        return inputMessageSticker.call(this as InputMessageSticker);
      case InputMessageVideo.constructor:
        return inputMessageVideo.call(this as InputMessageVideo);
      case InputMessageVideoNote.constructor:
        return inputMessageVideoNote.call(this as InputMessageVideoNote);
      case InputMessageVoiceNote.constructor:
        return inputMessageVoiceNote.call(this as InputMessageVoiceNote);
      case InputMessageLocation.constructor:
        return inputMessageLocation.call(this as InputMessageLocation);
      case InputMessageVenue.constructor:
        return inputMessageVenue.call(this as InputMessageVenue);
      case InputMessageContact.constructor:
        return inputMessageContact.call(this as InputMessageContact);
      case InputMessageDice.constructor:
        return inputMessageDice.call(this as InputMessageDice);
      case InputMessageGame.constructor:
        return inputMessageGame.call(this as InputMessageGame);
      case InputMessageInvoice.constructor:
        return inputMessageInvoice.call(this as InputMessageInvoice);
      case InputMessagePoll.constructor:
        return inputMessagePoll.call(this as InputMessagePoll);
      case InputMessageStory.constructor:
        return inputMessageStory.call(this as InputMessageStory);
      case InputMessageChecklist.constructor:
        return inputMessageChecklist.call(this as InputMessageChecklist);
      case InputMessageForwarded.constructor:
        return inputMessageForwarded.call(this as InputMessageForwarded);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InputMessageText value)? inputMessageText,
    TResult Function(InputMessageAnimation value)? inputMessageAnimation,
    TResult Function(InputMessageAudio value)? inputMessageAudio,
    TResult Function(InputMessageDocument value)? inputMessageDocument,
    TResult Function(InputMessagePaidMedia value)? inputMessagePaidMedia,
    TResult Function(InputMessagePhoto value)? inputMessagePhoto,
    TResult Function(InputMessageSticker value)? inputMessageSticker,
    TResult Function(InputMessageVideo value)? inputMessageVideo,
    TResult Function(InputMessageVideoNote value)? inputMessageVideoNote,
    TResult Function(InputMessageVoiceNote value)? inputMessageVoiceNote,
    TResult Function(InputMessageLocation value)? inputMessageLocation,
    TResult Function(InputMessageVenue value)? inputMessageVenue,
    TResult Function(InputMessageContact value)? inputMessageContact,
    TResult Function(InputMessageDice value)? inputMessageDice,
    TResult Function(InputMessageGame value)? inputMessageGame,
    TResult Function(InputMessageInvoice value)? inputMessageInvoice,
    TResult Function(InputMessagePoll value)? inputMessagePoll,
    TResult Function(InputMessageStory value)? inputMessageStory,
    TResult Function(InputMessageChecklist value)? inputMessageChecklist,
    TResult Function(InputMessageForwarded value)? inputMessageForwarded,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InputMessageText.constructor:
        if (inputMessageText != null) {
          return inputMessageText.call(this as InputMessageText);
        }
        break;
      case InputMessageAnimation.constructor:
        if (inputMessageAnimation != null) {
          return inputMessageAnimation.call(this as InputMessageAnimation);
        }
        break;
      case InputMessageAudio.constructor:
        if (inputMessageAudio != null) {
          return inputMessageAudio.call(this as InputMessageAudio);
        }
        break;
      case InputMessageDocument.constructor:
        if (inputMessageDocument != null) {
          return inputMessageDocument.call(this as InputMessageDocument);
        }
        break;
      case InputMessagePaidMedia.constructor:
        if (inputMessagePaidMedia != null) {
          return inputMessagePaidMedia.call(this as InputMessagePaidMedia);
        }
        break;
      case InputMessagePhoto.constructor:
        if (inputMessagePhoto != null) {
          return inputMessagePhoto.call(this as InputMessagePhoto);
        }
        break;
      case InputMessageSticker.constructor:
        if (inputMessageSticker != null) {
          return inputMessageSticker.call(this as InputMessageSticker);
        }
        break;
      case InputMessageVideo.constructor:
        if (inputMessageVideo != null) {
          return inputMessageVideo.call(this as InputMessageVideo);
        }
        break;
      case InputMessageVideoNote.constructor:
        if (inputMessageVideoNote != null) {
          return inputMessageVideoNote.call(this as InputMessageVideoNote);
        }
        break;
      case InputMessageVoiceNote.constructor:
        if (inputMessageVoiceNote != null) {
          return inputMessageVoiceNote.call(this as InputMessageVoiceNote);
        }
        break;
      case InputMessageLocation.constructor:
        if (inputMessageLocation != null) {
          return inputMessageLocation.call(this as InputMessageLocation);
        }
        break;
      case InputMessageVenue.constructor:
        if (inputMessageVenue != null) {
          return inputMessageVenue.call(this as InputMessageVenue);
        }
        break;
      case InputMessageContact.constructor:
        if (inputMessageContact != null) {
          return inputMessageContact.call(this as InputMessageContact);
        }
        break;
      case InputMessageDice.constructor:
        if (inputMessageDice != null) {
          return inputMessageDice.call(this as InputMessageDice);
        }
        break;
      case InputMessageGame.constructor:
        if (inputMessageGame != null) {
          return inputMessageGame.call(this as InputMessageGame);
        }
        break;
      case InputMessageInvoice.constructor:
        if (inputMessageInvoice != null) {
          return inputMessageInvoice.call(this as InputMessageInvoice);
        }
        break;
      case InputMessagePoll.constructor:
        if (inputMessagePoll != null) {
          return inputMessagePoll.call(this as InputMessagePoll);
        }
        break;
      case InputMessageStory.constructor:
        if (inputMessageStory != null) {
          return inputMessageStory.call(this as InputMessageStory);
        }
        break;
      case InputMessageChecklist.constructor:
        if (inputMessageChecklist != null) {
          return inputMessageChecklist.call(this as InputMessageChecklist);
        }
        break;
      case InputMessageForwarded.constructor:
        if (inputMessageForwarded != null) {
          return inputMessageForwarded.call(this as InputMessageForwarded);
        }
        break;
    }
    return orElse.call();
  }
}

extension InputMessageTextExtensions on InputMessageText {
  InputMessageText copyWith({
    FormattedText? text,
    LinkPreviewOptions? linkPreviewOptions,
    bool? clearDraft,
  }) => InputMessageText(
    text: text ?? this.text,
    linkPreviewOptions: linkPreviewOptions ?? this.linkPreviewOptions,
    clearDraft: clearDraft ?? this.clearDraft,
  );
}

extension InputMessageAnimationExtensions on InputMessageAnimation {
  InputMessageAnimation copyWith({
    InputFile? animation,
    InputThumbnail? thumbnail,
    List<int>? addedStickerFileIds,
    int? duration,
    int? width,
    int? height,
    FormattedText? caption,
    bool? showCaptionAboveMedia,
    bool? hasSpoiler,
  }) => InputMessageAnimation(
    animation: animation ?? this.animation,
    thumbnail: thumbnail ?? this.thumbnail,
    addedStickerFileIds: addedStickerFileIds ?? this.addedStickerFileIds,
    duration: duration ?? this.duration,
    width: width ?? this.width,
    height: height ?? this.height,
    caption: caption ?? this.caption,
    showCaptionAboveMedia: showCaptionAboveMedia ?? this.showCaptionAboveMedia,
    hasSpoiler: hasSpoiler ?? this.hasSpoiler,
  );
}

extension InputMessageAudioExtensions on InputMessageAudio {
  InputMessageAudio copyWith({
    InputFile? audio,
    InputThumbnail? albumCoverThumbnail,
    int? duration,
    String? title,
    String? performer,
    FormattedText? caption,
  }) => InputMessageAudio(
    audio: audio ?? this.audio,
    albumCoverThumbnail: albumCoverThumbnail ?? this.albumCoverThumbnail,
    duration: duration ?? this.duration,
    title: title ?? this.title,
    performer: performer ?? this.performer,
    caption: caption ?? this.caption,
  );
}

extension InputMessageDocumentExtensions on InputMessageDocument {
  InputMessageDocument copyWith({
    InputFile? document,
    InputThumbnail? thumbnail,
    bool? disableContentTypeDetection,
    FormattedText? caption,
  }) => InputMessageDocument(
    document: document ?? this.document,
    thumbnail: thumbnail ?? this.thumbnail,
    disableContentTypeDetection:
        disableContentTypeDetection ?? this.disableContentTypeDetection,
    caption: caption ?? this.caption,
  );
}

extension InputMessagePaidMediaExtensions on InputMessagePaidMedia {
  InputMessagePaidMedia copyWith({
    int? starCount,
    List<InputPaidMedia>? paidMedia,
    FormattedText? caption,
    bool? showCaptionAboveMedia,
    String? payload,
  }) => InputMessagePaidMedia(
    starCount: starCount ?? this.starCount,
    paidMedia: paidMedia ?? this.paidMedia,
    caption: caption ?? this.caption,
    showCaptionAboveMedia: showCaptionAboveMedia ?? this.showCaptionAboveMedia,
    payload: payload ?? this.payload,
  );
}

extension InputMessagePhotoExtensions on InputMessagePhoto {
  InputMessagePhoto copyWith({
    InputFile? photo,
    InputThumbnail? thumbnail,
    List<int>? addedStickerFileIds,
    int? width,
    int? height,
    FormattedText? caption,
    bool? showCaptionAboveMedia,
    MessageSelfDestructType? selfDestructType,
    bool? hasSpoiler,
  }) => InputMessagePhoto(
    photo: photo ?? this.photo,
    thumbnail: thumbnail ?? this.thumbnail,
    addedStickerFileIds: addedStickerFileIds ?? this.addedStickerFileIds,
    width: width ?? this.width,
    height: height ?? this.height,
    caption: caption ?? this.caption,
    showCaptionAboveMedia: showCaptionAboveMedia ?? this.showCaptionAboveMedia,
    selfDestructType: selfDestructType ?? this.selfDestructType,
    hasSpoiler: hasSpoiler ?? this.hasSpoiler,
  );
}

extension InputMessageStickerExtensions on InputMessageSticker {
  InputMessageSticker copyWith({
    InputFile? sticker,
    InputThumbnail? thumbnail,
    int? width,
    int? height,
    String? emoji,
  }) => InputMessageSticker(
    sticker: sticker ?? this.sticker,
    thumbnail: thumbnail ?? this.thumbnail,
    width: width ?? this.width,
    height: height ?? this.height,
    emoji: emoji ?? this.emoji,
  );
}

extension InputMessageVideoExtensions on InputMessageVideo {
  InputMessageVideo copyWith({
    InputFile? video,
    InputThumbnail? thumbnail,
    InputFile? cover,
    int? startTimestamp,
    List<int>? addedStickerFileIds,
    int? duration,
    int? width,
    int? height,
    bool? supportsStreaming,
    FormattedText? caption,
    bool? showCaptionAboveMedia,
    MessageSelfDestructType? selfDestructType,
    bool? hasSpoiler,
  }) => InputMessageVideo(
    video: video ?? this.video,
    thumbnail: thumbnail ?? this.thumbnail,
    cover: cover ?? this.cover,
    startTimestamp: startTimestamp ?? this.startTimestamp,
    addedStickerFileIds: addedStickerFileIds ?? this.addedStickerFileIds,
    duration: duration ?? this.duration,
    width: width ?? this.width,
    height: height ?? this.height,
    supportsStreaming: supportsStreaming ?? this.supportsStreaming,
    caption: caption ?? this.caption,
    showCaptionAboveMedia: showCaptionAboveMedia ?? this.showCaptionAboveMedia,
    selfDestructType: selfDestructType ?? this.selfDestructType,
    hasSpoiler: hasSpoiler ?? this.hasSpoiler,
  );
}

extension InputMessageVideoNoteExtensions on InputMessageVideoNote {
  InputMessageVideoNote copyWith({
    InputFile? videoNote,
    InputThumbnail? thumbnail,
    int? duration,
    int? length,
    MessageSelfDestructType? selfDestructType,
  }) => InputMessageVideoNote(
    videoNote: videoNote ?? this.videoNote,
    thumbnail: thumbnail ?? this.thumbnail,
    duration: duration ?? this.duration,
    length: length ?? this.length,
    selfDestructType: selfDestructType ?? this.selfDestructType,
  );
}

extension InputMessageVoiceNoteExtensions on InputMessageVoiceNote {
  InputMessageVoiceNote copyWith({
    InputFile? voiceNote,
    int? duration,
    String? waveform,
    FormattedText? caption,
    MessageSelfDestructType? selfDestructType,
  }) => InputMessageVoiceNote(
    voiceNote: voiceNote ?? this.voiceNote,
    duration: duration ?? this.duration,
    waveform: waveform ?? this.waveform,
    caption: caption ?? this.caption,
    selfDestructType: selfDestructType ?? this.selfDestructType,
  );
}

extension InputMessageLocationExtensions on InputMessageLocation {
  InputMessageLocation copyWith({
    Location? location,
    int? livePeriod,
    int? heading,
    int? proximityAlertRadius,
  }) => InputMessageLocation(
    location: location ?? this.location,
    livePeriod: livePeriod ?? this.livePeriod,
    heading: heading ?? this.heading,
    proximityAlertRadius: proximityAlertRadius ?? this.proximityAlertRadius,
  );
}

extension InputMessageVenueExtensions on InputMessageVenue {
  InputMessageVenue copyWith({Venue? venue}) =>
      InputMessageVenue(venue: venue ?? this.venue);
}

extension InputMessageContactExtensions on InputMessageContact {
  InputMessageContact copyWith({Contact? contact}) =>
      InputMessageContact(contact: contact ?? this.contact);
}

extension InputMessageDiceExtensions on InputMessageDice {
  InputMessageDice copyWith({String? emoji, bool? clearDraft}) =>
      InputMessageDice(
        emoji: emoji ?? this.emoji,
        clearDraft: clearDraft ?? this.clearDraft,
      );
}

extension InputMessageGameExtensions on InputMessageGame {
  InputMessageGame copyWith({int? botUserId, String? gameShortName}) =>
      InputMessageGame(
        botUserId: botUserId ?? this.botUserId,
        gameShortName: gameShortName ?? this.gameShortName,
      );
}

extension InputMessageInvoiceExtensions on InputMessageInvoice {
  InputMessageInvoice copyWith({
    Invoice? invoice,
    String? title,
    String? description,
    String? photoUrl,
    int? photoSize,
    int? photoWidth,
    int? photoHeight,
    String? payload,
    String? providerToken,
    String? providerData,
    String? startParameter,
    InputPaidMedia? paidMedia,
    FormattedText? paidMediaCaption,
  }) => InputMessageInvoice(
    invoice: invoice ?? this.invoice,
    title: title ?? this.title,
    description: description ?? this.description,
    photoUrl: photoUrl ?? this.photoUrl,
    photoSize: photoSize ?? this.photoSize,
    photoWidth: photoWidth ?? this.photoWidth,
    photoHeight: photoHeight ?? this.photoHeight,
    payload: payload ?? this.payload,
    providerToken: providerToken ?? this.providerToken,
    providerData: providerData ?? this.providerData,
    startParameter: startParameter ?? this.startParameter,
    paidMedia: paidMedia ?? this.paidMedia,
    paidMediaCaption: paidMediaCaption ?? this.paidMediaCaption,
  );
}

extension InputMessagePollExtensions on InputMessagePoll {
  InputMessagePoll copyWith({
    FormattedText? question,
    List<FormattedText>? options,
    bool? isAnonymous,
    PollType? type,
    int? openPeriod,
    int? closeDate,
    bool? isClosed,
  }) => InputMessagePoll(
    question: question ?? this.question,
    options: options ?? this.options,
    isAnonymous: isAnonymous ?? this.isAnonymous,
    type: type ?? this.type,
    openPeriod: openPeriod ?? this.openPeriod,
    closeDate: closeDate ?? this.closeDate,
    isClosed: isClosed ?? this.isClosed,
  );
}

extension InputMessageStoryExtensions on InputMessageStory {
  InputMessageStory copyWith({int? storyPosterChatId, int? storyId}) =>
      InputMessageStory(
        storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
        storyId: storyId ?? this.storyId,
      );
}

extension InputMessageChecklistExtensions on InputMessageChecklist {
  InputMessageChecklist copyWith({InputChecklist? checklist}) =>
      InputMessageChecklist(checklist: checklist ?? this.checklist);
}

extension InputMessageForwardedExtensions on InputMessageForwarded {
  InputMessageForwarded copyWith({
    int? fromChatId,
    int? messageId,
    bool? inGameShare,
    bool? replaceVideoStartTimestamp,
    int? newVideoStartTimestamp,
    MessageCopyOptions? copyOptions,
  }) => InputMessageForwarded(
    fromChatId: fromChatId ?? this.fromChatId,
    messageId: messageId ?? this.messageId,
    inGameShare: inGameShare ?? this.inGameShare,
    replaceVideoStartTimestamp:
        replaceVideoStartTimestamp ?? this.replaceVideoStartTimestamp,
    newVideoStartTimestamp:
        newVideoStartTimestamp ?? this.newVideoStartTimestamp,
    copyOptions: copyOptions ?? this.copyOptions,
  );
}

extension MessagePropertiesExtensions on MessageProperties {
  MessageProperties copyWith({
    bool? canAddTasks,
    bool? canBeCopied,
    bool? canBeCopiedToSecretChat,
    bool? canBeDeletedOnlyForSelf,
    bool? canBeDeletedForAllUsers,
    bool? canBeEdited,
    bool? canBeForwarded,
    bool? canBePaid,
    bool? canBePinned,
    bool? canBeReplied,
    bool? canBeRepliedInAnotherChat,
    bool? canBeSaved,
    bool? canBeSharedInStory,
    bool? canEditMedia,
    bool? canEditSchedulingState,
    bool? canGetAuthor,
    bool? canGetEmbeddingCode,
    bool? canGetLink,
    bool? canGetMediaTimestampLinks,
    bool? canGetMessageThread,
    bool? canGetReadDate,
    bool? canGetStatistics,
    bool? canGetVideoAdvertisements,
    bool? canGetViewers,
    bool? canMarkTasksAsDone,
    bool? canRecognizeSpeech,
    bool? canReportChat,
    bool? canReportReactions,
    bool? canReportSupergroupSpam,
    bool? canSetFactCheck,
    bool? needShowStatistics,
  }) => MessageProperties(
    canAddTasks: canAddTasks ?? this.canAddTasks,
    canBeCopied: canBeCopied ?? this.canBeCopied,
    canBeCopiedToSecretChat:
        canBeCopiedToSecretChat ?? this.canBeCopiedToSecretChat,
    canBeDeletedOnlyForSelf:
        canBeDeletedOnlyForSelf ?? this.canBeDeletedOnlyForSelf,
    canBeDeletedForAllUsers:
        canBeDeletedForAllUsers ?? this.canBeDeletedForAllUsers,
    canBeEdited: canBeEdited ?? this.canBeEdited,
    canBeForwarded: canBeForwarded ?? this.canBeForwarded,
    canBePaid: canBePaid ?? this.canBePaid,
    canBePinned: canBePinned ?? this.canBePinned,
    canBeReplied: canBeReplied ?? this.canBeReplied,
    canBeRepliedInAnotherChat:
        canBeRepliedInAnotherChat ?? this.canBeRepliedInAnotherChat,
    canBeSaved: canBeSaved ?? this.canBeSaved,
    canBeSharedInStory: canBeSharedInStory ?? this.canBeSharedInStory,
    canEditMedia: canEditMedia ?? this.canEditMedia,
    canEditSchedulingState:
        canEditSchedulingState ?? this.canEditSchedulingState,
    canGetAuthor: canGetAuthor ?? this.canGetAuthor,
    canGetEmbeddingCode: canGetEmbeddingCode ?? this.canGetEmbeddingCode,
    canGetLink: canGetLink ?? this.canGetLink,
    canGetMediaTimestampLinks:
        canGetMediaTimestampLinks ?? this.canGetMediaTimestampLinks,
    canGetMessageThread: canGetMessageThread ?? this.canGetMessageThread,
    canGetReadDate: canGetReadDate ?? this.canGetReadDate,
    canGetStatistics: canGetStatistics ?? this.canGetStatistics,
    canGetVideoAdvertisements:
        canGetVideoAdvertisements ?? this.canGetVideoAdvertisements,
    canGetViewers: canGetViewers ?? this.canGetViewers,
    canMarkTasksAsDone: canMarkTasksAsDone ?? this.canMarkTasksAsDone,
    canRecognizeSpeech: canRecognizeSpeech ?? this.canRecognizeSpeech,
    canReportChat: canReportChat ?? this.canReportChat,
    canReportReactions: canReportReactions ?? this.canReportReactions,
    canReportSupergroupSpam:
        canReportSupergroupSpam ?? this.canReportSupergroupSpam,
    canSetFactCheck: canSetFactCheck ?? this.canSetFactCheck,
    needShowStatistics: needShowStatistics ?? this.needShowStatistics,
  );
}

extension SearchMessagesFilterExtensions on SearchMessagesFilter {
  TResult map<TResult extends Object?>({
    required TResult Function(SearchMessagesFilterEmpty value) empty,
    required TResult Function(SearchMessagesFilterAnimation value) animation,
    required TResult Function(SearchMessagesFilterAudio value) audio,
    required TResult Function(SearchMessagesFilterDocument value) document,
    required TResult Function(SearchMessagesFilterPhoto value) photo,
    required TResult Function(SearchMessagesFilterVideo value) video,
    required TResult Function(SearchMessagesFilterVoiceNote value) voiceNote,
    required TResult Function(SearchMessagesFilterPhotoAndVideo value)
    photoAndVideo,
    required TResult Function(SearchMessagesFilterUrl value) url,
    required TResult Function(SearchMessagesFilterChatPhoto value) chatPhoto,
    required TResult Function(SearchMessagesFilterVideoNote value) videoNote,
    required TResult Function(SearchMessagesFilterVoiceAndVideoNote value)
    voiceAndVideoNote,
    required TResult Function(SearchMessagesFilterMention value) mention,
    required TResult Function(SearchMessagesFilterUnreadMention value)
    unreadMention,
    required TResult Function(SearchMessagesFilterUnreadReaction value)
    unreadReaction,
    required TResult Function(SearchMessagesFilterFailedToSend value)
    failedToSend,
    required TResult Function(SearchMessagesFilterPinned value) pinned,
  }) {
    switch (getConstructor()) {
      case SearchMessagesFilterEmpty.constructor:
        return empty.call(this as SearchMessagesFilterEmpty);
      case SearchMessagesFilterAnimation.constructor:
        return animation.call(this as SearchMessagesFilterAnimation);
      case SearchMessagesFilterAudio.constructor:
        return audio.call(this as SearchMessagesFilterAudio);
      case SearchMessagesFilterDocument.constructor:
        return document.call(this as SearchMessagesFilterDocument);
      case SearchMessagesFilterPhoto.constructor:
        return photo.call(this as SearchMessagesFilterPhoto);
      case SearchMessagesFilterVideo.constructor:
        return video.call(this as SearchMessagesFilterVideo);
      case SearchMessagesFilterVoiceNote.constructor:
        return voiceNote.call(this as SearchMessagesFilterVoiceNote);
      case SearchMessagesFilterPhotoAndVideo.constructor:
        return photoAndVideo.call(this as SearchMessagesFilterPhotoAndVideo);
      case SearchMessagesFilterUrl.constructor:
        return url.call(this as SearchMessagesFilterUrl);
      case SearchMessagesFilterChatPhoto.constructor:
        return chatPhoto.call(this as SearchMessagesFilterChatPhoto);
      case SearchMessagesFilterVideoNote.constructor:
        return videoNote.call(this as SearchMessagesFilterVideoNote);
      case SearchMessagesFilterVoiceAndVideoNote.constructor:
        return voiceAndVideoNote.call(
          this as SearchMessagesFilterVoiceAndVideoNote,
        );
      case SearchMessagesFilterMention.constructor:
        return mention.call(this as SearchMessagesFilterMention);
      case SearchMessagesFilterUnreadMention.constructor:
        return unreadMention.call(this as SearchMessagesFilterUnreadMention);
      case SearchMessagesFilterUnreadReaction.constructor:
        return unreadReaction.call(this as SearchMessagesFilterUnreadReaction);
      case SearchMessagesFilterFailedToSend.constructor:
        return failedToSend.call(this as SearchMessagesFilterFailedToSend);
      case SearchMessagesFilterPinned.constructor:
        return pinned.call(this as SearchMessagesFilterPinned);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(SearchMessagesFilterEmpty value)? empty,
    TResult Function(SearchMessagesFilterAnimation value)? animation,
    TResult Function(SearchMessagesFilterAudio value)? audio,
    TResult Function(SearchMessagesFilterDocument value)? document,
    TResult Function(SearchMessagesFilterPhoto value)? photo,
    TResult Function(SearchMessagesFilterVideo value)? video,
    TResult Function(SearchMessagesFilterVoiceNote value)? voiceNote,
    TResult Function(SearchMessagesFilterPhotoAndVideo value)? photoAndVideo,
    TResult Function(SearchMessagesFilterUrl value)? url,
    TResult Function(SearchMessagesFilterChatPhoto value)? chatPhoto,
    TResult Function(SearchMessagesFilterVideoNote value)? videoNote,
    TResult Function(SearchMessagesFilterVoiceAndVideoNote value)?
    voiceAndVideoNote,
    TResult Function(SearchMessagesFilterMention value)? mention,
    TResult Function(SearchMessagesFilterUnreadMention value)? unreadMention,
    TResult Function(SearchMessagesFilterUnreadReaction value)? unreadReaction,
    TResult Function(SearchMessagesFilterFailedToSend value)? failedToSend,
    TResult Function(SearchMessagesFilterPinned value)? pinned,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case SearchMessagesFilterEmpty.constructor:
        if (empty != null) {
          return empty.call(this as SearchMessagesFilterEmpty);
        }
        break;
      case SearchMessagesFilterAnimation.constructor:
        if (animation != null) {
          return animation.call(this as SearchMessagesFilterAnimation);
        }
        break;
      case SearchMessagesFilterAudio.constructor:
        if (audio != null) {
          return audio.call(this as SearchMessagesFilterAudio);
        }
        break;
      case SearchMessagesFilterDocument.constructor:
        if (document != null) {
          return document.call(this as SearchMessagesFilterDocument);
        }
        break;
      case SearchMessagesFilterPhoto.constructor:
        if (photo != null) {
          return photo.call(this as SearchMessagesFilterPhoto);
        }
        break;
      case SearchMessagesFilterVideo.constructor:
        if (video != null) {
          return video.call(this as SearchMessagesFilterVideo);
        }
        break;
      case SearchMessagesFilterVoiceNote.constructor:
        if (voiceNote != null) {
          return voiceNote.call(this as SearchMessagesFilterVoiceNote);
        }
        break;
      case SearchMessagesFilterPhotoAndVideo.constructor:
        if (photoAndVideo != null) {
          return photoAndVideo.call(this as SearchMessagesFilterPhotoAndVideo);
        }
        break;
      case SearchMessagesFilterUrl.constructor:
        if (url != null) {
          return url.call(this as SearchMessagesFilterUrl);
        }
        break;
      case SearchMessagesFilterChatPhoto.constructor:
        if (chatPhoto != null) {
          return chatPhoto.call(this as SearchMessagesFilterChatPhoto);
        }
        break;
      case SearchMessagesFilterVideoNote.constructor:
        if (videoNote != null) {
          return videoNote.call(this as SearchMessagesFilterVideoNote);
        }
        break;
      case SearchMessagesFilterVoiceAndVideoNote.constructor:
        if (voiceAndVideoNote != null) {
          return voiceAndVideoNote.call(
            this as SearchMessagesFilterVoiceAndVideoNote,
          );
        }
        break;
      case SearchMessagesFilterMention.constructor:
        if (mention != null) {
          return mention.call(this as SearchMessagesFilterMention);
        }
        break;
      case SearchMessagesFilterUnreadMention.constructor:
        if (unreadMention != null) {
          return unreadMention.call(this as SearchMessagesFilterUnreadMention);
        }
        break;
      case SearchMessagesFilterUnreadReaction.constructor:
        if (unreadReaction != null) {
          return unreadReaction.call(
            this as SearchMessagesFilterUnreadReaction,
          );
        }
        break;
      case SearchMessagesFilterFailedToSend.constructor:
        if (failedToSend != null) {
          return failedToSend.call(this as SearchMessagesFilterFailedToSend);
        }
        break;
      case SearchMessagesFilterPinned.constructor:
        if (pinned != null) {
          return pinned.call(this as SearchMessagesFilterPinned);
        }
        break;
    }
    return orElse.call();
  }
}

extension SearchMessagesChatTypeFilterExtensions
    on SearchMessagesChatTypeFilter {
  TResult map<TResult extends Object?>({
    required TResult Function(SearchMessagesChatTypeFilterPrivate value)
    private,
    required TResult Function(SearchMessagesChatTypeFilterGroup value) group,
    required TResult Function(SearchMessagesChatTypeFilterChannel value)
    channel,
  }) {
    switch (getConstructor()) {
      case SearchMessagesChatTypeFilterPrivate.constructor:
        return private.call(this as SearchMessagesChatTypeFilterPrivate);
      case SearchMessagesChatTypeFilterGroup.constructor:
        return group.call(this as SearchMessagesChatTypeFilterGroup);
      case SearchMessagesChatTypeFilterChannel.constructor:
        return channel.call(this as SearchMessagesChatTypeFilterChannel);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(SearchMessagesChatTypeFilterPrivate value)? private,
    TResult Function(SearchMessagesChatTypeFilterGroup value)? group,
    TResult Function(SearchMessagesChatTypeFilterChannel value)? channel,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case SearchMessagesChatTypeFilterPrivate.constructor:
        if (private != null) {
          return private.call(this as SearchMessagesChatTypeFilterPrivate);
        }
        break;
      case SearchMessagesChatTypeFilterGroup.constructor:
        if (group != null) {
          return group.call(this as SearchMessagesChatTypeFilterGroup);
        }
        break;
      case SearchMessagesChatTypeFilterChannel.constructor:
        if (channel != null) {
          return channel.call(this as SearchMessagesChatTypeFilterChannel);
        }
        break;
    }
    return orElse.call();
  }
}

extension ChatActionExtensions on ChatAction {
  TResult map<TResult extends Object?>({
    required TResult Function(ChatActionTyping value) typing,
    required TResult Function(ChatActionRecordingVideo value) recordingVideo,
    required TResult Function(ChatActionUploadingVideo value) uploadingVideo,
    required TResult Function(ChatActionRecordingVoiceNote value)
    recordingVoiceNote,
    required TResult Function(ChatActionUploadingVoiceNote value)
    uploadingVoiceNote,
    required TResult Function(ChatActionUploadingPhoto value) uploadingPhoto,
    required TResult Function(ChatActionUploadingDocument value)
    uploadingDocument,
    required TResult Function(ChatActionChoosingSticker value) choosingSticker,
    required TResult Function(ChatActionChoosingLocation value)
    choosingLocation,
    required TResult Function(ChatActionChoosingContact value) choosingContact,
    required TResult Function(ChatActionStartPlayingGame value)
    startPlayingGame,
    required TResult Function(ChatActionRecordingVideoNote value)
    recordingVideoNote,
    required TResult Function(ChatActionUploadingVideoNote value)
    uploadingVideoNote,
    required TResult Function(ChatActionWatchingAnimations value)
    watchingAnimations,
    required TResult Function(ChatActionCancel value) cancel,
  }) {
    switch (getConstructor()) {
      case ChatActionTyping.constructor:
        return typing.call(this as ChatActionTyping);
      case ChatActionRecordingVideo.constructor:
        return recordingVideo.call(this as ChatActionRecordingVideo);
      case ChatActionUploadingVideo.constructor:
        return uploadingVideo.call(this as ChatActionUploadingVideo);
      case ChatActionRecordingVoiceNote.constructor:
        return recordingVoiceNote.call(this as ChatActionRecordingVoiceNote);
      case ChatActionUploadingVoiceNote.constructor:
        return uploadingVoiceNote.call(this as ChatActionUploadingVoiceNote);
      case ChatActionUploadingPhoto.constructor:
        return uploadingPhoto.call(this as ChatActionUploadingPhoto);
      case ChatActionUploadingDocument.constructor:
        return uploadingDocument.call(this as ChatActionUploadingDocument);
      case ChatActionChoosingSticker.constructor:
        return choosingSticker.call(this as ChatActionChoosingSticker);
      case ChatActionChoosingLocation.constructor:
        return choosingLocation.call(this as ChatActionChoosingLocation);
      case ChatActionChoosingContact.constructor:
        return choosingContact.call(this as ChatActionChoosingContact);
      case ChatActionStartPlayingGame.constructor:
        return startPlayingGame.call(this as ChatActionStartPlayingGame);
      case ChatActionRecordingVideoNote.constructor:
        return recordingVideoNote.call(this as ChatActionRecordingVideoNote);
      case ChatActionUploadingVideoNote.constructor:
        return uploadingVideoNote.call(this as ChatActionUploadingVideoNote);
      case ChatActionWatchingAnimations.constructor:
        return watchingAnimations.call(this as ChatActionWatchingAnimations);
      case ChatActionCancel.constructor:
        return cancel.call(this as ChatActionCancel);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ChatActionTyping value)? typing,
    TResult Function(ChatActionRecordingVideo value)? recordingVideo,
    TResult Function(ChatActionUploadingVideo value)? uploadingVideo,
    TResult Function(ChatActionRecordingVoiceNote value)? recordingVoiceNote,
    TResult Function(ChatActionUploadingVoiceNote value)? uploadingVoiceNote,
    TResult Function(ChatActionUploadingPhoto value)? uploadingPhoto,
    TResult Function(ChatActionUploadingDocument value)? uploadingDocument,
    TResult Function(ChatActionChoosingSticker value)? choosingSticker,
    TResult Function(ChatActionChoosingLocation value)? choosingLocation,
    TResult Function(ChatActionChoosingContact value)? choosingContact,
    TResult Function(ChatActionStartPlayingGame value)? startPlayingGame,
    TResult Function(ChatActionRecordingVideoNote value)? recordingVideoNote,
    TResult Function(ChatActionUploadingVideoNote value)? uploadingVideoNote,
    TResult Function(ChatActionWatchingAnimations value)? watchingAnimations,
    TResult Function(ChatActionCancel value)? cancel,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ChatActionTyping.constructor:
        if (typing != null) {
          return typing.call(this as ChatActionTyping);
        }
        break;
      case ChatActionRecordingVideo.constructor:
        if (recordingVideo != null) {
          return recordingVideo.call(this as ChatActionRecordingVideo);
        }
        break;
      case ChatActionUploadingVideo.constructor:
        if (uploadingVideo != null) {
          return uploadingVideo.call(this as ChatActionUploadingVideo);
        }
        break;
      case ChatActionRecordingVoiceNote.constructor:
        if (recordingVoiceNote != null) {
          return recordingVoiceNote.call(this as ChatActionRecordingVoiceNote);
        }
        break;
      case ChatActionUploadingVoiceNote.constructor:
        if (uploadingVoiceNote != null) {
          return uploadingVoiceNote.call(this as ChatActionUploadingVoiceNote);
        }
        break;
      case ChatActionUploadingPhoto.constructor:
        if (uploadingPhoto != null) {
          return uploadingPhoto.call(this as ChatActionUploadingPhoto);
        }
        break;
      case ChatActionUploadingDocument.constructor:
        if (uploadingDocument != null) {
          return uploadingDocument.call(this as ChatActionUploadingDocument);
        }
        break;
      case ChatActionChoosingSticker.constructor:
        if (choosingSticker != null) {
          return choosingSticker.call(this as ChatActionChoosingSticker);
        }
        break;
      case ChatActionChoosingLocation.constructor:
        if (choosingLocation != null) {
          return choosingLocation.call(this as ChatActionChoosingLocation);
        }
        break;
      case ChatActionChoosingContact.constructor:
        if (choosingContact != null) {
          return choosingContact.call(this as ChatActionChoosingContact);
        }
        break;
      case ChatActionStartPlayingGame.constructor:
        if (startPlayingGame != null) {
          return startPlayingGame.call(this as ChatActionStartPlayingGame);
        }
        break;
      case ChatActionRecordingVideoNote.constructor:
        if (recordingVideoNote != null) {
          return recordingVideoNote.call(this as ChatActionRecordingVideoNote);
        }
        break;
      case ChatActionUploadingVideoNote.constructor:
        if (uploadingVideoNote != null) {
          return uploadingVideoNote.call(this as ChatActionUploadingVideoNote);
        }
        break;
      case ChatActionWatchingAnimations.constructor:
        if (watchingAnimations != null) {
          return watchingAnimations.call(this as ChatActionWatchingAnimations);
        }
        break;
      case ChatActionCancel.constructor:
        if (cancel != null) {
          return cancel.call(this as ChatActionCancel);
        }
        break;
    }
    return orElse.call();
  }
}

extension ChatActionUploadingVideoExtensions on ChatActionUploadingVideo {
  ChatActionUploadingVideo copyWith({int? progress}) =>
      ChatActionUploadingVideo(progress: progress ?? this.progress);
}

extension ChatActionUploadingVoiceNoteExtensions
    on ChatActionUploadingVoiceNote {
  ChatActionUploadingVoiceNote copyWith({int? progress}) =>
      ChatActionUploadingVoiceNote(progress: progress ?? this.progress);
}

extension ChatActionUploadingPhotoExtensions on ChatActionUploadingPhoto {
  ChatActionUploadingPhoto copyWith({int? progress}) =>
      ChatActionUploadingPhoto(progress: progress ?? this.progress);
}

extension ChatActionUploadingDocumentExtensions on ChatActionUploadingDocument {
  ChatActionUploadingDocument copyWith({int? progress}) =>
      ChatActionUploadingDocument(progress: progress ?? this.progress);
}

extension ChatActionUploadingVideoNoteExtensions
    on ChatActionUploadingVideoNote {
  ChatActionUploadingVideoNote copyWith({int? progress}) =>
      ChatActionUploadingVideoNote(progress: progress ?? this.progress);
}

extension ChatActionWatchingAnimationsExtensions
    on ChatActionWatchingAnimations {
  ChatActionWatchingAnimations copyWith({String? emoji}) =>
      ChatActionWatchingAnimations(emoji: emoji ?? this.emoji);
}

extension UserStatusExtensions on UserStatus {
  TResult map<TResult extends Object?>({
    required TResult Function(UserStatusEmpty value) empty,
    required TResult Function(UserStatusOnline value) online,
    required TResult Function(UserStatusOffline value) offline,
    required TResult Function(UserStatusRecently value) recently,
    required TResult Function(UserStatusLastWeek value) lastWeek,
    required TResult Function(UserStatusLastMonth value) lastMonth,
  }) {
    switch (getConstructor()) {
      case UserStatusEmpty.constructor:
        return empty.call(this as UserStatusEmpty);
      case UserStatusOnline.constructor:
        return online.call(this as UserStatusOnline);
      case UserStatusOffline.constructor:
        return offline.call(this as UserStatusOffline);
      case UserStatusRecently.constructor:
        return recently.call(this as UserStatusRecently);
      case UserStatusLastWeek.constructor:
        return lastWeek.call(this as UserStatusLastWeek);
      case UserStatusLastMonth.constructor:
        return lastMonth.call(this as UserStatusLastMonth);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(UserStatusEmpty value)? empty,
    TResult Function(UserStatusOnline value)? online,
    TResult Function(UserStatusOffline value)? offline,
    TResult Function(UserStatusRecently value)? recently,
    TResult Function(UserStatusLastWeek value)? lastWeek,
    TResult Function(UserStatusLastMonth value)? lastMonth,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case UserStatusEmpty.constructor:
        if (empty != null) {
          return empty.call(this as UserStatusEmpty);
        }
        break;
      case UserStatusOnline.constructor:
        if (online != null) {
          return online.call(this as UserStatusOnline);
        }
        break;
      case UserStatusOffline.constructor:
        if (offline != null) {
          return offline.call(this as UserStatusOffline);
        }
        break;
      case UserStatusRecently.constructor:
        if (recently != null) {
          return recently.call(this as UserStatusRecently);
        }
        break;
      case UserStatusLastWeek.constructor:
        if (lastWeek != null) {
          return lastWeek.call(this as UserStatusLastWeek);
        }
        break;
      case UserStatusLastMonth.constructor:
        if (lastMonth != null) {
          return lastMonth.call(this as UserStatusLastMonth);
        }
        break;
    }
    return orElse.call();
  }
}

extension UserStatusOnlineExtensions on UserStatusOnline {
  UserStatusOnline copyWith({int? expires}) =>
      UserStatusOnline(expires: expires ?? this.expires);
}

extension UserStatusOfflineExtensions on UserStatusOffline {
  UserStatusOffline copyWith({int? wasOnline}) =>
      UserStatusOffline(wasOnline: wasOnline ?? this.wasOnline);
}

extension UserStatusRecentlyExtensions on UserStatusRecently {
  UserStatusRecently copyWith({bool? byMyPrivacySettings}) =>
      UserStatusRecently(
        byMyPrivacySettings: byMyPrivacySettings ?? this.byMyPrivacySettings,
      );
}

extension UserStatusLastWeekExtensions on UserStatusLastWeek {
  UserStatusLastWeek copyWith({bool? byMyPrivacySettings}) =>
      UserStatusLastWeek(
        byMyPrivacySettings: byMyPrivacySettings ?? this.byMyPrivacySettings,
      );
}

extension UserStatusLastMonthExtensions on UserStatusLastMonth {
  UserStatusLastMonth copyWith({bool? byMyPrivacySettings}) =>
      UserStatusLastMonth(
        byMyPrivacySettings: byMyPrivacySettings ?? this.byMyPrivacySettings,
      );
}

extension EmojiKeywordExtensions on EmojiKeyword {
  EmojiKeyword copyWith({String? emoji, String? keyword}) => EmojiKeyword(
    emoji: emoji ?? this.emoji,
    keyword: keyword ?? this.keyword,
  );
}

extension EmojiKeywordsExtensions on EmojiKeywords {
  EmojiKeywords copyWith({List<EmojiKeyword>? emojiKeywords}) =>
      EmojiKeywords(emojiKeywords: emojiKeywords ?? this.emojiKeywords);
}

extension StickersExtensions on Stickers {
  Stickers copyWith({List<Sticker>? stickers}) =>
      Stickers(stickers: stickers ?? this.stickers);
}

extension EmojisExtensions on Emojis {
  Emojis copyWith({List<String>? emojis}) =>
      Emojis(emojis: emojis ?? this.emojis);
}

extension StickerSetExtensions on StickerSet {
  StickerSet copyWith({
    int? id,
    String? title,
    String? name,
    Thumbnail? thumbnail,
    Outline? thumbnailOutline,
    bool? isOwned,
    bool? isInstalled,
    bool? isArchived,
    bool? isOfficial,
    StickerType? stickerType,
    bool? needsRepainting,
    bool? isAllowedAsChatEmojiStatus,
    bool? isViewed,
    List<Sticker>? stickers,
    List<Emojis>? emojis,
  }) => StickerSet(
    id: id ?? this.id,
    title: title ?? this.title,
    name: name ?? this.name,
    thumbnail: thumbnail ?? this.thumbnail,
    thumbnailOutline: thumbnailOutline ?? this.thumbnailOutline,
    isOwned: isOwned ?? this.isOwned,
    isInstalled: isInstalled ?? this.isInstalled,
    isArchived: isArchived ?? this.isArchived,
    isOfficial: isOfficial ?? this.isOfficial,
    stickerType: stickerType ?? this.stickerType,
    needsRepainting: needsRepainting ?? this.needsRepainting,
    isAllowedAsChatEmojiStatus:
        isAllowedAsChatEmojiStatus ?? this.isAllowedAsChatEmojiStatus,
    isViewed: isViewed ?? this.isViewed,
    stickers: stickers ?? this.stickers,
    emojis: emojis ?? this.emojis,
  );
}

extension StickerSetInfoExtensions on StickerSetInfo {
  StickerSetInfo copyWith({
    int? id,
    String? title,
    String? name,
    Thumbnail? thumbnail,
    Outline? thumbnailOutline,
    bool? isOwned,
    bool? isInstalled,
    bool? isArchived,
    bool? isOfficial,
    StickerType? stickerType,
    bool? needsRepainting,
    bool? isAllowedAsChatEmojiStatus,
    bool? isViewed,
    int? size,
    List<Sticker>? covers,
  }) => StickerSetInfo(
    id: id ?? this.id,
    title: title ?? this.title,
    name: name ?? this.name,
    thumbnail: thumbnail ?? this.thumbnail,
    thumbnailOutline: thumbnailOutline ?? this.thumbnailOutline,
    isOwned: isOwned ?? this.isOwned,
    isInstalled: isInstalled ?? this.isInstalled,
    isArchived: isArchived ?? this.isArchived,
    isOfficial: isOfficial ?? this.isOfficial,
    stickerType: stickerType ?? this.stickerType,
    needsRepainting: needsRepainting ?? this.needsRepainting,
    isAllowedAsChatEmojiStatus:
        isAllowedAsChatEmojiStatus ?? this.isAllowedAsChatEmojiStatus,
    isViewed: isViewed ?? this.isViewed,
    size: size ?? this.size,
    covers: covers ?? this.covers,
  );
}

extension StickerSetsExtensions on StickerSets {
  StickerSets copyWith({int? totalCount, List<StickerSetInfo>? sets}) =>
      StickerSets(
        totalCount: totalCount ?? this.totalCount,
        sets: sets ?? this.sets,
      );
}

extension TrendingStickerSetsExtensions on TrendingStickerSets {
  TrendingStickerSets copyWith({
    int? totalCount,
    List<StickerSetInfo>? sets,
    bool? isPremium,
  }) => TrendingStickerSets(
    totalCount: totalCount ?? this.totalCount,
    sets: sets ?? this.sets,
    isPremium: isPremium ?? this.isPremium,
  );
}

extension EmojiCategorySourceExtensions on EmojiCategorySource {
  TResult map<TResult extends Object?>({
    required TResult Function(EmojiCategorySourceSearch value) search,
    required TResult Function(EmojiCategorySourcePremium value) premium,
  }) {
    switch (getConstructor()) {
      case EmojiCategorySourceSearch.constructor:
        return search.call(this as EmojiCategorySourceSearch);
      case EmojiCategorySourcePremium.constructor:
        return premium.call(this as EmojiCategorySourcePremium);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(EmojiCategorySourceSearch value)? search,
    TResult Function(EmojiCategorySourcePremium value)? premium,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case EmojiCategorySourceSearch.constructor:
        if (search != null) {
          return search.call(this as EmojiCategorySourceSearch);
        }
        break;
      case EmojiCategorySourcePremium.constructor:
        if (premium != null) {
          return premium.call(this as EmojiCategorySourcePremium);
        }
        break;
    }
    return orElse.call();
  }
}

extension EmojiCategorySourceSearchExtensions on EmojiCategorySourceSearch {
  EmojiCategorySourceSearch copyWith({List<String>? emojis}) =>
      EmojiCategorySourceSearch(emojis: emojis ?? this.emojis);
}

extension EmojiCategoryExtensions on EmojiCategory {
  EmojiCategory copyWith({
    String? name,
    Sticker? icon,
    EmojiCategorySource? source,
    bool? isGreeting,
  }) => EmojiCategory(
    name: name ?? this.name,
    icon: icon ?? this.icon,
    source: source ?? this.source,
    isGreeting: isGreeting ?? this.isGreeting,
  );
}

extension EmojiCategoriesExtensions on EmojiCategories {
  EmojiCategories copyWith({List<EmojiCategory>? categories}) =>
      EmojiCategories(categories: categories ?? this.categories);
}

extension EmojiCategoryTypeExtensions on EmojiCategoryType {
  TResult map<TResult extends Object?>({
    required TResult Function(EmojiCategoryTypeDefault value) $default,
    required TResult Function(EmojiCategoryTypeRegularStickers value)
    regularStickers,
    required TResult Function(EmojiCategoryTypeEmojiStatus value) emojiStatus,
    required TResult Function(EmojiCategoryTypeChatPhoto value) chatPhoto,
  }) {
    switch (getConstructor()) {
      case EmojiCategoryTypeDefault.constructor:
        return $default.call(this as EmojiCategoryTypeDefault);
      case EmojiCategoryTypeRegularStickers.constructor:
        return regularStickers.call(this as EmojiCategoryTypeRegularStickers);
      case EmojiCategoryTypeEmojiStatus.constructor:
        return emojiStatus.call(this as EmojiCategoryTypeEmojiStatus);
      case EmojiCategoryTypeChatPhoto.constructor:
        return chatPhoto.call(this as EmojiCategoryTypeChatPhoto);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(EmojiCategoryTypeDefault value)? $default,
    TResult Function(EmojiCategoryTypeRegularStickers value)? regularStickers,
    TResult Function(EmojiCategoryTypeEmojiStatus value)? emojiStatus,
    TResult Function(EmojiCategoryTypeChatPhoto value)? chatPhoto,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case EmojiCategoryTypeDefault.constructor:
        if ($default != null) {
          return $default.call(this as EmojiCategoryTypeDefault);
        }
        break;
      case EmojiCategoryTypeRegularStickers.constructor:
        if (regularStickers != null) {
          return regularStickers.call(this as EmojiCategoryTypeRegularStickers);
        }
        break;
      case EmojiCategoryTypeEmojiStatus.constructor:
        if (emojiStatus != null) {
          return emojiStatus.call(this as EmojiCategoryTypeEmojiStatus);
        }
        break;
      case EmojiCategoryTypeChatPhoto.constructor:
        if (chatPhoto != null) {
          return chatPhoto.call(this as EmojiCategoryTypeChatPhoto);
        }
        break;
    }
    return orElse.call();
  }
}

extension CurrentWeatherExtensions on CurrentWeather {
  CurrentWeather copyWith({double? temperature, String? emoji}) =>
      CurrentWeather(
        temperature: temperature ?? this.temperature,
        emoji: emoji ?? this.emoji,
      );
}

extension StoryAreaPositionExtensions on StoryAreaPosition {
  StoryAreaPosition copyWith({
    double? xPercentage,
    double? yPercentage,
    double? widthPercentage,
    double? heightPercentage,
    double? rotationAngle,
    double? cornerRadiusPercentage,
  }) => StoryAreaPosition(
    xPercentage: xPercentage ?? this.xPercentage,
    yPercentage: yPercentage ?? this.yPercentage,
    widthPercentage: widthPercentage ?? this.widthPercentage,
    heightPercentage: heightPercentage ?? this.heightPercentage,
    rotationAngle: rotationAngle ?? this.rotationAngle,
    cornerRadiusPercentage:
        cornerRadiusPercentage ?? this.cornerRadiusPercentage,
  );
}

extension StoryAreaTypeExtensions on StoryAreaType {
  TResult map<TResult extends Object?>({
    required TResult Function(StoryAreaTypeLocation value) location,
    required TResult Function(StoryAreaTypeVenue value) venue,
    required TResult Function(StoryAreaTypeSuggestedReaction value)
    suggestedReaction,
    required TResult Function(StoryAreaTypeMessage value) message,
    required TResult Function(StoryAreaTypeLink value) link,
    required TResult Function(StoryAreaTypeWeather value) weather,
    required TResult Function(StoryAreaTypeUpgradedGift value) upgradedGift,
  }) {
    switch (getConstructor()) {
      case StoryAreaTypeLocation.constructor:
        return location.call(this as StoryAreaTypeLocation);
      case StoryAreaTypeVenue.constructor:
        return venue.call(this as StoryAreaTypeVenue);
      case StoryAreaTypeSuggestedReaction.constructor:
        return suggestedReaction.call(this as StoryAreaTypeSuggestedReaction);
      case StoryAreaTypeMessage.constructor:
        return message.call(this as StoryAreaTypeMessage);
      case StoryAreaTypeLink.constructor:
        return link.call(this as StoryAreaTypeLink);
      case StoryAreaTypeWeather.constructor:
        return weather.call(this as StoryAreaTypeWeather);
      case StoryAreaTypeUpgradedGift.constructor:
        return upgradedGift.call(this as StoryAreaTypeUpgradedGift);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(StoryAreaTypeLocation value)? location,
    TResult Function(StoryAreaTypeVenue value)? venue,
    TResult Function(StoryAreaTypeSuggestedReaction value)? suggestedReaction,
    TResult Function(StoryAreaTypeMessage value)? message,
    TResult Function(StoryAreaTypeLink value)? link,
    TResult Function(StoryAreaTypeWeather value)? weather,
    TResult Function(StoryAreaTypeUpgradedGift value)? upgradedGift,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case StoryAreaTypeLocation.constructor:
        if (location != null) {
          return location.call(this as StoryAreaTypeLocation);
        }
        break;
      case StoryAreaTypeVenue.constructor:
        if (venue != null) {
          return venue.call(this as StoryAreaTypeVenue);
        }
        break;
      case StoryAreaTypeSuggestedReaction.constructor:
        if (suggestedReaction != null) {
          return suggestedReaction.call(this as StoryAreaTypeSuggestedReaction);
        }
        break;
      case StoryAreaTypeMessage.constructor:
        if (message != null) {
          return message.call(this as StoryAreaTypeMessage);
        }
        break;
      case StoryAreaTypeLink.constructor:
        if (link != null) {
          return link.call(this as StoryAreaTypeLink);
        }
        break;
      case StoryAreaTypeWeather.constructor:
        if (weather != null) {
          return weather.call(this as StoryAreaTypeWeather);
        }
        break;
      case StoryAreaTypeUpgradedGift.constructor:
        if (upgradedGift != null) {
          return upgradedGift.call(this as StoryAreaTypeUpgradedGift);
        }
        break;
    }
    return orElse.call();
  }
}

extension StoryAreaTypeLocationExtensions on StoryAreaTypeLocation {
  StoryAreaTypeLocation copyWith({
    Location? location,
    LocationAddress? address,
  }) => StoryAreaTypeLocation(
    location: location ?? this.location,
    address: address ?? this.address,
  );
}

extension StoryAreaTypeVenueExtensions on StoryAreaTypeVenue {
  StoryAreaTypeVenue copyWith({Venue? venue}) =>
      StoryAreaTypeVenue(venue: venue ?? this.venue);
}

extension StoryAreaTypeSuggestedReactionExtensions
    on StoryAreaTypeSuggestedReaction {
  StoryAreaTypeSuggestedReaction copyWith({
    ReactionType? reactionType,
    int? totalCount,
    bool? isDark,
    bool? isFlipped,
  }) => StoryAreaTypeSuggestedReaction(
    reactionType: reactionType ?? this.reactionType,
    totalCount: totalCount ?? this.totalCount,
    isDark: isDark ?? this.isDark,
    isFlipped: isFlipped ?? this.isFlipped,
  );
}

extension StoryAreaTypeMessageExtensions on StoryAreaTypeMessage {
  StoryAreaTypeMessage copyWith({int? chatId, int? messageId}) =>
      StoryAreaTypeMessage(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension StoryAreaTypeLinkExtensions on StoryAreaTypeLink {
  StoryAreaTypeLink copyWith({String? url}) =>
      StoryAreaTypeLink(url: url ?? this.url);
}

extension StoryAreaTypeWeatherExtensions on StoryAreaTypeWeather {
  StoryAreaTypeWeather copyWith({
    double? temperature,
    String? emoji,
    int? backgroundColor,
  }) => StoryAreaTypeWeather(
    temperature: temperature ?? this.temperature,
    emoji: emoji ?? this.emoji,
    backgroundColor: backgroundColor ?? this.backgroundColor,
  );
}

extension StoryAreaTypeUpgradedGiftExtensions on StoryAreaTypeUpgradedGift {
  StoryAreaTypeUpgradedGift copyWith({String? giftName}) =>
      StoryAreaTypeUpgradedGift(giftName: giftName ?? this.giftName);
}

extension StoryAreaExtensions on StoryArea {
  StoryArea copyWith({StoryAreaPosition? position, StoryAreaType? type}) =>
      StoryArea(position: position ?? this.position, type: type ?? this.type);
}

extension InputStoryAreaTypeExtensions on InputStoryAreaType {
  TResult map<TResult extends Object?>({
    required TResult Function(InputStoryAreaTypeLocation value) location,
    required TResult Function(InputStoryAreaTypeFoundVenue value) foundVenue,
    required TResult Function(InputStoryAreaTypePreviousVenue value)
    previousVenue,
    required TResult Function(InputStoryAreaTypeSuggestedReaction value)
    suggestedReaction,
    required TResult Function(InputStoryAreaTypeMessage value) message,
    required TResult Function(InputStoryAreaTypeLink value) link,
    required TResult Function(InputStoryAreaTypeWeather value) weather,
    required TResult Function(InputStoryAreaTypeUpgradedGift value)
    upgradedGift,
  }) {
    switch (getConstructor()) {
      case InputStoryAreaTypeLocation.constructor:
        return location.call(this as InputStoryAreaTypeLocation);
      case InputStoryAreaTypeFoundVenue.constructor:
        return foundVenue.call(this as InputStoryAreaTypeFoundVenue);
      case InputStoryAreaTypePreviousVenue.constructor:
        return previousVenue.call(this as InputStoryAreaTypePreviousVenue);
      case InputStoryAreaTypeSuggestedReaction.constructor:
        return suggestedReaction.call(
          this as InputStoryAreaTypeSuggestedReaction,
        );
      case InputStoryAreaTypeMessage.constructor:
        return message.call(this as InputStoryAreaTypeMessage);
      case InputStoryAreaTypeLink.constructor:
        return link.call(this as InputStoryAreaTypeLink);
      case InputStoryAreaTypeWeather.constructor:
        return weather.call(this as InputStoryAreaTypeWeather);
      case InputStoryAreaTypeUpgradedGift.constructor:
        return upgradedGift.call(this as InputStoryAreaTypeUpgradedGift);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InputStoryAreaTypeLocation value)? location,
    TResult Function(InputStoryAreaTypeFoundVenue value)? foundVenue,
    TResult Function(InputStoryAreaTypePreviousVenue value)? previousVenue,
    TResult Function(InputStoryAreaTypeSuggestedReaction value)?
    suggestedReaction,
    TResult Function(InputStoryAreaTypeMessage value)? message,
    TResult Function(InputStoryAreaTypeLink value)? link,
    TResult Function(InputStoryAreaTypeWeather value)? weather,
    TResult Function(InputStoryAreaTypeUpgradedGift value)? upgradedGift,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InputStoryAreaTypeLocation.constructor:
        if (location != null) {
          return location.call(this as InputStoryAreaTypeLocation);
        }
        break;
      case InputStoryAreaTypeFoundVenue.constructor:
        if (foundVenue != null) {
          return foundVenue.call(this as InputStoryAreaTypeFoundVenue);
        }
        break;
      case InputStoryAreaTypePreviousVenue.constructor:
        if (previousVenue != null) {
          return previousVenue.call(this as InputStoryAreaTypePreviousVenue);
        }
        break;
      case InputStoryAreaTypeSuggestedReaction.constructor:
        if (suggestedReaction != null) {
          return suggestedReaction.call(
            this as InputStoryAreaTypeSuggestedReaction,
          );
        }
        break;
      case InputStoryAreaTypeMessage.constructor:
        if (message != null) {
          return message.call(this as InputStoryAreaTypeMessage);
        }
        break;
      case InputStoryAreaTypeLink.constructor:
        if (link != null) {
          return link.call(this as InputStoryAreaTypeLink);
        }
        break;
      case InputStoryAreaTypeWeather.constructor:
        if (weather != null) {
          return weather.call(this as InputStoryAreaTypeWeather);
        }
        break;
      case InputStoryAreaTypeUpgradedGift.constructor:
        if (upgradedGift != null) {
          return upgradedGift.call(this as InputStoryAreaTypeUpgradedGift);
        }
        break;
    }
    return orElse.call();
  }
}

extension InputStoryAreaTypeLocationExtensions on InputStoryAreaTypeLocation {
  InputStoryAreaTypeLocation copyWith({
    Location? location,
    LocationAddress? address,
  }) => InputStoryAreaTypeLocation(
    location: location ?? this.location,
    address: address ?? this.address,
  );
}

extension InputStoryAreaTypeFoundVenueExtensions
    on InputStoryAreaTypeFoundVenue {
  InputStoryAreaTypeFoundVenue copyWith({int? queryId, String? resultId}) =>
      InputStoryAreaTypeFoundVenue(
        queryId: queryId ?? this.queryId,
        resultId: resultId ?? this.resultId,
      );
}

extension InputStoryAreaTypePreviousVenueExtensions
    on InputStoryAreaTypePreviousVenue {
  InputStoryAreaTypePreviousVenue copyWith({
    String? venueProvider,
    String? venueId,
  }) => InputStoryAreaTypePreviousVenue(
    venueProvider: venueProvider ?? this.venueProvider,
    venueId: venueId ?? this.venueId,
  );
}

extension InputStoryAreaTypeSuggestedReactionExtensions
    on InputStoryAreaTypeSuggestedReaction {
  InputStoryAreaTypeSuggestedReaction copyWith({
    ReactionType? reactionType,
    bool? isDark,
    bool? isFlipped,
  }) => InputStoryAreaTypeSuggestedReaction(
    reactionType: reactionType ?? this.reactionType,
    isDark: isDark ?? this.isDark,
    isFlipped: isFlipped ?? this.isFlipped,
  );
}

extension InputStoryAreaTypeMessageExtensions on InputStoryAreaTypeMessage {
  InputStoryAreaTypeMessage copyWith({int? chatId, int? messageId}) =>
      InputStoryAreaTypeMessage(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension InputStoryAreaTypeLinkExtensions on InputStoryAreaTypeLink {
  InputStoryAreaTypeLink copyWith({String? url}) =>
      InputStoryAreaTypeLink(url: url ?? this.url);
}

extension InputStoryAreaTypeWeatherExtensions on InputStoryAreaTypeWeather {
  InputStoryAreaTypeWeather copyWith({
    double? temperature,
    String? emoji,
    int? backgroundColor,
  }) => InputStoryAreaTypeWeather(
    temperature: temperature ?? this.temperature,
    emoji: emoji ?? this.emoji,
    backgroundColor: backgroundColor ?? this.backgroundColor,
  );
}

extension InputStoryAreaTypeUpgradedGiftExtensions
    on InputStoryAreaTypeUpgradedGift {
  InputStoryAreaTypeUpgradedGift copyWith({String? giftName}) =>
      InputStoryAreaTypeUpgradedGift(giftName: giftName ?? this.giftName);
}

extension InputStoryAreaExtensions on InputStoryArea {
  InputStoryArea copyWith({
    StoryAreaPosition? position,
    InputStoryAreaType? type,
  }) => InputStoryArea(
    position: position ?? this.position,
    type: type ?? this.type,
  );
}

extension InputStoryAreasExtensions on InputStoryAreas {
  InputStoryAreas copyWith({List<InputStoryArea>? areas}) =>
      InputStoryAreas(areas: areas ?? this.areas);
}

extension StoryVideoExtensions on StoryVideo {
  StoryVideo copyWith({
    double? duration,
    int? width,
    int? height,
    bool? hasStickers,
    bool? isAnimation,
    Minithumbnail? minithumbnail,
    Thumbnail? thumbnail,
    int? preloadPrefixSize,
    double? coverFrameTimestamp,
    File? video,
  }) => StoryVideo(
    duration: duration ?? this.duration,
    width: width ?? this.width,
    height: height ?? this.height,
    hasStickers: hasStickers ?? this.hasStickers,
    isAnimation: isAnimation ?? this.isAnimation,
    minithumbnail: minithumbnail ?? this.minithumbnail,
    thumbnail: thumbnail ?? this.thumbnail,
    preloadPrefixSize: preloadPrefixSize ?? this.preloadPrefixSize,
    coverFrameTimestamp: coverFrameTimestamp ?? this.coverFrameTimestamp,
    video: video ?? this.video,
  );
}

extension StoryContentExtensions on StoryContent {
  TResult map<TResult extends Object?>({
    required TResult Function(StoryContentPhoto value) photo,
    required TResult Function(StoryContentVideo value) video,
    required TResult Function(StoryContentUnsupported value) unsupported,
  }) {
    switch (getConstructor()) {
      case StoryContentPhoto.constructor:
        return photo.call(this as StoryContentPhoto);
      case StoryContentVideo.constructor:
        return video.call(this as StoryContentVideo);
      case StoryContentUnsupported.constructor:
        return unsupported.call(this as StoryContentUnsupported);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(StoryContentPhoto value)? photo,
    TResult Function(StoryContentVideo value)? video,
    TResult Function(StoryContentUnsupported value)? unsupported,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case StoryContentPhoto.constructor:
        if (photo != null) {
          return photo.call(this as StoryContentPhoto);
        }
        break;
      case StoryContentVideo.constructor:
        if (video != null) {
          return video.call(this as StoryContentVideo);
        }
        break;
      case StoryContentUnsupported.constructor:
        if (unsupported != null) {
          return unsupported.call(this as StoryContentUnsupported);
        }
        break;
    }
    return orElse.call();
  }
}

extension StoryContentPhotoExtensions on StoryContentPhoto {
  StoryContentPhoto copyWith({Photo? photo}) =>
      StoryContentPhoto(photo: photo ?? this.photo);
}

extension StoryContentVideoExtensions on StoryContentVideo {
  StoryContentVideo copyWith({
    StoryVideo? video,
    StoryVideo? alternativeVideo,
  }) => StoryContentVideo(
    video: video ?? this.video,
    alternativeVideo: alternativeVideo ?? this.alternativeVideo,
  );
}

extension InputStoryContentExtensions on InputStoryContent {
  TResult map<TResult extends Object?>({
    required TResult Function(InputStoryContentPhoto value) photo,
    required TResult Function(InputStoryContentVideo value) video,
  }) {
    switch (getConstructor()) {
      case InputStoryContentPhoto.constructor:
        return photo.call(this as InputStoryContentPhoto);
      case InputStoryContentVideo.constructor:
        return video.call(this as InputStoryContentVideo);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InputStoryContentPhoto value)? photo,
    TResult Function(InputStoryContentVideo value)? video,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InputStoryContentPhoto.constructor:
        if (photo != null) {
          return photo.call(this as InputStoryContentPhoto);
        }
        break;
      case InputStoryContentVideo.constructor:
        if (video != null) {
          return video.call(this as InputStoryContentVideo);
        }
        break;
    }
    return orElse.call();
  }
}

extension InputStoryContentPhotoExtensions on InputStoryContentPhoto {
  InputStoryContentPhoto copyWith({
    InputFile? photo,
    List<int>? addedStickerFileIds,
  }) => InputStoryContentPhoto(
    photo: photo ?? this.photo,
    addedStickerFileIds: addedStickerFileIds ?? this.addedStickerFileIds,
  );
}

extension InputStoryContentVideoExtensions on InputStoryContentVideo {
  InputStoryContentVideo copyWith({
    InputFile? video,
    List<int>? addedStickerFileIds,
    double? duration,
    double? coverFrameTimestamp,
    bool? isAnimation,
  }) => InputStoryContentVideo(
    video: video ?? this.video,
    addedStickerFileIds: addedStickerFileIds ?? this.addedStickerFileIds,
    duration: duration ?? this.duration,
    coverFrameTimestamp: coverFrameTimestamp ?? this.coverFrameTimestamp,
    isAnimation: isAnimation ?? this.isAnimation,
  );
}

extension StoryListExtensions on StoryList {
  TResult map<TResult extends Object?>({
    required TResult Function(StoryListMain value) main,
    required TResult Function(StoryListArchive value) archive,
  }) {
    switch (getConstructor()) {
      case StoryListMain.constructor:
        return main.call(this as StoryListMain);
      case StoryListArchive.constructor:
        return archive.call(this as StoryListArchive);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(StoryListMain value)? main,
    TResult Function(StoryListArchive value)? archive,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case StoryListMain.constructor:
        if (main != null) {
          return main.call(this as StoryListMain);
        }
        break;
      case StoryListArchive.constructor:
        if (archive != null) {
          return archive.call(this as StoryListArchive);
        }
        break;
    }
    return orElse.call();
  }
}

extension StoryOriginExtensions on StoryOrigin {
  TResult map<TResult extends Object?>({
    required TResult Function(StoryOriginPublicStory value) publicStory,
    required TResult Function(StoryOriginHiddenUser value) hiddenUser,
  }) {
    switch (getConstructor()) {
      case StoryOriginPublicStory.constructor:
        return publicStory.call(this as StoryOriginPublicStory);
      case StoryOriginHiddenUser.constructor:
        return hiddenUser.call(this as StoryOriginHiddenUser);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(StoryOriginPublicStory value)? publicStory,
    TResult Function(StoryOriginHiddenUser value)? hiddenUser,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case StoryOriginPublicStory.constructor:
        if (publicStory != null) {
          return publicStory.call(this as StoryOriginPublicStory);
        }
        break;
      case StoryOriginHiddenUser.constructor:
        if (hiddenUser != null) {
          return hiddenUser.call(this as StoryOriginHiddenUser);
        }
        break;
    }
    return orElse.call();
  }
}

extension StoryOriginPublicStoryExtensions on StoryOriginPublicStory {
  StoryOriginPublicStory copyWith({int? chatId, int? storyId}) =>
      StoryOriginPublicStory(
        chatId: chatId ?? this.chatId,
        storyId: storyId ?? this.storyId,
      );
}

extension StoryOriginHiddenUserExtensions on StoryOriginHiddenUser {
  StoryOriginHiddenUser copyWith({String? posterName}) =>
      StoryOriginHiddenUser(posterName: posterName ?? this.posterName);
}

extension StoryRepostInfoExtensions on StoryRepostInfo {
  StoryRepostInfo copyWith({StoryOrigin? origin, bool? isContentModified}) =>
      StoryRepostInfo(
        origin: origin ?? this.origin,
        isContentModified: isContentModified ?? this.isContentModified,
      );
}

extension StoryInteractionInfoExtensions on StoryInteractionInfo {
  StoryInteractionInfo copyWith({
    int? viewCount,
    int? forwardCount,
    int? reactionCount,
    List<int>? recentViewerUserIds,
  }) => StoryInteractionInfo(
    viewCount: viewCount ?? this.viewCount,
    forwardCount: forwardCount ?? this.forwardCount,
    reactionCount: reactionCount ?? this.reactionCount,
    recentViewerUserIds: recentViewerUserIds ?? this.recentViewerUserIds,
  );
}

extension StoryExtensions on Story {
  Story copyWith({
    int? id,
    int? posterChatId,
    MessageSender? posterId,
    int? date,
    bool? isBeingPosted,
    bool? isBeingEdited,
    bool? isEdited,
    bool? isPostedToChatPage,
    bool? isVisibleOnlyForSelf,
    bool? canBeDeleted,
    bool? canBeEdited,
    bool? canBeForwarded,
    bool? canBeReplied,
    bool? canToggleIsPostedToChatPage,
    bool? canGetStatistics,
    bool? canGetInteractions,
    bool? hasExpiredViewers,
    StoryRepostInfo? repostInfo,
    StoryInteractionInfo? interactionInfo,
    ReactionType? chosenReactionType,
    StoryPrivacySettings? privacySettings,
    StoryContent? content,
    List<StoryArea>? areas,
    FormattedText? caption,
  }) => Story(
    id: id ?? this.id,
    posterChatId: posterChatId ?? this.posterChatId,
    posterId: posterId ?? this.posterId,
    date: date ?? this.date,
    isBeingPosted: isBeingPosted ?? this.isBeingPosted,
    isBeingEdited: isBeingEdited ?? this.isBeingEdited,
    isEdited: isEdited ?? this.isEdited,
    isPostedToChatPage: isPostedToChatPage ?? this.isPostedToChatPage,
    isVisibleOnlyForSelf: isVisibleOnlyForSelf ?? this.isVisibleOnlyForSelf,
    canBeDeleted: canBeDeleted ?? this.canBeDeleted,
    canBeEdited: canBeEdited ?? this.canBeEdited,
    canBeForwarded: canBeForwarded ?? this.canBeForwarded,
    canBeReplied: canBeReplied ?? this.canBeReplied,
    canToggleIsPostedToChatPage:
        canToggleIsPostedToChatPage ?? this.canToggleIsPostedToChatPage,
    canGetStatistics: canGetStatistics ?? this.canGetStatistics,
    canGetInteractions: canGetInteractions ?? this.canGetInteractions,
    hasExpiredViewers: hasExpiredViewers ?? this.hasExpiredViewers,
    repostInfo: repostInfo ?? this.repostInfo,
    interactionInfo: interactionInfo ?? this.interactionInfo,
    chosenReactionType: chosenReactionType ?? this.chosenReactionType,
    privacySettings: privacySettings ?? this.privacySettings,
    content: content ?? this.content,
    areas: areas ?? this.areas,
    caption: caption ?? this.caption,
  );
}

extension StoriesExtensions on Stories {
  Stories copyWith({
    int? totalCount,
    List<Story>? stories,
    List<int>? pinnedStoryIds,
  }) => Stories(
    totalCount: totalCount ?? this.totalCount,
    stories: stories ?? this.stories,
    pinnedStoryIds: pinnedStoryIds ?? this.pinnedStoryIds,
  );
}

extension FoundStoriesExtensions on FoundStories {
  FoundStories copyWith({
    int? totalCount,
    List<Story>? stories,
    String? nextOffset,
  }) => FoundStories(
    totalCount: totalCount ?? this.totalCount,
    stories: stories ?? this.stories,
    nextOffset: nextOffset ?? this.nextOffset,
  );
}

extension StoryFullIdExtensions on StoryFullId {
  StoryFullId copyWith({int? posterChatId, int? storyId}) => StoryFullId(
    posterChatId: posterChatId ?? this.posterChatId,
    storyId: storyId ?? this.storyId,
  );
}

extension StoryInfoExtensions on StoryInfo {
  StoryInfo copyWith({int? storyId, int? date, bool? isForCloseFriends}) =>
      StoryInfo(
        storyId: storyId ?? this.storyId,
        date: date ?? this.date,
        isForCloseFriends: isForCloseFriends ?? this.isForCloseFriends,
      );
}

extension ChatActiveStoriesExtensions on ChatActiveStories {
  ChatActiveStories copyWith({
    int? chatId,
    StoryList? list,
    int? order,
    int? maxReadStoryId,
    List<StoryInfo>? stories,
  }) => ChatActiveStories(
    chatId: chatId ?? this.chatId,
    list: list ?? this.list,
    order: order ?? this.order,
    maxReadStoryId: maxReadStoryId ?? this.maxReadStoryId,
    stories: stories ?? this.stories,
  );
}

extension StoryInteractionTypeExtensions on StoryInteractionType {
  TResult map<TResult extends Object?>({
    required TResult Function(StoryInteractionTypeView value) view,
    required TResult Function(StoryInteractionTypeForward value) forward,
    required TResult Function(StoryInteractionTypeRepost value) repost,
  }) {
    switch (getConstructor()) {
      case StoryInteractionTypeView.constructor:
        return view.call(this as StoryInteractionTypeView);
      case StoryInteractionTypeForward.constructor:
        return forward.call(this as StoryInteractionTypeForward);
      case StoryInteractionTypeRepost.constructor:
        return repost.call(this as StoryInteractionTypeRepost);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(StoryInteractionTypeView value)? view,
    TResult Function(StoryInteractionTypeForward value)? forward,
    TResult Function(StoryInteractionTypeRepost value)? repost,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case StoryInteractionTypeView.constructor:
        if (view != null) {
          return view.call(this as StoryInteractionTypeView);
        }
        break;
      case StoryInteractionTypeForward.constructor:
        if (forward != null) {
          return forward.call(this as StoryInteractionTypeForward);
        }
        break;
      case StoryInteractionTypeRepost.constructor:
        if (repost != null) {
          return repost.call(this as StoryInteractionTypeRepost);
        }
        break;
    }
    return orElse.call();
  }
}

extension StoryInteractionTypeViewExtensions on StoryInteractionTypeView {
  StoryInteractionTypeView copyWith({ReactionType? chosenReactionType}) =>
      StoryInteractionTypeView(
        chosenReactionType: chosenReactionType ?? this.chosenReactionType,
      );
}

extension StoryInteractionTypeForwardExtensions on StoryInteractionTypeForward {
  StoryInteractionTypeForward copyWith({Message? message}) =>
      StoryInteractionTypeForward(message: message ?? this.message);
}

extension StoryInteractionTypeRepostExtensions on StoryInteractionTypeRepost {
  StoryInteractionTypeRepost copyWith({Story? story}) =>
      StoryInteractionTypeRepost(story: story ?? this.story);
}

extension StoryInteractionExtensions on StoryInteraction {
  StoryInteraction copyWith({
    MessageSender? actorId,
    int? interactionDate,
    BlockList? blockList,
    StoryInteractionType? type,
  }) => StoryInteraction(
    actorId: actorId ?? this.actorId,
    interactionDate: interactionDate ?? this.interactionDate,
    blockList: blockList ?? this.blockList,
    type: type ?? this.type,
  );
}

extension StoryInteractionsExtensions on StoryInteractions {
  StoryInteractions copyWith({
    int? totalCount,
    int? totalForwardCount,
    int? totalReactionCount,
    List<StoryInteraction>? interactions,
    String? nextOffset,
  }) => StoryInteractions(
    totalCount: totalCount ?? this.totalCount,
    totalForwardCount: totalForwardCount ?? this.totalForwardCount,
    totalReactionCount: totalReactionCount ?? this.totalReactionCount,
    interactions: interactions ?? this.interactions,
    nextOffset: nextOffset ?? this.nextOffset,
  );
}

extension QuickReplyMessageExtensions on QuickReplyMessage {
  QuickReplyMessage copyWith({
    int? id,
    MessageSendingState? sendingState,
    bool? canBeEdited,
    int? replyToMessageId,
    int? viaBotUserId,
    int? mediaAlbumId,
    MessageContent? content,
    ReplyMarkup? replyMarkup,
  }) => QuickReplyMessage(
    id: id ?? this.id,
    sendingState: sendingState ?? this.sendingState,
    canBeEdited: canBeEdited ?? this.canBeEdited,
    replyToMessageId: replyToMessageId ?? this.replyToMessageId,
    viaBotUserId: viaBotUserId ?? this.viaBotUserId,
    mediaAlbumId: mediaAlbumId ?? this.mediaAlbumId,
    content: content ?? this.content,
    replyMarkup: replyMarkup ?? this.replyMarkup,
  );
}

extension QuickReplyMessagesExtensions on QuickReplyMessages {
  QuickReplyMessages copyWith({List<QuickReplyMessage>? messages}) =>
      QuickReplyMessages(messages: messages ?? this.messages);
}

extension QuickReplyShortcutExtensions on QuickReplyShortcut {
  QuickReplyShortcut copyWith({
    int? id,
    String? name,
    QuickReplyMessage? firstMessage,
    int? messageCount,
  }) => QuickReplyShortcut(
    id: id ?? this.id,
    name: name ?? this.name,
    firstMessage: firstMessage ?? this.firstMessage,
    messageCount: messageCount ?? this.messageCount,
  );
}

extension PublicForwardExtensions on PublicForward {
  TResult map<TResult extends Object?>({
    required TResult Function(PublicForwardMessage value) message,
    required TResult Function(PublicForwardStory value) story,
  }) {
    switch (getConstructor()) {
      case PublicForwardMessage.constructor:
        return message.call(this as PublicForwardMessage);
      case PublicForwardStory.constructor:
        return story.call(this as PublicForwardStory);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PublicForwardMessage value)? message,
    TResult Function(PublicForwardStory value)? story,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PublicForwardMessage.constructor:
        if (message != null) {
          return message.call(this as PublicForwardMessage);
        }
        break;
      case PublicForwardStory.constructor:
        if (story != null) {
          return story.call(this as PublicForwardStory);
        }
        break;
    }
    return orElse.call();
  }
}

extension PublicForwardMessageExtensions on PublicForwardMessage {
  PublicForwardMessage copyWith({Message? message}) =>
      PublicForwardMessage(message: message ?? this.message);
}

extension PublicForwardStoryExtensions on PublicForwardStory {
  PublicForwardStory copyWith({Story? story}) =>
      PublicForwardStory(story: story ?? this.story);
}

extension PublicForwardsExtensions on PublicForwards {
  PublicForwards copyWith({
    int? totalCount,
    List<PublicForward>? forwards,
    String? nextOffset,
  }) => PublicForwards(
    totalCount: totalCount ?? this.totalCount,
    forwards: forwards ?? this.forwards,
    nextOffset: nextOffset ?? this.nextOffset,
  );
}

extension BotMediaPreviewExtensions on BotMediaPreview {
  BotMediaPreview copyWith({int? date, StoryContent? content}) =>
      BotMediaPreview(
        date: date ?? this.date,
        content: content ?? this.content,
      );
}

extension BotMediaPreviewsExtensions on BotMediaPreviews {
  BotMediaPreviews copyWith({List<BotMediaPreview>? previews}) =>
      BotMediaPreviews(previews: previews ?? this.previews);
}

extension BotMediaPreviewInfoExtensions on BotMediaPreviewInfo {
  BotMediaPreviewInfo copyWith({
    List<BotMediaPreview>? previews,
    List<String>? languageCodes,
  }) => BotMediaPreviewInfo(
    previews: previews ?? this.previews,
    languageCodes: languageCodes ?? this.languageCodes,
  );
}

extension ChatBoostLevelFeaturesExtensions on ChatBoostLevelFeatures {
  ChatBoostLevelFeatures copyWith({
    int? level,
    int? storyPerDayCount,
    int? customEmojiReactionCount,
    int? titleColorCount,
    int? profileAccentColorCount,
    bool? canSetProfileBackgroundCustomEmoji,
    int? accentColorCount,
    bool? canSetBackgroundCustomEmoji,
    bool? canSetEmojiStatus,
    int? chatThemeBackgroundCount,
    bool? canSetCustomBackground,
    bool? canSetCustomEmojiStickerSet,
    bool? canEnableAutomaticTranslation,
    bool? canRecognizeSpeech,
    bool? canDisableSponsoredMessages,
  }) => ChatBoostLevelFeatures(
    level: level ?? this.level,
    storyPerDayCount: storyPerDayCount ?? this.storyPerDayCount,
    customEmojiReactionCount:
        customEmojiReactionCount ?? this.customEmojiReactionCount,
    titleColorCount: titleColorCount ?? this.titleColorCount,
    profileAccentColorCount:
        profileAccentColorCount ?? this.profileAccentColorCount,
    canSetProfileBackgroundCustomEmoji:
        canSetProfileBackgroundCustomEmoji ??
        this.canSetProfileBackgroundCustomEmoji,
    accentColorCount: accentColorCount ?? this.accentColorCount,
    canSetBackgroundCustomEmoji:
        canSetBackgroundCustomEmoji ?? this.canSetBackgroundCustomEmoji,
    canSetEmojiStatus: canSetEmojiStatus ?? this.canSetEmojiStatus,
    chatThemeBackgroundCount:
        chatThemeBackgroundCount ?? this.chatThemeBackgroundCount,
    canSetCustomBackground:
        canSetCustomBackground ?? this.canSetCustomBackground,
    canSetCustomEmojiStickerSet:
        canSetCustomEmojiStickerSet ?? this.canSetCustomEmojiStickerSet,
    canEnableAutomaticTranslation:
        canEnableAutomaticTranslation ?? this.canEnableAutomaticTranslation,
    canRecognizeSpeech: canRecognizeSpeech ?? this.canRecognizeSpeech,
    canDisableSponsoredMessages:
        canDisableSponsoredMessages ?? this.canDisableSponsoredMessages,
  );
}

extension ChatBoostFeaturesExtensions on ChatBoostFeatures {
  ChatBoostFeatures copyWith({
    List<ChatBoostLevelFeatures>? features,
    int? minProfileBackgroundCustomEmojiBoostLevel,
    int? minBackgroundCustomEmojiBoostLevel,
    int? minEmojiStatusBoostLevel,
    int? minChatThemeBackgroundBoostLevel,
    int? minCustomBackgroundBoostLevel,
    int? minCustomEmojiStickerSetBoostLevel,
    int? minAutomaticTranslationBoostLevel,
    int? minSpeechRecognitionBoostLevel,
    int? minSponsoredMessageDisableBoostLevel,
  }) => ChatBoostFeatures(
    features: features ?? this.features,
    minProfileBackgroundCustomEmojiBoostLevel:
        minProfileBackgroundCustomEmojiBoostLevel ??
        this.minProfileBackgroundCustomEmojiBoostLevel,
    minBackgroundCustomEmojiBoostLevel:
        minBackgroundCustomEmojiBoostLevel ??
        this.minBackgroundCustomEmojiBoostLevel,
    minEmojiStatusBoostLevel:
        minEmojiStatusBoostLevel ?? this.minEmojiStatusBoostLevel,
    minChatThemeBackgroundBoostLevel:
        minChatThemeBackgroundBoostLevel ??
        this.minChatThemeBackgroundBoostLevel,
    minCustomBackgroundBoostLevel:
        minCustomBackgroundBoostLevel ?? this.minCustomBackgroundBoostLevel,
    minCustomEmojiStickerSetBoostLevel:
        minCustomEmojiStickerSetBoostLevel ??
        this.minCustomEmojiStickerSetBoostLevel,
    minAutomaticTranslationBoostLevel:
        minAutomaticTranslationBoostLevel ??
        this.minAutomaticTranslationBoostLevel,
    minSpeechRecognitionBoostLevel:
        minSpeechRecognitionBoostLevel ?? this.minSpeechRecognitionBoostLevel,
    minSponsoredMessageDisableBoostLevel:
        minSponsoredMessageDisableBoostLevel ??
        this.minSponsoredMessageDisableBoostLevel,
  );
}

extension ChatBoostSourceExtensions on ChatBoostSource {
  TResult map<TResult extends Object?>({
    required TResult Function(ChatBoostSourceGiftCode value) giftCode,
    required TResult Function(ChatBoostSourceGiveaway value) giveaway,
    required TResult Function(ChatBoostSourcePremium value) premium,
  }) {
    switch (getConstructor()) {
      case ChatBoostSourceGiftCode.constructor:
        return giftCode.call(this as ChatBoostSourceGiftCode);
      case ChatBoostSourceGiveaway.constructor:
        return giveaway.call(this as ChatBoostSourceGiveaway);
      case ChatBoostSourcePremium.constructor:
        return premium.call(this as ChatBoostSourcePremium);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ChatBoostSourceGiftCode value)? giftCode,
    TResult Function(ChatBoostSourceGiveaway value)? giveaway,
    TResult Function(ChatBoostSourcePremium value)? premium,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ChatBoostSourceGiftCode.constructor:
        if (giftCode != null) {
          return giftCode.call(this as ChatBoostSourceGiftCode);
        }
        break;
      case ChatBoostSourceGiveaway.constructor:
        if (giveaway != null) {
          return giveaway.call(this as ChatBoostSourceGiveaway);
        }
        break;
      case ChatBoostSourcePremium.constructor:
        if (premium != null) {
          return premium.call(this as ChatBoostSourcePremium);
        }
        break;
    }
    return orElse.call();
  }
}

extension ChatBoostSourceGiftCodeExtensions on ChatBoostSourceGiftCode {
  ChatBoostSourceGiftCode copyWith({int? userId, String? giftCode}) =>
      ChatBoostSourceGiftCode(
        userId: userId ?? this.userId,
        giftCode: giftCode ?? this.giftCode,
      );
}

extension ChatBoostSourceGiveawayExtensions on ChatBoostSourceGiveaway {
  ChatBoostSourceGiveaway copyWith({
    int? userId,
    String? giftCode,
    int? starCount,
    int? giveawayMessageId,
    bool? isUnclaimed,
  }) => ChatBoostSourceGiveaway(
    userId: userId ?? this.userId,
    giftCode: giftCode ?? this.giftCode,
    starCount: starCount ?? this.starCount,
    giveawayMessageId: giveawayMessageId ?? this.giveawayMessageId,
    isUnclaimed: isUnclaimed ?? this.isUnclaimed,
  );
}

extension ChatBoostSourcePremiumExtensions on ChatBoostSourcePremium {
  ChatBoostSourcePremium copyWith({int? userId}) =>
      ChatBoostSourcePremium(userId: userId ?? this.userId);
}

extension PrepaidGiveawayExtensions on PrepaidGiveaway {
  PrepaidGiveaway copyWith({
    int? id,
    int? winnerCount,
    GiveawayPrize? prize,
    int? boostCount,
    int? paymentDate,
  }) => PrepaidGiveaway(
    id: id ?? this.id,
    winnerCount: winnerCount ?? this.winnerCount,
    prize: prize ?? this.prize,
    boostCount: boostCount ?? this.boostCount,
    paymentDate: paymentDate ?? this.paymentDate,
  );
}

extension ChatBoostStatusExtensions on ChatBoostStatus {
  ChatBoostStatus copyWith({
    String? boostUrl,
    List<int>? appliedSlotIds,
    int? level,
    int? giftCodeBoostCount,
    int? boostCount,
    int? currentLevelBoostCount,
    int? nextLevelBoostCount,
    int? premiumMemberCount,
    double? premiumMemberPercentage,
    List<PrepaidGiveaway>? prepaidGiveaways,
  }) => ChatBoostStatus(
    boostUrl: boostUrl ?? this.boostUrl,
    appliedSlotIds: appliedSlotIds ?? this.appliedSlotIds,
    level: level ?? this.level,
    giftCodeBoostCount: giftCodeBoostCount ?? this.giftCodeBoostCount,
    boostCount: boostCount ?? this.boostCount,
    currentLevelBoostCount:
        currentLevelBoostCount ?? this.currentLevelBoostCount,
    nextLevelBoostCount: nextLevelBoostCount ?? this.nextLevelBoostCount,
    premiumMemberCount: premiumMemberCount ?? this.premiumMemberCount,
    premiumMemberPercentage:
        premiumMemberPercentage ?? this.premiumMemberPercentage,
    prepaidGiveaways: prepaidGiveaways ?? this.prepaidGiveaways,
  );
}

extension ChatBoostExtensions on ChatBoost {
  ChatBoost copyWith({
    String? id,
    int? count,
    ChatBoostSource? source,
    int? startDate,
    int? expirationDate,
  }) => ChatBoost(
    id: id ?? this.id,
    count: count ?? this.count,
    source: source ?? this.source,
    startDate: startDate ?? this.startDate,
    expirationDate: expirationDate ?? this.expirationDate,
  );
}

extension FoundChatBoostsExtensions on FoundChatBoosts {
  FoundChatBoosts copyWith({
    int? totalCount,
    List<ChatBoost>? boosts,
    String? nextOffset,
  }) => FoundChatBoosts(
    totalCount: totalCount ?? this.totalCount,
    boosts: boosts ?? this.boosts,
    nextOffset: nextOffset ?? this.nextOffset,
  );
}

extension ChatBoostSlotExtensions on ChatBoostSlot {
  ChatBoostSlot copyWith({
    int? slotId,
    int? currentlyBoostedChatId,
    int? startDate,
    int? expirationDate,
    int? cooldownUntilDate,
  }) => ChatBoostSlot(
    slotId: slotId ?? this.slotId,
    currentlyBoostedChatId:
        currentlyBoostedChatId ?? this.currentlyBoostedChatId,
    startDate: startDate ?? this.startDate,
    expirationDate: expirationDate ?? this.expirationDate,
    cooldownUntilDate: cooldownUntilDate ?? this.cooldownUntilDate,
  );
}

extension ChatBoostSlotsExtensions on ChatBoostSlots {
  ChatBoostSlots copyWith({List<ChatBoostSlot>? slots}) =>
      ChatBoostSlots(slots: slots ?? this.slots);
}

extension ResendCodeReasonExtensions on ResendCodeReason {
  TResult map<TResult extends Object?>({
    required TResult Function(ResendCodeReasonUserRequest value) userRequest,
    required TResult Function(ResendCodeReasonVerificationFailed value)
    verificationFailed,
  }) {
    switch (getConstructor()) {
      case ResendCodeReasonUserRequest.constructor:
        return userRequest.call(this as ResendCodeReasonUserRequest);
      case ResendCodeReasonVerificationFailed.constructor:
        return verificationFailed.call(
          this as ResendCodeReasonVerificationFailed,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ResendCodeReasonUserRequest value)? userRequest,
    TResult Function(ResendCodeReasonVerificationFailed value)?
    verificationFailed,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ResendCodeReasonUserRequest.constructor:
        if (userRequest != null) {
          return userRequest.call(this as ResendCodeReasonUserRequest);
        }
        break;
      case ResendCodeReasonVerificationFailed.constructor:
        if (verificationFailed != null) {
          return verificationFailed.call(
            this as ResendCodeReasonVerificationFailed,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension ResendCodeReasonVerificationFailedExtensions
    on ResendCodeReasonVerificationFailed {
  ResendCodeReasonVerificationFailed copyWith({String? errorMessage}) =>
      ResendCodeReasonVerificationFailed(
        errorMessage: errorMessage ?? this.errorMessage,
      );
}

extension CallDiscardReasonExtensions on CallDiscardReason {
  TResult map<TResult extends Object?>({
    required TResult Function(CallDiscardReasonEmpty value) empty,
    required TResult Function(CallDiscardReasonMissed value) missed,
    required TResult Function(CallDiscardReasonDeclined value) declined,
    required TResult Function(CallDiscardReasonDisconnected value) disconnected,
    required TResult Function(CallDiscardReasonHungUp value) hungUp,
    required TResult Function(CallDiscardReasonUpgradeToGroupCall value)
    upgradeToGroupCall,
  }) {
    switch (getConstructor()) {
      case CallDiscardReasonEmpty.constructor:
        return empty.call(this as CallDiscardReasonEmpty);
      case CallDiscardReasonMissed.constructor:
        return missed.call(this as CallDiscardReasonMissed);
      case CallDiscardReasonDeclined.constructor:
        return declined.call(this as CallDiscardReasonDeclined);
      case CallDiscardReasonDisconnected.constructor:
        return disconnected.call(this as CallDiscardReasonDisconnected);
      case CallDiscardReasonHungUp.constructor:
        return hungUp.call(this as CallDiscardReasonHungUp);
      case CallDiscardReasonUpgradeToGroupCall.constructor:
        return upgradeToGroupCall.call(
          this as CallDiscardReasonUpgradeToGroupCall,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(CallDiscardReasonEmpty value)? empty,
    TResult Function(CallDiscardReasonMissed value)? missed,
    TResult Function(CallDiscardReasonDeclined value)? declined,
    TResult Function(CallDiscardReasonDisconnected value)? disconnected,
    TResult Function(CallDiscardReasonHungUp value)? hungUp,
    TResult Function(CallDiscardReasonUpgradeToGroupCall value)?
    upgradeToGroupCall,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case CallDiscardReasonEmpty.constructor:
        if (empty != null) {
          return empty.call(this as CallDiscardReasonEmpty);
        }
        break;
      case CallDiscardReasonMissed.constructor:
        if (missed != null) {
          return missed.call(this as CallDiscardReasonMissed);
        }
        break;
      case CallDiscardReasonDeclined.constructor:
        if (declined != null) {
          return declined.call(this as CallDiscardReasonDeclined);
        }
        break;
      case CallDiscardReasonDisconnected.constructor:
        if (disconnected != null) {
          return disconnected.call(this as CallDiscardReasonDisconnected);
        }
        break;
      case CallDiscardReasonHungUp.constructor:
        if (hungUp != null) {
          return hungUp.call(this as CallDiscardReasonHungUp);
        }
        break;
      case CallDiscardReasonUpgradeToGroupCall.constructor:
        if (upgradeToGroupCall != null) {
          return upgradeToGroupCall.call(
            this as CallDiscardReasonUpgradeToGroupCall,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension CallDiscardReasonUpgradeToGroupCallExtensions
    on CallDiscardReasonUpgradeToGroupCall {
  CallDiscardReasonUpgradeToGroupCall copyWith({String? inviteLink}) =>
      CallDiscardReasonUpgradeToGroupCall(
        inviteLink: inviteLink ?? this.inviteLink,
      );
}

extension CallProtocolExtensions on CallProtocol {
  CallProtocol copyWith({
    bool? udpP2p,
    bool? udpReflector,
    int? minLayer,
    int? maxLayer,
    List<String>? libraryVersions,
  }) => CallProtocol(
    udpP2p: udpP2p ?? this.udpP2p,
    udpReflector: udpReflector ?? this.udpReflector,
    minLayer: minLayer ?? this.minLayer,
    maxLayer: maxLayer ?? this.maxLayer,
    libraryVersions: libraryVersions ?? this.libraryVersions,
  );
}

extension CallServerTypeExtensions on CallServerType {
  TResult map<TResult extends Object?>({
    required TResult Function(CallServerTypeTelegramReflector value)
    telegramReflector,
    required TResult Function(CallServerTypeWebrtc value) webrtc,
  }) {
    switch (getConstructor()) {
      case CallServerTypeTelegramReflector.constructor:
        return telegramReflector.call(this as CallServerTypeTelegramReflector);
      case CallServerTypeWebrtc.constructor:
        return webrtc.call(this as CallServerTypeWebrtc);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(CallServerTypeTelegramReflector value)? telegramReflector,
    TResult Function(CallServerTypeWebrtc value)? webrtc,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case CallServerTypeTelegramReflector.constructor:
        if (telegramReflector != null) {
          return telegramReflector.call(
            this as CallServerTypeTelegramReflector,
          );
        }
        break;
      case CallServerTypeWebrtc.constructor:
        if (webrtc != null) {
          return webrtc.call(this as CallServerTypeWebrtc);
        }
        break;
    }
    return orElse.call();
  }
}

extension CallServerTypeTelegramReflectorExtensions
    on CallServerTypeTelegramReflector {
  CallServerTypeTelegramReflector copyWith({String? peerTag, bool? isTcp}) =>
      CallServerTypeTelegramReflector(
        peerTag: peerTag ?? this.peerTag,
        isTcp: isTcp ?? this.isTcp,
      );
}

extension CallServerTypeWebrtcExtensions on CallServerTypeWebrtc {
  CallServerTypeWebrtc copyWith({
    String? username,
    String? password,
    bool? supportsTurn,
    bool? supportsStun,
  }) => CallServerTypeWebrtc(
    username: username ?? this.username,
    password: password ?? this.password,
    supportsTurn: supportsTurn ?? this.supportsTurn,
    supportsStun: supportsStun ?? this.supportsStun,
  );
}

extension CallServerExtensions on CallServer {
  CallServer copyWith({
    int? id,
    String? ipAddress,
    String? ipv6Address,
    int? port,
    CallServerType? type,
  }) => CallServer(
    id: id ?? this.id,
    ipAddress: ipAddress ?? this.ipAddress,
    ipv6Address: ipv6Address ?? this.ipv6Address,
    port: port ?? this.port,
    type: type ?? this.type,
  );
}

extension CallIdExtensions on CallId {
  CallId copyWith({int? id}) => CallId(id: id ?? this.id);
}

extension GroupCallIdExtensions on GroupCallId {
  GroupCallId copyWith({int? id}) => GroupCallId(id: id ?? this.id);
}

extension CallStateExtensions on CallState {
  TResult map<TResult extends Object?>({
    required TResult Function(CallStatePending value) pending,
    required TResult Function(CallStateExchangingKeys value) exchangingKeys,
    required TResult Function(CallStateReady value) ready,
    required TResult Function(CallStateHangingUp value) hangingUp,
    required TResult Function(CallStateDiscarded value) discarded,
    required TResult Function(CallStateError value) error,
  }) {
    switch (getConstructor()) {
      case CallStatePending.constructor:
        return pending.call(this as CallStatePending);
      case CallStateExchangingKeys.constructor:
        return exchangingKeys.call(this as CallStateExchangingKeys);
      case CallStateReady.constructor:
        return ready.call(this as CallStateReady);
      case CallStateHangingUp.constructor:
        return hangingUp.call(this as CallStateHangingUp);
      case CallStateDiscarded.constructor:
        return discarded.call(this as CallStateDiscarded);
      case CallStateError.constructor:
        return error.call(this as CallStateError);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(CallStatePending value)? pending,
    TResult Function(CallStateExchangingKeys value)? exchangingKeys,
    TResult Function(CallStateReady value)? ready,
    TResult Function(CallStateHangingUp value)? hangingUp,
    TResult Function(CallStateDiscarded value)? discarded,
    TResult Function(CallStateError value)? error,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case CallStatePending.constructor:
        if (pending != null) {
          return pending.call(this as CallStatePending);
        }
        break;
      case CallStateExchangingKeys.constructor:
        if (exchangingKeys != null) {
          return exchangingKeys.call(this as CallStateExchangingKeys);
        }
        break;
      case CallStateReady.constructor:
        if (ready != null) {
          return ready.call(this as CallStateReady);
        }
        break;
      case CallStateHangingUp.constructor:
        if (hangingUp != null) {
          return hangingUp.call(this as CallStateHangingUp);
        }
        break;
      case CallStateDiscarded.constructor:
        if (discarded != null) {
          return discarded.call(this as CallStateDiscarded);
        }
        break;
      case CallStateError.constructor:
        if (error != null) {
          return error.call(this as CallStateError);
        }
        break;
    }
    return orElse.call();
  }
}

extension CallStatePendingExtensions on CallStatePending {
  CallStatePending copyWith({bool? isCreated, bool? isReceived}) =>
      CallStatePending(
        isCreated: isCreated ?? this.isCreated,
        isReceived: isReceived ?? this.isReceived,
      );
}

extension CallStateReadyExtensions on CallStateReady {
  CallStateReady copyWith({
    CallProtocol? protocol,
    List<CallServer>? servers,
    String? config,
    String? encryptionKey,
    List<String>? emojis,
    bool? allowP2p,
    bool? isGroupCallSupported,
    String? customParameters,
  }) => CallStateReady(
    protocol: protocol ?? this.protocol,
    servers: servers ?? this.servers,
    config: config ?? this.config,
    encryptionKey: encryptionKey ?? this.encryptionKey,
    emojis: emojis ?? this.emojis,
    allowP2p: allowP2p ?? this.allowP2p,
    isGroupCallSupported: isGroupCallSupported ?? this.isGroupCallSupported,
    customParameters: customParameters ?? this.customParameters,
  );
}

extension CallStateDiscardedExtensions on CallStateDiscarded {
  CallStateDiscarded copyWith({
    CallDiscardReason? reason,
    bool? needRating,
    bool? needDebugInformation,
    bool? needLog,
  }) => CallStateDiscarded(
    reason: reason ?? this.reason,
    needRating: needRating ?? this.needRating,
    needDebugInformation: needDebugInformation ?? this.needDebugInformation,
    needLog: needLog ?? this.needLog,
  );
}

extension CallStateErrorExtensions on CallStateError {
  CallStateError copyWith({TdError? error}) =>
      CallStateError(error: error ?? this.error);
}

extension GroupCallJoinParametersExtensions on GroupCallJoinParameters {
  GroupCallJoinParameters copyWith({
    int? audioSourceId,
    String? payload,
    bool? isMuted,
    bool? isMyVideoEnabled,
  }) => GroupCallJoinParameters(
    audioSourceId: audioSourceId ?? this.audioSourceId,
    payload: payload ?? this.payload,
    isMuted: isMuted ?? this.isMuted,
    isMyVideoEnabled: isMyVideoEnabled ?? this.isMyVideoEnabled,
  );
}

extension GroupCallVideoQualityExtensions on GroupCallVideoQuality {
  TResult map<TResult extends Object?>({
    required TResult Function(GroupCallVideoQualityThumbnail value) thumbnail,
    required TResult Function(GroupCallVideoQualityMedium value) medium,
    required TResult Function(GroupCallVideoQualityFull value) full,
  }) {
    switch (getConstructor()) {
      case GroupCallVideoQualityThumbnail.constructor:
        return thumbnail.call(this as GroupCallVideoQualityThumbnail);
      case GroupCallVideoQualityMedium.constructor:
        return medium.call(this as GroupCallVideoQualityMedium);
      case GroupCallVideoQualityFull.constructor:
        return full.call(this as GroupCallVideoQualityFull);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(GroupCallVideoQualityThumbnail value)? thumbnail,
    TResult Function(GroupCallVideoQualityMedium value)? medium,
    TResult Function(GroupCallVideoQualityFull value)? full,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case GroupCallVideoQualityThumbnail.constructor:
        if (thumbnail != null) {
          return thumbnail.call(this as GroupCallVideoQualityThumbnail);
        }
        break;
      case GroupCallVideoQualityMedium.constructor:
        if (medium != null) {
          return medium.call(this as GroupCallVideoQualityMedium);
        }
        break;
      case GroupCallVideoQualityFull.constructor:
        if (full != null) {
          return full.call(this as GroupCallVideoQualityFull);
        }
        break;
    }
    return orElse.call();
  }
}

extension VideoChatStreamExtensions on VideoChatStream {
  VideoChatStream copyWith({int? channelId, int? scale, int? timeOffset}) =>
      VideoChatStream(
        channelId: channelId ?? this.channelId,
        scale: scale ?? this.scale,
        timeOffset: timeOffset ?? this.timeOffset,
      );
}

extension VideoChatStreamsExtensions on VideoChatStreams {
  VideoChatStreams copyWith({List<VideoChatStream>? streams}) =>
      VideoChatStreams(streams: streams ?? this.streams);
}

extension RtmpUrlExtensions on RtmpUrl {
  RtmpUrl copyWith({String? url, String? streamKey}) =>
      RtmpUrl(url: url ?? this.url, streamKey: streamKey ?? this.streamKey);
}

extension GroupCallRecentSpeakerExtensions on GroupCallRecentSpeaker {
  GroupCallRecentSpeaker copyWith({
    MessageSender? participantId,
    bool? isSpeaking,
  }) => GroupCallRecentSpeaker(
    participantId: participantId ?? this.participantId,
    isSpeaking: isSpeaking ?? this.isSpeaking,
  );
}

extension GroupCallExtensions on GroupCall {
  GroupCall copyWith({
    int? id,
    String? title,
    String? inviteLink,
    int? scheduledStartDate,
    bool? enabledStartNotification,
    bool? isActive,
    bool? isVideoChat,
    bool? isRtmpStream,
    bool? isJoined,
    bool? needRejoin,
    bool? isOwned,
    bool? canBeManaged,
    int? participantCount,
    bool? hasHiddenListeners,
    bool? loadedAllParticipants,
    List<GroupCallRecentSpeaker>? recentSpeakers,
    bool? isMyVideoEnabled,
    bool? isMyVideoPaused,
    bool? canEnableVideo,
    bool? muteNewParticipants,
    bool? canToggleMuteNewParticipants,
    int? recordDuration,
    bool? isVideoRecorded,
    int? duration,
  }) => GroupCall(
    id: id ?? this.id,
    title: title ?? this.title,
    inviteLink: inviteLink ?? this.inviteLink,
    scheduledStartDate: scheduledStartDate ?? this.scheduledStartDate,
    enabledStartNotification:
        enabledStartNotification ?? this.enabledStartNotification,
    isActive: isActive ?? this.isActive,
    isVideoChat: isVideoChat ?? this.isVideoChat,
    isRtmpStream: isRtmpStream ?? this.isRtmpStream,
    isJoined: isJoined ?? this.isJoined,
    needRejoin: needRejoin ?? this.needRejoin,
    isOwned: isOwned ?? this.isOwned,
    canBeManaged: canBeManaged ?? this.canBeManaged,
    participantCount: participantCount ?? this.participantCount,
    hasHiddenListeners: hasHiddenListeners ?? this.hasHiddenListeners,
    loadedAllParticipants: loadedAllParticipants ?? this.loadedAllParticipants,
    recentSpeakers: recentSpeakers ?? this.recentSpeakers,
    isMyVideoEnabled: isMyVideoEnabled ?? this.isMyVideoEnabled,
    isMyVideoPaused: isMyVideoPaused ?? this.isMyVideoPaused,
    canEnableVideo: canEnableVideo ?? this.canEnableVideo,
    muteNewParticipants: muteNewParticipants ?? this.muteNewParticipants,
    canToggleMuteNewParticipants:
        canToggleMuteNewParticipants ?? this.canToggleMuteNewParticipants,
    recordDuration: recordDuration ?? this.recordDuration,
    isVideoRecorded: isVideoRecorded ?? this.isVideoRecorded,
    duration: duration ?? this.duration,
  );
}

extension GroupCallVideoSourceGroupExtensions on GroupCallVideoSourceGroup {
  GroupCallVideoSourceGroup copyWith({
    String? semantics,
    List<int>? sourceIds,
  }) => GroupCallVideoSourceGroup(
    semantics: semantics ?? this.semantics,
    sourceIds: sourceIds ?? this.sourceIds,
  );
}

extension GroupCallParticipantVideoInfoExtensions
    on GroupCallParticipantVideoInfo {
  GroupCallParticipantVideoInfo copyWith({
    List<GroupCallVideoSourceGroup>? sourceGroups,
    String? endpointId,
    bool? isPaused,
  }) => GroupCallParticipantVideoInfo(
    sourceGroups: sourceGroups ?? this.sourceGroups,
    endpointId: endpointId ?? this.endpointId,
    isPaused: isPaused ?? this.isPaused,
  );
}

extension GroupCallParticipantExtensions on GroupCallParticipant {
  GroupCallParticipant copyWith({
    MessageSender? participantId,
    int? audioSourceId,
    int? screenSharingAudioSourceId,
    GroupCallParticipantVideoInfo? videoInfo,
    GroupCallParticipantVideoInfo? screenSharingVideoInfo,
    String? bio,
    bool? isCurrentUser,
    bool? isSpeaking,
    bool? isHandRaised,
    bool? canBeMutedForAllUsers,
    bool? canBeUnmutedForAllUsers,
    bool? canBeMutedForCurrentUser,
    bool? canBeUnmutedForCurrentUser,
    bool? isMutedForAllUsers,
    bool? isMutedForCurrentUser,
    bool? canUnmuteSelf,
    int? volumeLevel,
    String? order,
  }) => GroupCallParticipant(
    participantId: participantId ?? this.participantId,
    audioSourceId: audioSourceId ?? this.audioSourceId,
    screenSharingAudioSourceId:
        screenSharingAudioSourceId ?? this.screenSharingAudioSourceId,
    videoInfo: videoInfo ?? this.videoInfo,
    screenSharingVideoInfo:
        screenSharingVideoInfo ?? this.screenSharingVideoInfo,
    bio: bio ?? this.bio,
    isCurrentUser: isCurrentUser ?? this.isCurrentUser,
    isSpeaking: isSpeaking ?? this.isSpeaking,
    isHandRaised: isHandRaised ?? this.isHandRaised,
    canBeMutedForAllUsers: canBeMutedForAllUsers ?? this.canBeMutedForAllUsers,
    canBeUnmutedForAllUsers:
        canBeUnmutedForAllUsers ?? this.canBeUnmutedForAllUsers,
    canBeMutedForCurrentUser:
        canBeMutedForCurrentUser ?? this.canBeMutedForCurrentUser,
    canBeUnmutedForCurrentUser:
        canBeUnmutedForCurrentUser ?? this.canBeUnmutedForCurrentUser,
    isMutedForAllUsers: isMutedForAllUsers ?? this.isMutedForAllUsers,
    isMutedForCurrentUser: isMutedForCurrentUser ?? this.isMutedForCurrentUser,
    canUnmuteSelf: canUnmuteSelf ?? this.canUnmuteSelf,
    volumeLevel: volumeLevel ?? this.volumeLevel,
    order: order ?? this.order,
  );
}

extension GroupCallParticipantsExtensions on GroupCallParticipants {
  GroupCallParticipants copyWith({
    int? totalCount,
    List<MessageSender>? participantIds,
  }) => GroupCallParticipants(
    totalCount: totalCount ?? this.totalCount,
    participantIds: participantIds ?? this.participantIds,
  );
}

extension GroupCallInfoExtensions on GroupCallInfo {
  GroupCallInfo copyWith({int? groupCallId, String? joinPayload}) =>
      GroupCallInfo(
        groupCallId: groupCallId ?? this.groupCallId,
        joinPayload: joinPayload ?? this.joinPayload,
      );
}

extension InviteGroupCallParticipantResultExtensions
    on InviteGroupCallParticipantResult {
  TResult map<TResult extends Object?>({
    required TResult Function(
      InviteGroupCallParticipantResultUserPrivacyRestricted value,
    )
    userPrivacyRestricted,
    required TResult Function(
      InviteGroupCallParticipantResultUserAlreadyParticipant value,
    )
    userAlreadyParticipant,
    required TResult Function(
      InviteGroupCallParticipantResultUserWasBanned value,
    )
    userWasBanned,
    required TResult Function(InviteGroupCallParticipantResultSuccess value)
    success,
  }) {
    switch (getConstructor()) {
      case InviteGroupCallParticipantResultUserPrivacyRestricted.constructor:
        return userPrivacyRestricted.call(
          this as InviteGroupCallParticipantResultUserPrivacyRestricted,
        );
      case InviteGroupCallParticipantResultUserAlreadyParticipant.constructor:
        return userAlreadyParticipant.call(
          this as InviteGroupCallParticipantResultUserAlreadyParticipant,
        );
      case InviteGroupCallParticipantResultUserWasBanned.constructor:
        return userWasBanned.call(
          this as InviteGroupCallParticipantResultUserWasBanned,
        );
      case InviteGroupCallParticipantResultSuccess.constructor:
        return success.call(this as InviteGroupCallParticipantResultSuccess);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(
      InviteGroupCallParticipantResultUserPrivacyRestricted value,
    )?
    userPrivacyRestricted,
    TResult Function(
      InviteGroupCallParticipantResultUserAlreadyParticipant value,
    )?
    userAlreadyParticipant,
    TResult Function(InviteGroupCallParticipantResultUserWasBanned value)?
    userWasBanned,
    TResult Function(InviteGroupCallParticipantResultSuccess value)? success,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InviteGroupCallParticipantResultUserPrivacyRestricted.constructor:
        if (userPrivacyRestricted != null) {
          return userPrivacyRestricted.call(
            this as InviteGroupCallParticipantResultUserPrivacyRestricted,
          );
        }
        break;
      case InviteGroupCallParticipantResultUserAlreadyParticipant.constructor:
        if (userAlreadyParticipant != null) {
          return userAlreadyParticipant.call(
            this as InviteGroupCallParticipantResultUserAlreadyParticipant,
          );
        }
        break;
      case InviteGroupCallParticipantResultUserWasBanned.constructor:
        if (userWasBanned != null) {
          return userWasBanned.call(
            this as InviteGroupCallParticipantResultUserWasBanned,
          );
        }
        break;
      case InviteGroupCallParticipantResultSuccess.constructor:
        if (success != null) {
          return success.call(this as InviteGroupCallParticipantResultSuccess);
        }
        break;
    }
    return orElse.call();
  }
}

extension InviteGroupCallParticipantResultSuccessExtensions
    on InviteGroupCallParticipantResultSuccess {
  InviteGroupCallParticipantResultSuccess copyWith({
    int? chatId,
    int? messageId,
  }) => InviteGroupCallParticipantResultSuccess(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
  );
}

extension GroupCallDataChannelExtensions on GroupCallDataChannel {
  TResult map<TResult extends Object?>({
    required TResult Function(GroupCallDataChannelMain value) main,
    required TResult Function(GroupCallDataChannelScreenSharing value)
    screenSharing,
  }) {
    switch (getConstructor()) {
      case GroupCallDataChannelMain.constructor:
        return main.call(this as GroupCallDataChannelMain);
      case GroupCallDataChannelScreenSharing.constructor:
        return screenSharing.call(this as GroupCallDataChannelScreenSharing);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(GroupCallDataChannelMain value)? main,
    TResult Function(GroupCallDataChannelScreenSharing value)? screenSharing,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case GroupCallDataChannelMain.constructor:
        if (main != null) {
          return main.call(this as GroupCallDataChannelMain);
        }
        break;
      case GroupCallDataChannelScreenSharing.constructor:
        if (screenSharing != null) {
          return screenSharing.call(this as GroupCallDataChannelScreenSharing);
        }
        break;
    }
    return orElse.call();
  }
}

extension InputGroupCallExtensions on InputGroupCall {
  TResult map<TResult extends Object?>({
    required TResult Function(InputGroupCallLink value) link,
    required TResult Function(InputGroupCallMessage value) message,
  }) {
    switch (getConstructor()) {
      case InputGroupCallLink.constructor:
        return link.call(this as InputGroupCallLink);
      case InputGroupCallMessage.constructor:
        return message.call(this as InputGroupCallMessage);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InputGroupCallLink value)? link,
    TResult Function(InputGroupCallMessage value)? message,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InputGroupCallLink.constructor:
        if (link != null) {
          return link.call(this as InputGroupCallLink);
        }
        break;
      case InputGroupCallMessage.constructor:
        if (message != null) {
          return message.call(this as InputGroupCallMessage);
        }
        break;
    }
    return orElse.call();
  }
}

extension InputGroupCallLinkExtensions on InputGroupCallLink {
  InputGroupCallLink copyWith({String? link}) =>
      InputGroupCallLink(link: link ?? this.link);
}

extension InputGroupCallMessageExtensions on InputGroupCallMessage {
  InputGroupCallMessage copyWith({int? chatId, int? messageId}) =>
      InputGroupCallMessage(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension CallProblemExtensions on CallProblem {
  TResult map<TResult extends Object?>({
    required TResult Function(CallProblemEcho value) echo,
    required TResult Function(CallProblemNoise value) noise,
    required TResult Function(CallProblemInterruptions value) interruptions,
    required TResult Function(CallProblemDistortedSpeech value) distortedSpeech,
    required TResult Function(CallProblemSilentLocal value) silentLocal,
    required TResult Function(CallProblemSilentRemote value) silentRemote,
    required TResult Function(CallProblemDropped value) dropped,
    required TResult Function(CallProblemDistortedVideo value) distortedVideo,
    required TResult Function(CallProblemPixelatedVideo value) pixelatedVideo,
  }) {
    switch (getConstructor()) {
      case CallProblemEcho.constructor:
        return echo.call(this as CallProblemEcho);
      case CallProblemNoise.constructor:
        return noise.call(this as CallProblemNoise);
      case CallProblemInterruptions.constructor:
        return interruptions.call(this as CallProblemInterruptions);
      case CallProblemDistortedSpeech.constructor:
        return distortedSpeech.call(this as CallProblemDistortedSpeech);
      case CallProblemSilentLocal.constructor:
        return silentLocal.call(this as CallProblemSilentLocal);
      case CallProblemSilentRemote.constructor:
        return silentRemote.call(this as CallProblemSilentRemote);
      case CallProblemDropped.constructor:
        return dropped.call(this as CallProblemDropped);
      case CallProblemDistortedVideo.constructor:
        return distortedVideo.call(this as CallProblemDistortedVideo);
      case CallProblemPixelatedVideo.constructor:
        return pixelatedVideo.call(this as CallProblemPixelatedVideo);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(CallProblemEcho value)? echo,
    TResult Function(CallProblemNoise value)? noise,
    TResult Function(CallProblemInterruptions value)? interruptions,
    TResult Function(CallProblemDistortedSpeech value)? distortedSpeech,
    TResult Function(CallProblemSilentLocal value)? silentLocal,
    TResult Function(CallProblemSilentRemote value)? silentRemote,
    TResult Function(CallProblemDropped value)? dropped,
    TResult Function(CallProblemDistortedVideo value)? distortedVideo,
    TResult Function(CallProblemPixelatedVideo value)? pixelatedVideo,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case CallProblemEcho.constructor:
        if (echo != null) {
          return echo.call(this as CallProblemEcho);
        }
        break;
      case CallProblemNoise.constructor:
        if (noise != null) {
          return noise.call(this as CallProblemNoise);
        }
        break;
      case CallProblemInterruptions.constructor:
        if (interruptions != null) {
          return interruptions.call(this as CallProblemInterruptions);
        }
        break;
      case CallProblemDistortedSpeech.constructor:
        if (distortedSpeech != null) {
          return distortedSpeech.call(this as CallProblemDistortedSpeech);
        }
        break;
      case CallProblemSilentLocal.constructor:
        if (silentLocal != null) {
          return silentLocal.call(this as CallProblemSilentLocal);
        }
        break;
      case CallProblemSilentRemote.constructor:
        if (silentRemote != null) {
          return silentRemote.call(this as CallProblemSilentRemote);
        }
        break;
      case CallProblemDropped.constructor:
        if (dropped != null) {
          return dropped.call(this as CallProblemDropped);
        }
        break;
      case CallProblemDistortedVideo.constructor:
        if (distortedVideo != null) {
          return distortedVideo.call(this as CallProblemDistortedVideo);
        }
        break;
      case CallProblemPixelatedVideo.constructor:
        if (pixelatedVideo != null) {
          return pixelatedVideo.call(this as CallProblemPixelatedVideo);
        }
        break;
    }
    return orElse.call();
  }
}

extension CallExtensions on Call {
  Call copyWith({
    int? id,
    int? userId,
    bool? isOutgoing,
    bool? isVideo,
    CallState? state,
  }) => Call(
    id: id ?? this.id,
    userId: userId ?? this.userId,
    isOutgoing: isOutgoing ?? this.isOutgoing,
    isVideo: isVideo ?? this.isVideo,
    state: state ?? this.state,
  );
}

extension FirebaseAuthenticationSettingsExtensions
    on FirebaseAuthenticationSettings {
  TResult map<TResult extends Object?>({
    required TResult Function(FirebaseAuthenticationSettingsAndroid value)
    android,
    required TResult Function(FirebaseAuthenticationSettingsIos value) ios,
  }) {
    switch (getConstructor()) {
      case FirebaseAuthenticationSettingsAndroid.constructor:
        return android.call(this as FirebaseAuthenticationSettingsAndroid);
      case FirebaseAuthenticationSettingsIos.constructor:
        return ios.call(this as FirebaseAuthenticationSettingsIos);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(FirebaseAuthenticationSettingsAndroid value)? android,
    TResult Function(FirebaseAuthenticationSettingsIos value)? ios,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case FirebaseAuthenticationSettingsAndroid.constructor:
        if (android != null) {
          return android.call(this as FirebaseAuthenticationSettingsAndroid);
        }
        break;
      case FirebaseAuthenticationSettingsIos.constructor:
        if (ios != null) {
          return ios.call(this as FirebaseAuthenticationSettingsIos);
        }
        break;
    }
    return orElse.call();
  }
}

extension FirebaseAuthenticationSettingsIosExtensions
    on FirebaseAuthenticationSettingsIos {
  FirebaseAuthenticationSettingsIos copyWith({
    String? deviceToken,
    bool? isAppSandbox,
  }) => FirebaseAuthenticationSettingsIos(
    deviceToken: deviceToken ?? this.deviceToken,
    isAppSandbox: isAppSandbox ?? this.isAppSandbox,
  );
}

extension PhoneNumberAuthenticationSettingsExtensions
    on PhoneNumberAuthenticationSettings {
  PhoneNumberAuthenticationSettings copyWith({
    bool? allowFlashCall,
    bool? allowMissedCall,
    bool? isCurrentPhoneNumber,
    bool? hasUnknownPhoneNumber,
    bool? allowSmsRetrieverApi,
    FirebaseAuthenticationSettings? firebaseAuthenticationSettings,
    List<String>? authenticationTokens,
  }) => PhoneNumberAuthenticationSettings(
    allowFlashCall: allowFlashCall ?? this.allowFlashCall,
    allowMissedCall: allowMissedCall ?? this.allowMissedCall,
    isCurrentPhoneNumber: isCurrentPhoneNumber ?? this.isCurrentPhoneNumber,
    hasUnknownPhoneNumber: hasUnknownPhoneNumber ?? this.hasUnknownPhoneNumber,
    allowSmsRetrieverApi: allowSmsRetrieverApi ?? this.allowSmsRetrieverApi,
    firebaseAuthenticationSettings:
        firebaseAuthenticationSettings ?? this.firebaseAuthenticationSettings,
    authenticationTokens: authenticationTokens ?? this.authenticationTokens,
  );
}

extension AddedReactionExtensions on AddedReaction {
  AddedReaction copyWith({
    ReactionType? type,
    MessageSender? senderId,
    bool? isOutgoing,
    int? date,
  }) => AddedReaction(
    type: type ?? this.type,
    senderId: senderId ?? this.senderId,
    isOutgoing: isOutgoing ?? this.isOutgoing,
    date: date ?? this.date,
  );
}

extension AddedReactionsExtensions on AddedReactions {
  AddedReactions copyWith({
    int? totalCount,
    List<AddedReaction>? reactions,
    String? nextOffset,
  }) => AddedReactions(
    totalCount: totalCount ?? this.totalCount,
    reactions: reactions ?? this.reactions,
    nextOffset: nextOffset ?? this.nextOffset,
  );
}

extension AvailableReactionExtensions on AvailableReaction {
  AvailableReaction copyWith({ReactionType? type, bool? needsPremium}) =>
      AvailableReaction(
        type: type ?? this.type,
        needsPremium: needsPremium ?? this.needsPremium,
      );
}

extension AvailableReactionsExtensions on AvailableReactions {
  AvailableReactions copyWith({
    List<AvailableReaction>? topReactions,
    List<AvailableReaction>? recentReactions,
    List<AvailableReaction>? popularReactions,
    bool? allowCustomEmoji,
    bool? areTags,
    ReactionUnavailabilityReason? unavailabilityReason,
  }) => AvailableReactions(
    topReactions: topReactions ?? this.topReactions,
    recentReactions: recentReactions ?? this.recentReactions,
    popularReactions: popularReactions ?? this.popularReactions,
    allowCustomEmoji: allowCustomEmoji ?? this.allowCustomEmoji,
    areTags: areTags ?? this.areTags,
    unavailabilityReason: unavailabilityReason ?? this.unavailabilityReason,
  );
}

extension EmojiReactionExtensions on EmojiReaction {
  EmojiReaction copyWith({
    String? emoji,
    String? title,
    bool? isActive,
    Sticker? staticIcon,
    Sticker? appearAnimation,
    Sticker? selectAnimation,
    Sticker? activateAnimation,
    Sticker? effectAnimation,
    Sticker? aroundAnimation,
    Sticker? centerAnimation,
  }) => EmojiReaction(
    emoji: emoji ?? this.emoji,
    title: title ?? this.title,
    isActive: isActive ?? this.isActive,
    staticIcon: staticIcon ?? this.staticIcon,
    appearAnimation: appearAnimation ?? this.appearAnimation,
    selectAnimation: selectAnimation ?? this.selectAnimation,
    activateAnimation: activateAnimation ?? this.activateAnimation,
    effectAnimation: effectAnimation ?? this.effectAnimation,
    aroundAnimation: aroundAnimation ?? this.aroundAnimation,
    centerAnimation: centerAnimation ?? this.centerAnimation,
  );
}

extension ReactionUnavailabilityReasonExtensions
    on ReactionUnavailabilityReason {
  TResult map<TResult extends Object?>({
    required TResult Function(
      ReactionUnavailabilityReasonAnonymousAdministrator value,
    )
    anonymousAdministrator,
    required TResult Function(ReactionUnavailabilityReasonGuest value) guest,
  }) {
    switch (getConstructor()) {
      case ReactionUnavailabilityReasonAnonymousAdministrator.constructor:
        return anonymousAdministrator.call(
          this as ReactionUnavailabilityReasonAnonymousAdministrator,
        );
      case ReactionUnavailabilityReasonGuest.constructor:
        return guest.call(this as ReactionUnavailabilityReasonGuest);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ReactionUnavailabilityReasonAnonymousAdministrator value)?
    anonymousAdministrator,
    TResult Function(ReactionUnavailabilityReasonGuest value)? guest,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ReactionUnavailabilityReasonAnonymousAdministrator.constructor:
        if (anonymousAdministrator != null) {
          return anonymousAdministrator.call(
            this as ReactionUnavailabilityReasonAnonymousAdministrator,
          );
        }
        break;
      case ReactionUnavailabilityReasonGuest.constructor:
        if (guest != null) {
          return guest.call(this as ReactionUnavailabilityReasonGuest);
        }
        break;
    }
    return orElse.call();
  }
}

extension AnimationsExtensions on Animations {
  Animations copyWith({List<Animation>? animations}) =>
      Animations(animations: animations ?? this.animations);
}

extension DiceStickersExtensions on DiceStickers {
  TResult map<TResult extends Object?>({
    required TResult Function(DiceStickersRegular value) regular,
    required TResult Function(DiceStickersSlotMachine value) slotMachine,
  }) {
    switch (getConstructor()) {
      case DiceStickersRegular.constructor:
        return regular.call(this as DiceStickersRegular);
      case DiceStickersSlotMachine.constructor:
        return slotMachine.call(this as DiceStickersSlotMachine);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(DiceStickersRegular value)? regular,
    TResult Function(DiceStickersSlotMachine value)? slotMachine,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case DiceStickersRegular.constructor:
        if (regular != null) {
          return regular.call(this as DiceStickersRegular);
        }
        break;
      case DiceStickersSlotMachine.constructor:
        if (slotMachine != null) {
          return slotMachine.call(this as DiceStickersSlotMachine);
        }
        break;
    }
    return orElse.call();
  }
}

extension DiceStickersRegularExtensions on DiceStickersRegular {
  DiceStickersRegular copyWith({Sticker? sticker}) =>
      DiceStickersRegular(sticker: sticker ?? this.sticker);
}

extension DiceStickersSlotMachineExtensions on DiceStickersSlotMachine {
  DiceStickersSlotMachine copyWith({
    Sticker? background,
    Sticker? lever,
    Sticker? leftReel,
    Sticker? centerReel,
    Sticker? rightReel,
  }) => DiceStickersSlotMachine(
    background: background ?? this.background,
    lever: lever ?? this.lever,
    leftReel: leftReel ?? this.leftReel,
    centerReel: centerReel ?? this.centerReel,
    rightReel: rightReel ?? this.rightReel,
  );
}

extension ImportedContactsExtensions on ImportedContacts {
  ImportedContacts copyWith({List<int>? userIds, List<int>? importerCount}) =>
      ImportedContacts(
        userIds: userIds ?? this.userIds,
        importerCount: importerCount ?? this.importerCount,
      );
}

extension SpeechRecognitionResultExtensions on SpeechRecognitionResult {
  TResult map<TResult extends Object?>({
    required TResult Function(SpeechRecognitionResultPending value) pending,
    required TResult Function(SpeechRecognitionResultText value) text,
    required TResult Function(SpeechRecognitionResultError value) error,
  }) {
    switch (getConstructor()) {
      case SpeechRecognitionResultPending.constructor:
        return pending.call(this as SpeechRecognitionResultPending);
      case SpeechRecognitionResultText.constructor:
        return text.call(this as SpeechRecognitionResultText);
      case SpeechRecognitionResultError.constructor:
        return error.call(this as SpeechRecognitionResultError);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(SpeechRecognitionResultPending value)? pending,
    TResult Function(SpeechRecognitionResultText value)? text,
    TResult Function(SpeechRecognitionResultError value)? error,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case SpeechRecognitionResultPending.constructor:
        if (pending != null) {
          return pending.call(this as SpeechRecognitionResultPending);
        }
        break;
      case SpeechRecognitionResultText.constructor:
        if (text != null) {
          return text.call(this as SpeechRecognitionResultText);
        }
        break;
      case SpeechRecognitionResultError.constructor:
        if (error != null) {
          return error.call(this as SpeechRecognitionResultError);
        }
        break;
    }
    return orElse.call();
  }
}

extension SpeechRecognitionResultPendingExtensions
    on SpeechRecognitionResultPending {
  SpeechRecognitionResultPending copyWith({String? partialText}) =>
      SpeechRecognitionResultPending(
        partialText: partialText ?? this.partialText,
      );
}

extension SpeechRecognitionResultTextExtensions on SpeechRecognitionResultText {
  SpeechRecognitionResultText copyWith({String? text}) =>
      SpeechRecognitionResultText(text: text ?? this.text);
}

extension SpeechRecognitionResultErrorExtensions
    on SpeechRecognitionResultError {
  SpeechRecognitionResultError copyWith({TdError? error}) =>
      SpeechRecognitionResultError(error: error ?? this.error);
}

extension BusinessConnectionExtensions on BusinessConnection {
  BusinessConnection copyWith({
    String? id,
    int? userId,
    int? userChatId,
    int? date,
    BusinessBotRights? rights,
    bool? isEnabled,
  }) => BusinessConnection(
    id: id ?? this.id,
    userId: userId ?? this.userId,
    userChatId: userChatId ?? this.userChatId,
    date: date ?? this.date,
    rights: rights ?? this.rights,
    isEnabled: isEnabled ?? this.isEnabled,
  );
}

extension AttachmentMenuBotColorExtensions on AttachmentMenuBotColor {
  AttachmentMenuBotColor copyWith({int? lightColor, int? darkColor}) =>
      AttachmentMenuBotColor(
        lightColor: lightColor ?? this.lightColor,
        darkColor: darkColor ?? this.darkColor,
      );
}

extension AttachmentMenuBotExtensions on AttachmentMenuBot {
  AttachmentMenuBot copyWith({
    int? botUserId,
    bool? supportsSelfChat,
    bool? supportsUserChats,
    bool? supportsBotChats,
    bool? supportsGroupChats,
    bool? supportsChannelChats,
    bool? requestWriteAccess,
    bool? isAdded,
    bool? showInAttachmentMenu,
    bool? showInSideMenu,
    bool? showDisclaimerInSideMenu,
    String? name,
    AttachmentMenuBotColor? nameColor,
    File? defaultIcon,
    File? iosStaticIcon,
    File? iosAnimatedIcon,
    File? iosSideMenuIcon,
    File? androidIcon,
    File? androidSideMenuIcon,
    File? macosIcon,
    File? macosSideMenuIcon,
    AttachmentMenuBotColor? iconColor,
    File? webAppPlaceholder,
  }) => AttachmentMenuBot(
    botUserId: botUserId ?? this.botUserId,
    supportsSelfChat: supportsSelfChat ?? this.supportsSelfChat,
    supportsUserChats: supportsUserChats ?? this.supportsUserChats,
    supportsBotChats: supportsBotChats ?? this.supportsBotChats,
    supportsGroupChats: supportsGroupChats ?? this.supportsGroupChats,
    supportsChannelChats: supportsChannelChats ?? this.supportsChannelChats,
    requestWriteAccess: requestWriteAccess ?? this.requestWriteAccess,
    isAdded: isAdded ?? this.isAdded,
    showInAttachmentMenu: showInAttachmentMenu ?? this.showInAttachmentMenu,
    showInSideMenu: showInSideMenu ?? this.showInSideMenu,
    showDisclaimerInSideMenu:
        showDisclaimerInSideMenu ?? this.showDisclaimerInSideMenu,
    name: name ?? this.name,
    nameColor: nameColor ?? this.nameColor,
    defaultIcon: defaultIcon ?? this.defaultIcon,
    iosStaticIcon: iosStaticIcon ?? this.iosStaticIcon,
    iosAnimatedIcon: iosAnimatedIcon ?? this.iosAnimatedIcon,
    iosSideMenuIcon: iosSideMenuIcon ?? this.iosSideMenuIcon,
    androidIcon: androidIcon ?? this.androidIcon,
    androidSideMenuIcon: androidSideMenuIcon ?? this.androidSideMenuIcon,
    macosIcon: macosIcon ?? this.macosIcon,
    macosSideMenuIcon: macosSideMenuIcon ?? this.macosSideMenuIcon,
    iconColor: iconColor ?? this.iconColor,
    webAppPlaceholder: webAppPlaceholder ?? this.webAppPlaceholder,
  );
}

extension SentWebAppMessageExtensions on SentWebAppMessage {
  SentWebAppMessage copyWith({String? inlineMessageId}) => SentWebAppMessage(
    inlineMessageId: inlineMessageId ?? this.inlineMessageId,
  );
}

extension BotWriteAccessAllowReasonExtensions on BotWriteAccessAllowReason {
  TResult map<TResult extends Object?>({
    required TResult Function(BotWriteAccessAllowReasonConnectedWebsite value)
    connectedWebsite,
    required TResult Function(
      BotWriteAccessAllowReasonAddedToAttachmentMenu value,
    )
    addedToAttachmentMenu,
    required TResult Function(BotWriteAccessAllowReasonLaunchedWebApp value)
    launchedWebApp,
    required TResult Function(BotWriteAccessAllowReasonAcceptedRequest value)
    acceptedRequest,
  }) {
    switch (getConstructor()) {
      case BotWriteAccessAllowReasonConnectedWebsite.constructor:
        return connectedWebsite.call(
          this as BotWriteAccessAllowReasonConnectedWebsite,
        );
      case BotWriteAccessAllowReasonAddedToAttachmentMenu.constructor:
        return addedToAttachmentMenu.call(
          this as BotWriteAccessAllowReasonAddedToAttachmentMenu,
        );
      case BotWriteAccessAllowReasonLaunchedWebApp.constructor:
        return launchedWebApp.call(
          this as BotWriteAccessAllowReasonLaunchedWebApp,
        );
      case BotWriteAccessAllowReasonAcceptedRequest.constructor:
        return acceptedRequest.call(
          this as BotWriteAccessAllowReasonAcceptedRequest,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(BotWriteAccessAllowReasonConnectedWebsite value)?
    connectedWebsite,
    TResult Function(BotWriteAccessAllowReasonAddedToAttachmentMenu value)?
    addedToAttachmentMenu,
    TResult Function(BotWriteAccessAllowReasonLaunchedWebApp value)?
    launchedWebApp,
    TResult Function(BotWriteAccessAllowReasonAcceptedRequest value)?
    acceptedRequest,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case BotWriteAccessAllowReasonConnectedWebsite.constructor:
        if (connectedWebsite != null) {
          return connectedWebsite.call(
            this as BotWriteAccessAllowReasonConnectedWebsite,
          );
        }
        break;
      case BotWriteAccessAllowReasonAddedToAttachmentMenu.constructor:
        if (addedToAttachmentMenu != null) {
          return addedToAttachmentMenu.call(
            this as BotWriteAccessAllowReasonAddedToAttachmentMenu,
          );
        }
        break;
      case BotWriteAccessAllowReasonLaunchedWebApp.constructor:
        if (launchedWebApp != null) {
          return launchedWebApp.call(
            this as BotWriteAccessAllowReasonLaunchedWebApp,
          );
        }
        break;
      case BotWriteAccessAllowReasonAcceptedRequest.constructor:
        if (acceptedRequest != null) {
          return acceptedRequest.call(
            this as BotWriteAccessAllowReasonAcceptedRequest,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension BotWriteAccessAllowReasonConnectedWebsiteExtensions
    on BotWriteAccessAllowReasonConnectedWebsite {
  BotWriteAccessAllowReasonConnectedWebsite copyWith({String? domainName}) =>
      BotWriteAccessAllowReasonConnectedWebsite(
        domainName: domainName ?? this.domainName,
      );
}

extension BotWriteAccessAllowReasonLaunchedWebAppExtensions
    on BotWriteAccessAllowReasonLaunchedWebApp {
  BotWriteAccessAllowReasonLaunchedWebApp copyWith({WebApp? webApp}) =>
      BotWriteAccessAllowReasonLaunchedWebApp(webApp: webApp ?? this.webApp);
}

extension HttpUrlExtensions on HttpUrl {
  HttpUrl copyWith({String? url}) => HttpUrl(url: url ?? this.url);
}

extension UserLinkExtensions on UserLink {
  UserLink copyWith({String? url, int? expiresIn}) =>
      UserLink(url: url ?? this.url, expiresIn: expiresIn ?? this.expiresIn);
}

extension TargetChatTypesExtensions on TargetChatTypes {
  TargetChatTypes copyWith({
    bool? allowUserChats,
    bool? allowBotChats,
    bool? allowGroupChats,
    bool? allowChannelChats,
  }) => TargetChatTypes(
    allowUserChats: allowUserChats ?? this.allowUserChats,
    allowBotChats: allowBotChats ?? this.allowBotChats,
    allowGroupChats: allowGroupChats ?? this.allowGroupChats,
    allowChannelChats: allowChannelChats ?? this.allowChannelChats,
  );
}

extension TargetChatExtensions on TargetChat {
  TResult map<TResult extends Object?>({
    required TResult Function(TargetChatCurrent value) current,
    required TResult Function(TargetChatChosen value) chosen,
    required TResult Function(TargetChatInternalLink value) internalLink,
  }) {
    switch (getConstructor()) {
      case TargetChatCurrent.constructor:
        return current.call(this as TargetChatCurrent);
      case TargetChatChosen.constructor:
        return chosen.call(this as TargetChatChosen);
      case TargetChatInternalLink.constructor:
        return internalLink.call(this as TargetChatInternalLink);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(TargetChatCurrent value)? current,
    TResult Function(TargetChatChosen value)? chosen,
    TResult Function(TargetChatInternalLink value)? internalLink,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case TargetChatCurrent.constructor:
        if (current != null) {
          return current.call(this as TargetChatCurrent);
        }
        break;
      case TargetChatChosen.constructor:
        if (chosen != null) {
          return chosen.call(this as TargetChatChosen);
        }
        break;
      case TargetChatInternalLink.constructor:
        if (internalLink != null) {
          return internalLink.call(this as TargetChatInternalLink);
        }
        break;
    }
    return orElse.call();
  }
}

extension TargetChatChosenExtensions on TargetChatChosen {
  TargetChatChosen copyWith({TargetChatTypes? types}) =>
      TargetChatChosen(types: types ?? this.types);
}

extension TargetChatInternalLinkExtensions on TargetChatInternalLink {
  TargetChatInternalLink copyWith({InternalLinkType? link}) =>
      TargetChatInternalLink(link: link ?? this.link);
}

extension InputInlineQueryResultExtensions on InputInlineQueryResult {
  TResult map<TResult extends Object?>({
    required TResult Function(InputInlineQueryResultAnimation value) animation,
    required TResult Function(InputInlineQueryResultArticle value) article,
    required TResult Function(InputInlineQueryResultAudio value) audio,
    required TResult Function(InputInlineQueryResultContact value) contact,
    required TResult Function(InputInlineQueryResultDocument value) document,
    required TResult Function(InputInlineQueryResultGame value) game,
    required TResult Function(InputInlineQueryResultLocation value) location,
    required TResult Function(InputInlineQueryResultPhoto value) photo,
    required TResult Function(InputInlineQueryResultSticker value) sticker,
    required TResult Function(InputInlineQueryResultVenue value) venue,
    required TResult Function(InputInlineQueryResultVideo value) video,
    required TResult Function(InputInlineQueryResultVoiceNote value) voiceNote,
  }) {
    switch (getConstructor()) {
      case InputInlineQueryResultAnimation.constructor:
        return animation.call(this as InputInlineQueryResultAnimation);
      case InputInlineQueryResultArticle.constructor:
        return article.call(this as InputInlineQueryResultArticle);
      case InputInlineQueryResultAudio.constructor:
        return audio.call(this as InputInlineQueryResultAudio);
      case InputInlineQueryResultContact.constructor:
        return contact.call(this as InputInlineQueryResultContact);
      case InputInlineQueryResultDocument.constructor:
        return document.call(this as InputInlineQueryResultDocument);
      case InputInlineQueryResultGame.constructor:
        return game.call(this as InputInlineQueryResultGame);
      case InputInlineQueryResultLocation.constructor:
        return location.call(this as InputInlineQueryResultLocation);
      case InputInlineQueryResultPhoto.constructor:
        return photo.call(this as InputInlineQueryResultPhoto);
      case InputInlineQueryResultSticker.constructor:
        return sticker.call(this as InputInlineQueryResultSticker);
      case InputInlineQueryResultVenue.constructor:
        return venue.call(this as InputInlineQueryResultVenue);
      case InputInlineQueryResultVideo.constructor:
        return video.call(this as InputInlineQueryResultVideo);
      case InputInlineQueryResultVoiceNote.constructor:
        return voiceNote.call(this as InputInlineQueryResultVoiceNote);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InputInlineQueryResultAnimation value)? animation,
    TResult Function(InputInlineQueryResultArticle value)? article,
    TResult Function(InputInlineQueryResultAudio value)? audio,
    TResult Function(InputInlineQueryResultContact value)? contact,
    TResult Function(InputInlineQueryResultDocument value)? document,
    TResult Function(InputInlineQueryResultGame value)? game,
    TResult Function(InputInlineQueryResultLocation value)? location,
    TResult Function(InputInlineQueryResultPhoto value)? photo,
    TResult Function(InputInlineQueryResultSticker value)? sticker,
    TResult Function(InputInlineQueryResultVenue value)? venue,
    TResult Function(InputInlineQueryResultVideo value)? video,
    TResult Function(InputInlineQueryResultVoiceNote value)? voiceNote,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InputInlineQueryResultAnimation.constructor:
        if (animation != null) {
          return animation.call(this as InputInlineQueryResultAnimation);
        }
        break;
      case InputInlineQueryResultArticle.constructor:
        if (article != null) {
          return article.call(this as InputInlineQueryResultArticle);
        }
        break;
      case InputInlineQueryResultAudio.constructor:
        if (audio != null) {
          return audio.call(this as InputInlineQueryResultAudio);
        }
        break;
      case InputInlineQueryResultContact.constructor:
        if (contact != null) {
          return contact.call(this as InputInlineQueryResultContact);
        }
        break;
      case InputInlineQueryResultDocument.constructor:
        if (document != null) {
          return document.call(this as InputInlineQueryResultDocument);
        }
        break;
      case InputInlineQueryResultGame.constructor:
        if (game != null) {
          return game.call(this as InputInlineQueryResultGame);
        }
        break;
      case InputInlineQueryResultLocation.constructor:
        if (location != null) {
          return location.call(this as InputInlineQueryResultLocation);
        }
        break;
      case InputInlineQueryResultPhoto.constructor:
        if (photo != null) {
          return photo.call(this as InputInlineQueryResultPhoto);
        }
        break;
      case InputInlineQueryResultSticker.constructor:
        if (sticker != null) {
          return sticker.call(this as InputInlineQueryResultSticker);
        }
        break;
      case InputInlineQueryResultVenue.constructor:
        if (venue != null) {
          return venue.call(this as InputInlineQueryResultVenue);
        }
        break;
      case InputInlineQueryResultVideo.constructor:
        if (video != null) {
          return video.call(this as InputInlineQueryResultVideo);
        }
        break;
      case InputInlineQueryResultVoiceNote.constructor:
        if (voiceNote != null) {
          return voiceNote.call(this as InputInlineQueryResultVoiceNote);
        }
        break;
    }
    return orElse.call();
  }
}

extension InputInlineQueryResultAnimationExtensions
    on InputInlineQueryResultAnimation {
  InputInlineQueryResultAnimation copyWith({
    String? id,
    String? title,
    String? thumbnailUrl,
    String? thumbnailMimeType,
    String? videoUrl,
    String? videoMimeType,
    int? videoDuration,
    int? videoWidth,
    int? videoHeight,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => InputInlineQueryResultAnimation(
    id: id ?? this.id,
    title: title ?? this.title,
    thumbnailUrl: thumbnailUrl ?? this.thumbnailUrl,
    thumbnailMimeType: thumbnailMimeType ?? this.thumbnailMimeType,
    videoUrl: videoUrl ?? this.videoUrl,
    videoMimeType: videoMimeType ?? this.videoMimeType,
    videoDuration: videoDuration ?? this.videoDuration,
    videoWidth: videoWidth ?? this.videoWidth,
    videoHeight: videoHeight ?? this.videoHeight,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension InputInlineQueryResultArticleExtensions
    on InputInlineQueryResultArticle {
  InputInlineQueryResultArticle copyWith({
    String? id,
    String? url,
    String? title,
    String? description,
    String? thumbnailUrl,
    int? thumbnailWidth,
    int? thumbnailHeight,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => InputInlineQueryResultArticle(
    id: id ?? this.id,
    url: url ?? this.url,
    title: title ?? this.title,
    description: description ?? this.description,
    thumbnailUrl: thumbnailUrl ?? this.thumbnailUrl,
    thumbnailWidth: thumbnailWidth ?? this.thumbnailWidth,
    thumbnailHeight: thumbnailHeight ?? this.thumbnailHeight,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension InputInlineQueryResultAudioExtensions on InputInlineQueryResultAudio {
  InputInlineQueryResultAudio copyWith({
    String? id,
    String? title,
    String? performer,
    String? audioUrl,
    int? audioDuration,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => InputInlineQueryResultAudio(
    id: id ?? this.id,
    title: title ?? this.title,
    performer: performer ?? this.performer,
    audioUrl: audioUrl ?? this.audioUrl,
    audioDuration: audioDuration ?? this.audioDuration,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension InputInlineQueryResultContactExtensions
    on InputInlineQueryResultContact {
  InputInlineQueryResultContact copyWith({
    String? id,
    Contact? contact,
    String? thumbnailUrl,
    int? thumbnailWidth,
    int? thumbnailHeight,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => InputInlineQueryResultContact(
    id: id ?? this.id,
    contact: contact ?? this.contact,
    thumbnailUrl: thumbnailUrl ?? this.thumbnailUrl,
    thumbnailWidth: thumbnailWidth ?? this.thumbnailWidth,
    thumbnailHeight: thumbnailHeight ?? this.thumbnailHeight,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension InputInlineQueryResultDocumentExtensions
    on InputInlineQueryResultDocument {
  InputInlineQueryResultDocument copyWith({
    String? id,
    String? title,
    String? description,
    String? documentUrl,
    String? mimeType,
    String? thumbnailUrl,
    int? thumbnailWidth,
    int? thumbnailHeight,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => InputInlineQueryResultDocument(
    id: id ?? this.id,
    title: title ?? this.title,
    description: description ?? this.description,
    documentUrl: documentUrl ?? this.documentUrl,
    mimeType: mimeType ?? this.mimeType,
    thumbnailUrl: thumbnailUrl ?? this.thumbnailUrl,
    thumbnailWidth: thumbnailWidth ?? this.thumbnailWidth,
    thumbnailHeight: thumbnailHeight ?? this.thumbnailHeight,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension InputInlineQueryResultGameExtensions on InputInlineQueryResultGame {
  InputInlineQueryResultGame copyWith({
    String? id,
    String? gameShortName,
    ReplyMarkup? replyMarkup,
  }) => InputInlineQueryResultGame(
    id: id ?? this.id,
    gameShortName: gameShortName ?? this.gameShortName,
    replyMarkup: replyMarkup ?? this.replyMarkup,
  );
}

extension InputInlineQueryResultLocationExtensions
    on InputInlineQueryResultLocation {
  InputInlineQueryResultLocation copyWith({
    String? id,
    Location? location,
    int? livePeriod,
    String? title,
    String? thumbnailUrl,
    int? thumbnailWidth,
    int? thumbnailHeight,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => InputInlineQueryResultLocation(
    id: id ?? this.id,
    location: location ?? this.location,
    livePeriod: livePeriod ?? this.livePeriod,
    title: title ?? this.title,
    thumbnailUrl: thumbnailUrl ?? this.thumbnailUrl,
    thumbnailWidth: thumbnailWidth ?? this.thumbnailWidth,
    thumbnailHeight: thumbnailHeight ?? this.thumbnailHeight,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension InputInlineQueryResultPhotoExtensions on InputInlineQueryResultPhoto {
  InputInlineQueryResultPhoto copyWith({
    String? id,
    String? title,
    String? description,
    String? thumbnailUrl,
    String? photoUrl,
    int? photoWidth,
    int? photoHeight,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => InputInlineQueryResultPhoto(
    id: id ?? this.id,
    title: title ?? this.title,
    description: description ?? this.description,
    thumbnailUrl: thumbnailUrl ?? this.thumbnailUrl,
    photoUrl: photoUrl ?? this.photoUrl,
    photoWidth: photoWidth ?? this.photoWidth,
    photoHeight: photoHeight ?? this.photoHeight,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension InputInlineQueryResultStickerExtensions
    on InputInlineQueryResultSticker {
  InputInlineQueryResultSticker copyWith({
    String? id,
    String? thumbnailUrl,
    String? stickerUrl,
    int? stickerWidth,
    int? stickerHeight,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => InputInlineQueryResultSticker(
    id: id ?? this.id,
    thumbnailUrl: thumbnailUrl ?? this.thumbnailUrl,
    stickerUrl: stickerUrl ?? this.stickerUrl,
    stickerWidth: stickerWidth ?? this.stickerWidth,
    stickerHeight: stickerHeight ?? this.stickerHeight,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension InputInlineQueryResultVenueExtensions on InputInlineQueryResultVenue {
  InputInlineQueryResultVenue copyWith({
    String? id,
    Venue? venue,
    String? thumbnailUrl,
    int? thumbnailWidth,
    int? thumbnailHeight,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => InputInlineQueryResultVenue(
    id: id ?? this.id,
    venue: venue ?? this.venue,
    thumbnailUrl: thumbnailUrl ?? this.thumbnailUrl,
    thumbnailWidth: thumbnailWidth ?? this.thumbnailWidth,
    thumbnailHeight: thumbnailHeight ?? this.thumbnailHeight,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension InputInlineQueryResultVideoExtensions on InputInlineQueryResultVideo {
  InputInlineQueryResultVideo copyWith({
    String? id,
    String? title,
    String? description,
    String? thumbnailUrl,
    String? videoUrl,
    String? mimeType,
    int? videoWidth,
    int? videoHeight,
    int? videoDuration,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => InputInlineQueryResultVideo(
    id: id ?? this.id,
    title: title ?? this.title,
    description: description ?? this.description,
    thumbnailUrl: thumbnailUrl ?? this.thumbnailUrl,
    videoUrl: videoUrl ?? this.videoUrl,
    mimeType: mimeType ?? this.mimeType,
    videoWidth: videoWidth ?? this.videoWidth,
    videoHeight: videoHeight ?? this.videoHeight,
    videoDuration: videoDuration ?? this.videoDuration,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension InputInlineQueryResultVoiceNoteExtensions
    on InputInlineQueryResultVoiceNote {
  InputInlineQueryResultVoiceNote copyWith({
    String? id,
    String? title,
    String? voiceNoteUrl,
    int? voiceNoteDuration,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => InputInlineQueryResultVoiceNote(
    id: id ?? this.id,
    title: title ?? this.title,
    voiceNoteUrl: voiceNoteUrl ?? this.voiceNoteUrl,
    voiceNoteDuration: voiceNoteDuration ?? this.voiceNoteDuration,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension InlineQueryResultExtensions on InlineQueryResult {
  TResult map<TResult extends Object?>({
    required TResult Function(InlineQueryResultArticle value) article,
    required TResult Function(InlineQueryResultContact value) contact,
    required TResult Function(InlineQueryResultLocation value) location,
    required TResult Function(InlineQueryResultVenue value) venue,
    required TResult Function(InlineQueryResultGame value) game,
    required TResult Function(InlineQueryResultAnimation value) animation,
    required TResult Function(InlineQueryResultAudio value) audio,
    required TResult Function(InlineQueryResultDocument value) document,
    required TResult Function(InlineQueryResultPhoto value) photo,
    required TResult Function(InlineQueryResultSticker value) sticker,
    required TResult Function(InlineQueryResultVideo value) video,
    required TResult Function(InlineQueryResultVoiceNote value) voiceNote,
  }) {
    switch (getConstructor()) {
      case InlineQueryResultArticle.constructor:
        return article.call(this as InlineQueryResultArticle);
      case InlineQueryResultContact.constructor:
        return contact.call(this as InlineQueryResultContact);
      case InlineQueryResultLocation.constructor:
        return location.call(this as InlineQueryResultLocation);
      case InlineQueryResultVenue.constructor:
        return venue.call(this as InlineQueryResultVenue);
      case InlineQueryResultGame.constructor:
        return game.call(this as InlineQueryResultGame);
      case InlineQueryResultAnimation.constructor:
        return animation.call(this as InlineQueryResultAnimation);
      case InlineQueryResultAudio.constructor:
        return audio.call(this as InlineQueryResultAudio);
      case InlineQueryResultDocument.constructor:
        return document.call(this as InlineQueryResultDocument);
      case InlineQueryResultPhoto.constructor:
        return photo.call(this as InlineQueryResultPhoto);
      case InlineQueryResultSticker.constructor:
        return sticker.call(this as InlineQueryResultSticker);
      case InlineQueryResultVideo.constructor:
        return video.call(this as InlineQueryResultVideo);
      case InlineQueryResultVoiceNote.constructor:
        return voiceNote.call(this as InlineQueryResultVoiceNote);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InlineQueryResultArticle value)? article,
    TResult Function(InlineQueryResultContact value)? contact,
    TResult Function(InlineQueryResultLocation value)? location,
    TResult Function(InlineQueryResultVenue value)? venue,
    TResult Function(InlineQueryResultGame value)? game,
    TResult Function(InlineQueryResultAnimation value)? animation,
    TResult Function(InlineQueryResultAudio value)? audio,
    TResult Function(InlineQueryResultDocument value)? document,
    TResult Function(InlineQueryResultPhoto value)? photo,
    TResult Function(InlineQueryResultSticker value)? sticker,
    TResult Function(InlineQueryResultVideo value)? video,
    TResult Function(InlineQueryResultVoiceNote value)? voiceNote,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InlineQueryResultArticle.constructor:
        if (article != null) {
          return article.call(this as InlineQueryResultArticle);
        }
        break;
      case InlineQueryResultContact.constructor:
        if (contact != null) {
          return contact.call(this as InlineQueryResultContact);
        }
        break;
      case InlineQueryResultLocation.constructor:
        if (location != null) {
          return location.call(this as InlineQueryResultLocation);
        }
        break;
      case InlineQueryResultVenue.constructor:
        if (venue != null) {
          return venue.call(this as InlineQueryResultVenue);
        }
        break;
      case InlineQueryResultGame.constructor:
        if (game != null) {
          return game.call(this as InlineQueryResultGame);
        }
        break;
      case InlineQueryResultAnimation.constructor:
        if (animation != null) {
          return animation.call(this as InlineQueryResultAnimation);
        }
        break;
      case InlineQueryResultAudio.constructor:
        if (audio != null) {
          return audio.call(this as InlineQueryResultAudio);
        }
        break;
      case InlineQueryResultDocument.constructor:
        if (document != null) {
          return document.call(this as InlineQueryResultDocument);
        }
        break;
      case InlineQueryResultPhoto.constructor:
        if (photo != null) {
          return photo.call(this as InlineQueryResultPhoto);
        }
        break;
      case InlineQueryResultSticker.constructor:
        if (sticker != null) {
          return sticker.call(this as InlineQueryResultSticker);
        }
        break;
      case InlineQueryResultVideo.constructor:
        if (video != null) {
          return video.call(this as InlineQueryResultVideo);
        }
        break;
      case InlineQueryResultVoiceNote.constructor:
        if (voiceNote != null) {
          return voiceNote.call(this as InlineQueryResultVoiceNote);
        }
        break;
    }
    return orElse.call();
  }
}

extension InlineQueryResultArticleExtensions on InlineQueryResultArticle {
  InlineQueryResultArticle copyWith({
    String? id,
    String? url,
    String? title,
    String? description,
    Thumbnail? thumbnail,
  }) => InlineQueryResultArticle(
    id: id ?? this.id,
    url: url ?? this.url,
    title: title ?? this.title,
    description: description ?? this.description,
    thumbnail: thumbnail ?? this.thumbnail,
  );
}

extension InlineQueryResultContactExtensions on InlineQueryResultContact {
  InlineQueryResultContact copyWith({
    String? id,
    Contact? contact,
    Thumbnail? thumbnail,
  }) => InlineQueryResultContact(
    id: id ?? this.id,
    contact: contact ?? this.contact,
    thumbnail: thumbnail ?? this.thumbnail,
  );
}

extension InlineQueryResultLocationExtensions on InlineQueryResultLocation {
  InlineQueryResultLocation copyWith({
    String? id,
    Location? location,
    String? title,
    Thumbnail? thumbnail,
  }) => InlineQueryResultLocation(
    id: id ?? this.id,
    location: location ?? this.location,
    title: title ?? this.title,
    thumbnail: thumbnail ?? this.thumbnail,
  );
}

extension InlineQueryResultVenueExtensions on InlineQueryResultVenue {
  InlineQueryResultVenue copyWith({
    String? id,
    Venue? venue,
    Thumbnail? thumbnail,
  }) => InlineQueryResultVenue(
    id: id ?? this.id,
    venue: venue ?? this.venue,
    thumbnail: thumbnail ?? this.thumbnail,
  );
}

extension InlineQueryResultGameExtensions on InlineQueryResultGame {
  InlineQueryResultGame copyWith({String? id, Game? game}) =>
      InlineQueryResultGame(id: id ?? this.id, game: game ?? this.game);
}

extension InlineQueryResultAnimationExtensions on InlineQueryResultAnimation {
  InlineQueryResultAnimation copyWith({
    String? id,
    Animation? animation,
    String? title,
  }) => InlineQueryResultAnimation(
    id: id ?? this.id,
    animation: animation ?? this.animation,
    title: title ?? this.title,
  );
}

extension InlineQueryResultAudioExtensions on InlineQueryResultAudio {
  InlineQueryResultAudio copyWith({String? id, Audio? audio}) =>
      InlineQueryResultAudio(id: id ?? this.id, audio: audio ?? this.audio);
}

extension InlineQueryResultDocumentExtensions on InlineQueryResultDocument {
  InlineQueryResultDocument copyWith({
    String? id,
    Document? document,
    String? title,
    String? description,
  }) => InlineQueryResultDocument(
    id: id ?? this.id,
    document: document ?? this.document,
    title: title ?? this.title,
    description: description ?? this.description,
  );
}

extension InlineQueryResultPhotoExtensions on InlineQueryResultPhoto {
  InlineQueryResultPhoto copyWith({
    String? id,
    Photo? photo,
    String? title,
    String? description,
  }) => InlineQueryResultPhoto(
    id: id ?? this.id,
    photo: photo ?? this.photo,
    title: title ?? this.title,
    description: description ?? this.description,
  );
}

extension InlineQueryResultStickerExtensions on InlineQueryResultSticker {
  InlineQueryResultSticker copyWith({String? id, Sticker? sticker}) =>
      InlineQueryResultSticker(
        id: id ?? this.id,
        sticker: sticker ?? this.sticker,
      );
}

extension InlineQueryResultVideoExtensions on InlineQueryResultVideo {
  InlineQueryResultVideo copyWith({
    String? id,
    Video? video,
    String? title,
    String? description,
  }) => InlineQueryResultVideo(
    id: id ?? this.id,
    video: video ?? this.video,
    title: title ?? this.title,
    description: description ?? this.description,
  );
}

extension InlineQueryResultVoiceNoteExtensions on InlineQueryResultVoiceNote {
  InlineQueryResultVoiceNote copyWith({
    String? id,
    VoiceNote? voiceNote,
    String? title,
  }) => InlineQueryResultVoiceNote(
    id: id ?? this.id,
    voiceNote: voiceNote ?? this.voiceNote,
    title: title ?? this.title,
  );
}

extension InlineQueryResultsButtonTypeExtensions
    on InlineQueryResultsButtonType {
  TResult map<TResult extends Object?>({
    required TResult Function(InlineQueryResultsButtonTypeStartBot value)
    startBot,
    required TResult Function(InlineQueryResultsButtonTypeWebApp value) webApp,
  }) {
    switch (getConstructor()) {
      case InlineQueryResultsButtonTypeStartBot.constructor:
        return startBot.call(this as InlineQueryResultsButtonTypeStartBot);
      case InlineQueryResultsButtonTypeWebApp.constructor:
        return webApp.call(this as InlineQueryResultsButtonTypeWebApp);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InlineQueryResultsButtonTypeStartBot value)? startBot,
    TResult Function(InlineQueryResultsButtonTypeWebApp value)? webApp,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InlineQueryResultsButtonTypeStartBot.constructor:
        if (startBot != null) {
          return startBot.call(this as InlineQueryResultsButtonTypeStartBot);
        }
        break;
      case InlineQueryResultsButtonTypeWebApp.constructor:
        if (webApp != null) {
          return webApp.call(this as InlineQueryResultsButtonTypeWebApp);
        }
        break;
    }
    return orElse.call();
  }
}

extension InlineQueryResultsButtonTypeStartBotExtensions
    on InlineQueryResultsButtonTypeStartBot {
  InlineQueryResultsButtonTypeStartBot copyWith({String? parameter}) =>
      InlineQueryResultsButtonTypeStartBot(
        parameter: parameter ?? this.parameter,
      );
}

extension InlineQueryResultsButtonTypeWebAppExtensions
    on InlineQueryResultsButtonTypeWebApp {
  InlineQueryResultsButtonTypeWebApp copyWith({String? url}) =>
      InlineQueryResultsButtonTypeWebApp(url: url ?? this.url);
}

extension InlineQueryResultsButtonExtensions on InlineQueryResultsButton {
  InlineQueryResultsButton copyWith({
    String? text,
    InlineQueryResultsButtonType? type,
  }) => InlineQueryResultsButton(
    text: text ?? this.text,
    type: type ?? this.type,
  );
}

extension InlineQueryResultsExtensions on InlineQueryResults {
  InlineQueryResults copyWith({
    int? inlineQueryId,
    InlineQueryResultsButton? button,
    List<InlineQueryResult>? results,
    String? nextOffset,
  }) => InlineQueryResults(
    inlineQueryId: inlineQueryId ?? this.inlineQueryId,
    button: button ?? this.button,
    results: results ?? this.results,
    nextOffset: nextOffset ?? this.nextOffset,
  );
}

extension PreparedInlineMessageIdExtensions on PreparedInlineMessageId {
  PreparedInlineMessageId copyWith({String? id, int? expirationDate}) =>
      PreparedInlineMessageId(
        id: id ?? this.id,
        expirationDate: expirationDate ?? this.expirationDate,
      );
}

extension PreparedInlineMessageExtensions on PreparedInlineMessage {
  PreparedInlineMessage copyWith({
    int? inlineQueryId,
    InlineQueryResult? result,
    TargetChatTypes? chatTypes,
  }) => PreparedInlineMessage(
    inlineQueryId: inlineQueryId ?? this.inlineQueryId,
    result: result ?? this.result,
    chatTypes: chatTypes ?? this.chatTypes,
  );
}

extension CallbackQueryPayloadExtensions on CallbackQueryPayload {
  TResult map<TResult extends Object?>({
    required TResult Function(CallbackQueryPayloadData value) data,
    required TResult Function(CallbackQueryPayloadDataWithPassword value)
    dataWithPassword,
    required TResult Function(CallbackQueryPayloadGame value) game,
  }) {
    switch (getConstructor()) {
      case CallbackQueryPayloadData.constructor:
        return data.call(this as CallbackQueryPayloadData);
      case CallbackQueryPayloadDataWithPassword.constructor:
        return dataWithPassword.call(
          this as CallbackQueryPayloadDataWithPassword,
        );
      case CallbackQueryPayloadGame.constructor:
        return game.call(this as CallbackQueryPayloadGame);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(CallbackQueryPayloadData value)? data,
    TResult Function(CallbackQueryPayloadDataWithPassword value)?
    dataWithPassword,
    TResult Function(CallbackQueryPayloadGame value)? game,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case CallbackQueryPayloadData.constructor:
        if (data != null) {
          return data.call(this as CallbackQueryPayloadData);
        }
        break;
      case CallbackQueryPayloadDataWithPassword.constructor:
        if (dataWithPassword != null) {
          return dataWithPassword.call(
            this as CallbackQueryPayloadDataWithPassword,
          );
        }
        break;
      case CallbackQueryPayloadGame.constructor:
        if (game != null) {
          return game.call(this as CallbackQueryPayloadGame);
        }
        break;
    }
    return orElse.call();
  }
}

extension CallbackQueryPayloadDataExtensions on CallbackQueryPayloadData {
  CallbackQueryPayloadData copyWith({String? data}) =>
      CallbackQueryPayloadData(data: data ?? this.data);
}

extension CallbackQueryPayloadDataWithPasswordExtensions
    on CallbackQueryPayloadDataWithPassword {
  CallbackQueryPayloadDataWithPassword copyWith({
    String? password,
    String? data,
  }) => CallbackQueryPayloadDataWithPassword(
    password: password ?? this.password,
    data: data ?? this.data,
  );
}

extension CallbackQueryPayloadGameExtensions on CallbackQueryPayloadGame {
  CallbackQueryPayloadGame copyWith({String? gameShortName}) =>
      CallbackQueryPayloadGame(
        gameShortName: gameShortName ?? this.gameShortName,
      );
}

extension CallbackQueryAnswerExtensions on CallbackQueryAnswer {
  CallbackQueryAnswer copyWith({String? text, bool? showAlert, String? url}) =>
      CallbackQueryAnswer(
        text: text ?? this.text,
        showAlert: showAlert ?? this.showAlert,
        url: url ?? this.url,
      );
}

extension CustomRequestResultExtensions on CustomRequestResult {
  CustomRequestResult copyWith({String? result}) =>
      CustomRequestResult(result: result ?? this.result);
}

extension GameHighScoreExtensions on GameHighScore {
  GameHighScore copyWith({int? position, int? userId, int? score}) =>
      GameHighScore(
        position: position ?? this.position,
        userId: userId ?? this.userId,
        score: score ?? this.score,
      );
}

extension GameHighScoresExtensions on GameHighScores {
  GameHighScores copyWith({List<GameHighScore>? scores}) =>
      GameHighScores(scores: scores ?? this.scores);
}

extension ChatEventActionExtensions on ChatEventAction {
  TResult map<TResult extends Object?>({
    required TResult Function(ChatEventMessageEdited value)
    chatEventMessageEdited,
    required TResult Function(ChatEventMessageDeleted value)
    chatEventMessageDeleted,
    required TResult Function(ChatEventMessagePinned value)
    chatEventMessagePinned,
    required TResult Function(ChatEventMessageUnpinned value)
    chatEventMessageUnpinned,
    required TResult Function(ChatEventPollStopped value) chatEventPollStopped,
    required TResult Function(ChatEventMemberJoined value)
    chatEventMemberJoined,
    required TResult Function(ChatEventMemberJoinedByInviteLink value)
    chatEventMemberJoinedByInviteLink,
    required TResult Function(ChatEventMemberJoinedByRequest value)
    chatEventMemberJoinedByRequest,
    required TResult Function(ChatEventMemberInvited value)
    chatEventMemberInvited,
    required TResult Function(ChatEventMemberLeft value) chatEventMemberLeft,
    required TResult Function(ChatEventMemberPromoted value)
    chatEventMemberPromoted,
    required TResult Function(ChatEventMemberRestricted value)
    chatEventMemberRestricted,
    required TResult Function(ChatEventMemberSubscriptionExtended value)
    chatEventMemberSubscriptionExtended,
    required TResult Function(ChatEventAvailableReactionsChanged value)
    chatEventAvailableReactionsChanged,
    required TResult Function(ChatEventBackgroundChanged value)
    chatEventBackgroundChanged,
    required TResult Function(ChatEventDescriptionChanged value)
    chatEventDescriptionChanged,
    required TResult Function(ChatEventEmojiStatusChanged value)
    chatEventEmojiStatusChanged,
    required TResult Function(ChatEventLinkedChatChanged value)
    chatEventLinkedChatChanged,
    required TResult Function(ChatEventLocationChanged value)
    chatEventLocationChanged,
    required TResult Function(ChatEventMessageAutoDeleteTimeChanged value)
    chatEventMessageAutoDeleteTimeChanged,
    required TResult Function(ChatEventPermissionsChanged value)
    chatEventPermissionsChanged,
    required TResult Function(ChatEventPhotoChanged value)
    chatEventPhotoChanged,
    required TResult Function(ChatEventSlowModeDelayChanged value)
    chatEventSlowModeDelayChanged,
    required TResult Function(ChatEventStickerSetChanged value)
    chatEventStickerSetChanged,
    required TResult Function(ChatEventCustomEmojiStickerSetChanged value)
    chatEventCustomEmojiStickerSetChanged,
    required TResult Function(ChatEventTitleChanged value)
    chatEventTitleChanged,
    required TResult Function(ChatEventUsernameChanged value)
    chatEventUsernameChanged,
    required TResult Function(ChatEventActiveUsernamesChanged value)
    chatEventActiveUsernamesChanged,
    required TResult Function(ChatEventAccentColorChanged value)
    chatEventAccentColorChanged,
    required TResult Function(ChatEventProfileAccentColorChanged value)
    chatEventProfileAccentColorChanged,
    required TResult Function(ChatEventHasProtectedContentToggled value)
    chatEventHasProtectedContentToggled,
    required TResult Function(ChatEventInvitesToggled value)
    chatEventInvitesToggled,
    required TResult Function(ChatEventIsAllHistoryAvailableToggled value)
    chatEventIsAllHistoryAvailableToggled,
    required TResult Function(
      ChatEventHasAggressiveAntiSpamEnabledToggled value,
    )
    chatEventHasAggressiveAntiSpamEnabledToggled,
    required TResult Function(ChatEventSignMessagesToggled value)
    chatEventSignMessagesToggled,
    required TResult Function(ChatEventShowMessageSenderToggled value)
    chatEventShowMessageSenderToggled,
    required TResult Function(ChatEventAutomaticTranslationToggled value)
    chatEventAutomaticTranslationToggled,
    required TResult Function(ChatEventInviteLinkEdited value)
    chatEventInviteLinkEdited,
    required TResult Function(ChatEventInviteLinkRevoked value)
    chatEventInviteLinkRevoked,
    required TResult Function(ChatEventInviteLinkDeleted value)
    chatEventInviteLinkDeleted,
    required TResult Function(ChatEventVideoChatCreated value)
    chatEventVideoChatCreated,
    required TResult Function(ChatEventVideoChatEnded value)
    chatEventVideoChatEnded,
    required TResult Function(
      ChatEventVideoChatMuteNewParticipantsToggled value,
    )
    chatEventVideoChatMuteNewParticipantsToggled,
    required TResult Function(ChatEventVideoChatParticipantIsMutedToggled value)
    chatEventVideoChatParticipantIsMutedToggled,
    required TResult Function(
      ChatEventVideoChatParticipantVolumeLevelChanged value,
    )
    chatEventVideoChatParticipantVolumeLevelChanged,
    required TResult Function(ChatEventIsForumToggled value)
    chatEventIsForumToggled,
    required TResult Function(ChatEventForumTopicCreated value)
    chatEventForumTopicCreated,
    required TResult Function(ChatEventForumTopicEdited value)
    chatEventForumTopicEdited,
    required TResult Function(ChatEventForumTopicToggleIsClosed value)
    chatEventForumTopicToggleIsClosed,
    required TResult Function(ChatEventForumTopicToggleIsHidden value)
    chatEventForumTopicToggleIsHidden,
    required TResult Function(ChatEventForumTopicDeleted value)
    chatEventForumTopicDeleted,
    required TResult Function(ChatEventForumTopicPinned value)
    chatEventForumTopicPinned,
  }) {
    switch (getConstructor()) {
      case ChatEventMessageEdited.constructor:
        return chatEventMessageEdited.call(this as ChatEventMessageEdited);
      case ChatEventMessageDeleted.constructor:
        return chatEventMessageDeleted.call(this as ChatEventMessageDeleted);
      case ChatEventMessagePinned.constructor:
        return chatEventMessagePinned.call(this as ChatEventMessagePinned);
      case ChatEventMessageUnpinned.constructor:
        return chatEventMessageUnpinned.call(this as ChatEventMessageUnpinned);
      case ChatEventPollStopped.constructor:
        return chatEventPollStopped.call(this as ChatEventPollStopped);
      case ChatEventMemberJoined.constructor:
        return chatEventMemberJoined.call(this as ChatEventMemberJoined);
      case ChatEventMemberJoinedByInviteLink.constructor:
        return chatEventMemberJoinedByInviteLink.call(
          this as ChatEventMemberJoinedByInviteLink,
        );
      case ChatEventMemberJoinedByRequest.constructor:
        return chatEventMemberJoinedByRequest.call(
          this as ChatEventMemberJoinedByRequest,
        );
      case ChatEventMemberInvited.constructor:
        return chatEventMemberInvited.call(this as ChatEventMemberInvited);
      case ChatEventMemberLeft.constructor:
        return chatEventMemberLeft.call(this as ChatEventMemberLeft);
      case ChatEventMemberPromoted.constructor:
        return chatEventMemberPromoted.call(this as ChatEventMemberPromoted);
      case ChatEventMemberRestricted.constructor:
        return chatEventMemberRestricted.call(
          this as ChatEventMemberRestricted,
        );
      case ChatEventMemberSubscriptionExtended.constructor:
        return chatEventMemberSubscriptionExtended.call(
          this as ChatEventMemberSubscriptionExtended,
        );
      case ChatEventAvailableReactionsChanged.constructor:
        return chatEventAvailableReactionsChanged.call(
          this as ChatEventAvailableReactionsChanged,
        );
      case ChatEventBackgroundChanged.constructor:
        return chatEventBackgroundChanged.call(
          this as ChatEventBackgroundChanged,
        );
      case ChatEventDescriptionChanged.constructor:
        return chatEventDescriptionChanged.call(
          this as ChatEventDescriptionChanged,
        );
      case ChatEventEmojiStatusChanged.constructor:
        return chatEventEmojiStatusChanged.call(
          this as ChatEventEmojiStatusChanged,
        );
      case ChatEventLinkedChatChanged.constructor:
        return chatEventLinkedChatChanged.call(
          this as ChatEventLinkedChatChanged,
        );
      case ChatEventLocationChanged.constructor:
        return chatEventLocationChanged.call(this as ChatEventLocationChanged);
      case ChatEventMessageAutoDeleteTimeChanged.constructor:
        return chatEventMessageAutoDeleteTimeChanged.call(
          this as ChatEventMessageAutoDeleteTimeChanged,
        );
      case ChatEventPermissionsChanged.constructor:
        return chatEventPermissionsChanged.call(
          this as ChatEventPermissionsChanged,
        );
      case ChatEventPhotoChanged.constructor:
        return chatEventPhotoChanged.call(this as ChatEventPhotoChanged);
      case ChatEventSlowModeDelayChanged.constructor:
        return chatEventSlowModeDelayChanged.call(
          this as ChatEventSlowModeDelayChanged,
        );
      case ChatEventStickerSetChanged.constructor:
        return chatEventStickerSetChanged.call(
          this as ChatEventStickerSetChanged,
        );
      case ChatEventCustomEmojiStickerSetChanged.constructor:
        return chatEventCustomEmojiStickerSetChanged.call(
          this as ChatEventCustomEmojiStickerSetChanged,
        );
      case ChatEventTitleChanged.constructor:
        return chatEventTitleChanged.call(this as ChatEventTitleChanged);
      case ChatEventUsernameChanged.constructor:
        return chatEventUsernameChanged.call(this as ChatEventUsernameChanged);
      case ChatEventActiveUsernamesChanged.constructor:
        return chatEventActiveUsernamesChanged.call(
          this as ChatEventActiveUsernamesChanged,
        );
      case ChatEventAccentColorChanged.constructor:
        return chatEventAccentColorChanged.call(
          this as ChatEventAccentColorChanged,
        );
      case ChatEventProfileAccentColorChanged.constructor:
        return chatEventProfileAccentColorChanged.call(
          this as ChatEventProfileAccentColorChanged,
        );
      case ChatEventHasProtectedContentToggled.constructor:
        return chatEventHasProtectedContentToggled.call(
          this as ChatEventHasProtectedContentToggled,
        );
      case ChatEventInvitesToggled.constructor:
        return chatEventInvitesToggled.call(this as ChatEventInvitesToggled);
      case ChatEventIsAllHistoryAvailableToggled.constructor:
        return chatEventIsAllHistoryAvailableToggled.call(
          this as ChatEventIsAllHistoryAvailableToggled,
        );
      case ChatEventHasAggressiveAntiSpamEnabledToggled.constructor:
        return chatEventHasAggressiveAntiSpamEnabledToggled.call(
          this as ChatEventHasAggressiveAntiSpamEnabledToggled,
        );
      case ChatEventSignMessagesToggled.constructor:
        return chatEventSignMessagesToggled.call(
          this as ChatEventSignMessagesToggled,
        );
      case ChatEventShowMessageSenderToggled.constructor:
        return chatEventShowMessageSenderToggled.call(
          this as ChatEventShowMessageSenderToggled,
        );
      case ChatEventAutomaticTranslationToggled.constructor:
        return chatEventAutomaticTranslationToggled.call(
          this as ChatEventAutomaticTranslationToggled,
        );
      case ChatEventInviteLinkEdited.constructor:
        return chatEventInviteLinkEdited.call(
          this as ChatEventInviteLinkEdited,
        );
      case ChatEventInviteLinkRevoked.constructor:
        return chatEventInviteLinkRevoked.call(
          this as ChatEventInviteLinkRevoked,
        );
      case ChatEventInviteLinkDeleted.constructor:
        return chatEventInviteLinkDeleted.call(
          this as ChatEventInviteLinkDeleted,
        );
      case ChatEventVideoChatCreated.constructor:
        return chatEventVideoChatCreated.call(
          this as ChatEventVideoChatCreated,
        );
      case ChatEventVideoChatEnded.constructor:
        return chatEventVideoChatEnded.call(this as ChatEventVideoChatEnded);
      case ChatEventVideoChatMuteNewParticipantsToggled.constructor:
        return chatEventVideoChatMuteNewParticipantsToggled.call(
          this as ChatEventVideoChatMuteNewParticipantsToggled,
        );
      case ChatEventVideoChatParticipantIsMutedToggled.constructor:
        return chatEventVideoChatParticipantIsMutedToggled.call(
          this as ChatEventVideoChatParticipantIsMutedToggled,
        );
      case ChatEventVideoChatParticipantVolumeLevelChanged.constructor:
        return chatEventVideoChatParticipantVolumeLevelChanged.call(
          this as ChatEventVideoChatParticipantVolumeLevelChanged,
        );
      case ChatEventIsForumToggled.constructor:
        return chatEventIsForumToggled.call(this as ChatEventIsForumToggled);
      case ChatEventForumTopicCreated.constructor:
        return chatEventForumTopicCreated.call(
          this as ChatEventForumTopicCreated,
        );
      case ChatEventForumTopicEdited.constructor:
        return chatEventForumTopicEdited.call(
          this as ChatEventForumTopicEdited,
        );
      case ChatEventForumTopicToggleIsClosed.constructor:
        return chatEventForumTopicToggleIsClosed.call(
          this as ChatEventForumTopicToggleIsClosed,
        );
      case ChatEventForumTopicToggleIsHidden.constructor:
        return chatEventForumTopicToggleIsHidden.call(
          this as ChatEventForumTopicToggleIsHidden,
        );
      case ChatEventForumTopicDeleted.constructor:
        return chatEventForumTopicDeleted.call(
          this as ChatEventForumTopicDeleted,
        );
      case ChatEventForumTopicPinned.constructor:
        return chatEventForumTopicPinned.call(
          this as ChatEventForumTopicPinned,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ChatEventMessageEdited value)? chatEventMessageEdited,
    TResult Function(ChatEventMessageDeleted value)? chatEventMessageDeleted,
    TResult Function(ChatEventMessagePinned value)? chatEventMessagePinned,
    TResult Function(ChatEventMessageUnpinned value)? chatEventMessageUnpinned,
    TResult Function(ChatEventPollStopped value)? chatEventPollStopped,
    TResult Function(ChatEventMemberJoined value)? chatEventMemberJoined,
    TResult Function(ChatEventMemberJoinedByInviteLink value)?
    chatEventMemberJoinedByInviteLink,
    TResult Function(ChatEventMemberJoinedByRequest value)?
    chatEventMemberJoinedByRequest,
    TResult Function(ChatEventMemberInvited value)? chatEventMemberInvited,
    TResult Function(ChatEventMemberLeft value)? chatEventMemberLeft,
    TResult Function(ChatEventMemberPromoted value)? chatEventMemberPromoted,
    TResult Function(ChatEventMemberRestricted value)?
    chatEventMemberRestricted,
    TResult Function(ChatEventMemberSubscriptionExtended value)?
    chatEventMemberSubscriptionExtended,
    TResult Function(ChatEventAvailableReactionsChanged value)?
    chatEventAvailableReactionsChanged,
    TResult Function(ChatEventBackgroundChanged value)?
    chatEventBackgroundChanged,
    TResult Function(ChatEventDescriptionChanged value)?
    chatEventDescriptionChanged,
    TResult Function(ChatEventEmojiStatusChanged value)?
    chatEventEmojiStatusChanged,
    TResult Function(ChatEventLinkedChatChanged value)?
    chatEventLinkedChatChanged,
    TResult Function(ChatEventLocationChanged value)? chatEventLocationChanged,
    TResult Function(ChatEventMessageAutoDeleteTimeChanged value)?
    chatEventMessageAutoDeleteTimeChanged,
    TResult Function(ChatEventPermissionsChanged value)?
    chatEventPermissionsChanged,
    TResult Function(ChatEventPhotoChanged value)? chatEventPhotoChanged,
    TResult Function(ChatEventSlowModeDelayChanged value)?
    chatEventSlowModeDelayChanged,
    TResult Function(ChatEventStickerSetChanged value)?
    chatEventStickerSetChanged,
    TResult Function(ChatEventCustomEmojiStickerSetChanged value)?
    chatEventCustomEmojiStickerSetChanged,
    TResult Function(ChatEventTitleChanged value)? chatEventTitleChanged,
    TResult Function(ChatEventUsernameChanged value)? chatEventUsernameChanged,
    TResult Function(ChatEventActiveUsernamesChanged value)?
    chatEventActiveUsernamesChanged,
    TResult Function(ChatEventAccentColorChanged value)?
    chatEventAccentColorChanged,
    TResult Function(ChatEventProfileAccentColorChanged value)?
    chatEventProfileAccentColorChanged,
    TResult Function(ChatEventHasProtectedContentToggled value)?
    chatEventHasProtectedContentToggled,
    TResult Function(ChatEventInvitesToggled value)? chatEventInvitesToggled,
    TResult Function(ChatEventIsAllHistoryAvailableToggled value)?
    chatEventIsAllHistoryAvailableToggled,
    TResult Function(ChatEventHasAggressiveAntiSpamEnabledToggled value)?
    chatEventHasAggressiveAntiSpamEnabledToggled,
    TResult Function(ChatEventSignMessagesToggled value)?
    chatEventSignMessagesToggled,
    TResult Function(ChatEventShowMessageSenderToggled value)?
    chatEventShowMessageSenderToggled,
    TResult Function(ChatEventAutomaticTranslationToggled value)?
    chatEventAutomaticTranslationToggled,
    TResult Function(ChatEventInviteLinkEdited value)?
    chatEventInviteLinkEdited,
    TResult Function(ChatEventInviteLinkRevoked value)?
    chatEventInviteLinkRevoked,
    TResult Function(ChatEventInviteLinkDeleted value)?
    chatEventInviteLinkDeleted,
    TResult Function(ChatEventVideoChatCreated value)?
    chatEventVideoChatCreated,
    TResult Function(ChatEventVideoChatEnded value)? chatEventVideoChatEnded,
    TResult Function(ChatEventVideoChatMuteNewParticipantsToggled value)?
    chatEventVideoChatMuteNewParticipantsToggled,
    TResult Function(ChatEventVideoChatParticipantIsMutedToggled value)?
    chatEventVideoChatParticipantIsMutedToggled,
    TResult Function(ChatEventVideoChatParticipantVolumeLevelChanged value)?
    chatEventVideoChatParticipantVolumeLevelChanged,
    TResult Function(ChatEventIsForumToggled value)? chatEventIsForumToggled,
    TResult Function(ChatEventForumTopicCreated value)?
    chatEventForumTopicCreated,
    TResult Function(ChatEventForumTopicEdited value)?
    chatEventForumTopicEdited,
    TResult Function(ChatEventForumTopicToggleIsClosed value)?
    chatEventForumTopicToggleIsClosed,
    TResult Function(ChatEventForumTopicToggleIsHidden value)?
    chatEventForumTopicToggleIsHidden,
    TResult Function(ChatEventForumTopicDeleted value)?
    chatEventForumTopicDeleted,
    TResult Function(ChatEventForumTopicPinned value)?
    chatEventForumTopicPinned,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ChatEventMessageEdited.constructor:
        if (chatEventMessageEdited != null) {
          return chatEventMessageEdited.call(this as ChatEventMessageEdited);
        }
        break;
      case ChatEventMessageDeleted.constructor:
        if (chatEventMessageDeleted != null) {
          return chatEventMessageDeleted.call(this as ChatEventMessageDeleted);
        }
        break;
      case ChatEventMessagePinned.constructor:
        if (chatEventMessagePinned != null) {
          return chatEventMessagePinned.call(this as ChatEventMessagePinned);
        }
        break;
      case ChatEventMessageUnpinned.constructor:
        if (chatEventMessageUnpinned != null) {
          return chatEventMessageUnpinned.call(
            this as ChatEventMessageUnpinned,
          );
        }
        break;
      case ChatEventPollStopped.constructor:
        if (chatEventPollStopped != null) {
          return chatEventPollStopped.call(this as ChatEventPollStopped);
        }
        break;
      case ChatEventMemberJoined.constructor:
        if (chatEventMemberJoined != null) {
          return chatEventMemberJoined.call(this as ChatEventMemberJoined);
        }
        break;
      case ChatEventMemberJoinedByInviteLink.constructor:
        if (chatEventMemberJoinedByInviteLink != null) {
          return chatEventMemberJoinedByInviteLink.call(
            this as ChatEventMemberJoinedByInviteLink,
          );
        }
        break;
      case ChatEventMemberJoinedByRequest.constructor:
        if (chatEventMemberJoinedByRequest != null) {
          return chatEventMemberJoinedByRequest.call(
            this as ChatEventMemberJoinedByRequest,
          );
        }
        break;
      case ChatEventMemberInvited.constructor:
        if (chatEventMemberInvited != null) {
          return chatEventMemberInvited.call(this as ChatEventMemberInvited);
        }
        break;
      case ChatEventMemberLeft.constructor:
        if (chatEventMemberLeft != null) {
          return chatEventMemberLeft.call(this as ChatEventMemberLeft);
        }
        break;
      case ChatEventMemberPromoted.constructor:
        if (chatEventMemberPromoted != null) {
          return chatEventMemberPromoted.call(this as ChatEventMemberPromoted);
        }
        break;
      case ChatEventMemberRestricted.constructor:
        if (chatEventMemberRestricted != null) {
          return chatEventMemberRestricted.call(
            this as ChatEventMemberRestricted,
          );
        }
        break;
      case ChatEventMemberSubscriptionExtended.constructor:
        if (chatEventMemberSubscriptionExtended != null) {
          return chatEventMemberSubscriptionExtended.call(
            this as ChatEventMemberSubscriptionExtended,
          );
        }
        break;
      case ChatEventAvailableReactionsChanged.constructor:
        if (chatEventAvailableReactionsChanged != null) {
          return chatEventAvailableReactionsChanged.call(
            this as ChatEventAvailableReactionsChanged,
          );
        }
        break;
      case ChatEventBackgroundChanged.constructor:
        if (chatEventBackgroundChanged != null) {
          return chatEventBackgroundChanged.call(
            this as ChatEventBackgroundChanged,
          );
        }
        break;
      case ChatEventDescriptionChanged.constructor:
        if (chatEventDescriptionChanged != null) {
          return chatEventDescriptionChanged.call(
            this as ChatEventDescriptionChanged,
          );
        }
        break;
      case ChatEventEmojiStatusChanged.constructor:
        if (chatEventEmojiStatusChanged != null) {
          return chatEventEmojiStatusChanged.call(
            this as ChatEventEmojiStatusChanged,
          );
        }
        break;
      case ChatEventLinkedChatChanged.constructor:
        if (chatEventLinkedChatChanged != null) {
          return chatEventLinkedChatChanged.call(
            this as ChatEventLinkedChatChanged,
          );
        }
        break;
      case ChatEventLocationChanged.constructor:
        if (chatEventLocationChanged != null) {
          return chatEventLocationChanged.call(
            this as ChatEventLocationChanged,
          );
        }
        break;
      case ChatEventMessageAutoDeleteTimeChanged.constructor:
        if (chatEventMessageAutoDeleteTimeChanged != null) {
          return chatEventMessageAutoDeleteTimeChanged.call(
            this as ChatEventMessageAutoDeleteTimeChanged,
          );
        }
        break;
      case ChatEventPermissionsChanged.constructor:
        if (chatEventPermissionsChanged != null) {
          return chatEventPermissionsChanged.call(
            this as ChatEventPermissionsChanged,
          );
        }
        break;
      case ChatEventPhotoChanged.constructor:
        if (chatEventPhotoChanged != null) {
          return chatEventPhotoChanged.call(this as ChatEventPhotoChanged);
        }
        break;
      case ChatEventSlowModeDelayChanged.constructor:
        if (chatEventSlowModeDelayChanged != null) {
          return chatEventSlowModeDelayChanged.call(
            this as ChatEventSlowModeDelayChanged,
          );
        }
        break;
      case ChatEventStickerSetChanged.constructor:
        if (chatEventStickerSetChanged != null) {
          return chatEventStickerSetChanged.call(
            this as ChatEventStickerSetChanged,
          );
        }
        break;
      case ChatEventCustomEmojiStickerSetChanged.constructor:
        if (chatEventCustomEmojiStickerSetChanged != null) {
          return chatEventCustomEmojiStickerSetChanged.call(
            this as ChatEventCustomEmojiStickerSetChanged,
          );
        }
        break;
      case ChatEventTitleChanged.constructor:
        if (chatEventTitleChanged != null) {
          return chatEventTitleChanged.call(this as ChatEventTitleChanged);
        }
        break;
      case ChatEventUsernameChanged.constructor:
        if (chatEventUsernameChanged != null) {
          return chatEventUsernameChanged.call(
            this as ChatEventUsernameChanged,
          );
        }
        break;
      case ChatEventActiveUsernamesChanged.constructor:
        if (chatEventActiveUsernamesChanged != null) {
          return chatEventActiveUsernamesChanged.call(
            this as ChatEventActiveUsernamesChanged,
          );
        }
        break;
      case ChatEventAccentColorChanged.constructor:
        if (chatEventAccentColorChanged != null) {
          return chatEventAccentColorChanged.call(
            this as ChatEventAccentColorChanged,
          );
        }
        break;
      case ChatEventProfileAccentColorChanged.constructor:
        if (chatEventProfileAccentColorChanged != null) {
          return chatEventProfileAccentColorChanged.call(
            this as ChatEventProfileAccentColorChanged,
          );
        }
        break;
      case ChatEventHasProtectedContentToggled.constructor:
        if (chatEventHasProtectedContentToggled != null) {
          return chatEventHasProtectedContentToggled.call(
            this as ChatEventHasProtectedContentToggled,
          );
        }
        break;
      case ChatEventInvitesToggled.constructor:
        if (chatEventInvitesToggled != null) {
          return chatEventInvitesToggled.call(this as ChatEventInvitesToggled);
        }
        break;
      case ChatEventIsAllHistoryAvailableToggled.constructor:
        if (chatEventIsAllHistoryAvailableToggled != null) {
          return chatEventIsAllHistoryAvailableToggled.call(
            this as ChatEventIsAllHistoryAvailableToggled,
          );
        }
        break;
      case ChatEventHasAggressiveAntiSpamEnabledToggled.constructor:
        if (chatEventHasAggressiveAntiSpamEnabledToggled != null) {
          return chatEventHasAggressiveAntiSpamEnabledToggled.call(
            this as ChatEventHasAggressiveAntiSpamEnabledToggled,
          );
        }
        break;
      case ChatEventSignMessagesToggled.constructor:
        if (chatEventSignMessagesToggled != null) {
          return chatEventSignMessagesToggled.call(
            this as ChatEventSignMessagesToggled,
          );
        }
        break;
      case ChatEventShowMessageSenderToggled.constructor:
        if (chatEventShowMessageSenderToggled != null) {
          return chatEventShowMessageSenderToggled.call(
            this as ChatEventShowMessageSenderToggled,
          );
        }
        break;
      case ChatEventAutomaticTranslationToggled.constructor:
        if (chatEventAutomaticTranslationToggled != null) {
          return chatEventAutomaticTranslationToggled.call(
            this as ChatEventAutomaticTranslationToggled,
          );
        }
        break;
      case ChatEventInviteLinkEdited.constructor:
        if (chatEventInviteLinkEdited != null) {
          return chatEventInviteLinkEdited.call(
            this as ChatEventInviteLinkEdited,
          );
        }
        break;
      case ChatEventInviteLinkRevoked.constructor:
        if (chatEventInviteLinkRevoked != null) {
          return chatEventInviteLinkRevoked.call(
            this as ChatEventInviteLinkRevoked,
          );
        }
        break;
      case ChatEventInviteLinkDeleted.constructor:
        if (chatEventInviteLinkDeleted != null) {
          return chatEventInviteLinkDeleted.call(
            this as ChatEventInviteLinkDeleted,
          );
        }
        break;
      case ChatEventVideoChatCreated.constructor:
        if (chatEventVideoChatCreated != null) {
          return chatEventVideoChatCreated.call(
            this as ChatEventVideoChatCreated,
          );
        }
        break;
      case ChatEventVideoChatEnded.constructor:
        if (chatEventVideoChatEnded != null) {
          return chatEventVideoChatEnded.call(this as ChatEventVideoChatEnded);
        }
        break;
      case ChatEventVideoChatMuteNewParticipantsToggled.constructor:
        if (chatEventVideoChatMuteNewParticipantsToggled != null) {
          return chatEventVideoChatMuteNewParticipantsToggled.call(
            this as ChatEventVideoChatMuteNewParticipantsToggled,
          );
        }
        break;
      case ChatEventVideoChatParticipantIsMutedToggled.constructor:
        if (chatEventVideoChatParticipantIsMutedToggled != null) {
          return chatEventVideoChatParticipantIsMutedToggled.call(
            this as ChatEventVideoChatParticipantIsMutedToggled,
          );
        }
        break;
      case ChatEventVideoChatParticipantVolumeLevelChanged.constructor:
        if (chatEventVideoChatParticipantVolumeLevelChanged != null) {
          return chatEventVideoChatParticipantVolumeLevelChanged.call(
            this as ChatEventVideoChatParticipantVolumeLevelChanged,
          );
        }
        break;
      case ChatEventIsForumToggled.constructor:
        if (chatEventIsForumToggled != null) {
          return chatEventIsForumToggled.call(this as ChatEventIsForumToggled);
        }
        break;
      case ChatEventForumTopicCreated.constructor:
        if (chatEventForumTopicCreated != null) {
          return chatEventForumTopicCreated.call(
            this as ChatEventForumTopicCreated,
          );
        }
        break;
      case ChatEventForumTopicEdited.constructor:
        if (chatEventForumTopicEdited != null) {
          return chatEventForumTopicEdited.call(
            this as ChatEventForumTopicEdited,
          );
        }
        break;
      case ChatEventForumTopicToggleIsClosed.constructor:
        if (chatEventForumTopicToggleIsClosed != null) {
          return chatEventForumTopicToggleIsClosed.call(
            this as ChatEventForumTopicToggleIsClosed,
          );
        }
        break;
      case ChatEventForumTopicToggleIsHidden.constructor:
        if (chatEventForumTopicToggleIsHidden != null) {
          return chatEventForumTopicToggleIsHidden.call(
            this as ChatEventForumTopicToggleIsHidden,
          );
        }
        break;
      case ChatEventForumTopicDeleted.constructor:
        if (chatEventForumTopicDeleted != null) {
          return chatEventForumTopicDeleted.call(
            this as ChatEventForumTopicDeleted,
          );
        }
        break;
      case ChatEventForumTopicPinned.constructor:
        if (chatEventForumTopicPinned != null) {
          return chatEventForumTopicPinned.call(
            this as ChatEventForumTopicPinned,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension ChatEventMessageEditedExtensions on ChatEventMessageEdited {
  ChatEventMessageEdited copyWith({Message? oldMessage, Message? newMessage}) =>
      ChatEventMessageEdited(
        oldMessage: oldMessage ?? this.oldMessage,
        newMessage: newMessage ?? this.newMessage,
      );
}

extension ChatEventMessageDeletedExtensions on ChatEventMessageDeleted {
  ChatEventMessageDeleted copyWith({
    Message? message,
    bool? canReportAntiSpamFalsePositive,
  }) => ChatEventMessageDeleted(
    message: message ?? this.message,
    canReportAntiSpamFalsePositive:
        canReportAntiSpamFalsePositive ?? this.canReportAntiSpamFalsePositive,
  );
}

extension ChatEventMessagePinnedExtensions on ChatEventMessagePinned {
  ChatEventMessagePinned copyWith({Message? message}) =>
      ChatEventMessagePinned(message: message ?? this.message);
}

extension ChatEventMessageUnpinnedExtensions on ChatEventMessageUnpinned {
  ChatEventMessageUnpinned copyWith({Message? message}) =>
      ChatEventMessageUnpinned(message: message ?? this.message);
}

extension ChatEventPollStoppedExtensions on ChatEventPollStopped {
  ChatEventPollStopped copyWith({Message? message}) =>
      ChatEventPollStopped(message: message ?? this.message);
}

extension ChatEventMemberJoinedByInviteLinkExtensions
    on ChatEventMemberJoinedByInviteLink {
  ChatEventMemberJoinedByInviteLink copyWith({
    ChatInviteLink? inviteLink,
    bool? viaChatFolderInviteLink,
  }) => ChatEventMemberJoinedByInviteLink(
    inviteLink: inviteLink ?? this.inviteLink,
    viaChatFolderInviteLink:
        viaChatFolderInviteLink ?? this.viaChatFolderInviteLink,
  );
}

extension ChatEventMemberJoinedByRequestExtensions
    on ChatEventMemberJoinedByRequest {
  ChatEventMemberJoinedByRequest copyWith({
    int? approverUserId,
    ChatInviteLink? inviteLink,
  }) => ChatEventMemberJoinedByRequest(
    approverUserId: approverUserId ?? this.approverUserId,
    inviteLink: inviteLink ?? this.inviteLink,
  );
}

extension ChatEventMemberInvitedExtensions on ChatEventMemberInvited {
  ChatEventMemberInvited copyWith({int? userId, ChatMemberStatus? status}) =>
      ChatEventMemberInvited(
        userId: userId ?? this.userId,
        status: status ?? this.status,
      );
}

extension ChatEventMemberPromotedExtensions on ChatEventMemberPromoted {
  ChatEventMemberPromoted copyWith({
    int? userId,
    ChatMemberStatus? oldStatus,
    ChatMemberStatus? newStatus,
  }) => ChatEventMemberPromoted(
    userId: userId ?? this.userId,
    oldStatus: oldStatus ?? this.oldStatus,
    newStatus: newStatus ?? this.newStatus,
  );
}

extension ChatEventMemberRestrictedExtensions on ChatEventMemberRestricted {
  ChatEventMemberRestricted copyWith({
    MessageSender? memberId,
    ChatMemberStatus? oldStatus,
    ChatMemberStatus? newStatus,
  }) => ChatEventMemberRestricted(
    memberId: memberId ?? this.memberId,
    oldStatus: oldStatus ?? this.oldStatus,
    newStatus: newStatus ?? this.newStatus,
  );
}

extension ChatEventMemberSubscriptionExtendedExtensions
    on ChatEventMemberSubscriptionExtended {
  ChatEventMemberSubscriptionExtended copyWith({
    int? userId,
    ChatMemberStatus? oldStatus,
    ChatMemberStatus? newStatus,
  }) => ChatEventMemberSubscriptionExtended(
    userId: userId ?? this.userId,
    oldStatus: oldStatus ?? this.oldStatus,
    newStatus: newStatus ?? this.newStatus,
  );
}

extension ChatEventAvailableReactionsChangedExtensions
    on ChatEventAvailableReactionsChanged {
  ChatEventAvailableReactionsChanged copyWith({
    ChatAvailableReactions? oldAvailableReactions,
    ChatAvailableReactions? newAvailableReactions,
  }) => ChatEventAvailableReactionsChanged(
    oldAvailableReactions: oldAvailableReactions ?? this.oldAvailableReactions,
    newAvailableReactions: newAvailableReactions ?? this.newAvailableReactions,
  );
}

extension ChatEventBackgroundChangedExtensions on ChatEventBackgroundChanged {
  ChatEventBackgroundChanged copyWith({
    ChatBackground? oldBackground,
    ChatBackground? newBackground,
  }) => ChatEventBackgroundChanged(
    oldBackground: oldBackground ?? this.oldBackground,
    newBackground: newBackground ?? this.newBackground,
  );
}

extension ChatEventDescriptionChangedExtensions on ChatEventDescriptionChanged {
  ChatEventDescriptionChanged copyWith({
    String? oldDescription,
    String? newDescription,
  }) => ChatEventDescriptionChanged(
    oldDescription: oldDescription ?? this.oldDescription,
    newDescription: newDescription ?? this.newDescription,
  );
}

extension ChatEventEmojiStatusChangedExtensions on ChatEventEmojiStatusChanged {
  ChatEventEmojiStatusChanged copyWith({
    EmojiStatus? oldEmojiStatus,
    EmojiStatus? newEmojiStatus,
  }) => ChatEventEmojiStatusChanged(
    oldEmojiStatus: oldEmojiStatus ?? this.oldEmojiStatus,
    newEmojiStatus: newEmojiStatus ?? this.newEmojiStatus,
  );
}

extension ChatEventLinkedChatChangedExtensions on ChatEventLinkedChatChanged {
  ChatEventLinkedChatChanged copyWith({
    int? oldLinkedChatId,
    int? newLinkedChatId,
  }) => ChatEventLinkedChatChanged(
    oldLinkedChatId: oldLinkedChatId ?? this.oldLinkedChatId,
    newLinkedChatId: newLinkedChatId ?? this.newLinkedChatId,
  );
}

extension ChatEventLocationChangedExtensions on ChatEventLocationChanged {
  ChatEventLocationChanged copyWith({
    ChatLocation? oldLocation,
    ChatLocation? newLocation,
  }) => ChatEventLocationChanged(
    oldLocation: oldLocation ?? this.oldLocation,
    newLocation: newLocation ?? this.newLocation,
  );
}

extension ChatEventMessageAutoDeleteTimeChangedExtensions
    on ChatEventMessageAutoDeleteTimeChanged {
  ChatEventMessageAutoDeleteTimeChanged copyWith({
    int? oldMessageAutoDeleteTime,
    int? newMessageAutoDeleteTime,
  }) => ChatEventMessageAutoDeleteTimeChanged(
    oldMessageAutoDeleteTime:
        oldMessageAutoDeleteTime ?? this.oldMessageAutoDeleteTime,
    newMessageAutoDeleteTime:
        newMessageAutoDeleteTime ?? this.newMessageAutoDeleteTime,
  );
}

extension ChatEventPermissionsChangedExtensions on ChatEventPermissionsChanged {
  ChatEventPermissionsChanged copyWith({
    ChatPermissions? oldPermissions,
    ChatPermissions? newPermissions,
  }) => ChatEventPermissionsChanged(
    oldPermissions: oldPermissions ?? this.oldPermissions,
    newPermissions: newPermissions ?? this.newPermissions,
  );
}

extension ChatEventPhotoChangedExtensions on ChatEventPhotoChanged {
  ChatEventPhotoChanged copyWith({ChatPhoto? oldPhoto, ChatPhoto? newPhoto}) =>
      ChatEventPhotoChanged(
        oldPhoto: oldPhoto ?? this.oldPhoto,
        newPhoto: newPhoto ?? this.newPhoto,
      );
}

extension ChatEventSlowModeDelayChangedExtensions
    on ChatEventSlowModeDelayChanged {
  ChatEventSlowModeDelayChanged copyWith({
    int? oldSlowModeDelay,
    int? newSlowModeDelay,
  }) => ChatEventSlowModeDelayChanged(
    oldSlowModeDelay: oldSlowModeDelay ?? this.oldSlowModeDelay,
    newSlowModeDelay: newSlowModeDelay ?? this.newSlowModeDelay,
  );
}

extension ChatEventStickerSetChangedExtensions on ChatEventStickerSetChanged {
  ChatEventStickerSetChanged copyWith({
    int? oldStickerSetId,
    int? newStickerSetId,
  }) => ChatEventStickerSetChanged(
    oldStickerSetId: oldStickerSetId ?? this.oldStickerSetId,
    newStickerSetId: newStickerSetId ?? this.newStickerSetId,
  );
}

extension ChatEventCustomEmojiStickerSetChangedExtensions
    on ChatEventCustomEmojiStickerSetChanged {
  ChatEventCustomEmojiStickerSetChanged copyWith({
    int? oldStickerSetId,
    int? newStickerSetId,
  }) => ChatEventCustomEmojiStickerSetChanged(
    oldStickerSetId: oldStickerSetId ?? this.oldStickerSetId,
    newStickerSetId: newStickerSetId ?? this.newStickerSetId,
  );
}

extension ChatEventTitleChangedExtensions on ChatEventTitleChanged {
  ChatEventTitleChanged copyWith({String? oldTitle, String? newTitle}) =>
      ChatEventTitleChanged(
        oldTitle: oldTitle ?? this.oldTitle,
        newTitle: newTitle ?? this.newTitle,
      );
}

extension ChatEventUsernameChangedExtensions on ChatEventUsernameChanged {
  ChatEventUsernameChanged copyWith({
    String? oldUsername,
    String? newUsername,
  }) => ChatEventUsernameChanged(
    oldUsername: oldUsername ?? this.oldUsername,
    newUsername: newUsername ?? this.newUsername,
  );
}

extension ChatEventActiveUsernamesChangedExtensions
    on ChatEventActiveUsernamesChanged {
  ChatEventActiveUsernamesChanged copyWith({
    List<String>? oldUsernames,
    List<String>? newUsernames,
  }) => ChatEventActiveUsernamesChanged(
    oldUsernames: oldUsernames ?? this.oldUsernames,
    newUsernames: newUsernames ?? this.newUsernames,
  );
}

extension ChatEventAccentColorChangedExtensions on ChatEventAccentColorChanged {
  ChatEventAccentColorChanged copyWith({
    int? oldAccentColorId,
    int? oldBackgroundCustomEmojiId,
    int? newAccentColorId,
    int? newBackgroundCustomEmojiId,
  }) => ChatEventAccentColorChanged(
    oldAccentColorId: oldAccentColorId ?? this.oldAccentColorId,
    oldBackgroundCustomEmojiId:
        oldBackgroundCustomEmojiId ?? this.oldBackgroundCustomEmojiId,
    newAccentColorId: newAccentColorId ?? this.newAccentColorId,
    newBackgroundCustomEmojiId:
        newBackgroundCustomEmojiId ?? this.newBackgroundCustomEmojiId,
  );
}

extension ChatEventProfileAccentColorChangedExtensions
    on ChatEventProfileAccentColorChanged {
  ChatEventProfileAccentColorChanged copyWith({
    int? oldProfileAccentColorId,
    int? oldProfileBackgroundCustomEmojiId,
    int? newProfileAccentColorId,
    int? newProfileBackgroundCustomEmojiId,
  }) => ChatEventProfileAccentColorChanged(
    oldProfileAccentColorId:
        oldProfileAccentColorId ?? this.oldProfileAccentColorId,
    oldProfileBackgroundCustomEmojiId:
        oldProfileBackgroundCustomEmojiId ??
        this.oldProfileBackgroundCustomEmojiId,
    newProfileAccentColorId:
        newProfileAccentColorId ?? this.newProfileAccentColorId,
    newProfileBackgroundCustomEmojiId:
        newProfileBackgroundCustomEmojiId ??
        this.newProfileBackgroundCustomEmojiId,
  );
}

extension ChatEventHasProtectedContentToggledExtensions
    on ChatEventHasProtectedContentToggled {
  ChatEventHasProtectedContentToggled copyWith({bool? hasProtectedContent}) =>
      ChatEventHasProtectedContentToggled(
        hasProtectedContent: hasProtectedContent ?? this.hasProtectedContent,
      );
}

extension ChatEventInvitesToggledExtensions on ChatEventInvitesToggled {
  ChatEventInvitesToggled copyWith({bool? canInviteUsers}) =>
      ChatEventInvitesToggled(
        canInviteUsers: canInviteUsers ?? this.canInviteUsers,
      );
}

extension ChatEventIsAllHistoryAvailableToggledExtensions
    on ChatEventIsAllHistoryAvailableToggled {
  ChatEventIsAllHistoryAvailableToggled copyWith({
    bool? isAllHistoryAvailable,
  }) => ChatEventIsAllHistoryAvailableToggled(
    isAllHistoryAvailable: isAllHistoryAvailable ?? this.isAllHistoryAvailable,
  );
}

extension ChatEventHasAggressiveAntiSpamEnabledToggledExtensions
    on ChatEventHasAggressiveAntiSpamEnabledToggled {
  ChatEventHasAggressiveAntiSpamEnabledToggled copyWith({
    bool? hasAggressiveAntiSpamEnabled,
  }) => ChatEventHasAggressiveAntiSpamEnabledToggled(
    hasAggressiveAntiSpamEnabled:
        hasAggressiveAntiSpamEnabled ?? this.hasAggressiveAntiSpamEnabled,
  );
}

extension ChatEventSignMessagesToggledExtensions
    on ChatEventSignMessagesToggled {
  ChatEventSignMessagesToggled copyWith({bool? signMessages}) =>
      ChatEventSignMessagesToggled(
        signMessages: signMessages ?? this.signMessages,
      );
}

extension ChatEventShowMessageSenderToggledExtensions
    on ChatEventShowMessageSenderToggled {
  ChatEventShowMessageSenderToggled copyWith({bool? showMessageSender}) =>
      ChatEventShowMessageSenderToggled(
        showMessageSender: showMessageSender ?? this.showMessageSender,
      );
}

extension ChatEventAutomaticTranslationToggledExtensions
    on ChatEventAutomaticTranslationToggled {
  ChatEventAutomaticTranslationToggled copyWith({
    bool? hasAutomaticTranslation,
  }) => ChatEventAutomaticTranslationToggled(
    hasAutomaticTranslation:
        hasAutomaticTranslation ?? this.hasAutomaticTranslation,
  );
}

extension ChatEventInviteLinkEditedExtensions on ChatEventInviteLinkEdited {
  ChatEventInviteLinkEdited copyWith({
    ChatInviteLink? oldInviteLink,
    ChatInviteLink? newInviteLink,
  }) => ChatEventInviteLinkEdited(
    oldInviteLink: oldInviteLink ?? this.oldInviteLink,
    newInviteLink: newInviteLink ?? this.newInviteLink,
  );
}

extension ChatEventInviteLinkRevokedExtensions on ChatEventInviteLinkRevoked {
  ChatEventInviteLinkRevoked copyWith({ChatInviteLink? inviteLink}) =>
      ChatEventInviteLinkRevoked(inviteLink: inviteLink ?? this.inviteLink);
}

extension ChatEventInviteLinkDeletedExtensions on ChatEventInviteLinkDeleted {
  ChatEventInviteLinkDeleted copyWith({ChatInviteLink? inviteLink}) =>
      ChatEventInviteLinkDeleted(inviteLink: inviteLink ?? this.inviteLink);
}

extension ChatEventVideoChatCreatedExtensions on ChatEventVideoChatCreated {
  ChatEventVideoChatCreated copyWith({int? groupCallId}) =>
      ChatEventVideoChatCreated(groupCallId: groupCallId ?? this.groupCallId);
}

extension ChatEventVideoChatEndedExtensions on ChatEventVideoChatEnded {
  ChatEventVideoChatEnded copyWith({int? groupCallId}) =>
      ChatEventVideoChatEnded(groupCallId: groupCallId ?? this.groupCallId);
}

extension ChatEventVideoChatMuteNewParticipantsToggledExtensions
    on ChatEventVideoChatMuteNewParticipantsToggled {
  ChatEventVideoChatMuteNewParticipantsToggled copyWith({
    bool? muteNewParticipants,
  }) => ChatEventVideoChatMuteNewParticipantsToggled(
    muteNewParticipants: muteNewParticipants ?? this.muteNewParticipants,
  );
}

extension ChatEventVideoChatParticipantIsMutedToggledExtensions
    on ChatEventVideoChatParticipantIsMutedToggled {
  ChatEventVideoChatParticipantIsMutedToggled copyWith({
    MessageSender? participantId,
    bool? isMuted,
  }) => ChatEventVideoChatParticipantIsMutedToggled(
    participantId: participantId ?? this.participantId,
    isMuted: isMuted ?? this.isMuted,
  );
}

extension ChatEventVideoChatParticipantVolumeLevelChangedExtensions
    on ChatEventVideoChatParticipantVolumeLevelChanged {
  ChatEventVideoChatParticipantVolumeLevelChanged copyWith({
    MessageSender? participantId,
    int? volumeLevel,
  }) => ChatEventVideoChatParticipantVolumeLevelChanged(
    participantId: participantId ?? this.participantId,
    volumeLevel: volumeLevel ?? this.volumeLevel,
  );
}

extension ChatEventIsForumToggledExtensions on ChatEventIsForumToggled {
  ChatEventIsForumToggled copyWith({bool? isForum}) =>
      ChatEventIsForumToggled(isForum: isForum ?? this.isForum);
}

extension ChatEventForumTopicCreatedExtensions on ChatEventForumTopicCreated {
  ChatEventForumTopicCreated copyWith({ForumTopicInfo? topicInfo}) =>
      ChatEventForumTopicCreated(topicInfo: topicInfo ?? this.topicInfo);
}

extension ChatEventForumTopicEditedExtensions on ChatEventForumTopicEdited {
  ChatEventForumTopicEdited copyWith({
    ForumTopicInfo? oldTopicInfo,
    ForumTopicInfo? newTopicInfo,
  }) => ChatEventForumTopicEdited(
    oldTopicInfo: oldTopicInfo ?? this.oldTopicInfo,
    newTopicInfo: newTopicInfo ?? this.newTopicInfo,
  );
}

extension ChatEventForumTopicToggleIsClosedExtensions
    on ChatEventForumTopicToggleIsClosed {
  ChatEventForumTopicToggleIsClosed copyWith({ForumTopicInfo? topicInfo}) =>
      ChatEventForumTopicToggleIsClosed(topicInfo: topicInfo ?? this.topicInfo);
}

extension ChatEventForumTopicToggleIsHiddenExtensions
    on ChatEventForumTopicToggleIsHidden {
  ChatEventForumTopicToggleIsHidden copyWith({ForumTopicInfo? topicInfo}) =>
      ChatEventForumTopicToggleIsHidden(topicInfo: topicInfo ?? this.topicInfo);
}

extension ChatEventForumTopicDeletedExtensions on ChatEventForumTopicDeleted {
  ChatEventForumTopicDeleted copyWith({ForumTopicInfo? topicInfo}) =>
      ChatEventForumTopicDeleted(topicInfo: topicInfo ?? this.topicInfo);
}

extension ChatEventForumTopicPinnedExtensions on ChatEventForumTopicPinned {
  ChatEventForumTopicPinned copyWith({
    ForumTopicInfo? oldTopicInfo,
    ForumTopicInfo? newTopicInfo,
  }) => ChatEventForumTopicPinned(
    oldTopicInfo: oldTopicInfo ?? this.oldTopicInfo,
    newTopicInfo: newTopicInfo ?? this.newTopicInfo,
  );
}

extension ChatEventExtensions on ChatEvent {
  ChatEvent copyWith({
    int? id,
    int? date,
    MessageSender? memberId,
    ChatEventAction? action,
  }) => ChatEvent(
    id: id ?? this.id,
    date: date ?? this.date,
    memberId: memberId ?? this.memberId,
    action: action ?? this.action,
  );
}

extension ChatEventsExtensions on ChatEvents {
  ChatEvents copyWith({List<ChatEvent>? events}) =>
      ChatEvents(events: events ?? this.events);
}

extension ChatEventLogFiltersExtensions on ChatEventLogFilters {
  ChatEventLogFilters copyWith({
    bool? messageEdits,
    bool? messageDeletions,
    bool? messagePins,
    bool? memberJoins,
    bool? memberLeaves,
    bool? memberInvites,
    bool? memberPromotions,
    bool? memberRestrictions,
    bool? infoChanges,
    bool? settingChanges,
    bool? inviteLinkChanges,
    bool? videoChatChanges,
    bool? forumChanges,
    bool? subscriptionExtensions,
  }) => ChatEventLogFilters(
    messageEdits: messageEdits ?? this.messageEdits,
    messageDeletions: messageDeletions ?? this.messageDeletions,
    messagePins: messagePins ?? this.messagePins,
    memberJoins: memberJoins ?? this.memberJoins,
    memberLeaves: memberLeaves ?? this.memberLeaves,
    memberInvites: memberInvites ?? this.memberInvites,
    memberPromotions: memberPromotions ?? this.memberPromotions,
    memberRestrictions: memberRestrictions ?? this.memberRestrictions,
    infoChanges: infoChanges ?? this.infoChanges,
    settingChanges: settingChanges ?? this.settingChanges,
    inviteLinkChanges: inviteLinkChanges ?? this.inviteLinkChanges,
    videoChatChanges: videoChatChanges ?? this.videoChatChanges,
    forumChanges: forumChanges ?? this.forumChanges,
    subscriptionExtensions:
        subscriptionExtensions ?? this.subscriptionExtensions,
  );
}

extension LanguagePackStringValueExtensions on LanguagePackStringValue {
  TResult map<TResult extends Object?>({
    required TResult Function(LanguagePackStringValueOrdinary value) ordinary,
    required TResult Function(LanguagePackStringValuePluralized value)
    pluralized,
    required TResult Function(LanguagePackStringValueDeleted value) deleted,
  }) {
    switch (getConstructor()) {
      case LanguagePackStringValueOrdinary.constructor:
        return ordinary.call(this as LanguagePackStringValueOrdinary);
      case LanguagePackStringValuePluralized.constructor:
        return pluralized.call(this as LanguagePackStringValuePluralized);
      case LanguagePackStringValueDeleted.constructor:
        return deleted.call(this as LanguagePackStringValueDeleted);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(LanguagePackStringValueOrdinary value)? ordinary,
    TResult Function(LanguagePackStringValuePluralized value)? pluralized,
    TResult Function(LanguagePackStringValueDeleted value)? deleted,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case LanguagePackStringValueOrdinary.constructor:
        if (ordinary != null) {
          return ordinary.call(this as LanguagePackStringValueOrdinary);
        }
        break;
      case LanguagePackStringValuePluralized.constructor:
        if (pluralized != null) {
          return pluralized.call(this as LanguagePackStringValuePluralized);
        }
        break;
      case LanguagePackStringValueDeleted.constructor:
        if (deleted != null) {
          return deleted.call(this as LanguagePackStringValueDeleted);
        }
        break;
    }
    return orElse.call();
  }
}

extension LanguagePackStringValueOrdinaryExtensions
    on LanguagePackStringValueOrdinary {
  LanguagePackStringValueOrdinary copyWith({String? value}) =>
      LanguagePackStringValueOrdinary(value: value ?? this.value);
}

extension LanguagePackStringValuePluralizedExtensions
    on LanguagePackStringValuePluralized {
  LanguagePackStringValuePluralized copyWith({
    String? zeroValue,
    String? oneValue,
    String? twoValue,
    String? fewValue,
    String? manyValue,
    String? otherValue,
  }) => LanguagePackStringValuePluralized(
    zeroValue: zeroValue ?? this.zeroValue,
    oneValue: oneValue ?? this.oneValue,
    twoValue: twoValue ?? this.twoValue,
    fewValue: fewValue ?? this.fewValue,
    manyValue: manyValue ?? this.manyValue,
    otherValue: otherValue ?? this.otherValue,
  );
}

extension LanguagePackStringExtensions on LanguagePackString {
  LanguagePackString copyWith({String? key, LanguagePackStringValue? value}) =>
      LanguagePackString(key: key ?? this.key, value: value ?? this.value);
}

extension LanguagePackStringsExtensions on LanguagePackStrings {
  LanguagePackStrings copyWith({List<LanguagePackString>? strings}) =>
      LanguagePackStrings(strings: strings ?? this.strings);
}

extension LanguagePackInfoExtensions on LanguagePackInfo {
  LanguagePackInfo copyWith({
    String? id,
    String? baseLanguagePackId,
    String? name,
    String? nativeName,
    String? pluralCode,
    bool? isOfficial,
    bool? isRtl,
    bool? isBeta,
    bool? isInstalled,
    int? totalStringCount,
    int? translatedStringCount,
    int? localStringCount,
    String? translationUrl,
  }) => LanguagePackInfo(
    id: id ?? this.id,
    baseLanguagePackId: baseLanguagePackId ?? this.baseLanguagePackId,
    name: name ?? this.name,
    nativeName: nativeName ?? this.nativeName,
    pluralCode: pluralCode ?? this.pluralCode,
    isOfficial: isOfficial ?? this.isOfficial,
    isRtl: isRtl ?? this.isRtl,
    isBeta: isBeta ?? this.isBeta,
    isInstalled: isInstalled ?? this.isInstalled,
    totalStringCount: totalStringCount ?? this.totalStringCount,
    translatedStringCount: translatedStringCount ?? this.translatedStringCount,
    localStringCount: localStringCount ?? this.localStringCount,
    translationUrl: translationUrl ?? this.translationUrl,
  );
}

extension LocalizationTargetInfoExtensions on LocalizationTargetInfo {
  LocalizationTargetInfo copyWith({List<LanguagePackInfo>? languagePacks}) =>
      LocalizationTargetInfo(
        languagePacks: languagePacks ?? this.languagePacks,
      );
}

extension PremiumLimitTypeExtensions on PremiumLimitType {
  TResult map<TResult extends Object?>({
    required TResult Function(PremiumLimitTypeSupergroupCount value)
    supergroupCount,
    required TResult Function(PremiumLimitTypePinnedChatCount value)
    pinnedChatCount,
    required TResult Function(PremiumLimitTypeCreatedPublicChatCount value)
    createdPublicChatCount,
    required TResult Function(PremiumLimitTypeSavedAnimationCount value)
    savedAnimationCount,
    required TResult Function(PremiumLimitTypeFavoriteStickerCount value)
    favoriteStickerCount,
    required TResult Function(PremiumLimitTypeChatFolderCount value)
    chatFolderCount,
    required TResult Function(PremiumLimitTypeChatFolderChosenChatCount value)
    chatFolderChosenChatCount,
    required TResult Function(PremiumLimitTypePinnedArchivedChatCount value)
    pinnedArchivedChatCount,
    required TResult Function(
      PremiumLimitTypePinnedSavedMessagesTopicCount value,
    )
    pinnedSavedMessagesTopicCount,
    required TResult Function(PremiumLimitTypeCaptionLength value)
    captionLength,
    required TResult Function(PremiumLimitTypeBioLength value) bioLength,
    required TResult Function(PremiumLimitTypeChatFolderInviteLinkCount value)
    chatFolderInviteLinkCount,
    required TResult Function(PremiumLimitTypeShareableChatFolderCount value)
    shareableChatFolderCount,
    required TResult Function(PremiumLimitTypeActiveStoryCount value)
    activeStoryCount,
    required TResult Function(PremiumLimitTypeWeeklyPostedStoryCount value)
    weeklyPostedStoryCount,
    required TResult Function(PremiumLimitTypeMonthlyPostedStoryCount value)
    monthlyPostedStoryCount,
    required TResult Function(PremiumLimitTypeStoryCaptionLength value)
    storyCaptionLength,
    required TResult Function(
      PremiumLimitTypeStorySuggestedReactionAreaCount value,
    )
    storySuggestedReactionAreaCount,
    required TResult Function(PremiumLimitTypeSimilarChatCount value)
    similarChatCount,
  }) {
    switch (getConstructor()) {
      case PremiumLimitTypeSupergroupCount.constructor:
        return supergroupCount.call(this as PremiumLimitTypeSupergroupCount);
      case PremiumLimitTypePinnedChatCount.constructor:
        return pinnedChatCount.call(this as PremiumLimitTypePinnedChatCount);
      case PremiumLimitTypeCreatedPublicChatCount.constructor:
        return createdPublicChatCount.call(
          this as PremiumLimitTypeCreatedPublicChatCount,
        );
      case PremiumLimitTypeSavedAnimationCount.constructor:
        return savedAnimationCount.call(
          this as PremiumLimitTypeSavedAnimationCount,
        );
      case PremiumLimitTypeFavoriteStickerCount.constructor:
        return favoriteStickerCount.call(
          this as PremiumLimitTypeFavoriteStickerCount,
        );
      case PremiumLimitTypeChatFolderCount.constructor:
        return chatFolderCount.call(this as PremiumLimitTypeChatFolderCount);
      case PremiumLimitTypeChatFolderChosenChatCount.constructor:
        return chatFolderChosenChatCount.call(
          this as PremiumLimitTypeChatFolderChosenChatCount,
        );
      case PremiumLimitTypePinnedArchivedChatCount.constructor:
        return pinnedArchivedChatCount.call(
          this as PremiumLimitTypePinnedArchivedChatCount,
        );
      case PremiumLimitTypePinnedSavedMessagesTopicCount.constructor:
        return pinnedSavedMessagesTopicCount.call(
          this as PremiumLimitTypePinnedSavedMessagesTopicCount,
        );
      case PremiumLimitTypeCaptionLength.constructor:
        return captionLength.call(this as PremiumLimitTypeCaptionLength);
      case PremiumLimitTypeBioLength.constructor:
        return bioLength.call(this as PremiumLimitTypeBioLength);
      case PremiumLimitTypeChatFolderInviteLinkCount.constructor:
        return chatFolderInviteLinkCount.call(
          this as PremiumLimitTypeChatFolderInviteLinkCount,
        );
      case PremiumLimitTypeShareableChatFolderCount.constructor:
        return shareableChatFolderCount.call(
          this as PremiumLimitTypeShareableChatFolderCount,
        );
      case PremiumLimitTypeActiveStoryCount.constructor:
        return activeStoryCount.call(this as PremiumLimitTypeActiveStoryCount);
      case PremiumLimitTypeWeeklyPostedStoryCount.constructor:
        return weeklyPostedStoryCount.call(
          this as PremiumLimitTypeWeeklyPostedStoryCount,
        );
      case PremiumLimitTypeMonthlyPostedStoryCount.constructor:
        return monthlyPostedStoryCount.call(
          this as PremiumLimitTypeMonthlyPostedStoryCount,
        );
      case PremiumLimitTypeStoryCaptionLength.constructor:
        return storyCaptionLength.call(
          this as PremiumLimitTypeStoryCaptionLength,
        );
      case PremiumLimitTypeStorySuggestedReactionAreaCount.constructor:
        return storySuggestedReactionAreaCount.call(
          this as PremiumLimitTypeStorySuggestedReactionAreaCount,
        );
      case PremiumLimitTypeSimilarChatCount.constructor:
        return similarChatCount.call(this as PremiumLimitTypeSimilarChatCount);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PremiumLimitTypeSupergroupCount value)? supergroupCount,
    TResult Function(PremiumLimitTypePinnedChatCount value)? pinnedChatCount,
    TResult Function(PremiumLimitTypeCreatedPublicChatCount value)?
    createdPublicChatCount,
    TResult Function(PremiumLimitTypeSavedAnimationCount value)?
    savedAnimationCount,
    TResult Function(PremiumLimitTypeFavoriteStickerCount value)?
    favoriteStickerCount,
    TResult Function(PremiumLimitTypeChatFolderCount value)? chatFolderCount,
    TResult Function(PremiumLimitTypeChatFolderChosenChatCount value)?
    chatFolderChosenChatCount,
    TResult Function(PremiumLimitTypePinnedArchivedChatCount value)?
    pinnedArchivedChatCount,
    TResult Function(PremiumLimitTypePinnedSavedMessagesTopicCount value)?
    pinnedSavedMessagesTopicCount,
    TResult Function(PremiumLimitTypeCaptionLength value)? captionLength,
    TResult Function(PremiumLimitTypeBioLength value)? bioLength,
    TResult Function(PremiumLimitTypeChatFolderInviteLinkCount value)?
    chatFolderInviteLinkCount,
    TResult Function(PremiumLimitTypeShareableChatFolderCount value)?
    shareableChatFolderCount,
    TResult Function(PremiumLimitTypeActiveStoryCount value)? activeStoryCount,
    TResult Function(PremiumLimitTypeWeeklyPostedStoryCount value)?
    weeklyPostedStoryCount,
    TResult Function(PremiumLimitTypeMonthlyPostedStoryCount value)?
    monthlyPostedStoryCount,
    TResult Function(PremiumLimitTypeStoryCaptionLength value)?
    storyCaptionLength,
    TResult Function(PremiumLimitTypeStorySuggestedReactionAreaCount value)?
    storySuggestedReactionAreaCount,
    TResult Function(PremiumLimitTypeSimilarChatCount value)? similarChatCount,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PremiumLimitTypeSupergroupCount.constructor:
        if (supergroupCount != null) {
          return supergroupCount.call(this as PremiumLimitTypeSupergroupCount);
        }
        break;
      case PremiumLimitTypePinnedChatCount.constructor:
        if (pinnedChatCount != null) {
          return pinnedChatCount.call(this as PremiumLimitTypePinnedChatCount);
        }
        break;
      case PremiumLimitTypeCreatedPublicChatCount.constructor:
        if (createdPublicChatCount != null) {
          return createdPublicChatCount.call(
            this as PremiumLimitTypeCreatedPublicChatCount,
          );
        }
        break;
      case PremiumLimitTypeSavedAnimationCount.constructor:
        if (savedAnimationCount != null) {
          return savedAnimationCount.call(
            this as PremiumLimitTypeSavedAnimationCount,
          );
        }
        break;
      case PremiumLimitTypeFavoriteStickerCount.constructor:
        if (favoriteStickerCount != null) {
          return favoriteStickerCount.call(
            this as PremiumLimitTypeFavoriteStickerCount,
          );
        }
        break;
      case PremiumLimitTypeChatFolderCount.constructor:
        if (chatFolderCount != null) {
          return chatFolderCount.call(this as PremiumLimitTypeChatFolderCount);
        }
        break;
      case PremiumLimitTypeChatFolderChosenChatCount.constructor:
        if (chatFolderChosenChatCount != null) {
          return chatFolderChosenChatCount.call(
            this as PremiumLimitTypeChatFolderChosenChatCount,
          );
        }
        break;
      case PremiumLimitTypePinnedArchivedChatCount.constructor:
        if (pinnedArchivedChatCount != null) {
          return pinnedArchivedChatCount.call(
            this as PremiumLimitTypePinnedArchivedChatCount,
          );
        }
        break;
      case PremiumLimitTypePinnedSavedMessagesTopicCount.constructor:
        if (pinnedSavedMessagesTopicCount != null) {
          return pinnedSavedMessagesTopicCount.call(
            this as PremiumLimitTypePinnedSavedMessagesTopicCount,
          );
        }
        break;
      case PremiumLimitTypeCaptionLength.constructor:
        if (captionLength != null) {
          return captionLength.call(this as PremiumLimitTypeCaptionLength);
        }
        break;
      case PremiumLimitTypeBioLength.constructor:
        if (bioLength != null) {
          return bioLength.call(this as PremiumLimitTypeBioLength);
        }
        break;
      case PremiumLimitTypeChatFolderInviteLinkCount.constructor:
        if (chatFolderInviteLinkCount != null) {
          return chatFolderInviteLinkCount.call(
            this as PremiumLimitTypeChatFolderInviteLinkCount,
          );
        }
        break;
      case PremiumLimitTypeShareableChatFolderCount.constructor:
        if (shareableChatFolderCount != null) {
          return shareableChatFolderCount.call(
            this as PremiumLimitTypeShareableChatFolderCount,
          );
        }
        break;
      case PremiumLimitTypeActiveStoryCount.constructor:
        if (activeStoryCount != null) {
          return activeStoryCount.call(
            this as PremiumLimitTypeActiveStoryCount,
          );
        }
        break;
      case PremiumLimitTypeWeeklyPostedStoryCount.constructor:
        if (weeklyPostedStoryCount != null) {
          return weeklyPostedStoryCount.call(
            this as PremiumLimitTypeWeeklyPostedStoryCount,
          );
        }
        break;
      case PremiumLimitTypeMonthlyPostedStoryCount.constructor:
        if (monthlyPostedStoryCount != null) {
          return monthlyPostedStoryCount.call(
            this as PremiumLimitTypeMonthlyPostedStoryCount,
          );
        }
        break;
      case PremiumLimitTypeStoryCaptionLength.constructor:
        if (storyCaptionLength != null) {
          return storyCaptionLength.call(
            this as PremiumLimitTypeStoryCaptionLength,
          );
        }
        break;
      case PremiumLimitTypeStorySuggestedReactionAreaCount.constructor:
        if (storySuggestedReactionAreaCount != null) {
          return storySuggestedReactionAreaCount.call(
            this as PremiumLimitTypeStorySuggestedReactionAreaCount,
          );
        }
        break;
      case PremiumLimitTypeSimilarChatCount.constructor:
        if (similarChatCount != null) {
          return similarChatCount.call(
            this as PremiumLimitTypeSimilarChatCount,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension PremiumFeatureExtensions on PremiumFeature {
  TResult map<TResult extends Object?>({
    required TResult Function(PremiumFeatureIncreasedLimits value)
    increasedLimits,
    required TResult Function(PremiumFeatureIncreasedUploadFileSize value)
    increasedUploadFileSize,
    required TResult Function(PremiumFeatureImprovedDownloadSpeed value)
    improvedDownloadSpeed,
    required TResult Function(PremiumFeatureVoiceRecognition value)
    voiceRecognition,
    required TResult Function(PremiumFeatureDisabledAds value) disabledAds,
    required TResult Function(PremiumFeatureUniqueReactions value)
    uniqueReactions,
    required TResult Function(PremiumFeatureUniqueStickers value)
    uniqueStickers,
    required TResult Function(PremiumFeatureCustomEmoji value) customEmoji,
    required TResult Function(PremiumFeatureAdvancedChatManagement value)
    advancedChatManagement,
    required TResult Function(PremiumFeatureProfileBadge value) profileBadge,
    required TResult Function(PremiumFeatureEmojiStatus value) emojiStatus,
    required TResult Function(PremiumFeatureAnimatedProfilePhoto value)
    animatedProfilePhoto,
    required TResult Function(PremiumFeatureForumTopicIcon value)
    forumTopicIcon,
    required TResult Function(PremiumFeatureAppIcons value) appIcons,
    required TResult Function(PremiumFeatureRealTimeChatTranslation value)
    realTimeChatTranslation,
    required TResult Function(PremiumFeatureUpgradedStories value)
    upgradedStories,
    required TResult Function(PremiumFeatureChatBoost value) chatBoost,
    required TResult Function(PremiumFeatureAccentColor value) accentColor,
    required TResult Function(PremiumFeatureBackgroundForBoth value)
    backgroundForBoth,
    required TResult Function(PremiumFeatureSavedMessagesTags value)
    savedMessagesTags,
    required TResult Function(PremiumFeatureMessagePrivacy value)
    messagePrivacy,
    required TResult Function(PremiumFeatureLastSeenTimes value) lastSeenTimes,
    required TResult Function(PremiumFeatureBusiness value) business,
    required TResult Function(PremiumFeatureMessageEffects value)
    messageEffects,
    required TResult Function(PremiumFeatureChecklists value) checklists,
  }) {
    switch (getConstructor()) {
      case PremiumFeatureIncreasedLimits.constructor:
        return increasedLimits.call(this as PremiumFeatureIncreasedLimits);
      case PremiumFeatureIncreasedUploadFileSize.constructor:
        return increasedUploadFileSize.call(
          this as PremiumFeatureIncreasedUploadFileSize,
        );
      case PremiumFeatureImprovedDownloadSpeed.constructor:
        return improvedDownloadSpeed.call(
          this as PremiumFeatureImprovedDownloadSpeed,
        );
      case PremiumFeatureVoiceRecognition.constructor:
        return voiceRecognition.call(this as PremiumFeatureVoiceRecognition);
      case PremiumFeatureDisabledAds.constructor:
        return disabledAds.call(this as PremiumFeatureDisabledAds);
      case PremiumFeatureUniqueReactions.constructor:
        return uniqueReactions.call(this as PremiumFeatureUniqueReactions);
      case PremiumFeatureUniqueStickers.constructor:
        return uniqueStickers.call(this as PremiumFeatureUniqueStickers);
      case PremiumFeatureCustomEmoji.constructor:
        return customEmoji.call(this as PremiumFeatureCustomEmoji);
      case PremiumFeatureAdvancedChatManagement.constructor:
        return advancedChatManagement.call(
          this as PremiumFeatureAdvancedChatManagement,
        );
      case PremiumFeatureProfileBadge.constructor:
        return profileBadge.call(this as PremiumFeatureProfileBadge);
      case PremiumFeatureEmojiStatus.constructor:
        return emojiStatus.call(this as PremiumFeatureEmojiStatus);
      case PremiumFeatureAnimatedProfilePhoto.constructor:
        return animatedProfilePhoto.call(
          this as PremiumFeatureAnimatedProfilePhoto,
        );
      case PremiumFeatureForumTopicIcon.constructor:
        return forumTopicIcon.call(this as PremiumFeatureForumTopicIcon);
      case PremiumFeatureAppIcons.constructor:
        return appIcons.call(this as PremiumFeatureAppIcons);
      case PremiumFeatureRealTimeChatTranslation.constructor:
        return realTimeChatTranslation.call(
          this as PremiumFeatureRealTimeChatTranslation,
        );
      case PremiumFeatureUpgradedStories.constructor:
        return upgradedStories.call(this as PremiumFeatureUpgradedStories);
      case PremiumFeatureChatBoost.constructor:
        return chatBoost.call(this as PremiumFeatureChatBoost);
      case PremiumFeatureAccentColor.constructor:
        return accentColor.call(this as PremiumFeatureAccentColor);
      case PremiumFeatureBackgroundForBoth.constructor:
        return backgroundForBoth.call(this as PremiumFeatureBackgroundForBoth);
      case PremiumFeatureSavedMessagesTags.constructor:
        return savedMessagesTags.call(this as PremiumFeatureSavedMessagesTags);
      case PremiumFeatureMessagePrivacy.constructor:
        return messagePrivacy.call(this as PremiumFeatureMessagePrivacy);
      case PremiumFeatureLastSeenTimes.constructor:
        return lastSeenTimes.call(this as PremiumFeatureLastSeenTimes);
      case PremiumFeatureBusiness.constructor:
        return business.call(this as PremiumFeatureBusiness);
      case PremiumFeatureMessageEffects.constructor:
        return messageEffects.call(this as PremiumFeatureMessageEffects);
      case PremiumFeatureChecklists.constructor:
        return checklists.call(this as PremiumFeatureChecklists);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PremiumFeatureIncreasedLimits value)? increasedLimits,
    TResult Function(PremiumFeatureIncreasedUploadFileSize value)?
    increasedUploadFileSize,
    TResult Function(PremiumFeatureImprovedDownloadSpeed value)?
    improvedDownloadSpeed,
    TResult Function(PremiumFeatureVoiceRecognition value)? voiceRecognition,
    TResult Function(PremiumFeatureDisabledAds value)? disabledAds,
    TResult Function(PremiumFeatureUniqueReactions value)? uniqueReactions,
    TResult Function(PremiumFeatureUniqueStickers value)? uniqueStickers,
    TResult Function(PremiumFeatureCustomEmoji value)? customEmoji,
    TResult Function(PremiumFeatureAdvancedChatManagement value)?
    advancedChatManagement,
    TResult Function(PremiumFeatureProfileBadge value)? profileBadge,
    TResult Function(PremiumFeatureEmojiStatus value)? emojiStatus,
    TResult Function(PremiumFeatureAnimatedProfilePhoto value)?
    animatedProfilePhoto,
    TResult Function(PremiumFeatureForumTopicIcon value)? forumTopicIcon,
    TResult Function(PremiumFeatureAppIcons value)? appIcons,
    TResult Function(PremiumFeatureRealTimeChatTranslation value)?
    realTimeChatTranslation,
    TResult Function(PremiumFeatureUpgradedStories value)? upgradedStories,
    TResult Function(PremiumFeatureChatBoost value)? chatBoost,
    TResult Function(PremiumFeatureAccentColor value)? accentColor,
    TResult Function(PremiumFeatureBackgroundForBoth value)? backgroundForBoth,
    TResult Function(PremiumFeatureSavedMessagesTags value)? savedMessagesTags,
    TResult Function(PremiumFeatureMessagePrivacy value)? messagePrivacy,
    TResult Function(PremiumFeatureLastSeenTimes value)? lastSeenTimes,
    TResult Function(PremiumFeatureBusiness value)? business,
    TResult Function(PremiumFeatureMessageEffects value)? messageEffects,
    TResult Function(PremiumFeatureChecklists value)? checklists,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PremiumFeatureIncreasedLimits.constructor:
        if (increasedLimits != null) {
          return increasedLimits.call(this as PremiumFeatureIncreasedLimits);
        }
        break;
      case PremiumFeatureIncreasedUploadFileSize.constructor:
        if (increasedUploadFileSize != null) {
          return increasedUploadFileSize.call(
            this as PremiumFeatureIncreasedUploadFileSize,
          );
        }
        break;
      case PremiumFeatureImprovedDownloadSpeed.constructor:
        if (improvedDownloadSpeed != null) {
          return improvedDownloadSpeed.call(
            this as PremiumFeatureImprovedDownloadSpeed,
          );
        }
        break;
      case PremiumFeatureVoiceRecognition.constructor:
        if (voiceRecognition != null) {
          return voiceRecognition.call(this as PremiumFeatureVoiceRecognition);
        }
        break;
      case PremiumFeatureDisabledAds.constructor:
        if (disabledAds != null) {
          return disabledAds.call(this as PremiumFeatureDisabledAds);
        }
        break;
      case PremiumFeatureUniqueReactions.constructor:
        if (uniqueReactions != null) {
          return uniqueReactions.call(this as PremiumFeatureUniqueReactions);
        }
        break;
      case PremiumFeatureUniqueStickers.constructor:
        if (uniqueStickers != null) {
          return uniqueStickers.call(this as PremiumFeatureUniqueStickers);
        }
        break;
      case PremiumFeatureCustomEmoji.constructor:
        if (customEmoji != null) {
          return customEmoji.call(this as PremiumFeatureCustomEmoji);
        }
        break;
      case PremiumFeatureAdvancedChatManagement.constructor:
        if (advancedChatManagement != null) {
          return advancedChatManagement.call(
            this as PremiumFeatureAdvancedChatManagement,
          );
        }
        break;
      case PremiumFeatureProfileBadge.constructor:
        if (profileBadge != null) {
          return profileBadge.call(this as PremiumFeatureProfileBadge);
        }
        break;
      case PremiumFeatureEmojiStatus.constructor:
        if (emojiStatus != null) {
          return emojiStatus.call(this as PremiumFeatureEmojiStatus);
        }
        break;
      case PremiumFeatureAnimatedProfilePhoto.constructor:
        if (animatedProfilePhoto != null) {
          return animatedProfilePhoto.call(
            this as PremiumFeatureAnimatedProfilePhoto,
          );
        }
        break;
      case PremiumFeatureForumTopicIcon.constructor:
        if (forumTopicIcon != null) {
          return forumTopicIcon.call(this as PremiumFeatureForumTopicIcon);
        }
        break;
      case PremiumFeatureAppIcons.constructor:
        if (appIcons != null) {
          return appIcons.call(this as PremiumFeatureAppIcons);
        }
        break;
      case PremiumFeatureRealTimeChatTranslation.constructor:
        if (realTimeChatTranslation != null) {
          return realTimeChatTranslation.call(
            this as PremiumFeatureRealTimeChatTranslation,
          );
        }
        break;
      case PremiumFeatureUpgradedStories.constructor:
        if (upgradedStories != null) {
          return upgradedStories.call(this as PremiumFeatureUpgradedStories);
        }
        break;
      case PremiumFeatureChatBoost.constructor:
        if (chatBoost != null) {
          return chatBoost.call(this as PremiumFeatureChatBoost);
        }
        break;
      case PremiumFeatureAccentColor.constructor:
        if (accentColor != null) {
          return accentColor.call(this as PremiumFeatureAccentColor);
        }
        break;
      case PremiumFeatureBackgroundForBoth.constructor:
        if (backgroundForBoth != null) {
          return backgroundForBoth.call(
            this as PremiumFeatureBackgroundForBoth,
          );
        }
        break;
      case PremiumFeatureSavedMessagesTags.constructor:
        if (savedMessagesTags != null) {
          return savedMessagesTags.call(
            this as PremiumFeatureSavedMessagesTags,
          );
        }
        break;
      case PremiumFeatureMessagePrivacy.constructor:
        if (messagePrivacy != null) {
          return messagePrivacy.call(this as PremiumFeatureMessagePrivacy);
        }
        break;
      case PremiumFeatureLastSeenTimes.constructor:
        if (lastSeenTimes != null) {
          return lastSeenTimes.call(this as PremiumFeatureLastSeenTimes);
        }
        break;
      case PremiumFeatureBusiness.constructor:
        if (business != null) {
          return business.call(this as PremiumFeatureBusiness);
        }
        break;
      case PremiumFeatureMessageEffects.constructor:
        if (messageEffects != null) {
          return messageEffects.call(this as PremiumFeatureMessageEffects);
        }
        break;
      case PremiumFeatureChecklists.constructor:
        if (checklists != null) {
          return checklists.call(this as PremiumFeatureChecklists);
        }
        break;
    }
    return orElse.call();
  }
}

extension BusinessFeatureExtensions on BusinessFeature {
  TResult map<TResult extends Object?>({
    required TResult Function(BusinessFeatureLocation value) location,
    required TResult Function(BusinessFeatureOpeningHours value) openingHours,
    required TResult Function(BusinessFeatureQuickReplies value) quickReplies,
    required TResult Function(BusinessFeatureGreetingMessage value)
    greetingMessage,
    required TResult Function(BusinessFeatureAwayMessage value) awayMessage,
    required TResult Function(BusinessFeatureAccountLinks value) accountLinks,
    required TResult Function(BusinessFeatureStartPage value) startPage,
    required TResult Function(BusinessFeatureBots value) bots,
    required TResult Function(BusinessFeatureEmojiStatus value) emojiStatus,
    required TResult Function(BusinessFeatureChatFolderTags value)
    chatFolderTags,
    required TResult Function(BusinessFeatureUpgradedStories value)
    upgradedStories,
  }) {
    switch (getConstructor()) {
      case BusinessFeatureLocation.constructor:
        return location.call(this as BusinessFeatureLocation);
      case BusinessFeatureOpeningHours.constructor:
        return openingHours.call(this as BusinessFeatureOpeningHours);
      case BusinessFeatureQuickReplies.constructor:
        return quickReplies.call(this as BusinessFeatureQuickReplies);
      case BusinessFeatureGreetingMessage.constructor:
        return greetingMessage.call(this as BusinessFeatureGreetingMessage);
      case BusinessFeatureAwayMessage.constructor:
        return awayMessage.call(this as BusinessFeatureAwayMessage);
      case BusinessFeatureAccountLinks.constructor:
        return accountLinks.call(this as BusinessFeatureAccountLinks);
      case BusinessFeatureStartPage.constructor:
        return startPage.call(this as BusinessFeatureStartPage);
      case BusinessFeatureBots.constructor:
        return bots.call(this as BusinessFeatureBots);
      case BusinessFeatureEmojiStatus.constructor:
        return emojiStatus.call(this as BusinessFeatureEmojiStatus);
      case BusinessFeatureChatFolderTags.constructor:
        return chatFolderTags.call(this as BusinessFeatureChatFolderTags);
      case BusinessFeatureUpgradedStories.constructor:
        return upgradedStories.call(this as BusinessFeatureUpgradedStories);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(BusinessFeatureLocation value)? location,
    TResult Function(BusinessFeatureOpeningHours value)? openingHours,
    TResult Function(BusinessFeatureQuickReplies value)? quickReplies,
    TResult Function(BusinessFeatureGreetingMessage value)? greetingMessage,
    TResult Function(BusinessFeatureAwayMessage value)? awayMessage,
    TResult Function(BusinessFeatureAccountLinks value)? accountLinks,
    TResult Function(BusinessFeatureStartPage value)? startPage,
    TResult Function(BusinessFeatureBots value)? bots,
    TResult Function(BusinessFeatureEmojiStatus value)? emojiStatus,
    TResult Function(BusinessFeatureChatFolderTags value)? chatFolderTags,
    TResult Function(BusinessFeatureUpgradedStories value)? upgradedStories,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case BusinessFeatureLocation.constructor:
        if (location != null) {
          return location.call(this as BusinessFeatureLocation);
        }
        break;
      case BusinessFeatureOpeningHours.constructor:
        if (openingHours != null) {
          return openingHours.call(this as BusinessFeatureOpeningHours);
        }
        break;
      case BusinessFeatureQuickReplies.constructor:
        if (quickReplies != null) {
          return quickReplies.call(this as BusinessFeatureQuickReplies);
        }
        break;
      case BusinessFeatureGreetingMessage.constructor:
        if (greetingMessage != null) {
          return greetingMessage.call(this as BusinessFeatureGreetingMessage);
        }
        break;
      case BusinessFeatureAwayMessage.constructor:
        if (awayMessage != null) {
          return awayMessage.call(this as BusinessFeatureAwayMessage);
        }
        break;
      case BusinessFeatureAccountLinks.constructor:
        if (accountLinks != null) {
          return accountLinks.call(this as BusinessFeatureAccountLinks);
        }
        break;
      case BusinessFeatureStartPage.constructor:
        if (startPage != null) {
          return startPage.call(this as BusinessFeatureStartPage);
        }
        break;
      case BusinessFeatureBots.constructor:
        if (bots != null) {
          return bots.call(this as BusinessFeatureBots);
        }
        break;
      case BusinessFeatureEmojiStatus.constructor:
        if (emojiStatus != null) {
          return emojiStatus.call(this as BusinessFeatureEmojiStatus);
        }
        break;
      case BusinessFeatureChatFolderTags.constructor:
        if (chatFolderTags != null) {
          return chatFolderTags.call(this as BusinessFeatureChatFolderTags);
        }
        break;
      case BusinessFeatureUpgradedStories.constructor:
        if (upgradedStories != null) {
          return upgradedStories.call(this as BusinessFeatureUpgradedStories);
        }
        break;
    }
    return orElse.call();
  }
}

extension PremiumStoryFeatureExtensions on PremiumStoryFeature {
  TResult map<TResult extends Object?>({
    required TResult Function(PremiumStoryFeaturePriorityOrder value)
    priorityOrder,
    required TResult Function(PremiumStoryFeatureStealthMode value) stealthMode,
    required TResult Function(PremiumStoryFeaturePermanentViewsHistory value)
    permanentViewsHistory,
    required TResult Function(PremiumStoryFeatureCustomExpirationDuration value)
    customExpirationDuration,
    required TResult Function(PremiumStoryFeatureSaveStories value) saveStories,
    required TResult Function(PremiumStoryFeatureLinksAndFormatting value)
    linksAndFormatting,
    required TResult Function(PremiumStoryFeatureVideoQuality value)
    videoQuality,
  }) {
    switch (getConstructor()) {
      case PremiumStoryFeaturePriorityOrder.constructor:
        return priorityOrder.call(this as PremiumStoryFeaturePriorityOrder);
      case PremiumStoryFeatureStealthMode.constructor:
        return stealthMode.call(this as PremiumStoryFeatureStealthMode);
      case PremiumStoryFeaturePermanentViewsHistory.constructor:
        return permanentViewsHistory.call(
          this as PremiumStoryFeaturePermanentViewsHistory,
        );
      case PremiumStoryFeatureCustomExpirationDuration.constructor:
        return customExpirationDuration.call(
          this as PremiumStoryFeatureCustomExpirationDuration,
        );
      case PremiumStoryFeatureSaveStories.constructor:
        return saveStories.call(this as PremiumStoryFeatureSaveStories);
      case PremiumStoryFeatureLinksAndFormatting.constructor:
        return linksAndFormatting.call(
          this as PremiumStoryFeatureLinksAndFormatting,
        );
      case PremiumStoryFeatureVideoQuality.constructor:
        return videoQuality.call(this as PremiumStoryFeatureVideoQuality);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PremiumStoryFeaturePriorityOrder value)? priorityOrder,
    TResult Function(PremiumStoryFeatureStealthMode value)? stealthMode,
    TResult Function(PremiumStoryFeaturePermanentViewsHistory value)?
    permanentViewsHistory,
    TResult Function(PremiumStoryFeatureCustomExpirationDuration value)?
    customExpirationDuration,
    TResult Function(PremiumStoryFeatureSaveStories value)? saveStories,
    TResult Function(PremiumStoryFeatureLinksAndFormatting value)?
    linksAndFormatting,
    TResult Function(PremiumStoryFeatureVideoQuality value)? videoQuality,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PremiumStoryFeaturePriorityOrder.constructor:
        if (priorityOrder != null) {
          return priorityOrder.call(this as PremiumStoryFeaturePriorityOrder);
        }
        break;
      case PremiumStoryFeatureStealthMode.constructor:
        if (stealthMode != null) {
          return stealthMode.call(this as PremiumStoryFeatureStealthMode);
        }
        break;
      case PremiumStoryFeaturePermanentViewsHistory.constructor:
        if (permanentViewsHistory != null) {
          return permanentViewsHistory.call(
            this as PremiumStoryFeaturePermanentViewsHistory,
          );
        }
        break;
      case PremiumStoryFeatureCustomExpirationDuration.constructor:
        if (customExpirationDuration != null) {
          return customExpirationDuration.call(
            this as PremiumStoryFeatureCustomExpirationDuration,
          );
        }
        break;
      case PremiumStoryFeatureSaveStories.constructor:
        if (saveStories != null) {
          return saveStories.call(this as PremiumStoryFeatureSaveStories);
        }
        break;
      case PremiumStoryFeatureLinksAndFormatting.constructor:
        if (linksAndFormatting != null) {
          return linksAndFormatting.call(
            this as PremiumStoryFeatureLinksAndFormatting,
          );
        }
        break;
      case PremiumStoryFeatureVideoQuality.constructor:
        if (videoQuality != null) {
          return videoQuality.call(this as PremiumStoryFeatureVideoQuality);
        }
        break;
    }
    return orElse.call();
  }
}

extension PremiumLimitExtensions on PremiumLimit {
  PremiumLimit copyWith({
    PremiumLimitType? type,
    int? defaultValue,
    int? premiumValue,
  }) => PremiumLimit(
    type: type ?? this.type,
    defaultValue: defaultValue ?? this.defaultValue,
    premiumValue: premiumValue ?? this.premiumValue,
  );
}

extension PremiumFeaturesExtensions on PremiumFeatures {
  PremiumFeatures copyWith({
    List<PremiumFeature>? features,
    List<PremiumLimit>? limits,
    InternalLinkType? paymentLink,
  }) => PremiumFeatures(
    features: features ?? this.features,
    limits: limits ?? this.limits,
    paymentLink: paymentLink ?? this.paymentLink,
  );
}

extension BusinessFeaturesExtensions on BusinessFeatures {
  BusinessFeatures copyWith({List<BusinessFeature>? features}) =>
      BusinessFeatures(features: features ?? this.features);
}

extension PremiumSourceExtensions on PremiumSource {
  TResult map<TResult extends Object?>({
    required TResult Function(PremiumSourceLimitExceeded value) limitExceeded,
    required TResult Function(PremiumSourceFeature value) feature,
    required TResult Function(PremiumSourceBusinessFeature value)
    businessFeature,
    required TResult Function(PremiumSourceStoryFeature value) storyFeature,
    required TResult Function(PremiumSourceLink value) link,
    required TResult Function(PremiumSourceSettings value) settings,
  }) {
    switch (getConstructor()) {
      case PremiumSourceLimitExceeded.constructor:
        return limitExceeded.call(this as PremiumSourceLimitExceeded);
      case PremiumSourceFeature.constructor:
        return feature.call(this as PremiumSourceFeature);
      case PremiumSourceBusinessFeature.constructor:
        return businessFeature.call(this as PremiumSourceBusinessFeature);
      case PremiumSourceStoryFeature.constructor:
        return storyFeature.call(this as PremiumSourceStoryFeature);
      case PremiumSourceLink.constructor:
        return link.call(this as PremiumSourceLink);
      case PremiumSourceSettings.constructor:
        return settings.call(this as PremiumSourceSettings);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PremiumSourceLimitExceeded value)? limitExceeded,
    TResult Function(PremiumSourceFeature value)? feature,
    TResult Function(PremiumSourceBusinessFeature value)? businessFeature,
    TResult Function(PremiumSourceStoryFeature value)? storyFeature,
    TResult Function(PremiumSourceLink value)? link,
    TResult Function(PremiumSourceSettings value)? settings,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PremiumSourceLimitExceeded.constructor:
        if (limitExceeded != null) {
          return limitExceeded.call(this as PremiumSourceLimitExceeded);
        }
        break;
      case PremiumSourceFeature.constructor:
        if (feature != null) {
          return feature.call(this as PremiumSourceFeature);
        }
        break;
      case PremiumSourceBusinessFeature.constructor:
        if (businessFeature != null) {
          return businessFeature.call(this as PremiumSourceBusinessFeature);
        }
        break;
      case PremiumSourceStoryFeature.constructor:
        if (storyFeature != null) {
          return storyFeature.call(this as PremiumSourceStoryFeature);
        }
        break;
      case PremiumSourceLink.constructor:
        if (link != null) {
          return link.call(this as PremiumSourceLink);
        }
        break;
      case PremiumSourceSettings.constructor:
        if (settings != null) {
          return settings.call(this as PremiumSourceSettings);
        }
        break;
    }
    return orElse.call();
  }
}

extension PremiumSourceLimitExceededExtensions on PremiumSourceLimitExceeded {
  PremiumSourceLimitExceeded copyWith({PremiumLimitType? limitType}) =>
      PremiumSourceLimitExceeded(limitType: limitType ?? this.limitType);
}

extension PremiumSourceFeatureExtensions on PremiumSourceFeature {
  PremiumSourceFeature copyWith({PremiumFeature? feature}) =>
      PremiumSourceFeature(feature: feature ?? this.feature);
}

extension PremiumSourceBusinessFeatureExtensions
    on PremiumSourceBusinessFeature {
  PremiumSourceBusinessFeature copyWith({BusinessFeature? feature}) =>
      PremiumSourceBusinessFeature(feature: feature ?? this.feature);
}

extension PremiumSourceStoryFeatureExtensions on PremiumSourceStoryFeature {
  PremiumSourceStoryFeature copyWith({PremiumStoryFeature? feature}) =>
      PremiumSourceStoryFeature(feature: feature ?? this.feature);
}

extension PremiumSourceLinkExtensions on PremiumSourceLink {
  PremiumSourceLink copyWith({String? referrer}) =>
      PremiumSourceLink(referrer: referrer ?? this.referrer);
}

extension PremiumFeaturePromotionAnimationExtensions
    on PremiumFeaturePromotionAnimation {
  PremiumFeaturePromotionAnimation copyWith({
    PremiumFeature? feature,
    Animation? animation,
  }) => PremiumFeaturePromotionAnimation(
    feature: feature ?? this.feature,
    animation: animation ?? this.animation,
  );
}

extension BusinessFeaturePromotionAnimationExtensions
    on BusinessFeaturePromotionAnimation {
  BusinessFeaturePromotionAnimation copyWith({
    BusinessFeature? feature,
    Animation? animation,
  }) => BusinessFeaturePromotionAnimation(
    feature: feature ?? this.feature,
    animation: animation ?? this.animation,
  );
}

extension PremiumStateExtensions on PremiumState {
  PremiumState copyWith({
    FormattedText? state,
    List<PremiumStatePaymentOption>? paymentOptions,
    List<PremiumFeaturePromotionAnimation>? animations,
    List<BusinessFeaturePromotionAnimation>? businessAnimations,
  }) => PremiumState(
    state: state ?? this.state,
    paymentOptions: paymentOptions ?? this.paymentOptions,
    animations: animations ?? this.animations,
    businessAnimations: businessAnimations ?? this.businessAnimations,
  );
}

extension StorePaymentPurposeExtensions on StorePaymentPurpose {
  TResult map<TResult extends Object?>({
    required TResult Function(StorePaymentPurposePremiumSubscription value)
    premiumSubscription,
    required TResult Function(StorePaymentPurposePremiumGift value) premiumGift,
    required TResult Function(StorePaymentPurposePremiumGiftCodes value)
    premiumGiftCodes,
    required TResult Function(StorePaymentPurposePremiumGiveaway value)
    premiumGiveaway,
    required TResult Function(StorePaymentPurposeStarGiveaway value)
    starGiveaway,
    required TResult Function(StorePaymentPurposeStars value) stars,
    required TResult Function(StorePaymentPurposeGiftedStars value) giftedStars,
  }) {
    switch (getConstructor()) {
      case StorePaymentPurposePremiumSubscription.constructor:
        return premiumSubscription.call(
          this as StorePaymentPurposePremiumSubscription,
        );
      case StorePaymentPurposePremiumGift.constructor:
        return premiumGift.call(this as StorePaymentPurposePremiumGift);
      case StorePaymentPurposePremiumGiftCodes.constructor:
        return premiumGiftCodes.call(
          this as StorePaymentPurposePremiumGiftCodes,
        );
      case StorePaymentPurposePremiumGiveaway.constructor:
        return premiumGiveaway.call(this as StorePaymentPurposePremiumGiveaway);
      case StorePaymentPurposeStarGiveaway.constructor:
        return starGiveaway.call(this as StorePaymentPurposeStarGiveaway);
      case StorePaymentPurposeStars.constructor:
        return stars.call(this as StorePaymentPurposeStars);
      case StorePaymentPurposeGiftedStars.constructor:
        return giftedStars.call(this as StorePaymentPurposeGiftedStars);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(StorePaymentPurposePremiumSubscription value)?
    premiumSubscription,
    TResult Function(StorePaymentPurposePremiumGift value)? premiumGift,
    TResult Function(StorePaymentPurposePremiumGiftCodes value)?
    premiumGiftCodes,
    TResult Function(StorePaymentPurposePremiumGiveaway value)? premiumGiveaway,
    TResult Function(StorePaymentPurposeStarGiveaway value)? starGiveaway,
    TResult Function(StorePaymentPurposeStars value)? stars,
    TResult Function(StorePaymentPurposeGiftedStars value)? giftedStars,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case StorePaymentPurposePremiumSubscription.constructor:
        if (premiumSubscription != null) {
          return premiumSubscription.call(
            this as StorePaymentPurposePremiumSubscription,
          );
        }
        break;
      case StorePaymentPurposePremiumGift.constructor:
        if (premiumGift != null) {
          return premiumGift.call(this as StorePaymentPurposePremiumGift);
        }
        break;
      case StorePaymentPurposePremiumGiftCodes.constructor:
        if (premiumGiftCodes != null) {
          return premiumGiftCodes.call(
            this as StorePaymentPurposePremiumGiftCodes,
          );
        }
        break;
      case StorePaymentPurposePremiumGiveaway.constructor:
        if (premiumGiveaway != null) {
          return premiumGiveaway.call(
            this as StorePaymentPurposePremiumGiveaway,
          );
        }
        break;
      case StorePaymentPurposeStarGiveaway.constructor:
        if (starGiveaway != null) {
          return starGiveaway.call(this as StorePaymentPurposeStarGiveaway);
        }
        break;
      case StorePaymentPurposeStars.constructor:
        if (stars != null) {
          return stars.call(this as StorePaymentPurposeStars);
        }
        break;
      case StorePaymentPurposeGiftedStars.constructor:
        if (giftedStars != null) {
          return giftedStars.call(this as StorePaymentPurposeGiftedStars);
        }
        break;
    }
    return orElse.call();
  }
}

extension StorePaymentPurposePremiumSubscriptionExtensions
    on StorePaymentPurposePremiumSubscription {
  StorePaymentPurposePremiumSubscription copyWith({
    bool? isRestore,
    bool? isUpgrade,
  }) => StorePaymentPurposePremiumSubscription(
    isRestore: isRestore ?? this.isRestore,
    isUpgrade: isUpgrade ?? this.isUpgrade,
  );
}

extension StorePaymentPurposePremiumGiftExtensions
    on StorePaymentPurposePremiumGift {
  StorePaymentPurposePremiumGift copyWith({
    String? currency,
    int? amount,
    int? userId,
    FormattedText? text,
  }) => StorePaymentPurposePremiumGift(
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    userId: userId ?? this.userId,
    text: text ?? this.text,
  );
}

extension StorePaymentPurposePremiumGiftCodesExtensions
    on StorePaymentPurposePremiumGiftCodes {
  StorePaymentPurposePremiumGiftCodes copyWith({
    int? boostedChatId,
    String? currency,
    int? amount,
    List<int>? userIds,
    FormattedText? text,
  }) => StorePaymentPurposePremiumGiftCodes(
    boostedChatId: boostedChatId ?? this.boostedChatId,
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    userIds: userIds ?? this.userIds,
    text: text ?? this.text,
  );
}

extension StorePaymentPurposePremiumGiveawayExtensions
    on StorePaymentPurposePremiumGiveaway {
  StorePaymentPurposePremiumGiveaway copyWith({
    GiveawayParameters? parameters,
    String? currency,
    int? amount,
  }) => StorePaymentPurposePremiumGiveaway(
    parameters: parameters ?? this.parameters,
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
  );
}

extension StorePaymentPurposeStarGiveawayExtensions
    on StorePaymentPurposeStarGiveaway {
  StorePaymentPurposeStarGiveaway copyWith({
    GiveawayParameters? parameters,
    String? currency,
    int? amount,
    int? winnerCount,
    int? starCount,
  }) => StorePaymentPurposeStarGiveaway(
    parameters: parameters ?? this.parameters,
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    winnerCount: winnerCount ?? this.winnerCount,
    starCount: starCount ?? this.starCount,
  );
}

extension StorePaymentPurposeStarsExtensions on StorePaymentPurposeStars {
  StorePaymentPurposeStars copyWith({
    String? currency,
    int? amount,
    int? starCount,
  }) => StorePaymentPurposeStars(
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    starCount: starCount ?? this.starCount,
  );
}

extension StorePaymentPurposeGiftedStarsExtensions
    on StorePaymentPurposeGiftedStars {
  StorePaymentPurposeGiftedStars copyWith({
    int? userId,
    String? currency,
    int? amount,
    int? starCount,
  }) => StorePaymentPurposeGiftedStars(
    userId: userId ?? this.userId,
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    starCount: starCount ?? this.starCount,
  );
}

extension StoreTransactionExtensions on StoreTransaction {
  TResult map<TResult extends Object?>({
    required TResult Function(StoreTransactionAppStore value) appStore,
    required TResult Function(StoreTransactionGooglePlay value) googlePlay,
  }) {
    switch (getConstructor()) {
      case StoreTransactionAppStore.constructor:
        return appStore.call(this as StoreTransactionAppStore);
      case StoreTransactionGooglePlay.constructor:
        return googlePlay.call(this as StoreTransactionGooglePlay);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(StoreTransactionAppStore value)? appStore,
    TResult Function(StoreTransactionGooglePlay value)? googlePlay,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case StoreTransactionAppStore.constructor:
        if (appStore != null) {
          return appStore.call(this as StoreTransactionAppStore);
        }
        break;
      case StoreTransactionGooglePlay.constructor:
        if (googlePlay != null) {
          return googlePlay.call(this as StoreTransactionGooglePlay);
        }
        break;
    }
    return orElse.call();
  }
}

extension StoreTransactionAppStoreExtensions on StoreTransactionAppStore {
  StoreTransactionAppStore copyWith({String? receipt}) =>
      StoreTransactionAppStore(receipt: receipt ?? this.receipt);
}

extension StoreTransactionGooglePlayExtensions on StoreTransactionGooglePlay {
  StoreTransactionGooglePlay copyWith({
    String? packageName,
    String? storeProductId,
    String? purchaseToken,
  }) => StoreTransactionGooglePlay(
    packageName: packageName ?? this.packageName,
    storeProductId: storeProductId ?? this.storeProductId,
    purchaseToken: purchaseToken ?? this.purchaseToken,
  );
}

extension TelegramPaymentPurposeExtensions on TelegramPaymentPurpose {
  TResult map<TResult extends Object?>({
    required TResult Function(TelegramPaymentPurposePremiumGift value)
    premiumGift,
    required TResult Function(TelegramPaymentPurposePremiumGiftCodes value)
    premiumGiftCodes,
    required TResult Function(TelegramPaymentPurposePremiumGiveaway value)
    premiumGiveaway,
    required TResult Function(TelegramPaymentPurposeStars value) stars,
    required TResult Function(TelegramPaymentPurposeGiftedStars value)
    giftedStars,
    required TResult Function(TelegramPaymentPurposeStarGiveaway value)
    starGiveaway,
    required TResult Function(TelegramPaymentPurposeJoinChat value) joinChat,
  }) {
    switch (getConstructor()) {
      case TelegramPaymentPurposePremiumGift.constructor:
        return premiumGift.call(this as TelegramPaymentPurposePremiumGift);
      case TelegramPaymentPurposePremiumGiftCodes.constructor:
        return premiumGiftCodes.call(
          this as TelegramPaymentPurposePremiumGiftCodes,
        );
      case TelegramPaymentPurposePremiumGiveaway.constructor:
        return premiumGiveaway.call(
          this as TelegramPaymentPurposePremiumGiveaway,
        );
      case TelegramPaymentPurposeStars.constructor:
        return stars.call(this as TelegramPaymentPurposeStars);
      case TelegramPaymentPurposeGiftedStars.constructor:
        return giftedStars.call(this as TelegramPaymentPurposeGiftedStars);
      case TelegramPaymentPurposeStarGiveaway.constructor:
        return starGiveaway.call(this as TelegramPaymentPurposeStarGiveaway);
      case TelegramPaymentPurposeJoinChat.constructor:
        return joinChat.call(this as TelegramPaymentPurposeJoinChat);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(TelegramPaymentPurposePremiumGift value)? premiumGift,
    TResult Function(TelegramPaymentPurposePremiumGiftCodes value)?
    premiumGiftCodes,
    TResult Function(TelegramPaymentPurposePremiumGiveaway value)?
    premiumGiveaway,
    TResult Function(TelegramPaymentPurposeStars value)? stars,
    TResult Function(TelegramPaymentPurposeGiftedStars value)? giftedStars,
    TResult Function(TelegramPaymentPurposeStarGiveaway value)? starGiveaway,
    TResult Function(TelegramPaymentPurposeJoinChat value)? joinChat,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case TelegramPaymentPurposePremiumGift.constructor:
        if (premiumGift != null) {
          return premiumGift.call(this as TelegramPaymentPurposePremiumGift);
        }
        break;
      case TelegramPaymentPurposePremiumGiftCodes.constructor:
        if (premiumGiftCodes != null) {
          return premiumGiftCodes.call(
            this as TelegramPaymentPurposePremiumGiftCodes,
          );
        }
        break;
      case TelegramPaymentPurposePremiumGiveaway.constructor:
        if (premiumGiveaway != null) {
          return premiumGiveaway.call(
            this as TelegramPaymentPurposePremiumGiveaway,
          );
        }
        break;
      case TelegramPaymentPurposeStars.constructor:
        if (stars != null) {
          return stars.call(this as TelegramPaymentPurposeStars);
        }
        break;
      case TelegramPaymentPurposeGiftedStars.constructor:
        if (giftedStars != null) {
          return giftedStars.call(this as TelegramPaymentPurposeGiftedStars);
        }
        break;
      case TelegramPaymentPurposeStarGiveaway.constructor:
        if (starGiveaway != null) {
          return starGiveaway.call(this as TelegramPaymentPurposeStarGiveaway);
        }
        break;
      case TelegramPaymentPurposeJoinChat.constructor:
        if (joinChat != null) {
          return joinChat.call(this as TelegramPaymentPurposeJoinChat);
        }
        break;
    }
    return orElse.call();
  }
}

extension TelegramPaymentPurposePremiumGiftExtensions
    on TelegramPaymentPurposePremiumGift {
  TelegramPaymentPurposePremiumGift copyWith({
    String? currency,
    int? amount,
    int? userId,
    int? monthCount,
    FormattedText? text,
  }) => TelegramPaymentPurposePremiumGift(
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    userId: userId ?? this.userId,
    monthCount: monthCount ?? this.monthCount,
    text: text ?? this.text,
  );
}

extension TelegramPaymentPurposePremiumGiftCodesExtensions
    on TelegramPaymentPurposePremiumGiftCodes {
  TelegramPaymentPurposePremiumGiftCodes copyWith({
    int? boostedChatId,
    String? currency,
    int? amount,
    List<int>? userIds,
    int? monthCount,
    FormattedText? text,
  }) => TelegramPaymentPurposePremiumGiftCodes(
    boostedChatId: boostedChatId ?? this.boostedChatId,
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    userIds: userIds ?? this.userIds,
    monthCount: monthCount ?? this.monthCount,
    text: text ?? this.text,
  );
}

extension TelegramPaymentPurposePremiumGiveawayExtensions
    on TelegramPaymentPurposePremiumGiveaway {
  TelegramPaymentPurposePremiumGiveaway copyWith({
    GiveawayParameters? parameters,
    String? currency,
    int? amount,
    int? winnerCount,
    int? monthCount,
  }) => TelegramPaymentPurposePremiumGiveaway(
    parameters: parameters ?? this.parameters,
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    winnerCount: winnerCount ?? this.winnerCount,
    monthCount: monthCount ?? this.monthCount,
  );
}

extension TelegramPaymentPurposeStarsExtensions on TelegramPaymentPurposeStars {
  TelegramPaymentPurposeStars copyWith({
    String? currency,
    int? amount,
    int? starCount,
  }) => TelegramPaymentPurposeStars(
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    starCount: starCount ?? this.starCount,
  );
}

extension TelegramPaymentPurposeGiftedStarsExtensions
    on TelegramPaymentPurposeGiftedStars {
  TelegramPaymentPurposeGiftedStars copyWith({
    int? userId,
    String? currency,
    int? amount,
    int? starCount,
  }) => TelegramPaymentPurposeGiftedStars(
    userId: userId ?? this.userId,
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    starCount: starCount ?? this.starCount,
  );
}

extension TelegramPaymentPurposeStarGiveawayExtensions
    on TelegramPaymentPurposeStarGiveaway {
  TelegramPaymentPurposeStarGiveaway copyWith({
    GiveawayParameters? parameters,
    String? currency,
    int? amount,
    int? winnerCount,
    int? starCount,
  }) => TelegramPaymentPurposeStarGiveaway(
    parameters: parameters ?? this.parameters,
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
    winnerCount: winnerCount ?? this.winnerCount,
    starCount: starCount ?? this.starCount,
  );
}

extension TelegramPaymentPurposeJoinChatExtensions
    on TelegramPaymentPurposeJoinChat {
  TelegramPaymentPurposeJoinChat copyWith({String? inviteLink}) =>
      TelegramPaymentPurposeJoinChat(inviteLink: inviteLink ?? this.inviteLink);
}

extension DeviceTokenExtensions on DeviceToken {
  TResult map<TResult extends Object?>({
    required TResult Function(DeviceTokenFirebaseCloudMessaging value)
    firebaseCloudMessaging,
    required TResult Function(DeviceTokenApplePush value) applePush,
    required TResult Function(DeviceTokenApplePushVoIP value) applePushVoIP,
    required TResult Function(DeviceTokenWindowsPush value) windowsPush,
    required TResult Function(DeviceTokenMicrosoftPush value) microsoftPush,
    required TResult Function(DeviceTokenMicrosoftPushVoIP value)
    microsoftPushVoIP,
    required TResult Function(DeviceTokenWebPush value) webPush,
    required TResult Function(DeviceTokenSimplePush value) simplePush,
    required TResult Function(DeviceTokenUbuntuPush value) ubuntuPush,
    required TResult Function(DeviceTokenBlackBerryPush value) blackBerryPush,
    required TResult Function(DeviceTokenTizenPush value) tizenPush,
    required TResult Function(DeviceTokenHuaweiPush value) huaweiPush,
  }) {
    switch (getConstructor()) {
      case DeviceTokenFirebaseCloudMessaging.constructor:
        return firebaseCloudMessaging.call(
          this as DeviceTokenFirebaseCloudMessaging,
        );
      case DeviceTokenApplePush.constructor:
        return applePush.call(this as DeviceTokenApplePush);
      case DeviceTokenApplePushVoIP.constructor:
        return applePushVoIP.call(this as DeviceTokenApplePushVoIP);
      case DeviceTokenWindowsPush.constructor:
        return windowsPush.call(this as DeviceTokenWindowsPush);
      case DeviceTokenMicrosoftPush.constructor:
        return microsoftPush.call(this as DeviceTokenMicrosoftPush);
      case DeviceTokenMicrosoftPushVoIP.constructor:
        return microsoftPushVoIP.call(this as DeviceTokenMicrosoftPushVoIP);
      case DeviceTokenWebPush.constructor:
        return webPush.call(this as DeviceTokenWebPush);
      case DeviceTokenSimplePush.constructor:
        return simplePush.call(this as DeviceTokenSimplePush);
      case DeviceTokenUbuntuPush.constructor:
        return ubuntuPush.call(this as DeviceTokenUbuntuPush);
      case DeviceTokenBlackBerryPush.constructor:
        return blackBerryPush.call(this as DeviceTokenBlackBerryPush);
      case DeviceTokenTizenPush.constructor:
        return tizenPush.call(this as DeviceTokenTizenPush);
      case DeviceTokenHuaweiPush.constructor:
        return huaweiPush.call(this as DeviceTokenHuaweiPush);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(DeviceTokenFirebaseCloudMessaging value)?
    firebaseCloudMessaging,
    TResult Function(DeviceTokenApplePush value)? applePush,
    TResult Function(DeviceTokenApplePushVoIP value)? applePushVoIP,
    TResult Function(DeviceTokenWindowsPush value)? windowsPush,
    TResult Function(DeviceTokenMicrosoftPush value)? microsoftPush,
    TResult Function(DeviceTokenMicrosoftPushVoIP value)? microsoftPushVoIP,
    TResult Function(DeviceTokenWebPush value)? webPush,
    TResult Function(DeviceTokenSimplePush value)? simplePush,
    TResult Function(DeviceTokenUbuntuPush value)? ubuntuPush,
    TResult Function(DeviceTokenBlackBerryPush value)? blackBerryPush,
    TResult Function(DeviceTokenTizenPush value)? tizenPush,
    TResult Function(DeviceTokenHuaweiPush value)? huaweiPush,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case DeviceTokenFirebaseCloudMessaging.constructor:
        if (firebaseCloudMessaging != null) {
          return firebaseCloudMessaging.call(
            this as DeviceTokenFirebaseCloudMessaging,
          );
        }
        break;
      case DeviceTokenApplePush.constructor:
        if (applePush != null) {
          return applePush.call(this as DeviceTokenApplePush);
        }
        break;
      case DeviceTokenApplePushVoIP.constructor:
        if (applePushVoIP != null) {
          return applePushVoIP.call(this as DeviceTokenApplePushVoIP);
        }
        break;
      case DeviceTokenWindowsPush.constructor:
        if (windowsPush != null) {
          return windowsPush.call(this as DeviceTokenWindowsPush);
        }
        break;
      case DeviceTokenMicrosoftPush.constructor:
        if (microsoftPush != null) {
          return microsoftPush.call(this as DeviceTokenMicrosoftPush);
        }
        break;
      case DeviceTokenMicrosoftPushVoIP.constructor:
        if (microsoftPushVoIP != null) {
          return microsoftPushVoIP.call(this as DeviceTokenMicrosoftPushVoIP);
        }
        break;
      case DeviceTokenWebPush.constructor:
        if (webPush != null) {
          return webPush.call(this as DeviceTokenWebPush);
        }
        break;
      case DeviceTokenSimplePush.constructor:
        if (simplePush != null) {
          return simplePush.call(this as DeviceTokenSimplePush);
        }
        break;
      case DeviceTokenUbuntuPush.constructor:
        if (ubuntuPush != null) {
          return ubuntuPush.call(this as DeviceTokenUbuntuPush);
        }
        break;
      case DeviceTokenBlackBerryPush.constructor:
        if (blackBerryPush != null) {
          return blackBerryPush.call(this as DeviceTokenBlackBerryPush);
        }
        break;
      case DeviceTokenTizenPush.constructor:
        if (tizenPush != null) {
          return tizenPush.call(this as DeviceTokenTizenPush);
        }
        break;
      case DeviceTokenHuaweiPush.constructor:
        if (huaweiPush != null) {
          return huaweiPush.call(this as DeviceTokenHuaweiPush);
        }
        break;
    }
    return orElse.call();
  }
}

extension DeviceTokenFirebaseCloudMessagingExtensions
    on DeviceTokenFirebaseCloudMessaging {
  DeviceTokenFirebaseCloudMessaging copyWith({String? token, bool? encrypt}) =>
      DeviceTokenFirebaseCloudMessaging(
        token: token ?? this.token,
        encrypt: encrypt ?? this.encrypt,
      );
}

extension DeviceTokenApplePushExtensions on DeviceTokenApplePush {
  DeviceTokenApplePush copyWith({String? deviceToken, bool? isAppSandbox}) =>
      DeviceTokenApplePush(
        deviceToken: deviceToken ?? this.deviceToken,
        isAppSandbox: isAppSandbox ?? this.isAppSandbox,
      );
}

extension DeviceTokenApplePushVoIPExtensions on DeviceTokenApplePushVoIP {
  DeviceTokenApplePushVoIP copyWith({
    String? deviceToken,
    bool? isAppSandbox,
    bool? encrypt,
  }) => DeviceTokenApplePushVoIP(
    deviceToken: deviceToken ?? this.deviceToken,
    isAppSandbox: isAppSandbox ?? this.isAppSandbox,
    encrypt: encrypt ?? this.encrypt,
  );
}

extension DeviceTokenWindowsPushExtensions on DeviceTokenWindowsPush {
  DeviceTokenWindowsPush copyWith({String? accessToken}) =>
      DeviceTokenWindowsPush(accessToken: accessToken ?? this.accessToken);
}

extension DeviceTokenMicrosoftPushExtensions on DeviceTokenMicrosoftPush {
  DeviceTokenMicrosoftPush copyWith({String? channelUri}) =>
      DeviceTokenMicrosoftPush(channelUri: channelUri ?? this.channelUri);
}

extension DeviceTokenMicrosoftPushVoIPExtensions
    on DeviceTokenMicrosoftPushVoIP {
  DeviceTokenMicrosoftPushVoIP copyWith({String? channelUri}) =>
      DeviceTokenMicrosoftPushVoIP(channelUri: channelUri ?? this.channelUri);
}

extension DeviceTokenWebPushExtensions on DeviceTokenWebPush {
  DeviceTokenWebPush copyWith({
    String? endpoint,
    String? p256dhBase64url,
    String? authBase64url,
  }) => DeviceTokenWebPush(
    endpoint: endpoint ?? this.endpoint,
    p256dhBase64url: p256dhBase64url ?? this.p256dhBase64url,
    authBase64url: authBase64url ?? this.authBase64url,
  );
}

extension DeviceTokenSimplePushExtensions on DeviceTokenSimplePush {
  DeviceTokenSimplePush copyWith({String? endpoint}) =>
      DeviceTokenSimplePush(endpoint: endpoint ?? this.endpoint);
}

extension DeviceTokenUbuntuPushExtensions on DeviceTokenUbuntuPush {
  DeviceTokenUbuntuPush copyWith({String? token}) =>
      DeviceTokenUbuntuPush(token: token ?? this.token);
}

extension DeviceTokenBlackBerryPushExtensions on DeviceTokenBlackBerryPush {
  DeviceTokenBlackBerryPush copyWith({String? token}) =>
      DeviceTokenBlackBerryPush(token: token ?? this.token);
}

extension DeviceTokenTizenPushExtensions on DeviceTokenTizenPush {
  DeviceTokenTizenPush copyWith({String? regId}) =>
      DeviceTokenTizenPush(regId: regId ?? this.regId);
}

extension DeviceTokenHuaweiPushExtensions on DeviceTokenHuaweiPush {
  DeviceTokenHuaweiPush copyWith({String? token, bool? encrypt}) =>
      DeviceTokenHuaweiPush(
        token: token ?? this.token,
        encrypt: encrypt ?? this.encrypt,
      );
}

extension PushReceiverIdExtensions on PushReceiverId {
  PushReceiverId copyWith({int? id}) => PushReceiverId(id: id ?? this.id);
}

extension BackgroundFillExtensions on BackgroundFill {
  TResult map<TResult extends Object?>({
    required TResult Function(BackgroundFillSolid value) solid,
    required TResult Function(BackgroundFillGradient value) gradient,
    required TResult Function(BackgroundFillFreeformGradient value)
    freeformGradient,
  }) {
    switch (getConstructor()) {
      case BackgroundFillSolid.constructor:
        return solid.call(this as BackgroundFillSolid);
      case BackgroundFillGradient.constructor:
        return gradient.call(this as BackgroundFillGradient);
      case BackgroundFillFreeformGradient.constructor:
        return freeformGradient.call(this as BackgroundFillFreeformGradient);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(BackgroundFillSolid value)? solid,
    TResult Function(BackgroundFillGradient value)? gradient,
    TResult Function(BackgroundFillFreeformGradient value)? freeformGradient,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case BackgroundFillSolid.constructor:
        if (solid != null) {
          return solid.call(this as BackgroundFillSolid);
        }
        break;
      case BackgroundFillGradient.constructor:
        if (gradient != null) {
          return gradient.call(this as BackgroundFillGradient);
        }
        break;
      case BackgroundFillFreeformGradient.constructor:
        if (freeformGradient != null) {
          return freeformGradient.call(this as BackgroundFillFreeformGradient);
        }
        break;
    }
    return orElse.call();
  }
}

extension BackgroundFillSolidExtensions on BackgroundFillSolid {
  BackgroundFillSolid copyWith({int? color}) =>
      BackgroundFillSolid(color: color ?? this.color);
}

extension BackgroundFillGradientExtensions on BackgroundFillGradient {
  BackgroundFillGradient copyWith({
    int? topColor,
    int? bottomColor,
    int? rotationAngle,
  }) => BackgroundFillGradient(
    topColor: topColor ?? this.topColor,
    bottomColor: bottomColor ?? this.bottomColor,
    rotationAngle: rotationAngle ?? this.rotationAngle,
  );
}

extension BackgroundFillFreeformGradientExtensions
    on BackgroundFillFreeformGradient {
  BackgroundFillFreeformGradient copyWith({List<int>? colors}) =>
      BackgroundFillFreeformGradient(colors: colors ?? this.colors);
}

extension BackgroundTypeExtensions on BackgroundType {
  TResult map<TResult extends Object?>({
    required TResult Function(BackgroundTypeWallpaper value) wallpaper,
    required TResult Function(BackgroundTypePattern value) pattern,
    required TResult Function(BackgroundTypeFill value) fill,
    required TResult Function(BackgroundTypeChatTheme value) chatTheme,
  }) {
    switch (getConstructor()) {
      case BackgroundTypeWallpaper.constructor:
        return wallpaper.call(this as BackgroundTypeWallpaper);
      case BackgroundTypePattern.constructor:
        return pattern.call(this as BackgroundTypePattern);
      case BackgroundTypeFill.constructor:
        return fill.call(this as BackgroundTypeFill);
      case BackgroundTypeChatTheme.constructor:
        return chatTheme.call(this as BackgroundTypeChatTheme);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(BackgroundTypeWallpaper value)? wallpaper,
    TResult Function(BackgroundTypePattern value)? pattern,
    TResult Function(BackgroundTypeFill value)? fill,
    TResult Function(BackgroundTypeChatTheme value)? chatTheme,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case BackgroundTypeWallpaper.constructor:
        if (wallpaper != null) {
          return wallpaper.call(this as BackgroundTypeWallpaper);
        }
        break;
      case BackgroundTypePattern.constructor:
        if (pattern != null) {
          return pattern.call(this as BackgroundTypePattern);
        }
        break;
      case BackgroundTypeFill.constructor:
        if (fill != null) {
          return fill.call(this as BackgroundTypeFill);
        }
        break;
      case BackgroundTypeChatTheme.constructor:
        if (chatTheme != null) {
          return chatTheme.call(this as BackgroundTypeChatTheme);
        }
        break;
    }
    return orElse.call();
  }
}

extension BackgroundTypeWallpaperExtensions on BackgroundTypeWallpaper {
  BackgroundTypeWallpaper copyWith({bool? isBlurred, bool? isMoving}) =>
      BackgroundTypeWallpaper(
        isBlurred: isBlurred ?? this.isBlurred,
        isMoving: isMoving ?? this.isMoving,
      );
}

extension BackgroundTypePatternExtensions on BackgroundTypePattern {
  BackgroundTypePattern copyWith({
    BackgroundFill? fill,
    int? intensity,
    bool? isInverted,
    bool? isMoving,
  }) => BackgroundTypePattern(
    fill: fill ?? this.fill,
    intensity: intensity ?? this.intensity,
    isInverted: isInverted ?? this.isInverted,
    isMoving: isMoving ?? this.isMoving,
  );
}

extension BackgroundTypeFillExtensions on BackgroundTypeFill {
  BackgroundTypeFill copyWith({BackgroundFill? fill}) =>
      BackgroundTypeFill(fill: fill ?? this.fill);
}

extension BackgroundTypeChatThemeExtensions on BackgroundTypeChatTheme {
  BackgroundTypeChatTheme copyWith({String? themeName}) =>
      BackgroundTypeChatTheme(themeName: themeName ?? this.themeName);
}

extension InputBackgroundExtensions on InputBackground {
  TResult map<TResult extends Object?>({
    required TResult Function(InputBackgroundLocal value) local,
    required TResult Function(InputBackgroundRemote value) remote,
    required TResult Function(InputBackgroundPrevious value) previous,
  }) {
    switch (getConstructor()) {
      case InputBackgroundLocal.constructor:
        return local.call(this as InputBackgroundLocal);
      case InputBackgroundRemote.constructor:
        return remote.call(this as InputBackgroundRemote);
      case InputBackgroundPrevious.constructor:
        return previous.call(this as InputBackgroundPrevious);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InputBackgroundLocal value)? local,
    TResult Function(InputBackgroundRemote value)? remote,
    TResult Function(InputBackgroundPrevious value)? previous,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InputBackgroundLocal.constructor:
        if (local != null) {
          return local.call(this as InputBackgroundLocal);
        }
        break;
      case InputBackgroundRemote.constructor:
        if (remote != null) {
          return remote.call(this as InputBackgroundRemote);
        }
        break;
      case InputBackgroundPrevious.constructor:
        if (previous != null) {
          return previous.call(this as InputBackgroundPrevious);
        }
        break;
    }
    return orElse.call();
  }
}

extension InputBackgroundLocalExtensions on InputBackgroundLocal {
  InputBackgroundLocal copyWith({InputFile? background}) =>
      InputBackgroundLocal(background: background ?? this.background);
}

extension InputBackgroundRemoteExtensions on InputBackgroundRemote {
  InputBackgroundRemote copyWith({int? backgroundId}) =>
      InputBackgroundRemote(backgroundId: backgroundId ?? this.backgroundId);
}

extension InputBackgroundPreviousExtensions on InputBackgroundPrevious {
  InputBackgroundPrevious copyWith({int? messageId}) =>
      InputBackgroundPrevious(messageId: messageId ?? this.messageId);
}

extension ChatThemeExtensions on ChatTheme {
  ChatTheme copyWith({
    String? name,
    ThemeSettings? lightSettings,
    ThemeSettings? darkSettings,
  }) => ChatTheme(
    name: name ?? this.name,
    lightSettings: lightSettings ?? this.lightSettings,
    darkSettings: darkSettings ?? this.darkSettings,
  );
}

extension TimeZoneExtensions on TimeZone {
  TimeZone copyWith({String? id, String? name, int? utcTimeOffset}) => TimeZone(
    id: id ?? this.id,
    name: name ?? this.name,
    utcTimeOffset: utcTimeOffset ?? this.utcTimeOffset,
  );
}

extension TimeZonesExtensions on TimeZones {
  TimeZones copyWith({List<TimeZone>? timeZones}) =>
      TimeZones(timeZones: timeZones ?? this.timeZones);
}

extension HashtagsExtensions on Hashtags {
  Hashtags copyWith({List<String>? hashtags}) =>
      Hashtags(hashtags: hashtags ?? this.hashtags);
}

extension CanPostStoryResultExtensions on CanPostStoryResult {
  TResult map<TResult extends Object?>({
    required TResult Function(CanPostStoryResultOk value) ok,
    required TResult Function(CanPostStoryResultPremiumNeeded value)
    premiumNeeded,
    required TResult Function(CanPostStoryResultBoostNeeded value) boostNeeded,
    required TResult Function(CanPostStoryResultActiveStoryLimitExceeded value)
    activeStoryLimitExceeded,
    required TResult Function(CanPostStoryResultWeeklyLimitExceeded value)
    weeklyLimitExceeded,
    required TResult Function(CanPostStoryResultMonthlyLimitExceeded value)
    monthlyLimitExceeded,
  }) {
    switch (getConstructor()) {
      case CanPostStoryResultOk.constructor:
        return ok.call(this as CanPostStoryResultOk);
      case CanPostStoryResultPremiumNeeded.constructor:
        return premiumNeeded.call(this as CanPostStoryResultPremiumNeeded);
      case CanPostStoryResultBoostNeeded.constructor:
        return boostNeeded.call(this as CanPostStoryResultBoostNeeded);
      case CanPostStoryResultActiveStoryLimitExceeded.constructor:
        return activeStoryLimitExceeded.call(
          this as CanPostStoryResultActiveStoryLimitExceeded,
        );
      case CanPostStoryResultWeeklyLimitExceeded.constructor:
        return weeklyLimitExceeded.call(
          this as CanPostStoryResultWeeklyLimitExceeded,
        );
      case CanPostStoryResultMonthlyLimitExceeded.constructor:
        return monthlyLimitExceeded.call(
          this as CanPostStoryResultMonthlyLimitExceeded,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(CanPostStoryResultOk value)? ok,
    TResult Function(CanPostStoryResultPremiumNeeded value)? premiumNeeded,
    TResult Function(CanPostStoryResultBoostNeeded value)? boostNeeded,
    TResult Function(CanPostStoryResultActiveStoryLimitExceeded value)?
    activeStoryLimitExceeded,
    TResult Function(CanPostStoryResultWeeklyLimitExceeded value)?
    weeklyLimitExceeded,
    TResult Function(CanPostStoryResultMonthlyLimitExceeded value)?
    monthlyLimitExceeded,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case CanPostStoryResultOk.constructor:
        if (ok != null) {
          return ok.call(this as CanPostStoryResultOk);
        }
        break;
      case CanPostStoryResultPremiumNeeded.constructor:
        if (premiumNeeded != null) {
          return premiumNeeded.call(this as CanPostStoryResultPremiumNeeded);
        }
        break;
      case CanPostStoryResultBoostNeeded.constructor:
        if (boostNeeded != null) {
          return boostNeeded.call(this as CanPostStoryResultBoostNeeded);
        }
        break;
      case CanPostStoryResultActiveStoryLimitExceeded.constructor:
        if (activeStoryLimitExceeded != null) {
          return activeStoryLimitExceeded.call(
            this as CanPostStoryResultActiveStoryLimitExceeded,
          );
        }
        break;
      case CanPostStoryResultWeeklyLimitExceeded.constructor:
        if (weeklyLimitExceeded != null) {
          return weeklyLimitExceeded.call(
            this as CanPostStoryResultWeeklyLimitExceeded,
          );
        }
        break;
      case CanPostStoryResultMonthlyLimitExceeded.constructor:
        if (monthlyLimitExceeded != null) {
          return monthlyLimitExceeded.call(
            this as CanPostStoryResultMonthlyLimitExceeded,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension CanPostStoryResultOkExtensions on CanPostStoryResultOk {
  CanPostStoryResultOk copyWith({int? storyCount}) =>
      CanPostStoryResultOk(storyCount: storyCount ?? this.storyCount);
}

extension CanPostStoryResultWeeklyLimitExceededExtensions
    on CanPostStoryResultWeeklyLimitExceeded {
  CanPostStoryResultWeeklyLimitExceeded copyWith({int? retryAfter}) =>
      CanPostStoryResultWeeklyLimitExceeded(
        retryAfter: retryAfter ?? this.retryAfter,
      );
}

extension CanPostStoryResultMonthlyLimitExceededExtensions
    on CanPostStoryResultMonthlyLimitExceeded {
  CanPostStoryResultMonthlyLimitExceeded copyWith({int? retryAfter}) =>
      CanPostStoryResultMonthlyLimitExceeded(
        retryAfter: retryAfter ?? this.retryAfter,
      );
}

extension CanTransferOwnershipResultExtensions on CanTransferOwnershipResult {
  TResult map<TResult extends Object?>({
    required TResult Function(CanTransferOwnershipResultOk value) ok,
    required TResult Function(CanTransferOwnershipResultPasswordNeeded value)
    passwordNeeded,
    required TResult Function(CanTransferOwnershipResultPasswordTooFresh value)
    passwordTooFresh,
    required TResult Function(CanTransferOwnershipResultSessionTooFresh value)
    sessionTooFresh,
  }) {
    switch (getConstructor()) {
      case CanTransferOwnershipResultOk.constructor:
        return ok.call(this as CanTransferOwnershipResultOk);
      case CanTransferOwnershipResultPasswordNeeded.constructor:
        return passwordNeeded.call(
          this as CanTransferOwnershipResultPasswordNeeded,
        );
      case CanTransferOwnershipResultPasswordTooFresh.constructor:
        return passwordTooFresh.call(
          this as CanTransferOwnershipResultPasswordTooFresh,
        );
      case CanTransferOwnershipResultSessionTooFresh.constructor:
        return sessionTooFresh.call(
          this as CanTransferOwnershipResultSessionTooFresh,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(CanTransferOwnershipResultOk value)? ok,
    TResult Function(CanTransferOwnershipResultPasswordNeeded value)?
    passwordNeeded,
    TResult Function(CanTransferOwnershipResultPasswordTooFresh value)?
    passwordTooFresh,
    TResult Function(CanTransferOwnershipResultSessionTooFresh value)?
    sessionTooFresh,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case CanTransferOwnershipResultOk.constructor:
        if (ok != null) {
          return ok.call(this as CanTransferOwnershipResultOk);
        }
        break;
      case CanTransferOwnershipResultPasswordNeeded.constructor:
        if (passwordNeeded != null) {
          return passwordNeeded.call(
            this as CanTransferOwnershipResultPasswordNeeded,
          );
        }
        break;
      case CanTransferOwnershipResultPasswordTooFresh.constructor:
        if (passwordTooFresh != null) {
          return passwordTooFresh.call(
            this as CanTransferOwnershipResultPasswordTooFresh,
          );
        }
        break;
      case CanTransferOwnershipResultSessionTooFresh.constructor:
        if (sessionTooFresh != null) {
          return sessionTooFresh.call(
            this as CanTransferOwnershipResultSessionTooFresh,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension CanTransferOwnershipResultPasswordTooFreshExtensions
    on CanTransferOwnershipResultPasswordTooFresh {
  CanTransferOwnershipResultPasswordTooFresh copyWith({int? retryAfter}) =>
      CanTransferOwnershipResultPasswordTooFresh(
        retryAfter: retryAfter ?? this.retryAfter,
      );
}

extension CanTransferOwnershipResultSessionTooFreshExtensions
    on CanTransferOwnershipResultSessionTooFresh {
  CanTransferOwnershipResultSessionTooFresh copyWith({int? retryAfter}) =>
      CanTransferOwnershipResultSessionTooFresh(
        retryAfter: retryAfter ?? this.retryAfter,
      );
}

extension CheckChatUsernameResultExtensions on CheckChatUsernameResult {
  TResult map<TResult extends Object?>({
    required TResult Function(CheckChatUsernameResultOk value) ok,
    required TResult Function(CheckChatUsernameResultUsernameInvalid value)
    usernameInvalid,
    required TResult Function(CheckChatUsernameResultUsernameOccupied value)
    usernameOccupied,
    required TResult Function(CheckChatUsernameResultUsernamePurchasable value)
    usernamePurchasable,
    required TResult Function(CheckChatUsernameResultPublicChatsTooMany value)
    publicChatsTooMany,
    required TResult Function(
      CheckChatUsernameResultPublicGroupsUnavailable value,
    )
    publicGroupsUnavailable,
  }) {
    switch (getConstructor()) {
      case CheckChatUsernameResultOk.constructor:
        return ok.call(this as CheckChatUsernameResultOk);
      case CheckChatUsernameResultUsernameInvalid.constructor:
        return usernameInvalid.call(
          this as CheckChatUsernameResultUsernameInvalid,
        );
      case CheckChatUsernameResultUsernameOccupied.constructor:
        return usernameOccupied.call(
          this as CheckChatUsernameResultUsernameOccupied,
        );
      case CheckChatUsernameResultUsernamePurchasable.constructor:
        return usernamePurchasable.call(
          this as CheckChatUsernameResultUsernamePurchasable,
        );
      case CheckChatUsernameResultPublicChatsTooMany.constructor:
        return publicChatsTooMany.call(
          this as CheckChatUsernameResultPublicChatsTooMany,
        );
      case CheckChatUsernameResultPublicGroupsUnavailable.constructor:
        return publicGroupsUnavailable.call(
          this as CheckChatUsernameResultPublicGroupsUnavailable,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(CheckChatUsernameResultOk value)? ok,
    TResult Function(CheckChatUsernameResultUsernameInvalid value)?
    usernameInvalid,
    TResult Function(CheckChatUsernameResultUsernameOccupied value)?
    usernameOccupied,
    TResult Function(CheckChatUsernameResultUsernamePurchasable value)?
    usernamePurchasable,
    TResult Function(CheckChatUsernameResultPublicChatsTooMany value)?
    publicChatsTooMany,
    TResult Function(CheckChatUsernameResultPublicGroupsUnavailable value)?
    publicGroupsUnavailable,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case CheckChatUsernameResultOk.constructor:
        if (ok != null) {
          return ok.call(this as CheckChatUsernameResultOk);
        }
        break;
      case CheckChatUsernameResultUsernameInvalid.constructor:
        if (usernameInvalid != null) {
          return usernameInvalid.call(
            this as CheckChatUsernameResultUsernameInvalid,
          );
        }
        break;
      case CheckChatUsernameResultUsernameOccupied.constructor:
        if (usernameOccupied != null) {
          return usernameOccupied.call(
            this as CheckChatUsernameResultUsernameOccupied,
          );
        }
        break;
      case CheckChatUsernameResultUsernamePurchasable.constructor:
        if (usernamePurchasable != null) {
          return usernamePurchasable.call(
            this as CheckChatUsernameResultUsernamePurchasable,
          );
        }
        break;
      case CheckChatUsernameResultPublicChatsTooMany.constructor:
        if (publicChatsTooMany != null) {
          return publicChatsTooMany.call(
            this as CheckChatUsernameResultPublicChatsTooMany,
          );
        }
        break;
      case CheckChatUsernameResultPublicGroupsUnavailable.constructor:
        if (publicGroupsUnavailable != null) {
          return publicGroupsUnavailable.call(
            this as CheckChatUsernameResultPublicGroupsUnavailable,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension CheckStickerSetNameResultExtensions on CheckStickerSetNameResult {
  TResult map<TResult extends Object?>({
    required TResult Function(CheckStickerSetNameResultOk value) ok,
    required TResult Function(CheckStickerSetNameResultNameInvalid value)
    nameInvalid,
    required TResult Function(CheckStickerSetNameResultNameOccupied value)
    nameOccupied,
  }) {
    switch (getConstructor()) {
      case CheckStickerSetNameResultOk.constructor:
        return ok.call(this as CheckStickerSetNameResultOk);
      case CheckStickerSetNameResultNameInvalid.constructor:
        return nameInvalid.call(this as CheckStickerSetNameResultNameInvalid);
      case CheckStickerSetNameResultNameOccupied.constructor:
        return nameOccupied.call(this as CheckStickerSetNameResultNameOccupied);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(CheckStickerSetNameResultOk value)? ok,
    TResult Function(CheckStickerSetNameResultNameInvalid value)? nameInvalid,
    TResult Function(CheckStickerSetNameResultNameOccupied value)? nameOccupied,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case CheckStickerSetNameResultOk.constructor:
        if (ok != null) {
          return ok.call(this as CheckStickerSetNameResultOk);
        }
        break;
      case CheckStickerSetNameResultNameInvalid.constructor:
        if (nameInvalid != null) {
          return nameInvalid.call(this as CheckStickerSetNameResultNameInvalid);
        }
        break;
      case CheckStickerSetNameResultNameOccupied.constructor:
        if (nameOccupied != null) {
          return nameOccupied.call(
            this as CheckStickerSetNameResultNameOccupied,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension ResetPasswordResultExtensions on ResetPasswordResult {
  TResult map<TResult extends Object?>({
    required TResult Function(ResetPasswordResultOk value) ok,
    required TResult Function(ResetPasswordResultPending value) pending,
    required TResult Function(ResetPasswordResultDeclined value) declined,
  }) {
    switch (getConstructor()) {
      case ResetPasswordResultOk.constructor:
        return ok.call(this as ResetPasswordResultOk);
      case ResetPasswordResultPending.constructor:
        return pending.call(this as ResetPasswordResultPending);
      case ResetPasswordResultDeclined.constructor:
        return declined.call(this as ResetPasswordResultDeclined);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ResetPasswordResultOk value)? ok,
    TResult Function(ResetPasswordResultPending value)? pending,
    TResult Function(ResetPasswordResultDeclined value)? declined,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ResetPasswordResultOk.constructor:
        if (ok != null) {
          return ok.call(this as ResetPasswordResultOk);
        }
        break;
      case ResetPasswordResultPending.constructor:
        if (pending != null) {
          return pending.call(this as ResetPasswordResultPending);
        }
        break;
      case ResetPasswordResultDeclined.constructor:
        if (declined != null) {
          return declined.call(this as ResetPasswordResultDeclined);
        }
        break;
    }
    return orElse.call();
  }
}

extension ResetPasswordResultPendingExtensions on ResetPasswordResultPending {
  ResetPasswordResultPending copyWith({int? pendingResetDate}) =>
      ResetPasswordResultPending(
        pendingResetDate: pendingResetDate ?? this.pendingResetDate,
      );
}

extension ResetPasswordResultDeclinedExtensions on ResetPasswordResultDeclined {
  ResetPasswordResultDeclined copyWith({int? retryDate}) =>
      ResetPasswordResultDeclined(retryDate: retryDate ?? this.retryDate);
}

extension MessageFileTypeExtensions on MessageFileType {
  TResult map<TResult extends Object?>({
    required TResult Function(MessageFileTypePrivate value) private,
    required TResult Function(MessageFileTypeGroup value) group,
    required TResult Function(MessageFileTypeUnknown value) unknown,
  }) {
    switch (getConstructor()) {
      case MessageFileTypePrivate.constructor:
        return private.call(this as MessageFileTypePrivate);
      case MessageFileTypeGroup.constructor:
        return group.call(this as MessageFileTypeGroup);
      case MessageFileTypeUnknown.constructor:
        return unknown.call(this as MessageFileTypeUnknown);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(MessageFileTypePrivate value)? private,
    TResult Function(MessageFileTypeGroup value)? group,
    TResult Function(MessageFileTypeUnknown value)? unknown,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case MessageFileTypePrivate.constructor:
        if (private != null) {
          return private.call(this as MessageFileTypePrivate);
        }
        break;
      case MessageFileTypeGroup.constructor:
        if (group != null) {
          return group.call(this as MessageFileTypeGroup);
        }
        break;
      case MessageFileTypeUnknown.constructor:
        if (unknown != null) {
          return unknown.call(this as MessageFileTypeUnknown);
        }
        break;
    }
    return orElse.call();
  }
}

extension MessageFileTypePrivateExtensions on MessageFileTypePrivate {
  MessageFileTypePrivate copyWith({String? name}) =>
      MessageFileTypePrivate(name: name ?? this.name);
}

extension MessageFileTypeGroupExtensions on MessageFileTypeGroup {
  MessageFileTypeGroup copyWith({String? title}) =>
      MessageFileTypeGroup(title: title ?? this.title);
}

extension PushMessageContentExtensions on PushMessageContent {
  TResult map<TResult extends Object?>({
    required TResult Function(PushMessageContentHidden value) hidden,
    required TResult Function(PushMessageContentAnimation value) animation,
    required TResult Function(PushMessageContentAudio value) audio,
    required TResult Function(PushMessageContentContact value) contact,
    required TResult Function(PushMessageContentContactRegistered value)
    contactRegistered,
    required TResult Function(PushMessageContentDocument value) document,
    required TResult Function(PushMessageContentGame value) game,
    required TResult Function(PushMessageContentGameScore value) gameScore,
    required TResult Function(PushMessageContentInvoice value) invoice,
    required TResult Function(PushMessageContentLocation value) location,
    required TResult Function(PushMessageContentPaidMedia value) paidMedia,
    required TResult Function(PushMessageContentPhoto value) photo,
    required TResult Function(PushMessageContentPoll value) poll,
    required TResult Function(PushMessageContentPremiumGiftCode value)
    premiumGiftCode,
    required TResult Function(PushMessageContentGiveaway value) giveaway,
    required TResult Function(PushMessageContentGift value) gift,
    required TResult Function(PushMessageContentUpgradedGift value)
    upgradedGift,
    required TResult Function(PushMessageContentScreenshotTaken value)
    screenshotTaken,
    required TResult Function(PushMessageContentSticker value) sticker,
    required TResult Function(PushMessageContentStory value) story,
    required TResult Function(PushMessageContentText value) text,
    required TResult Function(PushMessageContentChecklist value) checklist,
    required TResult Function(PushMessageContentVideo value) video,
    required TResult Function(PushMessageContentVideoNote value) videoNote,
    required TResult Function(PushMessageContentVoiceNote value) voiceNote,
    required TResult Function(PushMessageContentBasicGroupChatCreate value)
    basicGroupChatCreate,
    required TResult Function(PushMessageContentVideoChatStarted value)
    videoChatStarted,
    required TResult Function(PushMessageContentVideoChatEnded value)
    videoChatEnded,
    required TResult Function(
      PushMessageContentInviteVideoChatParticipants value,
    )
    inviteVideoChatParticipants,
    required TResult Function(PushMessageContentChatAddMembers value)
    chatAddMembers,
    required TResult Function(PushMessageContentChatChangePhoto value)
    chatChangePhoto,
    required TResult Function(PushMessageContentChatChangeTitle value)
    chatChangeTitle,
    required TResult Function(PushMessageContentChatSetBackground value)
    chatSetBackground,
    required TResult Function(PushMessageContentChatSetTheme value)
    chatSetTheme,
    required TResult Function(PushMessageContentChatDeleteMember value)
    chatDeleteMember,
    required TResult Function(PushMessageContentChatJoinByLink value)
    chatJoinByLink,
    required TResult Function(PushMessageContentChatJoinByRequest value)
    chatJoinByRequest,
    required TResult Function(PushMessageContentRecurringPayment value)
    recurringPayment,
    required TResult Function(PushMessageContentSuggestProfilePhoto value)
    suggestProfilePhoto,
    required TResult Function(PushMessageContentProximityAlertTriggered value)
    proximityAlertTriggered,
    required TResult Function(PushMessageContentChecklistTasksAdded value)
    checklistTasksAdded,
    required TResult Function(PushMessageContentChecklistTasksDone value)
    checklistTasksDone,
    required TResult Function(PushMessageContentMessageForwards value)
    messageForwards,
    required TResult Function(PushMessageContentMediaAlbum value) mediaAlbum,
  }) {
    switch (getConstructor()) {
      case PushMessageContentHidden.constructor:
        return hidden.call(this as PushMessageContentHidden);
      case PushMessageContentAnimation.constructor:
        return animation.call(this as PushMessageContentAnimation);
      case PushMessageContentAudio.constructor:
        return audio.call(this as PushMessageContentAudio);
      case PushMessageContentContact.constructor:
        return contact.call(this as PushMessageContentContact);
      case PushMessageContentContactRegistered.constructor:
        return contactRegistered.call(
          this as PushMessageContentContactRegistered,
        );
      case PushMessageContentDocument.constructor:
        return document.call(this as PushMessageContentDocument);
      case PushMessageContentGame.constructor:
        return game.call(this as PushMessageContentGame);
      case PushMessageContentGameScore.constructor:
        return gameScore.call(this as PushMessageContentGameScore);
      case PushMessageContentInvoice.constructor:
        return invoice.call(this as PushMessageContentInvoice);
      case PushMessageContentLocation.constructor:
        return location.call(this as PushMessageContentLocation);
      case PushMessageContentPaidMedia.constructor:
        return paidMedia.call(this as PushMessageContentPaidMedia);
      case PushMessageContentPhoto.constructor:
        return photo.call(this as PushMessageContentPhoto);
      case PushMessageContentPoll.constructor:
        return poll.call(this as PushMessageContentPoll);
      case PushMessageContentPremiumGiftCode.constructor:
        return premiumGiftCode.call(this as PushMessageContentPremiumGiftCode);
      case PushMessageContentGiveaway.constructor:
        return giveaway.call(this as PushMessageContentGiveaway);
      case PushMessageContentGift.constructor:
        return gift.call(this as PushMessageContentGift);
      case PushMessageContentUpgradedGift.constructor:
        return upgradedGift.call(this as PushMessageContentUpgradedGift);
      case PushMessageContentScreenshotTaken.constructor:
        return screenshotTaken.call(this as PushMessageContentScreenshotTaken);
      case PushMessageContentSticker.constructor:
        return sticker.call(this as PushMessageContentSticker);
      case PushMessageContentStory.constructor:
        return story.call(this as PushMessageContentStory);
      case PushMessageContentText.constructor:
        return text.call(this as PushMessageContentText);
      case PushMessageContentChecklist.constructor:
        return checklist.call(this as PushMessageContentChecklist);
      case PushMessageContentVideo.constructor:
        return video.call(this as PushMessageContentVideo);
      case PushMessageContentVideoNote.constructor:
        return videoNote.call(this as PushMessageContentVideoNote);
      case PushMessageContentVoiceNote.constructor:
        return voiceNote.call(this as PushMessageContentVoiceNote);
      case PushMessageContentBasicGroupChatCreate.constructor:
        return basicGroupChatCreate.call(
          this as PushMessageContentBasicGroupChatCreate,
        );
      case PushMessageContentVideoChatStarted.constructor:
        return videoChatStarted.call(
          this as PushMessageContentVideoChatStarted,
        );
      case PushMessageContentVideoChatEnded.constructor:
        return videoChatEnded.call(this as PushMessageContentVideoChatEnded);
      case PushMessageContentInviteVideoChatParticipants.constructor:
        return inviteVideoChatParticipants.call(
          this as PushMessageContentInviteVideoChatParticipants,
        );
      case PushMessageContentChatAddMembers.constructor:
        return chatAddMembers.call(this as PushMessageContentChatAddMembers);
      case PushMessageContentChatChangePhoto.constructor:
        return chatChangePhoto.call(this as PushMessageContentChatChangePhoto);
      case PushMessageContentChatChangeTitle.constructor:
        return chatChangeTitle.call(this as PushMessageContentChatChangeTitle);
      case PushMessageContentChatSetBackground.constructor:
        return chatSetBackground.call(
          this as PushMessageContentChatSetBackground,
        );
      case PushMessageContentChatSetTheme.constructor:
        return chatSetTheme.call(this as PushMessageContentChatSetTheme);
      case PushMessageContentChatDeleteMember.constructor:
        return chatDeleteMember.call(
          this as PushMessageContentChatDeleteMember,
        );
      case PushMessageContentChatJoinByLink.constructor:
        return chatJoinByLink.call(this as PushMessageContentChatJoinByLink);
      case PushMessageContentChatJoinByRequest.constructor:
        return chatJoinByRequest.call(
          this as PushMessageContentChatJoinByRequest,
        );
      case PushMessageContentRecurringPayment.constructor:
        return recurringPayment.call(
          this as PushMessageContentRecurringPayment,
        );
      case PushMessageContentSuggestProfilePhoto.constructor:
        return suggestProfilePhoto.call(
          this as PushMessageContentSuggestProfilePhoto,
        );
      case PushMessageContentProximityAlertTriggered.constructor:
        return proximityAlertTriggered.call(
          this as PushMessageContentProximityAlertTriggered,
        );
      case PushMessageContentChecklistTasksAdded.constructor:
        return checklistTasksAdded.call(
          this as PushMessageContentChecklistTasksAdded,
        );
      case PushMessageContentChecklistTasksDone.constructor:
        return checklistTasksDone.call(
          this as PushMessageContentChecklistTasksDone,
        );
      case PushMessageContentMessageForwards.constructor:
        return messageForwards.call(this as PushMessageContentMessageForwards);
      case PushMessageContentMediaAlbum.constructor:
        return mediaAlbum.call(this as PushMessageContentMediaAlbum);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PushMessageContentHidden value)? hidden,
    TResult Function(PushMessageContentAnimation value)? animation,
    TResult Function(PushMessageContentAudio value)? audio,
    TResult Function(PushMessageContentContact value)? contact,
    TResult Function(PushMessageContentContactRegistered value)?
    contactRegistered,
    TResult Function(PushMessageContentDocument value)? document,
    TResult Function(PushMessageContentGame value)? game,
    TResult Function(PushMessageContentGameScore value)? gameScore,
    TResult Function(PushMessageContentInvoice value)? invoice,
    TResult Function(PushMessageContentLocation value)? location,
    TResult Function(PushMessageContentPaidMedia value)? paidMedia,
    TResult Function(PushMessageContentPhoto value)? photo,
    TResult Function(PushMessageContentPoll value)? poll,
    TResult Function(PushMessageContentPremiumGiftCode value)? premiumGiftCode,
    TResult Function(PushMessageContentGiveaway value)? giveaway,
    TResult Function(PushMessageContentGift value)? gift,
    TResult Function(PushMessageContentUpgradedGift value)? upgradedGift,
    TResult Function(PushMessageContentScreenshotTaken value)? screenshotTaken,
    TResult Function(PushMessageContentSticker value)? sticker,
    TResult Function(PushMessageContentStory value)? story,
    TResult Function(PushMessageContentText value)? text,
    TResult Function(PushMessageContentChecklist value)? checklist,
    TResult Function(PushMessageContentVideo value)? video,
    TResult Function(PushMessageContentVideoNote value)? videoNote,
    TResult Function(PushMessageContentVoiceNote value)? voiceNote,
    TResult Function(PushMessageContentBasicGroupChatCreate value)?
    basicGroupChatCreate,
    TResult Function(PushMessageContentVideoChatStarted value)?
    videoChatStarted,
    TResult Function(PushMessageContentVideoChatEnded value)? videoChatEnded,
    TResult Function(PushMessageContentInviteVideoChatParticipants value)?
    inviteVideoChatParticipants,
    TResult Function(PushMessageContentChatAddMembers value)? chatAddMembers,
    TResult Function(PushMessageContentChatChangePhoto value)? chatChangePhoto,
    TResult Function(PushMessageContentChatChangeTitle value)? chatChangeTitle,
    TResult Function(PushMessageContentChatSetBackground value)?
    chatSetBackground,
    TResult Function(PushMessageContentChatSetTheme value)? chatSetTheme,
    TResult Function(PushMessageContentChatDeleteMember value)?
    chatDeleteMember,
    TResult Function(PushMessageContentChatJoinByLink value)? chatJoinByLink,
    TResult Function(PushMessageContentChatJoinByRequest value)?
    chatJoinByRequest,
    TResult Function(PushMessageContentRecurringPayment value)?
    recurringPayment,
    TResult Function(PushMessageContentSuggestProfilePhoto value)?
    suggestProfilePhoto,
    TResult Function(PushMessageContentProximityAlertTriggered value)?
    proximityAlertTriggered,
    TResult Function(PushMessageContentChecklistTasksAdded value)?
    checklistTasksAdded,
    TResult Function(PushMessageContentChecklistTasksDone value)?
    checklistTasksDone,
    TResult Function(PushMessageContentMessageForwards value)? messageForwards,
    TResult Function(PushMessageContentMediaAlbum value)? mediaAlbum,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PushMessageContentHidden.constructor:
        if (hidden != null) {
          return hidden.call(this as PushMessageContentHidden);
        }
        break;
      case PushMessageContentAnimation.constructor:
        if (animation != null) {
          return animation.call(this as PushMessageContentAnimation);
        }
        break;
      case PushMessageContentAudio.constructor:
        if (audio != null) {
          return audio.call(this as PushMessageContentAudio);
        }
        break;
      case PushMessageContentContact.constructor:
        if (contact != null) {
          return contact.call(this as PushMessageContentContact);
        }
        break;
      case PushMessageContentContactRegistered.constructor:
        if (contactRegistered != null) {
          return contactRegistered.call(
            this as PushMessageContentContactRegistered,
          );
        }
        break;
      case PushMessageContentDocument.constructor:
        if (document != null) {
          return document.call(this as PushMessageContentDocument);
        }
        break;
      case PushMessageContentGame.constructor:
        if (game != null) {
          return game.call(this as PushMessageContentGame);
        }
        break;
      case PushMessageContentGameScore.constructor:
        if (gameScore != null) {
          return gameScore.call(this as PushMessageContentGameScore);
        }
        break;
      case PushMessageContentInvoice.constructor:
        if (invoice != null) {
          return invoice.call(this as PushMessageContentInvoice);
        }
        break;
      case PushMessageContentLocation.constructor:
        if (location != null) {
          return location.call(this as PushMessageContentLocation);
        }
        break;
      case PushMessageContentPaidMedia.constructor:
        if (paidMedia != null) {
          return paidMedia.call(this as PushMessageContentPaidMedia);
        }
        break;
      case PushMessageContentPhoto.constructor:
        if (photo != null) {
          return photo.call(this as PushMessageContentPhoto);
        }
        break;
      case PushMessageContentPoll.constructor:
        if (poll != null) {
          return poll.call(this as PushMessageContentPoll);
        }
        break;
      case PushMessageContentPremiumGiftCode.constructor:
        if (premiumGiftCode != null) {
          return premiumGiftCode.call(
            this as PushMessageContentPremiumGiftCode,
          );
        }
        break;
      case PushMessageContentGiveaway.constructor:
        if (giveaway != null) {
          return giveaway.call(this as PushMessageContentGiveaway);
        }
        break;
      case PushMessageContentGift.constructor:
        if (gift != null) {
          return gift.call(this as PushMessageContentGift);
        }
        break;
      case PushMessageContentUpgradedGift.constructor:
        if (upgradedGift != null) {
          return upgradedGift.call(this as PushMessageContentUpgradedGift);
        }
        break;
      case PushMessageContentScreenshotTaken.constructor:
        if (screenshotTaken != null) {
          return screenshotTaken.call(
            this as PushMessageContentScreenshotTaken,
          );
        }
        break;
      case PushMessageContentSticker.constructor:
        if (sticker != null) {
          return sticker.call(this as PushMessageContentSticker);
        }
        break;
      case PushMessageContentStory.constructor:
        if (story != null) {
          return story.call(this as PushMessageContentStory);
        }
        break;
      case PushMessageContentText.constructor:
        if (text != null) {
          return text.call(this as PushMessageContentText);
        }
        break;
      case PushMessageContentChecklist.constructor:
        if (checklist != null) {
          return checklist.call(this as PushMessageContentChecklist);
        }
        break;
      case PushMessageContentVideo.constructor:
        if (video != null) {
          return video.call(this as PushMessageContentVideo);
        }
        break;
      case PushMessageContentVideoNote.constructor:
        if (videoNote != null) {
          return videoNote.call(this as PushMessageContentVideoNote);
        }
        break;
      case PushMessageContentVoiceNote.constructor:
        if (voiceNote != null) {
          return voiceNote.call(this as PushMessageContentVoiceNote);
        }
        break;
      case PushMessageContentBasicGroupChatCreate.constructor:
        if (basicGroupChatCreate != null) {
          return basicGroupChatCreate.call(
            this as PushMessageContentBasicGroupChatCreate,
          );
        }
        break;
      case PushMessageContentVideoChatStarted.constructor:
        if (videoChatStarted != null) {
          return videoChatStarted.call(
            this as PushMessageContentVideoChatStarted,
          );
        }
        break;
      case PushMessageContentVideoChatEnded.constructor:
        if (videoChatEnded != null) {
          return videoChatEnded.call(this as PushMessageContentVideoChatEnded);
        }
        break;
      case PushMessageContentInviteVideoChatParticipants.constructor:
        if (inviteVideoChatParticipants != null) {
          return inviteVideoChatParticipants.call(
            this as PushMessageContentInviteVideoChatParticipants,
          );
        }
        break;
      case PushMessageContentChatAddMembers.constructor:
        if (chatAddMembers != null) {
          return chatAddMembers.call(this as PushMessageContentChatAddMembers);
        }
        break;
      case PushMessageContentChatChangePhoto.constructor:
        if (chatChangePhoto != null) {
          return chatChangePhoto.call(
            this as PushMessageContentChatChangePhoto,
          );
        }
        break;
      case PushMessageContentChatChangeTitle.constructor:
        if (chatChangeTitle != null) {
          return chatChangeTitle.call(
            this as PushMessageContentChatChangeTitle,
          );
        }
        break;
      case PushMessageContentChatSetBackground.constructor:
        if (chatSetBackground != null) {
          return chatSetBackground.call(
            this as PushMessageContentChatSetBackground,
          );
        }
        break;
      case PushMessageContentChatSetTheme.constructor:
        if (chatSetTheme != null) {
          return chatSetTheme.call(this as PushMessageContentChatSetTheme);
        }
        break;
      case PushMessageContentChatDeleteMember.constructor:
        if (chatDeleteMember != null) {
          return chatDeleteMember.call(
            this as PushMessageContentChatDeleteMember,
          );
        }
        break;
      case PushMessageContentChatJoinByLink.constructor:
        if (chatJoinByLink != null) {
          return chatJoinByLink.call(this as PushMessageContentChatJoinByLink);
        }
        break;
      case PushMessageContentChatJoinByRequest.constructor:
        if (chatJoinByRequest != null) {
          return chatJoinByRequest.call(
            this as PushMessageContentChatJoinByRequest,
          );
        }
        break;
      case PushMessageContentRecurringPayment.constructor:
        if (recurringPayment != null) {
          return recurringPayment.call(
            this as PushMessageContentRecurringPayment,
          );
        }
        break;
      case PushMessageContentSuggestProfilePhoto.constructor:
        if (suggestProfilePhoto != null) {
          return suggestProfilePhoto.call(
            this as PushMessageContentSuggestProfilePhoto,
          );
        }
        break;
      case PushMessageContentProximityAlertTriggered.constructor:
        if (proximityAlertTriggered != null) {
          return proximityAlertTriggered.call(
            this as PushMessageContentProximityAlertTriggered,
          );
        }
        break;
      case PushMessageContentChecklistTasksAdded.constructor:
        if (checklistTasksAdded != null) {
          return checklistTasksAdded.call(
            this as PushMessageContentChecklistTasksAdded,
          );
        }
        break;
      case PushMessageContentChecklistTasksDone.constructor:
        if (checklistTasksDone != null) {
          return checklistTasksDone.call(
            this as PushMessageContentChecklistTasksDone,
          );
        }
        break;
      case PushMessageContentMessageForwards.constructor:
        if (messageForwards != null) {
          return messageForwards.call(
            this as PushMessageContentMessageForwards,
          );
        }
        break;
      case PushMessageContentMediaAlbum.constructor:
        if (mediaAlbum != null) {
          return mediaAlbum.call(this as PushMessageContentMediaAlbum);
        }
        break;
    }
    return orElse.call();
  }
}

extension PushMessageContentHiddenExtensions on PushMessageContentHidden {
  PushMessageContentHidden copyWith({bool? isPinned}) =>
      PushMessageContentHidden(isPinned: isPinned ?? this.isPinned);
}

extension PushMessageContentAnimationExtensions on PushMessageContentAnimation {
  PushMessageContentAnimation copyWith({
    Animation? animation,
    String? caption,
    bool? isPinned,
  }) => PushMessageContentAnimation(
    animation: animation ?? this.animation,
    caption: caption ?? this.caption,
    isPinned: isPinned ?? this.isPinned,
  );
}

extension PushMessageContentAudioExtensions on PushMessageContentAudio {
  PushMessageContentAudio copyWith({Audio? audio, bool? isPinned}) =>
      PushMessageContentAudio(
        audio: audio ?? this.audio,
        isPinned: isPinned ?? this.isPinned,
      );
}

extension PushMessageContentContactExtensions on PushMessageContentContact {
  PushMessageContentContact copyWith({String? name, bool? isPinned}) =>
      PushMessageContentContact(
        name: name ?? this.name,
        isPinned: isPinned ?? this.isPinned,
      );
}

extension PushMessageContentDocumentExtensions on PushMessageContentDocument {
  PushMessageContentDocument copyWith({Document? document, bool? isPinned}) =>
      PushMessageContentDocument(
        document: document ?? this.document,
        isPinned: isPinned ?? this.isPinned,
      );
}

extension PushMessageContentGameExtensions on PushMessageContentGame {
  PushMessageContentGame copyWith({String? title, bool? isPinned}) =>
      PushMessageContentGame(
        title: title ?? this.title,
        isPinned: isPinned ?? this.isPinned,
      );
}

extension PushMessageContentGameScoreExtensions on PushMessageContentGameScore {
  PushMessageContentGameScore copyWith({
    String? title,
    int? score,
    bool? isPinned,
  }) => PushMessageContentGameScore(
    title: title ?? this.title,
    score: score ?? this.score,
    isPinned: isPinned ?? this.isPinned,
  );
}

extension PushMessageContentInvoiceExtensions on PushMessageContentInvoice {
  PushMessageContentInvoice copyWith({String? price, bool? isPinned}) =>
      PushMessageContentInvoice(
        price: price ?? this.price,
        isPinned: isPinned ?? this.isPinned,
      );
}

extension PushMessageContentLocationExtensions on PushMessageContentLocation {
  PushMessageContentLocation copyWith({bool? isLive, bool? isPinned}) =>
      PushMessageContentLocation(
        isLive: isLive ?? this.isLive,
        isPinned: isPinned ?? this.isPinned,
      );
}

extension PushMessageContentPaidMediaExtensions on PushMessageContentPaidMedia {
  PushMessageContentPaidMedia copyWith({int? starCount, bool? isPinned}) =>
      PushMessageContentPaidMedia(
        starCount: starCount ?? this.starCount,
        isPinned: isPinned ?? this.isPinned,
      );
}

extension PushMessageContentPhotoExtensions on PushMessageContentPhoto {
  PushMessageContentPhoto copyWith({
    Photo? photo,
    String? caption,
    bool? isSecret,
    bool? isPinned,
  }) => PushMessageContentPhoto(
    photo: photo ?? this.photo,
    caption: caption ?? this.caption,
    isSecret: isSecret ?? this.isSecret,
    isPinned: isPinned ?? this.isPinned,
  );
}

extension PushMessageContentPollExtensions on PushMessageContentPoll {
  PushMessageContentPoll copyWith({
    String? question,
    bool? isRegular,
    bool? isPinned,
  }) => PushMessageContentPoll(
    question: question ?? this.question,
    isRegular: isRegular ?? this.isRegular,
    isPinned: isPinned ?? this.isPinned,
  );
}

extension PushMessageContentPremiumGiftCodeExtensions
    on PushMessageContentPremiumGiftCode {
  PushMessageContentPremiumGiftCode copyWith({int? monthCount}) =>
      PushMessageContentPremiumGiftCode(
        monthCount: monthCount ?? this.monthCount,
      );
}

extension PushMessageContentGiveawayExtensions on PushMessageContentGiveaway {
  PushMessageContentGiveaway copyWith({
    int? winnerCount,
    GiveawayPrize? prize,
    bool? isPinned,
  }) => PushMessageContentGiveaway(
    winnerCount: winnerCount ?? this.winnerCount,
    prize: prize ?? this.prize,
    isPinned: isPinned ?? this.isPinned,
  );
}

extension PushMessageContentGiftExtensions on PushMessageContentGift {
  PushMessageContentGift copyWith({int? starCount}) =>
      PushMessageContentGift(starCount: starCount ?? this.starCount);
}

extension PushMessageContentUpgradedGiftExtensions
    on PushMessageContentUpgradedGift {
  PushMessageContentUpgradedGift copyWith({bool? isUpgrade}) =>
      PushMessageContentUpgradedGift(isUpgrade: isUpgrade ?? this.isUpgrade);
}

extension PushMessageContentStickerExtensions on PushMessageContentSticker {
  PushMessageContentSticker copyWith({
    Sticker? sticker,
    String? emoji,
    bool? isPinned,
  }) => PushMessageContentSticker(
    sticker: sticker ?? this.sticker,
    emoji: emoji ?? this.emoji,
    isPinned: isPinned ?? this.isPinned,
  );
}

extension PushMessageContentStoryExtensions on PushMessageContentStory {
  PushMessageContentStory copyWith({bool? isMention, bool? isPinned}) =>
      PushMessageContentStory(
        isMention: isMention ?? this.isMention,
        isPinned: isPinned ?? this.isPinned,
      );
}

extension PushMessageContentTextExtensions on PushMessageContentText {
  PushMessageContentText copyWith({String? text, bool? isPinned}) =>
      PushMessageContentText(
        text: text ?? this.text,
        isPinned: isPinned ?? this.isPinned,
      );
}

extension PushMessageContentChecklistExtensions on PushMessageContentChecklist {
  PushMessageContentChecklist copyWith({String? title, bool? isPinned}) =>
      PushMessageContentChecklist(
        title: title ?? this.title,
        isPinned: isPinned ?? this.isPinned,
      );
}

extension PushMessageContentVideoExtensions on PushMessageContentVideo {
  PushMessageContentVideo copyWith({
    Video? video,
    String? caption,
    bool? isSecret,
    bool? isPinned,
  }) => PushMessageContentVideo(
    video: video ?? this.video,
    caption: caption ?? this.caption,
    isSecret: isSecret ?? this.isSecret,
    isPinned: isPinned ?? this.isPinned,
  );
}

extension PushMessageContentVideoNoteExtensions on PushMessageContentVideoNote {
  PushMessageContentVideoNote copyWith({
    VideoNote? videoNote,
    bool? isPinned,
  }) => PushMessageContentVideoNote(
    videoNote: videoNote ?? this.videoNote,
    isPinned: isPinned ?? this.isPinned,
  );
}

extension PushMessageContentVoiceNoteExtensions on PushMessageContentVoiceNote {
  PushMessageContentVoiceNote copyWith({
    VoiceNote? voiceNote,
    bool? isPinned,
  }) => PushMessageContentVoiceNote(
    voiceNote: voiceNote ?? this.voiceNote,
    isPinned: isPinned ?? this.isPinned,
  );
}

extension PushMessageContentInviteVideoChatParticipantsExtensions
    on PushMessageContentInviteVideoChatParticipants {
  PushMessageContentInviteVideoChatParticipants copyWith({
    bool? isCurrentUser,
  }) => PushMessageContentInviteVideoChatParticipants(
    isCurrentUser: isCurrentUser ?? this.isCurrentUser,
  );
}

extension PushMessageContentChatAddMembersExtensions
    on PushMessageContentChatAddMembers {
  PushMessageContentChatAddMembers copyWith({
    String? memberName,
    bool? isCurrentUser,
    bool? isReturned,
  }) => PushMessageContentChatAddMembers(
    memberName: memberName ?? this.memberName,
    isCurrentUser: isCurrentUser ?? this.isCurrentUser,
    isReturned: isReturned ?? this.isReturned,
  );
}

extension PushMessageContentChatChangeTitleExtensions
    on PushMessageContentChatChangeTitle {
  PushMessageContentChatChangeTitle copyWith({String? title}) =>
      PushMessageContentChatChangeTitle(title: title ?? this.title);
}

extension PushMessageContentChatSetBackgroundExtensions
    on PushMessageContentChatSetBackground {
  PushMessageContentChatSetBackground copyWith({bool? isSame}) =>
      PushMessageContentChatSetBackground(isSame: isSame ?? this.isSame);
}

extension PushMessageContentChatSetThemeExtensions
    on PushMessageContentChatSetTheme {
  PushMessageContentChatSetTheme copyWith({String? themeName}) =>
      PushMessageContentChatSetTheme(themeName: themeName ?? this.themeName);
}

extension PushMessageContentChatDeleteMemberExtensions
    on PushMessageContentChatDeleteMember {
  PushMessageContentChatDeleteMember copyWith({
    String? memberName,
    bool? isCurrentUser,
    bool? isLeft,
  }) => PushMessageContentChatDeleteMember(
    memberName: memberName ?? this.memberName,
    isCurrentUser: isCurrentUser ?? this.isCurrentUser,
    isLeft: isLeft ?? this.isLeft,
  );
}

extension PushMessageContentRecurringPaymentExtensions
    on PushMessageContentRecurringPayment {
  PushMessageContentRecurringPayment copyWith({String? amount}) =>
      PushMessageContentRecurringPayment(amount: amount ?? this.amount);
}

extension PushMessageContentProximityAlertTriggeredExtensions
    on PushMessageContentProximityAlertTriggered {
  PushMessageContentProximityAlertTriggered copyWith({int? distance}) =>
      PushMessageContentProximityAlertTriggered(
        distance: distance ?? this.distance,
      );
}

extension PushMessageContentChecklistTasksAddedExtensions
    on PushMessageContentChecklistTasksAdded {
  PushMessageContentChecklistTasksAdded copyWith({int? taskCount}) =>
      PushMessageContentChecklistTasksAdded(
        taskCount: taskCount ?? this.taskCount,
      );
}

extension PushMessageContentChecklistTasksDoneExtensions
    on PushMessageContentChecklistTasksDone {
  PushMessageContentChecklistTasksDone copyWith({int? taskCount}) =>
      PushMessageContentChecklistTasksDone(
        taskCount: taskCount ?? this.taskCount,
      );
}

extension PushMessageContentMessageForwardsExtensions
    on PushMessageContentMessageForwards {
  PushMessageContentMessageForwards copyWith({int? totalCount}) =>
      PushMessageContentMessageForwards(
        totalCount: totalCount ?? this.totalCount,
      );
}

extension PushMessageContentMediaAlbumExtensions
    on PushMessageContentMediaAlbum {
  PushMessageContentMediaAlbum copyWith({
    int? totalCount,
    bool? hasPhotos,
    bool? hasVideos,
    bool? hasAudios,
    bool? hasDocuments,
  }) => PushMessageContentMediaAlbum(
    totalCount: totalCount ?? this.totalCount,
    hasPhotos: hasPhotos ?? this.hasPhotos,
    hasVideos: hasVideos ?? this.hasVideos,
    hasAudios: hasAudios ?? this.hasAudios,
    hasDocuments: hasDocuments ?? this.hasDocuments,
  );
}

extension NotificationTypeExtensions on NotificationType {
  TResult map<TResult extends Object?>({
    required TResult Function(NotificationTypeNewMessage value) newMessage,
    required TResult Function(NotificationTypeNewSecretChat value)
    newSecretChat,
    required TResult Function(NotificationTypeNewCall value) newCall,
    required TResult Function(NotificationTypeNewPushMessage value)
    newPushMessage,
  }) {
    switch (getConstructor()) {
      case NotificationTypeNewMessage.constructor:
        return newMessage.call(this as NotificationTypeNewMessage);
      case NotificationTypeNewSecretChat.constructor:
        return newSecretChat.call(this as NotificationTypeNewSecretChat);
      case NotificationTypeNewCall.constructor:
        return newCall.call(this as NotificationTypeNewCall);
      case NotificationTypeNewPushMessage.constructor:
        return newPushMessage.call(this as NotificationTypeNewPushMessage);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(NotificationTypeNewMessage value)? newMessage,
    TResult Function(NotificationTypeNewSecretChat value)? newSecretChat,
    TResult Function(NotificationTypeNewCall value)? newCall,
    TResult Function(NotificationTypeNewPushMessage value)? newPushMessage,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case NotificationTypeNewMessage.constructor:
        if (newMessage != null) {
          return newMessage.call(this as NotificationTypeNewMessage);
        }
        break;
      case NotificationTypeNewSecretChat.constructor:
        if (newSecretChat != null) {
          return newSecretChat.call(this as NotificationTypeNewSecretChat);
        }
        break;
      case NotificationTypeNewCall.constructor:
        if (newCall != null) {
          return newCall.call(this as NotificationTypeNewCall);
        }
        break;
      case NotificationTypeNewPushMessage.constructor:
        if (newPushMessage != null) {
          return newPushMessage.call(this as NotificationTypeNewPushMessage);
        }
        break;
    }
    return orElse.call();
  }
}

extension NotificationTypeNewMessageExtensions on NotificationTypeNewMessage {
  NotificationTypeNewMessage copyWith({Message? message, bool? showPreview}) =>
      NotificationTypeNewMessage(
        message: message ?? this.message,
        showPreview: showPreview ?? this.showPreview,
      );
}

extension NotificationTypeNewCallExtensions on NotificationTypeNewCall {
  NotificationTypeNewCall copyWith({int? callId}) =>
      NotificationTypeNewCall(callId: callId ?? this.callId);
}

extension NotificationTypeNewPushMessageExtensions
    on NotificationTypeNewPushMessage {
  NotificationTypeNewPushMessage copyWith({
    int? messageId,
    MessageSender? senderId,
    String? senderName,
    bool? isOutgoing,
    PushMessageContent? content,
  }) => NotificationTypeNewPushMessage(
    messageId: messageId ?? this.messageId,
    senderId: senderId ?? this.senderId,
    senderName: senderName ?? this.senderName,
    isOutgoing: isOutgoing ?? this.isOutgoing,
    content: content ?? this.content,
  );
}

extension NotificationGroupTypeExtensions on NotificationGroupType {
  TResult map<TResult extends Object?>({
    required TResult Function(NotificationGroupTypeMessages value) messages,
    required TResult Function(NotificationGroupTypeMentions value) mentions,
    required TResult Function(NotificationGroupTypeSecretChat value) secretChat,
    required TResult Function(NotificationGroupTypeCalls value) calls,
  }) {
    switch (getConstructor()) {
      case NotificationGroupTypeMessages.constructor:
        return messages.call(this as NotificationGroupTypeMessages);
      case NotificationGroupTypeMentions.constructor:
        return mentions.call(this as NotificationGroupTypeMentions);
      case NotificationGroupTypeSecretChat.constructor:
        return secretChat.call(this as NotificationGroupTypeSecretChat);
      case NotificationGroupTypeCalls.constructor:
        return calls.call(this as NotificationGroupTypeCalls);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(NotificationGroupTypeMessages value)? messages,
    TResult Function(NotificationGroupTypeMentions value)? mentions,
    TResult Function(NotificationGroupTypeSecretChat value)? secretChat,
    TResult Function(NotificationGroupTypeCalls value)? calls,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case NotificationGroupTypeMessages.constructor:
        if (messages != null) {
          return messages.call(this as NotificationGroupTypeMessages);
        }
        break;
      case NotificationGroupTypeMentions.constructor:
        if (mentions != null) {
          return mentions.call(this as NotificationGroupTypeMentions);
        }
        break;
      case NotificationGroupTypeSecretChat.constructor:
        if (secretChat != null) {
          return secretChat.call(this as NotificationGroupTypeSecretChat);
        }
        break;
      case NotificationGroupTypeCalls.constructor:
        if (calls != null) {
          return calls.call(this as NotificationGroupTypeCalls);
        }
        break;
    }
    return orElse.call();
  }
}

extension NotificationSoundExtensions on NotificationSound {
  NotificationSound copyWith({
    int? id,
    int? duration,
    int? date,
    String? title,
    String? data,
    File? sound,
  }) => NotificationSound(
    id: id ?? this.id,
    duration: duration ?? this.duration,
    date: date ?? this.date,
    title: title ?? this.title,
    data: data ?? this.data,
    sound: sound ?? this.sound,
  );
}

extension NotificationSoundsExtensions on NotificationSounds {
  NotificationSounds copyWith({List<NotificationSound>? notificationSounds}) =>
      NotificationSounds(
        notificationSounds: notificationSounds ?? this.notificationSounds,
      );
}

extension NotificationExtensions on Notification {
  Notification copyWith({
    int? id,
    int? date,
    bool? isSilent,
    NotificationType? type,
  }) => Notification(
    id: id ?? this.id,
    date: date ?? this.date,
    isSilent: isSilent ?? this.isSilent,
    type: type ?? this.type,
  );
}

extension NotificationGroupExtensions on NotificationGroup {
  NotificationGroup copyWith({
    int? id,
    NotificationGroupType? type,
    int? chatId,
    int? totalCount,
    List<Notification>? notifications,
  }) => NotificationGroup(
    id: id ?? this.id,
    type: type ?? this.type,
    chatId: chatId ?? this.chatId,
    totalCount: totalCount ?? this.totalCount,
    notifications: notifications ?? this.notifications,
  );
}

extension OptionValueExtensions on OptionValue {
  TResult map<TResult extends Object?>({
    required TResult Function(OptionValueBoolean value) $boolean,
    required TResult Function(OptionValueEmpty value) empty,
    required TResult Function(OptionValueInteger value) integer,
    required TResult Function(OptionValueString value) $string,
  }) {
    switch (getConstructor()) {
      case OptionValueBoolean.constructor:
        return $boolean.call(this as OptionValueBoolean);
      case OptionValueEmpty.constructor:
        return empty.call(this as OptionValueEmpty);
      case OptionValueInteger.constructor:
        return integer.call(this as OptionValueInteger);
      case OptionValueString.constructor:
        return $string.call(this as OptionValueString);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(OptionValueBoolean value)? $boolean,
    TResult Function(OptionValueEmpty value)? empty,
    TResult Function(OptionValueInteger value)? integer,
    TResult Function(OptionValueString value)? $string,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case OptionValueBoolean.constructor:
        if ($boolean != null) {
          return $boolean.call(this as OptionValueBoolean);
        }
        break;
      case OptionValueEmpty.constructor:
        if (empty != null) {
          return empty.call(this as OptionValueEmpty);
        }
        break;
      case OptionValueInteger.constructor:
        if (integer != null) {
          return integer.call(this as OptionValueInteger);
        }
        break;
      case OptionValueString.constructor:
        if ($string != null) {
          return $string.call(this as OptionValueString);
        }
        break;
    }
    return orElse.call();
  }
}

extension OptionValueBooleanExtensions on OptionValueBoolean {
  OptionValueBoolean copyWith({bool? value}) =>
      OptionValueBoolean(value: value ?? this.value);
}

extension OptionValueIntegerExtensions on OptionValueInteger {
  OptionValueInteger copyWith({int? value}) =>
      OptionValueInteger(value: value ?? this.value);
}

extension OptionValueStringExtensions on OptionValueString {
  OptionValueString copyWith({String? value}) =>
      OptionValueString(value: value ?? this.value);
}

extension JsonObjectMemberExtensions on JsonObjectMember {
  JsonObjectMember copyWith({String? key, JsonValue? value}) =>
      JsonObjectMember(key: key ?? this.key, value: value ?? this.value);
}

extension JsonValueExtensions on JsonValue {
  TResult map<TResult extends Object?>({
    required TResult Function(JsonValueNull value) $null,
    required TResult Function(JsonValueBoolean value) $boolean,
    required TResult Function(JsonValueNumber value) number,
    required TResult Function(JsonValueString value) $string,
    required TResult Function(JsonValueArray value) array,
    required TResult Function(JsonValueObject value) $object,
  }) {
    switch (getConstructor()) {
      case JsonValueNull.constructor:
        return $null.call(this as JsonValueNull);
      case JsonValueBoolean.constructor:
        return $boolean.call(this as JsonValueBoolean);
      case JsonValueNumber.constructor:
        return number.call(this as JsonValueNumber);
      case JsonValueString.constructor:
        return $string.call(this as JsonValueString);
      case JsonValueArray.constructor:
        return array.call(this as JsonValueArray);
      case JsonValueObject.constructor:
        return $object.call(this as JsonValueObject);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(JsonValueNull value)? $null,
    TResult Function(JsonValueBoolean value)? $boolean,
    TResult Function(JsonValueNumber value)? number,
    TResult Function(JsonValueString value)? $string,
    TResult Function(JsonValueArray value)? array,
    TResult Function(JsonValueObject value)? $object,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case JsonValueNull.constructor:
        if ($null != null) {
          return $null.call(this as JsonValueNull);
        }
        break;
      case JsonValueBoolean.constructor:
        if ($boolean != null) {
          return $boolean.call(this as JsonValueBoolean);
        }
        break;
      case JsonValueNumber.constructor:
        if (number != null) {
          return number.call(this as JsonValueNumber);
        }
        break;
      case JsonValueString.constructor:
        if ($string != null) {
          return $string.call(this as JsonValueString);
        }
        break;
      case JsonValueArray.constructor:
        if (array != null) {
          return array.call(this as JsonValueArray);
        }
        break;
      case JsonValueObject.constructor:
        if ($object != null) {
          return $object.call(this as JsonValueObject);
        }
        break;
    }
    return orElse.call();
  }
}

extension JsonValueBooleanExtensions on JsonValueBoolean {
  JsonValueBoolean copyWith({bool? value}) =>
      JsonValueBoolean(value: value ?? this.value);
}

extension JsonValueNumberExtensions on JsonValueNumber {
  JsonValueNumber copyWith({double? value}) =>
      JsonValueNumber(value: value ?? this.value);
}

extension JsonValueStringExtensions on JsonValueString {
  JsonValueString copyWith({String? value}) =>
      JsonValueString(value: value ?? this.value);
}

extension JsonValueArrayExtensions on JsonValueArray {
  JsonValueArray copyWith({List<JsonValue>? values}) =>
      JsonValueArray(values: values ?? this.values);
}

extension JsonValueObjectExtensions on JsonValueObject {
  JsonValueObject copyWith({List<JsonObjectMember>? members}) =>
      JsonValueObject(members: members ?? this.members);
}

extension StoryPrivacySettingsExtensions on StoryPrivacySettings {
  TResult map<TResult extends Object?>({
    required TResult Function(StoryPrivacySettingsEveryone value) everyone,
    required TResult Function(StoryPrivacySettingsContacts value) contacts,
    required TResult Function(StoryPrivacySettingsCloseFriends value)
    closeFriends,
    required TResult Function(StoryPrivacySettingsSelectedUsers value)
    selectedUsers,
  }) {
    switch (getConstructor()) {
      case StoryPrivacySettingsEveryone.constructor:
        return everyone.call(this as StoryPrivacySettingsEveryone);
      case StoryPrivacySettingsContacts.constructor:
        return contacts.call(this as StoryPrivacySettingsContacts);
      case StoryPrivacySettingsCloseFriends.constructor:
        return closeFriends.call(this as StoryPrivacySettingsCloseFriends);
      case StoryPrivacySettingsSelectedUsers.constructor:
        return selectedUsers.call(this as StoryPrivacySettingsSelectedUsers);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(StoryPrivacySettingsEveryone value)? everyone,
    TResult Function(StoryPrivacySettingsContacts value)? contacts,
    TResult Function(StoryPrivacySettingsCloseFriends value)? closeFriends,
    TResult Function(StoryPrivacySettingsSelectedUsers value)? selectedUsers,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case StoryPrivacySettingsEveryone.constructor:
        if (everyone != null) {
          return everyone.call(this as StoryPrivacySettingsEveryone);
        }
        break;
      case StoryPrivacySettingsContacts.constructor:
        if (contacts != null) {
          return contacts.call(this as StoryPrivacySettingsContacts);
        }
        break;
      case StoryPrivacySettingsCloseFriends.constructor:
        if (closeFriends != null) {
          return closeFriends.call(this as StoryPrivacySettingsCloseFriends);
        }
        break;
      case StoryPrivacySettingsSelectedUsers.constructor:
        if (selectedUsers != null) {
          return selectedUsers.call(this as StoryPrivacySettingsSelectedUsers);
        }
        break;
    }
    return orElse.call();
  }
}

extension StoryPrivacySettingsEveryoneExtensions
    on StoryPrivacySettingsEveryone {
  StoryPrivacySettingsEveryone copyWith({List<int>? exceptUserIds}) =>
      StoryPrivacySettingsEveryone(
        exceptUserIds: exceptUserIds ?? this.exceptUserIds,
      );
}

extension StoryPrivacySettingsContactsExtensions
    on StoryPrivacySettingsContacts {
  StoryPrivacySettingsContacts copyWith({List<int>? exceptUserIds}) =>
      StoryPrivacySettingsContacts(
        exceptUserIds: exceptUserIds ?? this.exceptUserIds,
      );
}

extension StoryPrivacySettingsSelectedUsersExtensions
    on StoryPrivacySettingsSelectedUsers {
  StoryPrivacySettingsSelectedUsers copyWith({List<int>? userIds}) =>
      StoryPrivacySettingsSelectedUsers(userIds: userIds ?? this.userIds);
}

extension UserPrivacySettingRuleExtensions on UserPrivacySettingRule {
  TResult map<TResult extends Object?>({
    required TResult Function(UserPrivacySettingRuleAllowAll value) allowAll,
    required TResult Function(UserPrivacySettingRuleAllowContacts value)
    allowContacts,
    required TResult Function(UserPrivacySettingRuleAllowBots value) allowBots,
    required TResult Function(UserPrivacySettingRuleAllowPremiumUsers value)
    allowPremiumUsers,
    required TResult Function(UserPrivacySettingRuleAllowUsers value)
    allowUsers,
    required TResult Function(UserPrivacySettingRuleAllowChatMembers value)
    allowChatMembers,
    required TResult Function(UserPrivacySettingRuleRestrictAll value)
    restrictAll,
    required TResult Function(UserPrivacySettingRuleRestrictContacts value)
    restrictContacts,
    required TResult Function(UserPrivacySettingRuleRestrictBots value)
    restrictBots,
    required TResult Function(UserPrivacySettingRuleRestrictUsers value)
    restrictUsers,
    required TResult Function(UserPrivacySettingRuleRestrictChatMembers value)
    restrictChatMembers,
  }) {
    switch (getConstructor()) {
      case UserPrivacySettingRuleAllowAll.constructor:
        return allowAll.call(this as UserPrivacySettingRuleAllowAll);
      case UserPrivacySettingRuleAllowContacts.constructor:
        return allowContacts.call(this as UserPrivacySettingRuleAllowContacts);
      case UserPrivacySettingRuleAllowBots.constructor:
        return allowBots.call(this as UserPrivacySettingRuleAllowBots);
      case UserPrivacySettingRuleAllowPremiumUsers.constructor:
        return allowPremiumUsers.call(
          this as UserPrivacySettingRuleAllowPremiumUsers,
        );
      case UserPrivacySettingRuleAllowUsers.constructor:
        return allowUsers.call(this as UserPrivacySettingRuleAllowUsers);
      case UserPrivacySettingRuleAllowChatMembers.constructor:
        return allowChatMembers.call(
          this as UserPrivacySettingRuleAllowChatMembers,
        );
      case UserPrivacySettingRuleRestrictAll.constructor:
        return restrictAll.call(this as UserPrivacySettingRuleRestrictAll);
      case UserPrivacySettingRuleRestrictContacts.constructor:
        return restrictContacts.call(
          this as UserPrivacySettingRuleRestrictContacts,
        );
      case UserPrivacySettingRuleRestrictBots.constructor:
        return restrictBots.call(this as UserPrivacySettingRuleRestrictBots);
      case UserPrivacySettingRuleRestrictUsers.constructor:
        return restrictUsers.call(this as UserPrivacySettingRuleRestrictUsers);
      case UserPrivacySettingRuleRestrictChatMembers.constructor:
        return restrictChatMembers.call(
          this as UserPrivacySettingRuleRestrictChatMembers,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(UserPrivacySettingRuleAllowAll value)? allowAll,
    TResult Function(UserPrivacySettingRuleAllowContacts value)? allowContacts,
    TResult Function(UserPrivacySettingRuleAllowBots value)? allowBots,
    TResult Function(UserPrivacySettingRuleAllowPremiumUsers value)?
    allowPremiumUsers,
    TResult Function(UserPrivacySettingRuleAllowUsers value)? allowUsers,
    TResult Function(UserPrivacySettingRuleAllowChatMembers value)?
    allowChatMembers,
    TResult Function(UserPrivacySettingRuleRestrictAll value)? restrictAll,
    TResult Function(UserPrivacySettingRuleRestrictContacts value)?
    restrictContacts,
    TResult Function(UserPrivacySettingRuleRestrictBots value)? restrictBots,
    TResult Function(UserPrivacySettingRuleRestrictUsers value)? restrictUsers,
    TResult Function(UserPrivacySettingRuleRestrictChatMembers value)?
    restrictChatMembers,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case UserPrivacySettingRuleAllowAll.constructor:
        if (allowAll != null) {
          return allowAll.call(this as UserPrivacySettingRuleAllowAll);
        }
        break;
      case UserPrivacySettingRuleAllowContacts.constructor:
        if (allowContacts != null) {
          return allowContacts.call(
            this as UserPrivacySettingRuleAllowContacts,
          );
        }
        break;
      case UserPrivacySettingRuleAllowBots.constructor:
        if (allowBots != null) {
          return allowBots.call(this as UserPrivacySettingRuleAllowBots);
        }
        break;
      case UserPrivacySettingRuleAllowPremiumUsers.constructor:
        if (allowPremiumUsers != null) {
          return allowPremiumUsers.call(
            this as UserPrivacySettingRuleAllowPremiumUsers,
          );
        }
        break;
      case UserPrivacySettingRuleAllowUsers.constructor:
        if (allowUsers != null) {
          return allowUsers.call(this as UserPrivacySettingRuleAllowUsers);
        }
        break;
      case UserPrivacySettingRuleAllowChatMembers.constructor:
        if (allowChatMembers != null) {
          return allowChatMembers.call(
            this as UserPrivacySettingRuleAllowChatMembers,
          );
        }
        break;
      case UserPrivacySettingRuleRestrictAll.constructor:
        if (restrictAll != null) {
          return restrictAll.call(this as UserPrivacySettingRuleRestrictAll);
        }
        break;
      case UserPrivacySettingRuleRestrictContacts.constructor:
        if (restrictContacts != null) {
          return restrictContacts.call(
            this as UserPrivacySettingRuleRestrictContacts,
          );
        }
        break;
      case UserPrivacySettingRuleRestrictBots.constructor:
        if (restrictBots != null) {
          return restrictBots.call(this as UserPrivacySettingRuleRestrictBots);
        }
        break;
      case UserPrivacySettingRuleRestrictUsers.constructor:
        if (restrictUsers != null) {
          return restrictUsers.call(
            this as UserPrivacySettingRuleRestrictUsers,
          );
        }
        break;
      case UserPrivacySettingRuleRestrictChatMembers.constructor:
        if (restrictChatMembers != null) {
          return restrictChatMembers.call(
            this as UserPrivacySettingRuleRestrictChatMembers,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension UserPrivacySettingRuleAllowUsersExtensions
    on UserPrivacySettingRuleAllowUsers {
  UserPrivacySettingRuleAllowUsers copyWith({List<int>? userIds}) =>
      UserPrivacySettingRuleAllowUsers(userIds: userIds ?? this.userIds);
}

extension UserPrivacySettingRuleAllowChatMembersExtensions
    on UserPrivacySettingRuleAllowChatMembers {
  UserPrivacySettingRuleAllowChatMembers copyWith({List<int>? chatIds}) =>
      UserPrivacySettingRuleAllowChatMembers(chatIds: chatIds ?? this.chatIds);
}

extension UserPrivacySettingRuleRestrictUsersExtensions
    on UserPrivacySettingRuleRestrictUsers {
  UserPrivacySettingRuleRestrictUsers copyWith({List<int>? userIds}) =>
      UserPrivacySettingRuleRestrictUsers(userIds: userIds ?? this.userIds);
}

extension UserPrivacySettingRuleRestrictChatMembersExtensions
    on UserPrivacySettingRuleRestrictChatMembers {
  UserPrivacySettingRuleRestrictChatMembers copyWith({List<int>? chatIds}) =>
      UserPrivacySettingRuleRestrictChatMembers(
        chatIds: chatIds ?? this.chatIds,
      );
}

extension UserPrivacySettingRulesExtensions on UserPrivacySettingRules {
  UserPrivacySettingRules copyWith({List<UserPrivacySettingRule>? rules}) =>
      UserPrivacySettingRules(rules: rules ?? this.rules);
}

extension UserPrivacySettingExtensions on UserPrivacySetting {
  TResult map<TResult extends Object?>({
    required TResult Function(UserPrivacySettingShowStatus value) showStatus,
    required TResult Function(UserPrivacySettingShowProfilePhoto value)
    showProfilePhoto,
    required TResult Function(
      UserPrivacySettingShowLinkInForwardedMessages value,
    )
    showLinkInForwardedMessages,
    required TResult Function(UserPrivacySettingShowPhoneNumber value)
    showPhoneNumber,
    required TResult Function(UserPrivacySettingShowBio value) showBio,
    required TResult Function(UserPrivacySettingShowBirthdate value)
    showBirthdate,
    required TResult Function(UserPrivacySettingAllowChatInvites value)
    allowChatInvites,
    required TResult Function(UserPrivacySettingAllowCalls value) allowCalls,
    required TResult Function(UserPrivacySettingAllowPeerToPeerCalls value)
    allowPeerToPeerCalls,
    required TResult Function(UserPrivacySettingAllowFindingByPhoneNumber value)
    allowFindingByPhoneNumber,
    required TResult Function(
      UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages value,
    )
    allowPrivateVoiceAndVideoNoteMessages,
    required TResult Function(UserPrivacySettingAutosaveGifts value)
    autosaveGifts,
    required TResult Function(UserPrivacySettingAllowUnpaidMessages value)
    allowUnpaidMessages,
  }) {
    switch (getConstructor()) {
      case UserPrivacySettingShowStatus.constructor:
        return showStatus.call(this as UserPrivacySettingShowStatus);
      case UserPrivacySettingShowProfilePhoto.constructor:
        return showProfilePhoto.call(
          this as UserPrivacySettingShowProfilePhoto,
        );
      case UserPrivacySettingShowLinkInForwardedMessages.constructor:
        return showLinkInForwardedMessages.call(
          this as UserPrivacySettingShowLinkInForwardedMessages,
        );
      case UserPrivacySettingShowPhoneNumber.constructor:
        return showPhoneNumber.call(this as UserPrivacySettingShowPhoneNumber);
      case UserPrivacySettingShowBio.constructor:
        return showBio.call(this as UserPrivacySettingShowBio);
      case UserPrivacySettingShowBirthdate.constructor:
        return showBirthdate.call(this as UserPrivacySettingShowBirthdate);
      case UserPrivacySettingAllowChatInvites.constructor:
        return allowChatInvites.call(
          this as UserPrivacySettingAllowChatInvites,
        );
      case UserPrivacySettingAllowCalls.constructor:
        return allowCalls.call(this as UserPrivacySettingAllowCalls);
      case UserPrivacySettingAllowPeerToPeerCalls.constructor:
        return allowPeerToPeerCalls.call(
          this as UserPrivacySettingAllowPeerToPeerCalls,
        );
      case UserPrivacySettingAllowFindingByPhoneNumber.constructor:
        return allowFindingByPhoneNumber.call(
          this as UserPrivacySettingAllowFindingByPhoneNumber,
        );
      case UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages.constructor:
        return allowPrivateVoiceAndVideoNoteMessages.call(
          this as UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages,
        );
      case UserPrivacySettingAutosaveGifts.constructor:
        return autosaveGifts.call(this as UserPrivacySettingAutosaveGifts);
      case UserPrivacySettingAllowUnpaidMessages.constructor:
        return allowUnpaidMessages.call(
          this as UserPrivacySettingAllowUnpaidMessages,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(UserPrivacySettingShowStatus value)? showStatus,
    TResult Function(UserPrivacySettingShowProfilePhoto value)?
    showProfilePhoto,
    TResult Function(UserPrivacySettingShowLinkInForwardedMessages value)?
    showLinkInForwardedMessages,
    TResult Function(UserPrivacySettingShowPhoneNumber value)? showPhoneNumber,
    TResult Function(UserPrivacySettingShowBio value)? showBio,
    TResult Function(UserPrivacySettingShowBirthdate value)? showBirthdate,
    TResult Function(UserPrivacySettingAllowChatInvites value)?
    allowChatInvites,
    TResult Function(UserPrivacySettingAllowCalls value)? allowCalls,
    TResult Function(UserPrivacySettingAllowPeerToPeerCalls value)?
    allowPeerToPeerCalls,
    TResult Function(UserPrivacySettingAllowFindingByPhoneNumber value)?
    allowFindingByPhoneNumber,
    TResult Function(
      UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages value,
    )?
    allowPrivateVoiceAndVideoNoteMessages,
    TResult Function(UserPrivacySettingAutosaveGifts value)? autosaveGifts,
    TResult Function(UserPrivacySettingAllowUnpaidMessages value)?
    allowUnpaidMessages,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case UserPrivacySettingShowStatus.constructor:
        if (showStatus != null) {
          return showStatus.call(this as UserPrivacySettingShowStatus);
        }
        break;
      case UserPrivacySettingShowProfilePhoto.constructor:
        if (showProfilePhoto != null) {
          return showProfilePhoto.call(
            this as UserPrivacySettingShowProfilePhoto,
          );
        }
        break;
      case UserPrivacySettingShowLinkInForwardedMessages.constructor:
        if (showLinkInForwardedMessages != null) {
          return showLinkInForwardedMessages.call(
            this as UserPrivacySettingShowLinkInForwardedMessages,
          );
        }
        break;
      case UserPrivacySettingShowPhoneNumber.constructor:
        if (showPhoneNumber != null) {
          return showPhoneNumber.call(
            this as UserPrivacySettingShowPhoneNumber,
          );
        }
        break;
      case UserPrivacySettingShowBio.constructor:
        if (showBio != null) {
          return showBio.call(this as UserPrivacySettingShowBio);
        }
        break;
      case UserPrivacySettingShowBirthdate.constructor:
        if (showBirthdate != null) {
          return showBirthdate.call(this as UserPrivacySettingShowBirthdate);
        }
        break;
      case UserPrivacySettingAllowChatInvites.constructor:
        if (allowChatInvites != null) {
          return allowChatInvites.call(
            this as UserPrivacySettingAllowChatInvites,
          );
        }
        break;
      case UserPrivacySettingAllowCalls.constructor:
        if (allowCalls != null) {
          return allowCalls.call(this as UserPrivacySettingAllowCalls);
        }
        break;
      case UserPrivacySettingAllowPeerToPeerCalls.constructor:
        if (allowPeerToPeerCalls != null) {
          return allowPeerToPeerCalls.call(
            this as UserPrivacySettingAllowPeerToPeerCalls,
          );
        }
        break;
      case UserPrivacySettingAllowFindingByPhoneNumber.constructor:
        if (allowFindingByPhoneNumber != null) {
          return allowFindingByPhoneNumber.call(
            this as UserPrivacySettingAllowFindingByPhoneNumber,
          );
        }
        break;
      case UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages.constructor:
        if (allowPrivateVoiceAndVideoNoteMessages != null) {
          return allowPrivateVoiceAndVideoNoteMessages.call(
            this as UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages,
          );
        }
        break;
      case UserPrivacySettingAutosaveGifts.constructor:
        if (autosaveGifts != null) {
          return autosaveGifts.call(this as UserPrivacySettingAutosaveGifts);
        }
        break;
      case UserPrivacySettingAllowUnpaidMessages.constructor:
        if (allowUnpaidMessages != null) {
          return allowUnpaidMessages.call(
            this as UserPrivacySettingAllowUnpaidMessages,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension ReadDatePrivacySettingsExtensions on ReadDatePrivacySettings {
  ReadDatePrivacySettings copyWith({bool? showReadDate}) =>
      ReadDatePrivacySettings(showReadDate: showReadDate ?? this.showReadDate);
}

extension NewChatPrivacySettingsExtensions on NewChatPrivacySettings {
  NewChatPrivacySettings copyWith({
    bool? allowNewChatsFromUnknownUsers,
    int? incomingPaidMessageStarCount,
  }) => NewChatPrivacySettings(
    allowNewChatsFromUnknownUsers:
        allowNewChatsFromUnknownUsers ?? this.allowNewChatsFromUnknownUsers,
    incomingPaidMessageStarCount:
        incomingPaidMessageStarCount ?? this.incomingPaidMessageStarCount,
  );
}

extension CanSendMessageToUserResultExtensions on CanSendMessageToUserResult {
  TResult map<TResult extends Object?>({
    required TResult Function(CanSendMessageToUserResultOk value) ok,
    required TResult Function(
      CanSendMessageToUserResultUserHasPaidMessages value,
    )
    userHasPaidMessages,
    required TResult Function(CanSendMessageToUserResultUserIsDeleted value)
    userIsDeleted,
    required TResult Function(
      CanSendMessageToUserResultUserRestrictsNewChats value,
    )
    userRestrictsNewChats,
  }) {
    switch (getConstructor()) {
      case CanSendMessageToUserResultOk.constructor:
        return ok.call(this as CanSendMessageToUserResultOk);
      case CanSendMessageToUserResultUserHasPaidMessages.constructor:
        return userHasPaidMessages.call(
          this as CanSendMessageToUserResultUserHasPaidMessages,
        );
      case CanSendMessageToUserResultUserIsDeleted.constructor:
        return userIsDeleted.call(
          this as CanSendMessageToUserResultUserIsDeleted,
        );
      case CanSendMessageToUserResultUserRestrictsNewChats.constructor:
        return userRestrictsNewChats.call(
          this as CanSendMessageToUserResultUserRestrictsNewChats,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(CanSendMessageToUserResultOk value)? ok,
    TResult Function(CanSendMessageToUserResultUserHasPaidMessages value)?
    userHasPaidMessages,
    TResult Function(CanSendMessageToUserResultUserIsDeleted value)?
    userIsDeleted,
    TResult Function(CanSendMessageToUserResultUserRestrictsNewChats value)?
    userRestrictsNewChats,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case CanSendMessageToUserResultOk.constructor:
        if (ok != null) {
          return ok.call(this as CanSendMessageToUserResultOk);
        }
        break;
      case CanSendMessageToUserResultUserHasPaidMessages.constructor:
        if (userHasPaidMessages != null) {
          return userHasPaidMessages.call(
            this as CanSendMessageToUserResultUserHasPaidMessages,
          );
        }
        break;
      case CanSendMessageToUserResultUserIsDeleted.constructor:
        if (userIsDeleted != null) {
          return userIsDeleted.call(
            this as CanSendMessageToUserResultUserIsDeleted,
          );
        }
        break;
      case CanSendMessageToUserResultUserRestrictsNewChats.constructor:
        if (userRestrictsNewChats != null) {
          return userRestrictsNewChats.call(
            this as CanSendMessageToUserResultUserRestrictsNewChats,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension CanSendMessageToUserResultUserHasPaidMessagesExtensions
    on CanSendMessageToUserResultUserHasPaidMessages {
  CanSendMessageToUserResultUserHasPaidMessages copyWith({
    int? outgoingPaidMessageStarCount,
  }) => CanSendMessageToUserResultUserHasPaidMessages(
    outgoingPaidMessageStarCount:
        outgoingPaidMessageStarCount ?? this.outgoingPaidMessageStarCount,
  );
}

extension AccountTtlExtensions on AccountTtl {
  AccountTtl copyWith({int? days}) => AccountTtl(days: days ?? this.days);
}

extension MessageAutoDeleteTimeExtensions on MessageAutoDeleteTime {
  MessageAutoDeleteTime copyWith({int? time}) =>
      MessageAutoDeleteTime(time: time ?? this.time);
}

extension SessionTypeExtensions on SessionType {
  TResult map<TResult extends Object?>({
    required TResult Function(SessionTypeAndroid value) android,
    required TResult Function(SessionTypeApple value) apple,
    required TResult Function(SessionTypeBrave value) brave,
    required TResult Function(SessionTypeChrome value) chrome,
    required TResult Function(SessionTypeEdge value) edge,
    required TResult Function(SessionTypeFirefox value) firefox,
    required TResult Function(SessionTypeIpad value) ipad,
    required TResult Function(SessionTypeIphone value) iphone,
    required TResult Function(SessionTypeLinux value) linux,
    required TResult Function(SessionTypeMac value) mac,
    required TResult Function(SessionTypeOpera value) opera,
    required TResult Function(SessionTypeSafari value) safari,
    required TResult Function(SessionTypeUbuntu value) ubuntu,
    required TResult Function(SessionTypeUnknown value) unknown,
    required TResult Function(SessionTypeVivaldi value) vivaldi,
    required TResult Function(SessionTypeWindows value) windows,
    required TResult Function(SessionTypeXbox value) xbox,
  }) {
    switch (getConstructor()) {
      case SessionTypeAndroid.constructor:
        return android.call(this as SessionTypeAndroid);
      case SessionTypeApple.constructor:
        return apple.call(this as SessionTypeApple);
      case SessionTypeBrave.constructor:
        return brave.call(this as SessionTypeBrave);
      case SessionTypeChrome.constructor:
        return chrome.call(this as SessionTypeChrome);
      case SessionTypeEdge.constructor:
        return edge.call(this as SessionTypeEdge);
      case SessionTypeFirefox.constructor:
        return firefox.call(this as SessionTypeFirefox);
      case SessionTypeIpad.constructor:
        return ipad.call(this as SessionTypeIpad);
      case SessionTypeIphone.constructor:
        return iphone.call(this as SessionTypeIphone);
      case SessionTypeLinux.constructor:
        return linux.call(this as SessionTypeLinux);
      case SessionTypeMac.constructor:
        return mac.call(this as SessionTypeMac);
      case SessionTypeOpera.constructor:
        return opera.call(this as SessionTypeOpera);
      case SessionTypeSafari.constructor:
        return safari.call(this as SessionTypeSafari);
      case SessionTypeUbuntu.constructor:
        return ubuntu.call(this as SessionTypeUbuntu);
      case SessionTypeUnknown.constructor:
        return unknown.call(this as SessionTypeUnknown);
      case SessionTypeVivaldi.constructor:
        return vivaldi.call(this as SessionTypeVivaldi);
      case SessionTypeWindows.constructor:
        return windows.call(this as SessionTypeWindows);
      case SessionTypeXbox.constructor:
        return xbox.call(this as SessionTypeXbox);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(SessionTypeAndroid value)? android,
    TResult Function(SessionTypeApple value)? apple,
    TResult Function(SessionTypeBrave value)? brave,
    TResult Function(SessionTypeChrome value)? chrome,
    TResult Function(SessionTypeEdge value)? edge,
    TResult Function(SessionTypeFirefox value)? firefox,
    TResult Function(SessionTypeIpad value)? ipad,
    TResult Function(SessionTypeIphone value)? iphone,
    TResult Function(SessionTypeLinux value)? linux,
    TResult Function(SessionTypeMac value)? mac,
    TResult Function(SessionTypeOpera value)? opera,
    TResult Function(SessionTypeSafari value)? safari,
    TResult Function(SessionTypeUbuntu value)? ubuntu,
    TResult Function(SessionTypeUnknown value)? unknown,
    TResult Function(SessionTypeVivaldi value)? vivaldi,
    TResult Function(SessionTypeWindows value)? windows,
    TResult Function(SessionTypeXbox value)? xbox,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case SessionTypeAndroid.constructor:
        if (android != null) {
          return android.call(this as SessionTypeAndroid);
        }
        break;
      case SessionTypeApple.constructor:
        if (apple != null) {
          return apple.call(this as SessionTypeApple);
        }
        break;
      case SessionTypeBrave.constructor:
        if (brave != null) {
          return brave.call(this as SessionTypeBrave);
        }
        break;
      case SessionTypeChrome.constructor:
        if (chrome != null) {
          return chrome.call(this as SessionTypeChrome);
        }
        break;
      case SessionTypeEdge.constructor:
        if (edge != null) {
          return edge.call(this as SessionTypeEdge);
        }
        break;
      case SessionTypeFirefox.constructor:
        if (firefox != null) {
          return firefox.call(this as SessionTypeFirefox);
        }
        break;
      case SessionTypeIpad.constructor:
        if (ipad != null) {
          return ipad.call(this as SessionTypeIpad);
        }
        break;
      case SessionTypeIphone.constructor:
        if (iphone != null) {
          return iphone.call(this as SessionTypeIphone);
        }
        break;
      case SessionTypeLinux.constructor:
        if (linux != null) {
          return linux.call(this as SessionTypeLinux);
        }
        break;
      case SessionTypeMac.constructor:
        if (mac != null) {
          return mac.call(this as SessionTypeMac);
        }
        break;
      case SessionTypeOpera.constructor:
        if (opera != null) {
          return opera.call(this as SessionTypeOpera);
        }
        break;
      case SessionTypeSafari.constructor:
        if (safari != null) {
          return safari.call(this as SessionTypeSafari);
        }
        break;
      case SessionTypeUbuntu.constructor:
        if (ubuntu != null) {
          return ubuntu.call(this as SessionTypeUbuntu);
        }
        break;
      case SessionTypeUnknown.constructor:
        if (unknown != null) {
          return unknown.call(this as SessionTypeUnknown);
        }
        break;
      case SessionTypeVivaldi.constructor:
        if (vivaldi != null) {
          return vivaldi.call(this as SessionTypeVivaldi);
        }
        break;
      case SessionTypeWindows.constructor:
        if (windows != null) {
          return windows.call(this as SessionTypeWindows);
        }
        break;
      case SessionTypeXbox.constructor:
        if (xbox != null) {
          return xbox.call(this as SessionTypeXbox);
        }
        break;
    }
    return orElse.call();
  }
}

extension SessionExtensions on Session {
  Session copyWith({
    int? id,
    bool? isCurrent,
    bool? isPasswordPending,
    bool? isUnconfirmed,
    bool? canAcceptSecretChats,
    bool? canAcceptCalls,
    SessionType? type,
    int? apiId,
    String? applicationName,
    String? applicationVersion,
    bool? isOfficialApplication,
    String? deviceModel,
    String? platform,
    String? systemVersion,
    int? logInDate,
    int? lastActiveDate,
    String? ipAddress,
    String? location,
  }) => Session(
    id: id ?? this.id,
    isCurrent: isCurrent ?? this.isCurrent,
    isPasswordPending: isPasswordPending ?? this.isPasswordPending,
    isUnconfirmed: isUnconfirmed ?? this.isUnconfirmed,
    canAcceptSecretChats: canAcceptSecretChats ?? this.canAcceptSecretChats,
    canAcceptCalls: canAcceptCalls ?? this.canAcceptCalls,
    type: type ?? this.type,
    apiId: apiId ?? this.apiId,
    applicationName: applicationName ?? this.applicationName,
    applicationVersion: applicationVersion ?? this.applicationVersion,
    isOfficialApplication: isOfficialApplication ?? this.isOfficialApplication,
    deviceModel: deviceModel ?? this.deviceModel,
    platform: platform ?? this.platform,
    systemVersion: systemVersion ?? this.systemVersion,
    logInDate: logInDate ?? this.logInDate,
    lastActiveDate: lastActiveDate ?? this.lastActiveDate,
    ipAddress: ipAddress ?? this.ipAddress,
    location: location ?? this.location,
  );
}

extension SessionsExtensions on Sessions {
  Sessions copyWith({List<Session>? sessions, int? inactiveSessionTtlDays}) =>
      Sessions(
        sessions: sessions ?? this.sessions,
        inactiveSessionTtlDays:
            inactiveSessionTtlDays ?? this.inactiveSessionTtlDays,
      );
}

extension UnconfirmedSessionExtensions on UnconfirmedSession {
  UnconfirmedSession copyWith({
    int? id,
    int? logInDate,
    String? deviceModel,
    String? location,
  }) => UnconfirmedSession(
    id: id ?? this.id,
    logInDate: logInDate ?? this.logInDate,
    deviceModel: deviceModel ?? this.deviceModel,
    location: location ?? this.location,
  );
}

extension ConnectedWebsiteExtensions on ConnectedWebsite {
  ConnectedWebsite copyWith({
    int? id,
    String? domainName,
    int? botUserId,
    String? browser,
    String? platform,
    int? logInDate,
    int? lastActiveDate,
    String? ipAddress,
    String? location,
  }) => ConnectedWebsite(
    id: id ?? this.id,
    domainName: domainName ?? this.domainName,
    botUserId: botUserId ?? this.botUserId,
    browser: browser ?? this.browser,
    platform: platform ?? this.platform,
    logInDate: logInDate ?? this.logInDate,
    lastActiveDate: lastActiveDate ?? this.lastActiveDate,
    ipAddress: ipAddress ?? this.ipAddress,
    location: location ?? this.location,
  );
}

extension ConnectedWebsitesExtensions on ConnectedWebsites {
  ConnectedWebsites copyWith({List<ConnectedWebsite>? websites}) =>
      ConnectedWebsites(websites: websites ?? this.websites);
}

extension ReportReasonExtensions on ReportReason {
  TResult map<TResult extends Object?>({
    required TResult Function(ReportReasonSpam value) spam,
    required TResult Function(ReportReasonViolence value) violence,
    required TResult Function(ReportReasonPornography value) pornography,
    required TResult Function(ReportReasonChildAbuse value) childAbuse,
    required TResult Function(ReportReasonCopyright value) copyright,
    required TResult Function(ReportReasonUnrelatedLocation value)
    unrelatedLocation,
    required TResult Function(ReportReasonFake value) fake,
    required TResult Function(ReportReasonIllegalDrugs value) illegalDrugs,
    required TResult Function(ReportReasonPersonalDetails value)
    personalDetails,
    required TResult Function(ReportReasonCustom value) custom,
  }) {
    switch (getConstructor()) {
      case ReportReasonSpam.constructor:
        return spam.call(this as ReportReasonSpam);
      case ReportReasonViolence.constructor:
        return violence.call(this as ReportReasonViolence);
      case ReportReasonPornography.constructor:
        return pornography.call(this as ReportReasonPornography);
      case ReportReasonChildAbuse.constructor:
        return childAbuse.call(this as ReportReasonChildAbuse);
      case ReportReasonCopyright.constructor:
        return copyright.call(this as ReportReasonCopyright);
      case ReportReasonUnrelatedLocation.constructor:
        return unrelatedLocation.call(this as ReportReasonUnrelatedLocation);
      case ReportReasonFake.constructor:
        return fake.call(this as ReportReasonFake);
      case ReportReasonIllegalDrugs.constructor:
        return illegalDrugs.call(this as ReportReasonIllegalDrugs);
      case ReportReasonPersonalDetails.constructor:
        return personalDetails.call(this as ReportReasonPersonalDetails);
      case ReportReasonCustom.constructor:
        return custom.call(this as ReportReasonCustom);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ReportReasonSpam value)? spam,
    TResult Function(ReportReasonViolence value)? violence,
    TResult Function(ReportReasonPornography value)? pornography,
    TResult Function(ReportReasonChildAbuse value)? childAbuse,
    TResult Function(ReportReasonCopyright value)? copyright,
    TResult Function(ReportReasonUnrelatedLocation value)? unrelatedLocation,
    TResult Function(ReportReasonFake value)? fake,
    TResult Function(ReportReasonIllegalDrugs value)? illegalDrugs,
    TResult Function(ReportReasonPersonalDetails value)? personalDetails,
    TResult Function(ReportReasonCustom value)? custom,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ReportReasonSpam.constructor:
        if (spam != null) {
          return spam.call(this as ReportReasonSpam);
        }
        break;
      case ReportReasonViolence.constructor:
        if (violence != null) {
          return violence.call(this as ReportReasonViolence);
        }
        break;
      case ReportReasonPornography.constructor:
        if (pornography != null) {
          return pornography.call(this as ReportReasonPornography);
        }
        break;
      case ReportReasonChildAbuse.constructor:
        if (childAbuse != null) {
          return childAbuse.call(this as ReportReasonChildAbuse);
        }
        break;
      case ReportReasonCopyright.constructor:
        if (copyright != null) {
          return copyright.call(this as ReportReasonCopyright);
        }
        break;
      case ReportReasonUnrelatedLocation.constructor:
        if (unrelatedLocation != null) {
          return unrelatedLocation.call(this as ReportReasonUnrelatedLocation);
        }
        break;
      case ReportReasonFake.constructor:
        if (fake != null) {
          return fake.call(this as ReportReasonFake);
        }
        break;
      case ReportReasonIllegalDrugs.constructor:
        if (illegalDrugs != null) {
          return illegalDrugs.call(this as ReportReasonIllegalDrugs);
        }
        break;
      case ReportReasonPersonalDetails.constructor:
        if (personalDetails != null) {
          return personalDetails.call(this as ReportReasonPersonalDetails);
        }
        break;
      case ReportReasonCustom.constructor:
        if (custom != null) {
          return custom.call(this as ReportReasonCustom);
        }
        break;
    }
    return orElse.call();
  }
}

extension ReportChatResultExtensions on ReportChatResult {
  TResult map<TResult extends Object?>({
    required TResult Function(ReportChatResultOk value) ok,
    required TResult Function(ReportChatResultOptionRequired value)
    optionRequired,
    required TResult Function(ReportChatResultTextRequired value) textRequired,
    required TResult Function(ReportChatResultMessagesRequired value)
    messagesRequired,
  }) {
    switch (getConstructor()) {
      case ReportChatResultOk.constructor:
        return ok.call(this as ReportChatResultOk);
      case ReportChatResultOptionRequired.constructor:
        return optionRequired.call(this as ReportChatResultOptionRequired);
      case ReportChatResultTextRequired.constructor:
        return textRequired.call(this as ReportChatResultTextRequired);
      case ReportChatResultMessagesRequired.constructor:
        return messagesRequired.call(this as ReportChatResultMessagesRequired);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ReportChatResultOk value)? ok,
    TResult Function(ReportChatResultOptionRequired value)? optionRequired,
    TResult Function(ReportChatResultTextRequired value)? textRequired,
    TResult Function(ReportChatResultMessagesRequired value)? messagesRequired,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ReportChatResultOk.constructor:
        if (ok != null) {
          return ok.call(this as ReportChatResultOk);
        }
        break;
      case ReportChatResultOptionRequired.constructor:
        if (optionRequired != null) {
          return optionRequired.call(this as ReportChatResultOptionRequired);
        }
        break;
      case ReportChatResultTextRequired.constructor:
        if (textRequired != null) {
          return textRequired.call(this as ReportChatResultTextRequired);
        }
        break;
      case ReportChatResultMessagesRequired.constructor:
        if (messagesRequired != null) {
          return messagesRequired.call(
            this as ReportChatResultMessagesRequired,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension ReportChatResultOptionRequiredExtensions
    on ReportChatResultOptionRequired {
  ReportChatResultOptionRequired copyWith({
    String? title,
    List<ReportOption>? options,
  }) => ReportChatResultOptionRequired(
    title: title ?? this.title,
    options: options ?? this.options,
  );
}

extension ReportChatResultTextRequiredExtensions
    on ReportChatResultTextRequired {
  ReportChatResultTextRequired copyWith({String? optionId, bool? isOptional}) =>
      ReportChatResultTextRequired(
        optionId: optionId ?? this.optionId,
        isOptional: isOptional ?? this.isOptional,
      );
}

extension ReportStoryResultExtensions on ReportStoryResult {
  TResult map<TResult extends Object?>({
    required TResult Function(ReportStoryResultOk value) ok,
    required TResult Function(ReportStoryResultOptionRequired value)
    optionRequired,
    required TResult Function(ReportStoryResultTextRequired value) textRequired,
  }) {
    switch (getConstructor()) {
      case ReportStoryResultOk.constructor:
        return ok.call(this as ReportStoryResultOk);
      case ReportStoryResultOptionRequired.constructor:
        return optionRequired.call(this as ReportStoryResultOptionRequired);
      case ReportStoryResultTextRequired.constructor:
        return textRequired.call(this as ReportStoryResultTextRequired);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ReportStoryResultOk value)? ok,
    TResult Function(ReportStoryResultOptionRequired value)? optionRequired,
    TResult Function(ReportStoryResultTextRequired value)? textRequired,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ReportStoryResultOk.constructor:
        if (ok != null) {
          return ok.call(this as ReportStoryResultOk);
        }
        break;
      case ReportStoryResultOptionRequired.constructor:
        if (optionRequired != null) {
          return optionRequired.call(this as ReportStoryResultOptionRequired);
        }
        break;
      case ReportStoryResultTextRequired.constructor:
        if (textRequired != null) {
          return textRequired.call(this as ReportStoryResultTextRequired);
        }
        break;
    }
    return orElse.call();
  }
}

extension ReportStoryResultOptionRequiredExtensions
    on ReportStoryResultOptionRequired {
  ReportStoryResultOptionRequired copyWith({
    String? title,
    List<ReportOption>? options,
  }) => ReportStoryResultOptionRequired(
    title: title ?? this.title,
    options: options ?? this.options,
  );
}

extension ReportStoryResultTextRequiredExtensions
    on ReportStoryResultTextRequired {
  ReportStoryResultTextRequired copyWith({
    String? optionId,
    bool? isOptional,
  }) => ReportStoryResultTextRequired(
    optionId: optionId ?? this.optionId,
    isOptional: isOptional ?? this.isOptional,
  );
}

extension InternalLinkTypeExtensions on InternalLinkType {
  TResult map<TResult extends Object?>({
    required TResult Function(InternalLinkTypeActiveSessions value)
    activeSessions,
    required TResult Function(InternalLinkTypeAttachmentMenuBot value)
    attachmentMenuBot,
    required TResult Function(InternalLinkTypeAuthenticationCode value)
    authenticationCode,
    required TResult Function(InternalLinkTypeBackground value) background,
    required TResult Function(InternalLinkTypeBotAddToChannel value)
    botAddToChannel,
    required TResult Function(InternalLinkTypeBotStart value) botStart,
    required TResult Function(InternalLinkTypeBotStartInGroup value)
    botStartInGroup,
    required TResult Function(InternalLinkTypeBusinessChat value) businessChat,
    required TResult Function(InternalLinkTypeBuyStars value) buyStars,
    required TResult Function(InternalLinkTypeChangePhoneNumber value)
    changePhoneNumber,
    required TResult Function(InternalLinkTypeChatAffiliateProgram value)
    chatAffiliateProgram,
    required TResult Function(InternalLinkTypeChatBoost value) chatBoost,
    required TResult Function(InternalLinkTypeChatFolderInvite value)
    chatFolderInvite,
    required TResult Function(InternalLinkTypeChatFolderSettings value)
    chatFolderSettings,
    required TResult Function(InternalLinkTypeChatInvite value) chatInvite,
    required TResult Function(
      InternalLinkTypeDefaultMessageAutoDeleteTimerSettings value,
    )
    defaultMessageAutoDeleteTimerSettings,
    required TResult Function(InternalLinkTypeEditProfileSettings value)
    editProfileSettings,
    required TResult Function(InternalLinkTypeGame value) game,
    required TResult Function(InternalLinkTypeGroupCall value) groupCall,
    required TResult Function(InternalLinkTypeInstantView value) instantView,
    required TResult Function(InternalLinkTypeInvoice value) invoice,
    required TResult Function(InternalLinkTypeLanguagePack value) languagePack,
    required TResult Function(InternalLinkTypeLanguageSettings value)
    languageSettings,
    required TResult Function(InternalLinkTypeMainWebApp value) mainWebApp,
    required TResult Function(InternalLinkTypeMessage value) message,
    required TResult Function(InternalLinkTypeMessageDraft value) messageDraft,
    required TResult Function(InternalLinkTypeMyStars value) myStars,
    required TResult Function(InternalLinkTypePassportDataRequest value)
    passportDataRequest,
    required TResult Function(InternalLinkTypePhoneNumberConfirmation value)
    phoneNumberConfirmation,
    required TResult Function(InternalLinkTypePremiumFeatures value)
    premiumFeatures,
    required TResult Function(InternalLinkTypePremiumGift value) premiumGift,
    required TResult Function(InternalLinkTypePremiumGiftCode value)
    premiumGiftCode,
    required TResult Function(InternalLinkTypePrivacyAndSecuritySettings value)
    privacyAndSecuritySettings,
    required TResult Function(InternalLinkTypeProxy value) proxy,
    required TResult Function(InternalLinkTypePublicChat value) publicChat,
    required TResult Function(InternalLinkTypeQrCodeAuthentication value)
    qrCodeAuthentication,
    required TResult Function(InternalLinkTypeRestorePurchases value)
    restorePurchases,
    required TResult Function(InternalLinkTypeSettings value) settings,
    required TResult Function(InternalLinkTypeStickerSet value) stickerSet,
    required TResult Function(InternalLinkTypeStory value) story,
    required TResult Function(InternalLinkTypeTheme value) theme,
    required TResult Function(InternalLinkTypeThemeSettings value)
    themeSettings,
    required TResult Function(InternalLinkTypeUnknownDeepLink value)
    unknownDeepLink,
    required TResult Function(InternalLinkTypeUnsupportedProxy value)
    unsupportedProxy,
    required TResult Function(InternalLinkTypeUpgradedGift value) upgradedGift,
    required TResult Function(InternalLinkTypeUserPhoneNumber value)
    userPhoneNumber,
    required TResult Function(InternalLinkTypeUserToken value) userToken,
    required TResult Function(InternalLinkTypeVideoChat value) videoChat,
    required TResult Function(InternalLinkTypeWebApp value) webApp,
  }) {
    switch (getConstructor()) {
      case InternalLinkTypeActiveSessions.constructor:
        return activeSessions.call(this as InternalLinkTypeActiveSessions);
      case InternalLinkTypeAttachmentMenuBot.constructor:
        return attachmentMenuBot.call(
          this as InternalLinkTypeAttachmentMenuBot,
        );
      case InternalLinkTypeAuthenticationCode.constructor:
        return authenticationCode.call(
          this as InternalLinkTypeAuthenticationCode,
        );
      case InternalLinkTypeBackground.constructor:
        return background.call(this as InternalLinkTypeBackground);
      case InternalLinkTypeBotAddToChannel.constructor:
        return botAddToChannel.call(this as InternalLinkTypeBotAddToChannel);
      case InternalLinkTypeBotStart.constructor:
        return botStart.call(this as InternalLinkTypeBotStart);
      case InternalLinkTypeBotStartInGroup.constructor:
        return botStartInGroup.call(this as InternalLinkTypeBotStartInGroup);
      case InternalLinkTypeBusinessChat.constructor:
        return businessChat.call(this as InternalLinkTypeBusinessChat);
      case InternalLinkTypeBuyStars.constructor:
        return buyStars.call(this as InternalLinkTypeBuyStars);
      case InternalLinkTypeChangePhoneNumber.constructor:
        return changePhoneNumber.call(
          this as InternalLinkTypeChangePhoneNumber,
        );
      case InternalLinkTypeChatAffiliateProgram.constructor:
        return chatAffiliateProgram.call(
          this as InternalLinkTypeChatAffiliateProgram,
        );
      case InternalLinkTypeChatBoost.constructor:
        return chatBoost.call(this as InternalLinkTypeChatBoost);
      case InternalLinkTypeChatFolderInvite.constructor:
        return chatFolderInvite.call(this as InternalLinkTypeChatFolderInvite);
      case InternalLinkTypeChatFolderSettings.constructor:
        return chatFolderSettings.call(
          this as InternalLinkTypeChatFolderSettings,
        );
      case InternalLinkTypeChatInvite.constructor:
        return chatInvite.call(this as InternalLinkTypeChatInvite);
      case InternalLinkTypeDefaultMessageAutoDeleteTimerSettings.constructor:
        return defaultMessageAutoDeleteTimerSettings.call(
          this as InternalLinkTypeDefaultMessageAutoDeleteTimerSettings,
        );
      case InternalLinkTypeEditProfileSettings.constructor:
        return editProfileSettings.call(
          this as InternalLinkTypeEditProfileSettings,
        );
      case InternalLinkTypeGame.constructor:
        return game.call(this as InternalLinkTypeGame);
      case InternalLinkTypeGroupCall.constructor:
        return groupCall.call(this as InternalLinkTypeGroupCall);
      case InternalLinkTypeInstantView.constructor:
        return instantView.call(this as InternalLinkTypeInstantView);
      case InternalLinkTypeInvoice.constructor:
        return invoice.call(this as InternalLinkTypeInvoice);
      case InternalLinkTypeLanguagePack.constructor:
        return languagePack.call(this as InternalLinkTypeLanguagePack);
      case InternalLinkTypeLanguageSettings.constructor:
        return languageSettings.call(this as InternalLinkTypeLanguageSettings);
      case InternalLinkTypeMainWebApp.constructor:
        return mainWebApp.call(this as InternalLinkTypeMainWebApp);
      case InternalLinkTypeMessage.constructor:
        return message.call(this as InternalLinkTypeMessage);
      case InternalLinkTypeMessageDraft.constructor:
        return messageDraft.call(this as InternalLinkTypeMessageDraft);
      case InternalLinkTypeMyStars.constructor:
        return myStars.call(this as InternalLinkTypeMyStars);
      case InternalLinkTypePassportDataRequest.constructor:
        return passportDataRequest.call(
          this as InternalLinkTypePassportDataRequest,
        );
      case InternalLinkTypePhoneNumberConfirmation.constructor:
        return phoneNumberConfirmation.call(
          this as InternalLinkTypePhoneNumberConfirmation,
        );
      case InternalLinkTypePremiumFeatures.constructor:
        return premiumFeatures.call(this as InternalLinkTypePremiumFeatures);
      case InternalLinkTypePremiumGift.constructor:
        return premiumGift.call(this as InternalLinkTypePremiumGift);
      case InternalLinkTypePremiumGiftCode.constructor:
        return premiumGiftCode.call(this as InternalLinkTypePremiumGiftCode);
      case InternalLinkTypePrivacyAndSecuritySettings.constructor:
        return privacyAndSecuritySettings.call(
          this as InternalLinkTypePrivacyAndSecuritySettings,
        );
      case InternalLinkTypeProxy.constructor:
        return proxy.call(this as InternalLinkTypeProxy);
      case InternalLinkTypePublicChat.constructor:
        return publicChat.call(this as InternalLinkTypePublicChat);
      case InternalLinkTypeQrCodeAuthentication.constructor:
        return qrCodeAuthentication.call(
          this as InternalLinkTypeQrCodeAuthentication,
        );
      case InternalLinkTypeRestorePurchases.constructor:
        return restorePurchases.call(this as InternalLinkTypeRestorePurchases);
      case InternalLinkTypeSettings.constructor:
        return settings.call(this as InternalLinkTypeSettings);
      case InternalLinkTypeStickerSet.constructor:
        return stickerSet.call(this as InternalLinkTypeStickerSet);
      case InternalLinkTypeStory.constructor:
        return story.call(this as InternalLinkTypeStory);
      case InternalLinkTypeTheme.constructor:
        return theme.call(this as InternalLinkTypeTheme);
      case InternalLinkTypeThemeSettings.constructor:
        return themeSettings.call(this as InternalLinkTypeThemeSettings);
      case InternalLinkTypeUnknownDeepLink.constructor:
        return unknownDeepLink.call(this as InternalLinkTypeUnknownDeepLink);
      case InternalLinkTypeUnsupportedProxy.constructor:
        return unsupportedProxy.call(this as InternalLinkTypeUnsupportedProxy);
      case InternalLinkTypeUpgradedGift.constructor:
        return upgradedGift.call(this as InternalLinkTypeUpgradedGift);
      case InternalLinkTypeUserPhoneNumber.constructor:
        return userPhoneNumber.call(this as InternalLinkTypeUserPhoneNumber);
      case InternalLinkTypeUserToken.constructor:
        return userToken.call(this as InternalLinkTypeUserToken);
      case InternalLinkTypeVideoChat.constructor:
        return videoChat.call(this as InternalLinkTypeVideoChat);
      case InternalLinkTypeWebApp.constructor:
        return webApp.call(this as InternalLinkTypeWebApp);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(InternalLinkTypeActiveSessions value)? activeSessions,
    TResult Function(InternalLinkTypeAttachmentMenuBot value)?
    attachmentMenuBot,
    TResult Function(InternalLinkTypeAuthenticationCode value)?
    authenticationCode,
    TResult Function(InternalLinkTypeBackground value)? background,
    TResult Function(InternalLinkTypeBotAddToChannel value)? botAddToChannel,
    TResult Function(InternalLinkTypeBotStart value)? botStart,
    TResult Function(InternalLinkTypeBotStartInGroup value)? botStartInGroup,
    TResult Function(InternalLinkTypeBusinessChat value)? businessChat,
    TResult Function(InternalLinkTypeBuyStars value)? buyStars,
    TResult Function(InternalLinkTypeChangePhoneNumber value)?
    changePhoneNumber,
    TResult Function(InternalLinkTypeChatAffiliateProgram value)?
    chatAffiliateProgram,
    TResult Function(InternalLinkTypeChatBoost value)? chatBoost,
    TResult Function(InternalLinkTypeChatFolderInvite value)? chatFolderInvite,
    TResult Function(InternalLinkTypeChatFolderSettings value)?
    chatFolderSettings,
    TResult Function(InternalLinkTypeChatInvite value)? chatInvite,
    TResult Function(
      InternalLinkTypeDefaultMessageAutoDeleteTimerSettings value,
    )?
    defaultMessageAutoDeleteTimerSettings,
    TResult Function(InternalLinkTypeEditProfileSettings value)?
    editProfileSettings,
    TResult Function(InternalLinkTypeGame value)? game,
    TResult Function(InternalLinkTypeGroupCall value)? groupCall,
    TResult Function(InternalLinkTypeInstantView value)? instantView,
    TResult Function(InternalLinkTypeInvoice value)? invoice,
    TResult Function(InternalLinkTypeLanguagePack value)? languagePack,
    TResult Function(InternalLinkTypeLanguageSettings value)? languageSettings,
    TResult Function(InternalLinkTypeMainWebApp value)? mainWebApp,
    TResult Function(InternalLinkTypeMessage value)? message,
    TResult Function(InternalLinkTypeMessageDraft value)? messageDraft,
    TResult Function(InternalLinkTypeMyStars value)? myStars,
    TResult Function(InternalLinkTypePassportDataRequest value)?
    passportDataRequest,
    TResult Function(InternalLinkTypePhoneNumberConfirmation value)?
    phoneNumberConfirmation,
    TResult Function(InternalLinkTypePremiumFeatures value)? premiumFeatures,
    TResult Function(InternalLinkTypePremiumGift value)? premiumGift,
    TResult Function(InternalLinkTypePremiumGiftCode value)? premiumGiftCode,
    TResult Function(InternalLinkTypePrivacyAndSecuritySettings value)?
    privacyAndSecuritySettings,
    TResult Function(InternalLinkTypeProxy value)? proxy,
    TResult Function(InternalLinkTypePublicChat value)? publicChat,
    TResult Function(InternalLinkTypeQrCodeAuthentication value)?
    qrCodeAuthentication,
    TResult Function(InternalLinkTypeRestorePurchases value)? restorePurchases,
    TResult Function(InternalLinkTypeSettings value)? settings,
    TResult Function(InternalLinkTypeStickerSet value)? stickerSet,
    TResult Function(InternalLinkTypeStory value)? story,
    TResult Function(InternalLinkTypeTheme value)? theme,
    TResult Function(InternalLinkTypeThemeSettings value)? themeSettings,
    TResult Function(InternalLinkTypeUnknownDeepLink value)? unknownDeepLink,
    TResult Function(InternalLinkTypeUnsupportedProxy value)? unsupportedProxy,
    TResult Function(InternalLinkTypeUpgradedGift value)? upgradedGift,
    TResult Function(InternalLinkTypeUserPhoneNumber value)? userPhoneNumber,
    TResult Function(InternalLinkTypeUserToken value)? userToken,
    TResult Function(InternalLinkTypeVideoChat value)? videoChat,
    TResult Function(InternalLinkTypeWebApp value)? webApp,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case InternalLinkTypeActiveSessions.constructor:
        if (activeSessions != null) {
          return activeSessions.call(this as InternalLinkTypeActiveSessions);
        }
        break;
      case InternalLinkTypeAttachmentMenuBot.constructor:
        if (attachmentMenuBot != null) {
          return attachmentMenuBot.call(
            this as InternalLinkTypeAttachmentMenuBot,
          );
        }
        break;
      case InternalLinkTypeAuthenticationCode.constructor:
        if (authenticationCode != null) {
          return authenticationCode.call(
            this as InternalLinkTypeAuthenticationCode,
          );
        }
        break;
      case InternalLinkTypeBackground.constructor:
        if (background != null) {
          return background.call(this as InternalLinkTypeBackground);
        }
        break;
      case InternalLinkTypeBotAddToChannel.constructor:
        if (botAddToChannel != null) {
          return botAddToChannel.call(this as InternalLinkTypeBotAddToChannel);
        }
        break;
      case InternalLinkTypeBotStart.constructor:
        if (botStart != null) {
          return botStart.call(this as InternalLinkTypeBotStart);
        }
        break;
      case InternalLinkTypeBotStartInGroup.constructor:
        if (botStartInGroup != null) {
          return botStartInGroup.call(this as InternalLinkTypeBotStartInGroup);
        }
        break;
      case InternalLinkTypeBusinessChat.constructor:
        if (businessChat != null) {
          return businessChat.call(this as InternalLinkTypeBusinessChat);
        }
        break;
      case InternalLinkTypeBuyStars.constructor:
        if (buyStars != null) {
          return buyStars.call(this as InternalLinkTypeBuyStars);
        }
        break;
      case InternalLinkTypeChangePhoneNumber.constructor:
        if (changePhoneNumber != null) {
          return changePhoneNumber.call(
            this as InternalLinkTypeChangePhoneNumber,
          );
        }
        break;
      case InternalLinkTypeChatAffiliateProgram.constructor:
        if (chatAffiliateProgram != null) {
          return chatAffiliateProgram.call(
            this as InternalLinkTypeChatAffiliateProgram,
          );
        }
        break;
      case InternalLinkTypeChatBoost.constructor:
        if (chatBoost != null) {
          return chatBoost.call(this as InternalLinkTypeChatBoost);
        }
        break;
      case InternalLinkTypeChatFolderInvite.constructor:
        if (chatFolderInvite != null) {
          return chatFolderInvite.call(
            this as InternalLinkTypeChatFolderInvite,
          );
        }
        break;
      case InternalLinkTypeChatFolderSettings.constructor:
        if (chatFolderSettings != null) {
          return chatFolderSettings.call(
            this as InternalLinkTypeChatFolderSettings,
          );
        }
        break;
      case InternalLinkTypeChatInvite.constructor:
        if (chatInvite != null) {
          return chatInvite.call(this as InternalLinkTypeChatInvite);
        }
        break;
      case InternalLinkTypeDefaultMessageAutoDeleteTimerSettings.constructor:
        if (defaultMessageAutoDeleteTimerSettings != null) {
          return defaultMessageAutoDeleteTimerSettings.call(
            this as InternalLinkTypeDefaultMessageAutoDeleteTimerSettings,
          );
        }
        break;
      case InternalLinkTypeEditProfileSettings.constructor:
        if (editProfileSettings != null) {
          return editProfileSettings.call(
            this as InternalLinkTypeEditProfileSettings,
          );
        }
        break;
      case InternalLinkTypeGame.constructor:
        if (game != null) {
          return game.call(this as InternalLinkTypeGame);
        }
        break;
      case InternalLinkTypeGroupCall.constructor:
        if (groupCall != null) {
          return groupCall.call(this as InternalLinkTypeGroupCall);
        }
        break;
      case InternalLinkTypeInstantView.constructor:
        if (instantView != null) {
          return instantView.call(this as InternalLinkTypeInstantView);
        }
        break;
      case InternalLinkTypeInvoice.constructor:
        if (invoice != null) {
          return invoice.call(this as InternalLinkTypeInvoice);
        }
        break;
      case InternalLinkTypeLanguagePack.constructor:
        if (languagePack != null) {
          return languagePack.call(this as InternalLinkTypeLanguagePack);
        }
        break;
      case InternalLinkTypeLanguageSettings.constructor:
        if (languageSettings != null) {
          return languageSettings.call(
            this as InternalLinkTypeLanguageSettings,
          );
        }
        break;
      case InternalLinkTypeMainWebApp.constructor:
        if (mainWebApp != null) {
          return mainWebApp.call(this as InternalLinkTypeMainWebApp);
        }
        break;
      case InternalLinkTypeMessage.constructor:
        if (message != null) {
          return message.call(this as InternalLinkTypeMessage);
        }
        break;
      case InternalLinkTypeMessageDraft.constructor:
        if (messageDraft != null) {
          return messageDraft.call(this as InternalLinkTypeMessageDraft);
        }
        break;
      case InternalLinkTypeMyStars.constructor:
        if (myStars != null) {
          return myStars.call(this as InternalLinkTypeMyStars);
        }
        break;
      case InternalLinkTypePassportDataRequest.constructor:
        if (passportDataRequest != null) {
          return passportDataRequest.call(
            this as InternalLinkTypePassportDataRequest,
          );
        }
        break;
      case InternalLinkTypePhoneNumberConfirmation.constructor:
        if (phoneNumberConfirmation != null) {
          return phoneNumberConfirmation.call(
            this as InternalLinkTypePhoneNumberConfirmation,
          );
        }
        break;
      case InternalLinkTypePremiumFeatures.constructor:
        if (premiumFeatures != null) {
          return premiumFeatures.call(this as InternalLinkTypePremiumFeatures);
        }
        break;
      case InternalLinkTypePremiumGift.constructor:
        if (premiumGift != null) {
          return premiumGift.call(this as InternalLinkTypePremiumGift);
        }
        break;
      case InternalLinkTypePremiumGiftCode.constructor:
        if (premiumGiftCode != null) {
          return premiumGiftCode.call(this as InternalLinkTypePremiumGiftCode);
        }
        break;
      case InternalLinkTypePrivacyAndSecuritySettings.constructor:
        if (privacyAndSecuritySettings != null) {
          return privacyAndSecuritySettings.call(
            this as InternalLinkTypePrivacyAndSecuritySettings,
          );
        }
        break;
      case InternalLinkTypeProxy.constructor:
        if (proxy != null) {
          return proxy.call(this as InternalLinkTypeProxy);
        }
        break;
      case InternalLinkTypePublicChat.constructor:
        if (publicChat != null) {
          return publicChat.call(this as InternalLinkTypePublicChat);
        }
        break;
      case InternalLinkTypeQrCodeAuthentication.constructor:
        if (qrCodeAuthentication != null) {
          return qrCodeAuthentication.call(
            this as InternalLinkTypeQrCodeAuthentication,
          );
        }
        break;
      case InternalLinkTypeRestorePurchases.constructor:
        if (restorePurchases != null) {
          return restorePurchases.call(
            this as InternalLinkTypeRestorePurchases,
          );
        }
        break;
      case InternalLinkTypeSettings.constructor:
        if (settings != null) {
          return settings.call(this as InternalLinkTypeSettings);
        }
        break;
      case InternalLinkTypeStickerSet.constructor:
        if (stickerSet != null) {
          return stickerSet.call(this as InternalLinkTypeStickerSet);
        }
        break;
      case InternalLinkTypeStory.constructor:
        if (story != null) {
          return story.call(this as InternalLinkTypeStory);
        }
        break;
      case InternalLinkTypeTheme.constructor:
        if (theme != null) {
          return theme.call(this as InternalLinkTypeTheme);
        }
        break;
      case InternalLinkTypeThemeSettings.constructor:
        if (themeSettings != null) {
          return themeSettings.call(this as InternalLinkTypeThemeSettings);
        }
        break;
      case InternalLinkTypeUnknownDeepLink.constructor:
        if (unknownDeepLink != null) {
          return unknownDeepLink.call(this as InternalLinkTypeUnknownDeepLink);
        }
        break;
      case InternalLinkTypeUnsupportedProxy.constructor:
        if (unsupportedProxy != null) {
          return unsupportedProxy.call(
            this as InternalLinkTypeUnsupportedProxy,
          );
        }
        break;
      case InternalLinkTypeUpgradedGift.constructor:
        if (upgradedGift != null) {
          return upgradedGift.call(this as InternalLinkTypeUpgradedGift);
        }
        break;
      case InternalLinkTypeUserPhoneNumber.constructor:
        if (userPhoneNumber != null) {
          return userPhoneNumber.call(this as InternalLinkTypeUserPhoneNumber);
        }
        break;
      case InternalLinkTypeUserToken.constructor:
        if (userToken != null) {
          return userToken.call(this as InternalLinkTypeUserToken);
        }
        break;
      case InternalLinkTypeVideoChat.constructor:
        if (videoChat != null) {
          return videoChat.call(this as InternalLinkTypeVideoChat);
        }
        break;
      case InternalLinkTypeWebApp.constructor:
        if (webApp != null) {
          return webApp.call(this as InternalLinkTypeWebApp);
        }
        break;
    }
    return orElse.call();
  }
}

extension InternalLinkTypeAttachmentMenuBotExtensions
    on InternalLinkTypeAttachmentMenuBot {
  InternalLinkTypeAttachmentMenuBot copyWith({
    TargetChat? targetChat,
    String? botUsername,
    String? url,
  }) => InternalLinkTypeAttachmentMenuBot(
    targetChat: targetChat ?? this.targetChat,
    botUsername: botUsername ?? this.botUsername,
    url: url ?? this.url,
  );
}

extension InternalLinkTypeAuthenticationCodeExtensions
    on InternalLinkTypeAuthenticationCode {
  InternalLinkTypeAuthenticationCode copyWith({String? code}) =>
      InternalLinkTypeAuthenticationCode(code: code ?? this.code);
}

extension InternalLinkTypeBackgroundExtensions on InternalLinkTypeBackground {
  InternalLinkTypeBackground copyWith({String? backgroundName}) =>
      InternalLinkTypeBackground(
        backgroundName: backgroundName ?? this.backgroundName,
      );
}

extension InternalLinkTypeBotAddToChannelExtensions
    on InternalLinkTypeBotAddToChannel {
  InternalLinkTypeBotAddToChannel copyWith({
    String? botUsername,
    ChatAdministratorRights? administratorRights,
  }) => InternalLinkTypeBotAddToChannel(
    botUsername: botUsername ?? this.botUsername,
    administratorRights: administratorRights ?? this.administratorRights,
  );
}

extension InternalLinkTypeBotStartExtensions on InternalLinkTypeBotStart {
  InternalLinkTypeBotStart copyWith({
    String? botUsername,
    String? startParameter,
    bool? autostart,
  }) => InternalLinkTypeBotStart(
    botUsername: botUsername ?? this.botUsername,
    startParameter: startParameter ?? this.startParameter,
    autostart: autostart ?? this.autostart,
  );
}

extension InternalLinkTypeBotStartInGroupExtensions
    on InternalLinkTypeBotStartInGroup {
  InternalLinkTypeBotStartInGroup copyWith({
    String? botUsername,
    String? startParameter,
    ChatAdministratorRights? administratorRights,
  }) => InternalLinkTypeBotStartInGroup(
    botUsername: botUsername ?? this.botUsername,
    startParameter: startParameter ?? this.startParameter,
    administratorRights: administratorRights ?? this.administratorRights,
  );
}

extension InternalLinkTypeBusinessChatExtensions
    on InternalLinkTypeBusinessChat {
  InternalLinkTypeBusinessChat copyWith({String? linkName}) =>
      InternalLinkTypeBusinessChat(linkName: linkName ?? this.linkName);
}

extension InternalLinkTypeBuyStarsExtensions on InternalLinkTypeBuyStars {
  InternalLinkTypeBuyStars copyWith({int? starCount, String? purpose}) =>
      InternalLinkTypeBuyStars(
        starCount: starCount ?? this.starCount,
        purpose: purpose ?? this.purpose,
      );
}

extension InternalLinkTypeChatAffiliateProgramExtensions
    on InternalLinkTypeChatAffiliateProgram {
  InternalLinkTypeChatAffiliateProgram copyWith({
    String? username,
    String? referrer,
  }) => InternalLinkTypeChatAffiliateProgram(
    username: username ?? this.username,
    referrer: referrer ?? this.referrer,
  );
}

extension InternalLinkTypeChatBoostExtensions on InternalLinkTypeChatBoost {
  InternalLinkTypeChatBoost copyWith({String? url}) =>
      InternalLinkTypeChatBoost(url: url ?? this.url);
}

extension InternalLinkTypeChatFolderInviteExtensions
    on InternalLinkTypeChatFolderInvite {
  InternalLinkTypeChatFolderInvite copyWith({String? inviteLink}) =>
      InternalLinkTypeChatFolderInvite(
        inviteLink: inviteLink ?? this.inviteLink,
      );
}

extension InternalLinkTypeChatInviteExtensions on InternalLinkTypeChatInvite {
  InternalLinkTypeChatInvite copyWith({String? inviteLink}) =>
      InternalLinkTypeChatInvite(inviteLink: inviteLink ?? this.inviteLink);
}

extension InternalLinkTypeGameExtensions on InternalLinkTypeGame {
  InternalLinkTypeGame copyWith({String? botUsername, String? gameShortName}) =>
      InternalLinkTypeGame(
        botUsername: botUsername ?? this.botUsername,
        gameShortName: gameShortName ?? this.gameShortName,
      );
}

extension InternalLinkTypeGroupCallExtensions on InternalLinkTypeGroupCall {
  InternalLinkTypeGroupCall copyWith({String? inviteLink}) =>
      InternalLinkTypeGroupCall(inviteLink: inviteLink ?? this.inviteLink);
}

extension InternalLinkTypeInstantViewExtensions on InternalLinkTypeInstantView {
  InternalLinkTypeInstantView copyWith({String? url, String? fallbackUrl}) =>
      InternalLinkTypeInstantView(
        url: url ?? this.url,
        fallbackUrl: fallbackUrl ?? this.fallbackUrl,
      );
}

extension InternalLinkTypeInvoiceExtensions on InternalLinkTypeInvoice {
  InternalLinkTypeInvoice copyWith({String? invoiceName}) =>
      InternalLinkTypeInvoice(invoiceName: invoiceName ?? this.invoiceName);
}

extension InternalLinkTypeLanguagePackExtensions
    on InternalLinkTypeLanguagePack {
  InternalLinkTypeLanguagePack copyWith({String? languagePackId}) =>
      InternalLinkTypeLanguagePack(
        languagePackId: languagePackId ?? this.languagePackId,
      );
}

extension InternalLinkTypeMainWebAppExtensions on InternalLinkTypeMainWebApp {
  InternalLinkTypeMainWebApp copyWith({
    String? botUsername,
    String? startParameter,
    WebAppOpenMode? mode,
  }) => InternalLinkTypeMainWebApp(
    botUsername: botUsername ?? this.botUsername,
    startParameter: startParameter ?? this.startParameter,
    mode: mode ?? this.mode,
  );
}

extension InternalLinkTypeMessageExtensions on InternalLinkTypeMessage {
  InternalLinkTypeMessage copyWith({String? url}) =>
      InternalLinkTypeMessage(url: url ?? this.url);
}

extension InternalLinkTypeMessageDraftExtensions
    on InternalLinkTypeMessageDraft {
  InternalLinkTypeMessageDraft copyWith({
    FormattedText? text,
    bool? containsLink,
  }) => InternalLinkTypeMessageDraft(
    text: text ?? this.text,
    containsLink: containsLink ?? this.containsLink,
  );
}

extension InternalLinkTypePassportDataRequestExtensions
    on InternalLinkTypePassportDataRequest {
  InternalLinkTypePassportDataRequest copyWith({
    int? botUserId,
    String? scope,
    String? publicKey,
    String? nonce,
    String? callbackUrl,
  }) => InternalLinkTypePassportDataRequest(
    botUserId: botUserId ?? this.botUserId,
    scope: scope ?? this.scope,
    publicKey: publicKey ?? this.publicKey,
    nonce: nonce ?? this.nonce,
    callbackUrl: callbackUrl ?? this.callbackUrl,
  );
}

extension InternalLinkTypePhoneNumberConfirmationExtensions
    on InternalLinkTypePhoneNumberConfirmation {
  InternalLinkTypePhoneNumberConfirmation copyWith({
    String? hash,
    String? phoneNumber,
  }) => InternalLinkTypePhoneNumberConfirmation(
    hash: hash ?? this.hash,
    phoneNumber: phoneNumber ?? this.phoneNumber,
  );
}

extension InternalLinkTypePremiumFeaturesExtensions
    on InternalLinkTypePremiumFeatures {
  InternalLinkTypePremiumFeatures copyWith({String? referrer}) =>
      InternalLinkTypePremiumFeatures(referrer: referrer ?? this.referrer);
}

extension InternalLinkTypePremiumGiftExtensions on InternalLinkTypePremiumGift {
  InternalLinkTypePremiumGift copyWith({String? referrer}) =>
      InternalLinkTypePremiumGift(referrer: referrer ?? this.referrer);
}

extension InternalLinkTypePremiumGiftCodeExtensions
    on InternalLinkTypePremiumGiftCode {
  InternalLinkTypePremiumGiftCode copyWith({String? code}) =>
      InternalLinkTypePremiumGiftCode(code: code ?? this.code);
}

extension InternalLinkTypeProxyExtensions on InternalLinkTypeProxy {
  InternalLinkTypeProxy copyWith({
    String? server,
    int? port,
    ProxyType? type,
  }) => InternalLinkTypeProxy(
    server: server ?? this.server,
    port: port ?? this.port,
    type: type ?? this.type,
  );
}

extension InternalLinkTypePublicChatExtensions on InternalLinkTypePublicChat {
  InternalLinkTypePublicChat copyWith({
    String? chatUsername,
    String? draftText,
    bool? openProfile,
  }) => InternalLinkTypePublicChat(
    chatUsername: chatUsername ?? this.chatUsername,
    draftText: draftText ?? this.draftText,
    openProfile: openProfile ?? this.openProfile,
  );
}

extension InternalLinkTypeStickerSetExtensions on InternalLinkTypeStickerSet {
  InternalLinkTypeStickerSet copyWith({
    String? stickerSetName,
    bool? expectCustomEmoji,
  }) => InternalLinkTypeStickerSet(
    stickerSetName: stickerSetName ?? this.stickerSetName,
    expectCustomEmoji: expectCustomEmoji ?? this.expectCustomEmoji,
  );
}

extension InternalLinkTypeStoryExtensions on InternalLinkTypeStory {
  InternalLinkTypeStory copyWith({String? storyPosterUsername, int? storyId}) =>
      InternalLinkTypeStory(
        storyPosterUsername: storyPosterUsername ?? this.storyPosterUsername,
        storyId: storyId ?? this.storyId,
      );
}

extension InternalLinkTypeThemeExtensions on InternalLinkTypeTheme {
  InternalLinkTypeTheme copyWith({String? themeName}) =>
      InternalLinkTypeTheme(themeName: themeName ?? this.themeName);
}

extension InternalLinkTypeUnknownDeepLinkExtensions
    on InternalLinkTypeUnknownDeepLink {
  InternalLinkTypeUnknownDeepLink copyWith({String? link}) =>
      InternalLinkTypeUnknownDeepLink(link: link ?? this.link);
}

extension InternalLinkTypeUpgradedGiftExtensions
    on InternalLinkTypeUpgradedGift {
  InternalLinkTypeUpgradedGift copyWith({String? name}) =>
      InternalLinkTypeUpgradedGift(name: name ?? this.name);
}

extension InternalLinkTypeUserPhoneNumberExtensions
    on InternalLinkTypeUserPhoneNumber {
  InternalLinkTypeUserPhoneNumber copyWith({
    String? phoneNumber,
    String? draftText,
    bool? openProfile,
  }) => InternalLinkTypeUserPhoneNumber(
    phoneNumber: phoneNumber ?? this.phoneNumber,
    draftText: draftText ?? this.draftText,
    openProfile: openProfile ?? this.openProfile,
  );
}

extension InternalLinkTypeUserTokenExtensions on InternalLinkTypeUserToken {
  InternalLinkTypeUserToken copyWith({String? token}) =>
      InternalLinkTypeUserToken(token: token ?? this.token);
}

extension InternalLinkTypeVideoChatExtensions on InternalLinkTypeVideoChat {
  InternalLinkTypeVideoChat copyWith({
    String? chatUsername,
    String? inviteHash,
    bool? isLiveStream,
  }) => InternalLinkTypeVideoChat(
    chatUsername: chatUsername ?? this.chatUsername,
    inviteHash: inviteHash ?? this.inviteHash,
    isLiveStream: isLiveStream ?? this.isLiveStream,
  );
}

extension InternalLinkTypeWebAppExtensions on InternalLinkTypeWebApp {
  InternalLinkTypeWebApp copyWith({
    String? botUsername,
    String? webAppShortName,
    String? startParameter,
    WebAppOpenMode? mode,
  }) => InternalLinkTypeWebApp(
    botUsername: botUsername ?? this.botUsername,
    webAppShortName: webAppShortName ?? this.webAppShortName,
    startParameter: startParameter ?? this.startParameter,
    mode: mode ?? this.mode,
  );
}

extension MessageLinkExtensions on MessageLink {
  MessageLink copyWith({String? link, bool? isPublic}) =>
      MessageLink(link: link ?? this.link, isPublic: isPublic ?? this.isPublic);
}

extension MessageLinkInfoExtensions on MessageLinkInfo {
  MessageLinkInfo copyWith({
    bool? isPublic,
    int? chatId,
    int? messageThreadId,
    Message? message,
    int? mediaTimestamp,
    bool? forAlbum,
  }) => MessageLinkInfo(
    isPublic: isPublic ?? this.isPublic,
    chatId: chatId ?? this.chatId,
    messageThreadId: messageThreadId ?? this.messageThreadId,
    message: message ?? this.message,
    mediaTimestamp: mediaTimestamp ?? this.mediaTimestamp,
    forAlbum: forAlbum ?? this.forAlbum,
  );
}

extension ChatBoostLinkExtensions on ChatBoostLink {
  ChatBoostLink copyWith({String? link, bool? isPublic}) => ChatBoostLink(
    link: link ?? this.link,
    isPublic: isPublic ?? this.isPublic,
  );
}

extension ChatBoostLinkInfoExtensions on ChatBoostLinkInfo {
  ChatBoostLinkInfo copyWith({bool? isPublic, int? chatId}) =>
      ChatBoostLinkInfo(
        isPublic: isPublic ?? this.isPublic,
        chatId: chatId ?? this.chatId,
      );
}

extension BlockListExtensions on BlockList {
  TResult map<TResult extends Object?>({
    required TResult Function(BlockListMain value) main,
    required TResult Function(BlockListStories value) stories,
  }) {
    switch (getConstructor()) {
      case BlockListMain.constructor:
        return main.call(this as BlockListMain);
      case BlockListStories.constructor:
        return stories.call(this as BlockListStories);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(BlockListMain value)? main,
    TResult Function(BlockListStories value)? stories,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case BlockListMain.constructor:
        if (main != null) {
          return main.call(this as BlockListMain);
        }
        break;
      case BlockListStories.constructor:
        if (stories != null) {
          return stories.call(this as BlockListStories);
        }
        break;
    }
    return orElse.call();
  }
}

extension FileTypeExtensions on FileType {
  TResult map<TResult extends Object?>({
    required TResult Function(FileTypeNone value) none,
    required TResult Function(FileTypeAnimation value) animation,
    required TResult Function(FileTypeAudio value) audio,
    required TResult Function(FileTypeDocument value) document,
    required TResult Function(FileTypeNotificationSound value)
    notificationSound,
    required TResult Function(FileTypePhoto value) photo,
    required TResult Function(FileTypePhotoStory value) photoStory,
    required TResult Function(FileTypeProfilePhoto value) profilePhoto,
    required TResult Function(FileTypeSecret value) secret,
    required TResult Function(FileTypeSecretThumbnail value) secretThumbnail,
    required TResult Function(FileTypeSecure value) secure,
    required TResult Function(FileTypeSelfDestructingPhoto value)
    selfDestructingPhoto,
    required TResult Function(FileTypeSelfDestructingVideo value)
    selfDestructingVideo,
    required TResult Function(FileTypeSelfDestructingVideoNote value)
    selfDestructingVideoNote,
    required TResult Function(FileTypeSelfDestructingVoiceNote value)
    selfDestructingVoiceNote,
    required TResult Function(FileTypeSticker value) sticker,
    required TResult Function(FileTypeThumbnail value) thumbnail,
    required TResult Function(FileTypeUnknown value) unknown,
    required TResult Function(FileTypeVideo value) video,
    required TResult Function(FileTypeVideoNote value) videoNote,
    required TResult Function(FileTypeVideoStory value) videoStory,
    required TResult Function(FileTypeVoiceNote value) voiceNote,
    required TResult Function(FileTypeWallpaper value) wallpaper,
  }) {
    switch (getConstructor()) {
      case FileTypeNone.constructor:
        return none.call(this as FileTypeNone);
      case FileTypeAnimation.constructor:
        return animation.call(this as FileTypeAnimation);
      case FileTypeAudio.constructor:
        return audio.call(this as FileTypeAudio);
      case FileTypeDocument.constructor:
        return document.call(this as FileTypeDocument);
      case FileTypeNotificationSound.constructor:
        return notificationSound.call(this as FileTypeNotificationSound);
      case FileTypePhoto.constructor:
        return photo.call(this as FileTypePhoto);
      case FileTypePhotoStory.constructor:
        return photoStory.call(this as FileTypePhotoStory);
      case FileTypeProfilePhoto.constructor:
        return profilePhoto.call(this as FileTypeProfilePhoto);
      case FileTypeSecret.constructor:
        return secret.call(this as FileTypeSecret);
      case FileTypeSecretThumbnail.constructor:
        return secretThumbnail.call(this as FileTypeSecretThumbnail);
      case FileTypeSecure.constructor:
        return secure.call(this as FileTypeSecure);
      case FileTypeSelfDestructingPhoto.constructor:
        return selfDestructingPhoto.call(this as FileTypeSelfDestructingPhoto);
      case FileTypeSelfDestructingVideo.constructor:
        return selfDestructingVideo.call(this as FileTypeSelfDestructingVideo);
      case FileTypeSelfDestructingVideoNote.constructor:
        return selfDestructingVideoNote.call(
          this as FileTypeSelfDestructingVideoNote,
        );
      case FileTypeSelfDestructingVoiceNote.constructor:
        return selfDestructingVoiceNote.call(
          this as FileTypeSelfDestructingVoiceNote,
        );
      case FileTypeSticker.constructor:
        return sticker.call(this as FileTypeSticker);
      case FileTypeThumbnail.constructor:
        return thumbnail.call(this as FileTypeThumbnail);
      case FileTypeUnknown.constructor:
        return unknown.call(this as FileTypeUnknown);
      case FileTypeVideo.constructor:
        return video.call(this as FileTypeVideo);
      case FileTypeVideoNote.constructor:
        return videoNote.call(this as FileTypeVideoNote);
      case FileTypeVideoStory.constructor:
        return videoStory.call(this as FileTypeVideoStory);
      case FileTypeVoiceNote.constructor:
        return voiceNote.call(this as FileTypeVoiceNote);
      case FileTypeWallpaper.constructor:
        return wallpaper.call(this as FileTypeWallpaper);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(FileTypeNone value)? none,
    TResult Function(FileTypeAnimation value)? animation,
    TResult Function(FileTypeAudio value)? audio,
    TResult Function(FileTypeDocument value)? document,
    TResult Function(FileTypeNotificationSound value)? notificationSound,
    TResult Function(FileTypePhoto value)? photo,
    TResult Function(FileTypePhotoStory value)? photoStory,
    TResult Function(FileTypeProfilePhoto value)? profilePhoto,
    TResult Function(FileTypeSecret value)? secret,
    TResult Function(FileTypeSecretThumbnail value)? secretThumbnail,
    TResult Function(FileTypeSecure value)? secure,
    TResult Function(FileTypeSelfDestructingPhoto value)? selfDestructingPhoto,
    TResult Function(FileTypeSelfDestructingVideo value)? selfDestructingVideo,
    TResult Function(FileTypeSelfDestructingVideoNote value)?
    selfDestructingVideoNote,
    TResult Function(FileTypeSelfDestructingVoiceNote value)?
    selfDestructingVoiceNote,
    TResult Function(FileTypeSticker value)? sticker,
    TResult Function(FileTypeThumbnail value)? thumbnail,
    TResult Function(FileTypeUnknown value)? unknown,
    TResult Function(FileTypeVideo value)? video,
    TResult Function(FileTypeVideoNote value)? videoNote,
    TResult Function(FileTypeVideoStory value)? videoStory,
    TResult Function(FileTypeVoiceNote value)? voiceNote,
    TResult Function(FileTypeWallpaper value)? wallpaper,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case FileTypeNone.constructor:
        if (none != null) {
          return none.call(this as FileTypeNone);
        }
        break;
      case FileTypeAnimation.constructor:
        if (animation != null) {
          return animation.call(this as FileTypeAnimation);
        }
        break;
      case FileTypeAudio.constructor:
        if (audio != null) {
          return audio.call(this as FileTypeAudio);
        }
        break;
      case FileTypeDocument.constructor:
        if (document != null) {
          return document.call(this as FileTypeDocument);
        }
        break;
      case FileTypeNotificationSound.constructor:
        if (notificationSound != null) {
          return notificationSound.call(this as FileTypeNotificationSound);
        }
        break;
      case FileTypePhoto.constructor:
        if (photo != null) {
          return photo.call(this as FileTypePhoto);
        }
        break;
      case FileTypePhotoStory.constructor:
        if (photoStory != null) {
          return photoStory.call(this as FileTypePhotoStory);
        }
        break;
      case FileTypeProfilePhoto.constructor:
        if (profilePhoto != null) {
          return profilePhoto.call(this as FileTypeProfilePhoto);
        }
        break;
      case FileTypeSecret.constructor:
        if (secret != null) {
          return secret.call(this as FileTypeSecret);
        }
        break;
      case FileTypeSecretThumbnail.constructor:
        if (secretThumbnail != null) {
          return secretThumbnail.call(this as FileTypeSecretThumbnail);
        }
        break;
      case FileTypeSecure.constructor:
        if (secure != null) {
          return secure.call(this as FileTypeSecure);
        }
        break;
      case FileTypeSelfDestructingPhoto.constructor:
        if (selfDestructingPhoto != null) {
          return selfDestructingPhoto.call(
            this as FileTypeSelfDestructingPhoto,
          );
        }
        break;
      case FileTypeSelfDestructingVideo.constructor:
        if (selfDestructingVideo != null) {
          return selfDestructingVideo.call(
            this as FileTypeSelfDestructingVideo,
          );
        }
        break;
      case FileTypeSelfDestructingVideoNote.constructor:
        if (selfDestructingVideoNote != null) {
          return selfDestructingVideoNote.call(
            this as FileTypeSelfDestructingVideoNote,
          );
        }
        break;
      case FileTypeSelfDestructingVoiceNote.constructor:
        if (selfDestructingVoiceNote != null) {
          return selfDestructingVoiceNote.call(
            this as FileTypeSelfDestructingVoiceNote,
          );
        }
        break;
      case FileTypeSticker.constructor:
        if (sticker != null) {
          return sticker.call(this as FileTypeSticker);
        }
        break;
      case FileTypeThumbnail.constructor:
        if (thumbnail != null) {
          return thumbnail.call(this as FileTypeThumbnail);
        }
        break;
      case FileTypeUnknown.constructor:
        if (unknown != null) {
          return unknown.call(this as FileTypeUnknown);
        }
        break;
      case FileTypeVideo.constructor:
        if (video != null) {
          return video.call(this as FileTypeVideo);
        }
        break;
      case FileTypeVideoNote.constructor:
        if (videoNote != null) {
          return videoNote.call(this as FileTypeVideoNote);
        }
        break;
      case FileTypeVideoStory.constructor:
        if (videoStory != null) {
          return videoStory.call(this as FileTypeVideoStory);
        }
        break;
      case FileTypeVoiceNote.constructor:
        if (voiceNote != null) {
          return voiceNote.call(this as FileTypeVoiceNote);
        }
        break;
      case FileTypeWallpaper.constructor:
        if (wallpaper != null) {
          return wallpaper.call(this as FileTypeWallpaper);
        }
        break;
    }
    return orElse.call();
  }
}

extension StorageStatisticsByFileTypeExtensions on StorageStatisticsByFileType {
  StorageStatisticsByFileType copyWith({
    FileType? fileType,
    int? size,
    int? count,
  }) => StorageStatisticsByFileType(
    fileType: fileType ?? this.fileType,
    size: size ?? this.size,
    count: count ?? this.count,
  );
}

extension StorageStatisticsByChatExtensions on StorageStatisticsByChat {
  StorageStatisticsByChat copyWith({
    int? chatId,
    int? size,
    int? count,
    List<StorageStatisticsByFileType>? byFileType,
  }) => StorageStatisticsByChat(
    chatId: chatId ?? this.chatId,
    size: size ?? this.size,
    count: count ?? this.count,
    byFileType: byFileType ?? this.byFileType,
  );
}

extension StorageStatisticsExtensions on StorageStatistics {
  StorageStatistics copyWith({
    int? size,
    int? count,
    List<StorageStatisticsByChat>? byChat,
  }) => StorageStatistics(
    size: size ?? this.size,
    count: count ?? this.count,
    byChat: byChat ?? this.byChat,
  );
}

extension StorageStatisticsFastExtensions on StorageStatisticsFast {
  StorageStatisticsFast copyWith({
    int? filesSize,
    int? fileCount,
    int? databaseSize,
    int? languagePackDatabaseSize,
    int? logSize,
  }) => StorageStatisticsFast(
    filesSize: filesSize ?? this.filesSize,
    fileCount: fileCount ?? this.fileCount,
    databaseSize: databaseSize ?? this.databaseSize,
    languagePackDatabaseSize:
        languagePackDatabaseSize ?? this.languagePackDatabaseSize,
    logSize: logSize ?? this.logSize,
  );
}

extension DatabaseStatisticsExtensions on DatabaseStatistics {
  DatabaseStatistics copyWith({String? statistics}) =>
      DatabaseStatistics(statistics: statistics ?? this.statistics);
}

extension NetworkTypeExtensions on NetworkType {
  TResult map<TResult extends Object?>({
    required TResult Function(NetworkTypeNone value) none,
    required TResult Function(NetworkTypeMobile value) mobile,
    required TResult Function(NetworkTypeMobileRoaming value) mobileRoaming,
    required TResult Function(NetworkTypeWiFi value) wiFi,
    required TResult Function(NetworkTypeOther value) other,
  }) {
    switch (getConstructor()) {
      case NetworkTypeNone.constructor:
        return none.call(this as NetworkTypeNone);
      case NetworkTypeMobile.constructor:
        return mobile.call(this as NetworkTypeMobile);
      case NetworkTypeMobileRoaming.constructor:
        return mobileRoaming.call(this as NetworkTypeMobileRoaming);
      case NetworkTypeWiFi.constructor:
        return wiFi.call(this as NetworkTypeWiFi);
      case NetworkTypeOther.constructor:
        return other.call(this as NetworkTypeOther);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(NetworkTypeNone value)? none,
    TResult Function(NetworkTypeMobile value)? mobile,
    TResult Function(NetworkTypeMobileRoaming value)? mobileRoaming,
    TResult Function(NetworkTypeWiFi value)? wiFi,
    TResult Function(NetworkTypeOther value)? other,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case NetworkTypeNone.constructor:
        if (none != null) {
          return none.call(this as NetworkTypeNone);
        }
        break;
      case NetworkTypeMobile.constructor:
        if (mobile != null) {
          return mobile.call(this as NetworkTypeMobile);
        }
        break;
      case NetworkTypeMobileRoaming.constructor:
        if (mobileRoaming != null) {
          return mobileRoaming.call(this as NetworkTypeMobileRoaming);
        }
        break;
      case NetworkTypeWiFi.constructor:
        if (wiFi != null) {
          return wiFi.call(this as NetworkTypeWiFi);
        }
        break;
      case NetworkTypeOther.constructor:
        if (other != null) {
          return other.call(this as NetworkTypeOther);
        }
        break;
    }
    return orElse.call();
  }
}

extension NetworkStatisticsEntryExtensions on NetworkStatisticsEntry {
  TResult map<TResult extends Object?>({
    required TResult Function(NetworkStatisticsEntryFile value) file,
    required TResult Function(NetworkStatisticsEntryCall value) call,
  }) {
    switch (getConstructor()) {
      case NetworkStatisticsEntryFile.constructor:
        return file.call(this as NetworkStatisticsEntryFile);
      case NetworkStatisticsEntryCall.constructor:
        return call.call(this as NetworkStatisticsEntryCall);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(NetworkStatisticsEntryFile value)? file,
    TResult Function(NetworkStatisticsEntryCall value)? call,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case NetworkStatisticsEntryFile.constructor:
        if (file != null) {
          return file.call(this as NetworkStatisticsEntryFile);
        }
        break;
      case NetworkStatisticsEntryCall.constructor:
        if (call != null) {
          return call.call(this as NetworkStatisticsEntryCall);
        }
        break;
    }
    return orElse.call();
  }
}

extension NetworkStatisticsEntryFileExtensions on NetworkStatisticsEntryFile {
  NetworkStatisticsEntryFile copyWith({
    FileType? fileType,
    NetworkType? networkType,
    int? sentBytes,
    int? receivedBytes,
  }) => NetworkStatisticsEntryFile(
    fileType: fileType ?? this.fileType,
    networkType: networkType ?? this.networkType,
    sentBytes: sentBytes ?? this.sentBytes,
    receivedBytes: receivedBytes ?? this.receivedBytes,
  );
}

extension NetworkStatisticsEntryCallExtensions on NetworkStatisticsEntryCall {
  NetworkStatisticsEntryCall copyWith({
    NetworkType? networkType,
    int? sentBytes,
    int? receivedBytes,
    double? duration,
  }) => NetworkStatisticsEntryCall(
    networkType: networkType ?? this.networkType,
    sentBytes: sentBytes ?? this.sentBytes,
    receivedBytes: receivedBytes ?? this.receivedBytes,
    duration: duration ?? this.duration,
  );
}

extension NetworkStatisticsExtensions on NetworkStatistics {
  NetworkStatistics copyWith({
    int? sinceDate,
    List<NetworkStatisticsEntry>? entries,
  }) => NetworkStatistics(
    sinceDate: sinceDate ?? this.sinceDate,
    entries: entries ?? this.entries,
  );
}

extension AutoDownloadSettingsExtensions on AutoDownloadSettings {
  AutoDownloadSettings copyWith({
    bool? isAutoDownloadEnabled,
    int? maxPhotoFileSize,
    int? maxVideoFileSize,
    int? maxOtherFileSize,
    int? videoUploadBitrate,
    bool? preloadLargeVideos,
    bool? preloadNextAudio,
    bool? preloadStories,
    bool? useLessDataForCalls,
  }) => AutoDownloadSettings(
    isAutoDownloadEnabled: isAutoDownloadEnabled ?? this.isAutoDownloadEnabled,
    maxPhotoFileSize: maxPhotoFileSize ?? this.maxPhotoFileSize,
    maxVideoFileSize: maxVideoFileSize ?? this.maxVideoFileSize,
    maxOtherFileSize: maxOtherFileSize ?? this.maxOtherFileSize,
    videoUploadBitrate: videoUploadBitrate ?? this.videoUploadBitrate,
    preloadLargeVideos: preloadLargeVideos ?? this.preloadLargeVideos,
    preloadNextAudio: preloadNextAudio ?? this.preloadNextAudio,
    preloadStories: preloadStories ?? this.preloadStories,
    useLessDataForCalls: useLessDataForCalls ?? this.useLessDataForCalls,
  );
}

extension AutoDownloadSettingsPresetsExtensions on AutoDownloadSettingsPresets {
  AutoDownloadSettingsPresets copyWith({
    AutoDownloadSettings? low,
    AutoDownloadSettings? medium,
    AutoDownloadSettings? high,
  }) => AutoDownloadSettingsPresets(
    low: low ?? this.low,
    medium: medium ?? this.medium,
    high: high ?? this.high,
  );
}

extension AutosaveSettingsScopeExtensions on AutosaveSettingsScope {
  TResult map<TResult extends Object?>({
    required TResult Function(AutosaveSettingsScopePrivateChats value)
    privateChats,
    required TResult Function(AutosaveSettingsScopeGroupChats value) groupChats,
    required TResult Function(AutosaveSettingsScopeChannelChats value)
    channelChats,
    required TResult Function(AutosaveSettingsScopeChat value) chat,
  }) {
    switch (getConstructor()) {
      case AutosaveSettingsScopePrivateChats.constructor:
        return privateChats.call(this as AutosaveSettingsScopePrivateChats);
      case AutosaveSettingsScopeGroupChats.constructor:
        return groupChats.call(this as AutosaveSettingsScopeGroupChats);
      case AutosaveSettingsScopeChannelChats.constructor:
        return channelChats.call(this as AutosaveSettingsScopeChannelChats);
      case AutosaveSettingsScopeChat.constructor:
        return chat.call(this as AutosaveSettingsScopeChat);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(AutosaveSettingsScopePrivateChats value)? privateChats,
    TResult Function(AutosaveSettingsScopeGroupChats value)? groupChats,
    TResult Function(AutosaveSettingsScopeChannelChats value)? channelChats,
    TResult Function(AutosaveSettingsScopeChat value)? chat,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case AutosaveSettingsScopePrivateChats.constructor:
        if (privateChats != null) {
          return privateChats.call(this as AutosaveSettingsScopePrivateChats);
        }
        break;
      case AutosaveSettingsScopeGroupChats.constructor:
        if (groupChats != null) {
          return groupChats.call(this as AutosaveSettingsScopeGroupChats);
        }
        break;
      case AutosaveSettingsScopeChannelChats.constructor:
        if (channelChats != null) {
          return channelChats.call(this as AutosaveSettingsScopeChannelChats);
        }
        break;
      case AutosaveSettingsScopeChat.constructor:
        if (chat != null) {
          return chat.call(this as AutosaveSettingsScopeChat);
        }
        break;
    }
    return orElse.call();
  }
}

extension AutosaveSettingsScopeChatExtensions on AutosaveSettingsScopeChat {
  AutosaveSettingsScopeChat copyWith({int? chatId}) =>
      AutosaveSettingsScopeChat(chatId: chatId ?? this.chatId);
}

extension ScopeAutosaveSettingsExtensions on ScopeAutosaveSettings {
  ScopeAutosaveSettings copyWith({
    bool? autosavePhotos,
    bool? autosaveVideos,
    int? maxVideoFileSize,
  }) => ScopeAutosaveSettings(
    autosavePhotos: autosavePhotos ?? this.autosavePhotos,
    autosaveVideos: autosaveVideos ?? this.autosaveVideos,
    maxVideoFileSize: maxVideoFileSize ?? this.maxVideoFileSize,
  );
}

extension AutosaveSettingsExceptionExtensions on AutosaveSettingsException {
  AutosaveSettingsException copyWith({
    int? chatId,
    ScopeAutosaveSettings? settings,
  }) => AutosaveSettingsException(
    chatId: chatId ?? this.chatId,
    settings: settings ?? this.settings,
  );
}

extension AutosaveSettingsExtensions on AutosaveSettings {
  AutosaveSettings copyWith({
    ScopeAutosaveSettings? privateChatSettings,
    ScopeAutosaveSettings? groupSettings,
    ScopeAutosaveSettings? channelSettings,
    List<AutosaveSettingsException>? exceptions,
  }) => AutosaveSettings(
    privateChatSettings: privateChatSettings ?? this.privateChatSettings,
    groupSettings: groupSettings ?? this.groupSettings,
    channelSettings: channelSettings ?? this.channelSettings,
    exceptions: exceptions ?? this.exceptions,
  );
}

extension ConnectionStateExtensions on ConnectionState {
  TResult map<TResult extends Object?>({
    required TResult Function(ConnectionStateWaitingForNetwork value)
    waitingForNetwork,
    required TResult Function(ConnectionStateConnectingToProxy value)
    connectingToProxy,
    required TResult Function(ConnectionStateConnecting value) connecting,
    required TResult Function(ConnectionStateUpdating value) updating,
    required TResult Function(ConnectionStateReady value) ready,
  }) {
    switch (getConstructor()) {
      case ConnectionStateWaitingForNetwork.constructor:
        return waitingForNetwork.call(this as ConnectionStateWaitingForNetwork);
      case ConnectionStateConnectingToProxy.constructor:
        return connectingToProxy.call(this as ConnectionStateConnectingToProxy);
      case ConnectionStateConnecting.constructor:
        return connecting.call(this as ConnectionStateConnecting);
      case ConnectionStateUpdating.constructor:
        return updating.call(this as ConnectionStateUpdating);
      case ConnectionStateReady.constructor:
        return ready.call(this as ConnectionStateReady);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ConnectionStateWaitingForNetwork value)? waitingForNetwork,
    TResult Function(ConnectionStateConnectingToProxy value)? connectingToProxy,
    TResult Function(ConnectionStateConnecting value)? connecting,
    TResult Function(ConnectionStateUpdating value)? updating,
    TResult Function(ConnectionStateReady value)? ready,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ConnectionStateWaitingForNetwork.constructor:
        if (waitingForNetwork != null) {
          return waitingForNetwork.call(
            this as ConnectionStateWaitingForNetwork,
          );
        }
        break;
      case ConnectionStateConnectingToProxy.constructor:
        if (connectingToProxy != null) {
          return connectingToProxy.call(
            this as ConnectionStateConnectingToProxy,
          );
        }
        break;
      case ConnectionStateConnecting.constructor:
        if (connecting != null) {
          return connecting.call(this as ConnectionStateConnecting);
        }
        break;
      case ConnectionStateUpdating.constructor:
        if (updating != null) {
          return updating.call(this as ConnectionStateUpdating);
        }
        break;
      case ConnectionStateReady.constructor:
        if (ready != null) {
          return ready.call(this as ConnectionStateReady);
        }
        break;
    }
    return orElse.call();
  }
}

extension TopChatCategoryExtensions on TopChatCategory {
  TResult map<TResult extends Object?>({
    required TResult Function(TopChatCategoryUsers value) users,
    required TResult Function(TopChatCategoryBots value) bots,
    required TResult Function(TopChatCategoryGroups value) groups,
    required TResult Function(TopChatCategoryChannels value) channels,
    required TResult Function(TopChatCategoryInlineBots value) inlineBots,
    required TResult Function(TopChatCategoryWebAppBots value) webAppBots,
    required TResult Function(TopChatCategoryCalls value) calls,
    required TResult Function(TopChatCategoryForwardChats value) forwardChats,
  }) {
    switch (getConstructor()) {
      case TopChatCategoryUsers.constructor:
        return users.call(this as TopChatCategoryUsers);
      case TopChatCategoryBots.constructor:
        return bots.call(this as TopChatCategoryBots);
      case TopChatCategoryGroups.constructor:
        return groups.call(this as TopChatCategoryGroups);
      case TopChatCategoryChannels.constructor:
        return channels.call(this as TopChatCategoryChannels);
      case TopChatCategoryInlineBots.constructor:
        return inlineBots.call(this as TopChatCategoryInlineBots);
      case TopChatCategoryWebAppBots.constructor:
        return webAppBots.call(this as TopChatCategoryWebAppBots);
      case TopChatCategoryCalls.constructor:
        return calls.call(this as TopChatCategoryCalls);
      case TopChatCategoryForwardChats.constructor:
        return forwardChats.call(this as TopChatCategoryForwardChats);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(TopChatCategoryUsers value)? users,
    TResult Function(TopChatCategoryBots value)? bots,
    TResult Function(TopChatCategoryGroups value)? groups,
    TResult Function(TopChatCategoryChannels value)? channels,
    TResult Function(TopChatCategoryInlineBots value)? inlineBots,
    TResult Function(TopChatCategoryWebAppBots value)? webAppBots,
    TResult Function(TopChatCategoryCalls value)? calls,
    TResult Function(TopChatCategoryForwardChats value)? forwardChats,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case TopChatCategoryUsers.constructor:
        if (users != null) {
          return users.call(this as TopChatCategoryUsers);
        }
        break;
      case TopChatCategoryBots.constructor:
        if (bots != null) {
          return bots.call(this as TopChatCategoryBots);
        }
        break;
      case TopChatCategoryGroups.constructor:
        if (groups != null) {
          return groups.call(this as TopChatCategoryGroups);
        }
        break;
      case TopChatCategoryChannels.constructor:
        if (channels != null) {
          return channels.call(this as TopChatCategoryChannels);
        }
        break;
      case TopChatCategoryInlineBots.constructor:
        if (inlineBots != null) {
          return inlineBots.call(this as TopChatCategoryInlineBots);
        }
        break;
      case TopChatCategoryWebAppBots.constructor:
        if (webAppBots != null) {
          return webAppBots.call(this as TopChatCategoryWebAppBots);
        }
        break;
      case TopChatCategoryCalls.constructor:
        if (calls != null) {
          return calls.call(this as TopChatCategoryCalls);
        }
        break;
      case TopChatCategoryForwardChats.constructor:
        if (forwardChats != null) {
          return forwardChats.call(this as TopChatCategoryForwardChats);
        }
        break;
    }
    return orElse.call();
  }
}

extension FoundPositionExtensions on FoundPosition {
  FoundPosition copyWith({int? position}) =>
      FoundPosition(position: position ?? this.position);
}

extension FoundPositionsExtensions on FoundPositions {
  FoundPositions copyWith({int? totalCount, List<int>? positions}) =>
      FoundPositions(
        totalCount: totalCount ?? this.totalCount,
        positions: positions ?? this.positions,
      );
}

extension TMeUrlTypeExtensions on TMeUrlType {
  TResult map<TResult extends Object?>({
    required TResult Function(TMeUrlTypeUser value) user,
    required TResult Function(TMeUrlTypeSupergroup value) supergroup,
    required TResult Function(TMeUrlTypeChatInvite value) chatInvite,
    required TResult Function(TMeUrlTypeStickerSet value) stickerSet,
  }) {
    switch (getConstructor()) {
      case TMeUrlTypeUser.constructor:
        return user.call(this as TMeUrlTypeUser);
      case TMeUrlTypeSupergroup.constructor:
        return supergroup.call(this as TMeUrlTypeSupergroup);
      case TMeUrlTypeChatInvite.constructor:
        return chatInvite.call(this as TMeUrlTypeChatInvite);
      case TMeUrlTypeStickerSet.constructor:
        return stickerSet.call(this as TMeUrlTypeStickerSet);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(TMeUrlTypeUser value)? user,
    TResult Function(TMeUrlTypeSupergroup value)? supergroup,
    TResult Function(TMeUrlTypeChatInvite value)? chatInvite,
    TResult Function(TMeUrlTypeStickerSet value)? stickerSet,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case TMeUrlTypeUser.constructor:
        if (user != null) {
          return user.call(this as TMeUrlTypeUser);
        }
        break;
      case TMeUrlTypeSupergroup.constructor:
        if (supergroup != null) {
          return supergroup.call(this as TMeUrlTypeSupergroup);
        }
        break;
      case TMeUrlTypeChatInvite.constructor:
        if (chatInvite != null) {
          return chatInvite.call(this as TMeUrlTypeChatInvite);
        }
        break;
      case TMeUrlTypeStickerSet.constructor:
        if (stickerSet != null) {
          return stickerSet.call(this as TMeUrlTypeStickerSet);
        }
        break;
    }
    return orElse.call();
  }
}

extension TMeUrlTypeUserExtensions on TMeUrlTypeUser {
  TMeUrlTypeUser copyWith({int? userId}) =>
      TMeUrlTypeUser(userId: userId ?? this.userId);
}

extension TMeUrlTypeSupergroupExtensions on TMeUrlTypeSupergroup {
  TMeUrlTypeSupergroup copyWith({int? supergroupId}) =>
      TMeUrlTypeSupergroup(supergroupId: supergroupId ?? this.supergroupId);
}

extension TMeUrlTypeChatInviteExtensions on TMeUrlTypeChatInvite {
  TMeUrlTypeChatInvite copyWith({ChatInviteLinkInfo? info}) =>
      TMeUrlTypeChatInvite(info: info ?? this.info);
}

extension TMeUrlTypeStickerSetExtensions on TMeUrlTypeStickerSet {
  TMeUrlTypeStickerSet copyWith({int? stickerSetId}) =>
      TMeUrlTypeStickerSet(stickerSetId: stickerSetId ?? this.stickerSetId);
}

extension TMeUrlExtensions on TMeUrl {
  TMeUrl copyWith({String? url, TMeUrlType? type}) =>
      TMeUrl(url: url ?? this.url, type: type ?? this.type);
}

extension TMeUrlsExtensions on TMeUrls {
  TMeUrls copyWith({List<TMeUrl>? urls}) => TMeUrls(urls: urls ?? this.urls);
}

extension SuggestedActionExtensions on SuggestedAction {
  TResult map<TResult extends Object?>({
    required TResult Function(SuggestedActionEnableArchiveAndMuteNewChats value)
    enableArchiveAndMuteNewChats,
    required TResult Function(SuggestedActionCheckPassword value) checkPassword,
    required TResult Function(SuggestedActionCheckPhoneNumber value)
    checkPhoneNumber,
    required TResult Function(SuggestedActionViewChecksHint value)
    viewChecksHint,
    required TResult Function(SuggestedActionConvertToBroadcastGroup value)
    convertToBroadcastGroup,
    required TResult Function(SuggestedActionSetPassword value) setPassword,
    required TResult Function(SuggestedActionUpgradePremium value)
    upgradePremium,
    required TResult Function(SuggestedActionRestorePremium value)
    restorePremium,
    required TResult Function(SuggestedActionSubscribeToAnnualPremium value)
    subscribeToAnnualPremium,
    required TResult Function(SuggestedActionGiftPremiumForChristmas value)
    giftPremiumForChristmas,
    required TResult Function(SuggestedActionSetBirthdate value) setBirthdate,
    required TResult Function(SuggestedActionSetProfilePhoto value)
    setProfilePhoto,
    required TResult Function(SuggestedActionExtendPremium value) extendPremium,
    required TResult Function(SuggestedActionExtendStarSubscriptions value)
    extendStarSubscriptions,
    required TResult Function(SuggestedActionCustom value) custom,
  }) {
    switch (getConstructor()) {
      case SuggestedActionEnableArchiveAndMuteNewChats.constructor:
        return enableArchiveAndMuteNewChats.call(
          this as SuggestedActionEnableArchiveAndMuteNewChats,
        );
      case SuggestedActionCheckPassword.constructor:
        return checkPassword.call(this as SuggestedActionCheckPassword);
      case SuggestedActionCheckPhoneNumber.constructor:
        return checkPhoneNumber.call(this as SuggestedActionCheckPhoneNumber);
      case SuggestedActionViewChecksHint.constructor:
        return viewChecksHint.call(this as SuggestedActionViewChecksHint);
      case SuggestedActionConvertToBroadcastGroup.constructor:
        return convertToBroadcastGroup.call(
          this as SuggestedActionConvertToBroadcastGroup,
        );
      case SuggestedActionSetPassword.constructor:
        return setPassword.call(this as SuggestedActionSetPassword);
      case SuggestedActionUpgradePremium.constructor:
        return upgradePremium.call(this as SuggestedActionUpgradePremium);
      case SuggestedActionRestorePremium.constructor:
        return restorePremium.call(this as SuggestedActionRestorePremium);
      case SuggestedActionSubscribeToAnnualPremium.constructor:
        return subscribeToAnnualPremium.call(
          this as SuggestedActionSubscribeToAnnualPremium,
        );
      case SuggestedActionGiftPremiumForChristmas.constructor:
        return giftPremiumForChristmas.call(
          this as SuggestedActionGiftPremiumForChristmas,
        );
      case SuggestedActionSetBirthdate.constructor:
        return setBirthdate.call(this as SuggestedActionSetBirthdate);
      case SuggestedActionSetProfilePhoto.constructor:
        return setProfilePhoto.call(this as SuggestedActionSetProfilePhoto);
      case SuggestedActionExtendPremium.constructor:
        return extendPremium.call(this as SuggestedActionExtendPremium);
      case SuggestedActionExtendStarSubscriptions.constructor:
        return extendStarSubscriptions.call(
          this as SuggestedActionExtendStarSubscriptions,
        );
      case SuggestedActionCustom.constructor:
        return custom.call(this as SuggestedActionCustom);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(SuggestedActionEnableArchiveAndMuteNewChats value)?
    enableArchiveAndMuteNewChats,
    TResult Function(SuggestedActionCheckPassword value)? checkPassword,
    TResult Function(SuggestedActionCheckPhoneNumber value)? checkPhoneNumber,
    TResult Function(SuggestedActionViewChecksHint value)? viewChecksHint,
    TResult Function(SuggestedActionConvertToBroadcastGroup value)?
    convertToBroadcastGroup,
    TResult Function(SuggestedActionSetPassword value)? setPassword,
    TResult Function(SuggestedActionUpgradePremium value)? upgradePremium,
    TResult Function(SuggestedActionRestorePremium value)? restorePremium,
    TResult Function(SuggestedActionSubscribeToAnnualPremium value)?
    subscribeToAnnualPremium,
    TResult Function(SuggestedActionGiftPremiumForChristmas value)?
    giftPremiumForChristmas,
    TResult Function(SuggestedActionSetBirthdate value)? setBirthdate,
    TResult Function(SuggestedActionSetProfilePhoto value)? setProfilePhoto,
    TResult Function(SuggestedActionExtendPremium value)? extendPremium,
    TResult Function(SuggestedActionExtendStarSubscriptions value)?
    extendStarSubscriptions,
    TResult Function(SuggestedActionCustom value)? custom,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case SuggestedActionEnableArchiveAndMuteNewChats.constructor:
        if (enableArchiveAndMuteNewChats != null) {
          return enableArchiveAndMuteNewChats.call(
            this as SuggestedActionEnableArchiveAndMuteNewChats,
          );
        }
        break;
      case SuggestedActionCheckPassword.constructor:
        if (checkPassword != null) {
          return checkPassword.call(this as SuggestedActionCheckPassword);
        }
        break;
      case SuggestedActionCheckPhoneNumber.constructor:
        if (checkPhoneNumber != null) {
          return checkPhoneNumber.call(this as SuggestedActionCheckPhoneNumber);
        }
        break;
      case SuggestedActionViewChecksHint.constructor:
        if (viewChecksHint != null) {
          return viewChecksHint.call(this as SuggestedActionViewChecksHint);
        }
        break;
      case SuggestedActionConvertToBroadcastGroup.constructor:
        if (convertToBroadcastGroup != null) {
          return convertToBroadcastGroup.call(
            this as SuggestedActionConvertToBroadcastGroup,
          );
        }
        break;
      case SuggestedActionSetPassword.constructor:
        if (setPassword != null) {
          return setPassword.call(this as SuggestedActionSetPassword);
        }
        break;
      case SuggestedActionUpgradePremium.constructor:
        if (upgradePremium != null) {
          return upgradePremium.call(this as SuggestedActionUpgradePremium);
        }
        break;
      case SuggestedActionRestorePremium.constructor:
        if (restorePremium != null) {
          return restorePremium.call(this as SuggestedActionRestorePremium);
        }
        break;
      case SuggestedActionSubscribeToAnnualPremium.constructor:
        if (subscribeToAnnualPremium != null) {
          return subscribeToAnnualPremium.call(
            this as SuggestedActionSubscribeToAnnualPremium,
          );
        }
        break;
      case SuggestedActionGiftPremiumForChristmas.constructor:
        if (giftPremiumForChristmas != null) {
          return giftPremiumForChristmas.call(
            this as SuggestedActionGiftPremiumForChristmas,
          );
        }
        break;
      case SuggestedActionSetBirthdate.constructor:
        if (setBirthdate != null) {
          return setBirthdate.call(this as SuggestedActionSetBirthdate);
        }
        break;
      case SuggestedActionSetProfilePhoto.constructor:
        if (setProfilePhoto != null) {
          return setProfilePhoto.call(this as SuggestedActionSetProfilePhoto);
        }
        break;
      case SuggestedActionExtendPremium.constructor:
        if (extendPremium != null) {
          return extendPremium.call(this as SuggestedActionExtendPremium);
        }
        break;
      case SuggestedActionExtendStarSubscriptions.constructor:
        if (extendStarSubscriptions != null) {
          return extendStarSubscriptions.call(
            this as SuggestedActionExtendStarSubscriptions,
          );
        }
        break;
      case SuggestedActionCustom.constructor:
        if (custom != null) {
          return custom.call(this as SuggestedActionCustom);
        }
        break;
    }
    return orElse.call();
  }
}

extension SuggestedActionConvertToBroadcastGroupExtensions
    on SuggestedActionConvertToBroadcastGroup {
  SuggestedActionConvertToBroadcastGroup copyWith({int? supergroupId}) =>
      SuggestedActionConvertToBroadcastGroup(
        supergroupId: supergroupId ?? this.supergroupId,
      );
}

extension SuggestedActionSetPasswordExtensions on SuggestedActionSetPassword {
  SuggestedActionSetPassword copyWith({int? authorizationDelay}) =>
      SuggestedActionSetPassword(
        authorizationDelay: authorizationDelay ?? this.authorizationDelay,
      );
}

extension SuggestedActionExtendPremiumExtensions
    on SuggestedActionExtendPremium {
  SuggestedActionExtendPremium copyWith({
    String? managePremiumSubscriptionUrl,
  }) => SuggestedActionExtendPremium(
    managePremiumSubscriptionUrl:
        managePremiumSubscriptionUrl ?? this.managePremiumSubscriptionUrl,
  );
}

extension SuggestedActionCustomExtensions on SuggestedActionCustom {
  SuggestedActionCustom copyWith({
    String? name,
    FormattedText? title,
    FormattedText? description,
    String? url,
  }) => SuggestedActionCustom(
    name: name ?? this.name,
    title: title ?? this.title,
    description: description ?? this.description,
    url: url ?? this.url,
  );
}

extension CountExtensions on Count {
  Count copyWith({int? count}) => Count(count: count ?? this.count);
}

extension TextExtensions on Text {
  Text copyWith({String? text}) => Text(text: text ?? this.text);
}

extension DataExtensions on Data {
  Data copyWith({String? data}) => Data(data: data ?? this.data);
}

extension SecondsExtensions on Seconds {
  Seconds copyWith({double? seconds}) =>
      Seconds(seconds: seconds ?? this.seconds);
}

extension FileDownloadedPrefixSizeExtensions on FileDownloadedPrefixSize {
  FileDownloadedPrefixSize copyWith({int? size}) =>
      FileDownloadedPrefixSize(size: size ?? this.size);
}

extension StarCountExtensions on StarCount {
  StarCount copyWith({int? starCount}) =>
      StarCount(starCount: starCount ?? this.starCount);
}

extension DeepLinkInfoExtensions on DeepLinkInfo {
  DeepLinkInfo copyWith({FormattedText? text, bool? needUpdateApplication}) =>
      DeepLinkInfo(
        text: text ?? this.text,
        needUpdateApplication:
            needUpdateApplication ?? this.needUpdateApplication,
      );
}

extension TextParseModeExtensions on TextParseMode {
  TResult map<TResult extends Object?>({
    required TResult Function(TextParseModeMarkdown value) markdown,
    required TResult Function(TextParseModeHTML value) hTML,
  }) {
    switch (getConstructor()) {
      case TextParseModeMarkdown.constructor:
        return markdown.call(this as TextParseModeMarkdown);
      case TextParseModeHTML.constructor:
        return hTML.call(this as TextParseModeHTML);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextParseModeMarkdown value)? markdown,
    TResult Function(TextParseModeHTML value)? hTML,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case TextParseModeMarkdown.constructor:
        if (markdown != null) {
          return markdown.call(this as TextParseModeMarkdown);
        }
        break;
      case TextParseModeHTML.constructor:
        if (hTML != null) {
          return hTML.call(this as TextParseModeHTML);
        }
        break;
    }
    return orElse.call();
  }
}

extension TextParseModeMarkdownExtensions on TextParseModeMarkdown {
  TextParseModeMarkdown copyWith({int? version}) =>
      TextParseModeMarkdown(version: version ?? this.version);
}

extension ProxyTypeExtensions on ProxyType {
  TResult map<TResult extends Object?>({
    required TResult Function(ProxyTypeSocks5 value) socks5,
    required TResult Function(ProxyTypeHttp value) http,
    required TResult Function(ProxyTypeMtproto value) mtproto,
  }) {
    switch (getConstructor()) {
      case ProxyTypeSocks5.constructor:
        return socks5.call(this as ProxyTypeSocks5);
      case ProxyTypeHttp.constructor:
        return http.call(this as ProxyTypeHttp);
      case ProxyTypeMtproto.constructor:
        return mtproto.call(this as ProxyTypeMtproto);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ProxyTypeSocks5 value)? socks5,
    TResult Function(ProxyTypeHttp value)? http,
    TResult Function(ProxyTypeMtproto value)? mtproto,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ProxyTypeSocks5.constructor:
        if (socks5 != null) {
          return socks5.call(this as ProxyTypeSocks5);
        }
        break;
      case ProxyTypeHttp.constructor:
        if (http != null) {
          return http.call(this as ProxyTypeHttp);
        }
        break;
      case ProxyTypeMtproto.constructor:
        if (mtproto != null) {
          return mtproto.call(this as ProxyTypeMtproto);
        }
        break;
    }
    return orElse.call();
  }
}

extension ProxyTypeSocks5Extensions on ProxyTypeSocks5 {
  ProxyTypeSocks5 copyWith({String? username, String? password}) =>
      ProxyTypeSocks5(
        username: username ?? this.username,
        password: password ?? this.password,
      );
}

extension ProxyTypeHttpExtensions on ProxyTypeHttp {
  ProxyTypeHttp copyWith({
    String? username,
    String? password,
    bool? httpOnly,
  }) => ProxyTypeHttp(
    username: username ?? this.username,
    password: password ?? this.password,
    httpOnly: httpOnly ?? this.httpOnly,
  );
}

extension ProxyTypeMtprotoExtensions on ProxyTypeMtproto {
  ProxyTypeMtproto copyWith({String? secret}) =>
      ProxyTypeMtproto(secret: secret ?? this.secret);
}

extension ProxyExtensions on Proxy {
  Proxy copyWith({
    int? id,
    String? server,
    int? port,
    int? lastUsedDate,
    bool? isEnabled,
    ProxyType? type,
  }) => Proxy(
    id: id ?? this.id,
    server: server ?? this.server,
    port: port ?? this.port,
    lastUsedDate: lastUsedDate ?? this.lastUsedDate,
    isEnabled: isEnabled ?? this.isEnabled,
    type: type ?? this.type,
  );
}

extension ProxiesExtensions on Proxies {
  Proxies copyWith({List<Proxy>? proxies}) =>
      Proxies(proxies: proxies ?? this.proxies);
}

extension InputStickerExtensions on InputSticker {
  InputSticker copyWith({
    InputFile? sticker,
    StickerFormat? format,
    String? emojis,
    MaskPosition? maskPosition,
    List<String>? keywords,
  }) => InputSticker(
    sticker: sticker ?? this.sticker,
    format: format ?? this.format,
    emojis: emojis ?? this.emojis,
    maskPosition: maskPosition ?? this.maskPosition,
    keywords: keywords ?? this.keywords,
  );
}

extension DateRangeExtensions on DateRange {
  DateRange copyWith({int? startDate, int? endDate}) => DateRange(
    startDate: startDate ?? this.startDate,
    endDate: endDate ?? this.endDate,
  );
}

extension StatisticalValueExtensions on StatisticalValue {
  StatisticalValue copyWith({
    double? value,
    double? previousValue,
    double? growthRatePercentage,
  }) => StatisticalValue(
    value: value ?? this.value,
    previousValue: previousValue ?? this.previousValue,
    growthRatePercentage: growthRatePercentage ?? this.growthRatePercentage,
  );
}

extension StatisticalGraphExtensions on StatisticalGraph {
  TResult map<TResult extends Object?>({
    required TResult Function(StatisticalGraphData value) data,
    required TResult Function(StatisticalGraphAsync value) async,
    required TResult Function(StatisticalGraphError value) error,
  }) {
    switch (getConstructor()) {
      case StatisticalGraphData.constructor:
        return data.call(this as StatisticalGraphData);
      case StatisticalGraphAsync.constructor:
        return async.call(this as StatisticalGraphAsync);
      case StatisticalGraphError.constructor:
        return error.call(this as StatisticalGraphError);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(StatisticalGraphData value)? data,
    TResult Function(StatisticalGraphAsync value)? async,
    TResult Function(StatisticalGraphError value)? error,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case StatisticalGraphData.constructor:
        if (data != null) {
          return data.call(this as StatisticalGraphData);
        }
        break;
      case StatisticalGraphAsync.constructor:
        if (async != null) {
          return async.call(this as StatisticalGraphAsync);
        }
        break;
      case StatisticalGraphError.constructor:
        if (error != null) {
          return error.call(this as StatisticalGraphError);
        }
        break;
    }
    return orElse.call();
  }
}

extension StatisticalGraphDataExtensions on StatisticalGraphData {
  StatisticalGraphData copyWith({String? jsonData, String? zoomToken}) =>
      StatisticalGraphData(
        jsonData: jsonData ?? this.jsonData,
        zoomToken: zoomToken ?? this.zoomToken,
      );
}

extension StatisticalGraphAsyncExtensions on StatisticalGraphAsync {
  StatisticalGraphAsync copyWith({String? token}) =>
      StatisticalGraphAsync(token: token ?? this.token);
}

extension StatisticalGraphErrorExtensions on StatisticalGraphError {
  StatisticalGraphError copyWith({String? errorMessage}) =>
      StatisticalGraphError(errorMessage: errorMessage ?? this.errorMessage);
}

extension ChatStatisticsObjectTypeExtensions on ChatStatisticsObjectType {
  TResult map<TResult extends Object?>({
    required TResult Function(ChatStatisticsObjectTypeMessage value) message,
    required TResult Function(ChatStatisticsObjectTypeStory value) story,
  }) {
    switch (getConstructor()) {
      case ChatStatisticsObjectTypeMessage.constructor:
        return message.call(this as ChatStatisticsObjectTypeMessage);
      case ChatStatisticsObjectTypeStory.constructor:
        return story.call(this as ChatStatisticsObjectTypeStory);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ChatStatisticsObjectTypeMessage value)? message,
    TResult Function(ChatStatisticsObjectTypeStory value)? story,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ChatStatisticsObjectTypeMessage.constructor:
        if (message != null) {
          return message.call(this as ChatStatisticsObjectTypeMessage);
        }
        break;
      case ChatStatisticsObjectTypeStory.constructor:
        if (story != null) {
          return story.call(this as ChatStatisticsObjectTypeStory);
        }
        break;
    }
    return orElse.call();
  }
}

extension ChatStatisticsObjectTypeMessageExtensions
    on ChatStatisticsObjectTypeMessage {
  ChatStatisticsObjectTypeMessage copyWith({int? messageId}) =>
      ChatStatisticsObjectTypeMessage(messageId: messageId ?? this.messageId);
}

extension ChatStatisticsObjectTypeStoryExtensions
    on ChatStatisticsObjectTypeStory {
  ChatStatisticsObjectTypeStory copyWith({int? storyId}) =>
      ChatStatisticsObjectTypeStory(storyId: storyId ?? this.storyId);
}

extension ChatStatisticsInteractionInfoExtensions
    on ChatStatisticsInteractionInfo {
  ChatStatisticsInteractionInfo copyWith({
    ChatStatisticsObjectType? objectType,
    int? viewCount,
    int? forwardCount,
    int? reactionCount,
  }) => ChatStatisticsInteractionInfo(
    objectType: objectType ?? this.objectType,
    viewCount: viewCount ?? this.viewCount,
    forwardCount: forwardCount ?? this.forwardCount,
    reactionCount: reactionCount ?? this.reactionCount,
  );
}

extension ChatStatisticsMessageSenderInfoExtensions
    on ChatStatisticsMessageSenderInfo {
  ChatStatisticsMessageSenderInfo copyWith({
    int? userId,
    int? sentMessageCount,
    int? averageCharacterCount,
  }) => ChatStatisticsMessageSenderInfo(
    userId: userId ?? this.userId,
    sentMessageCount: sentMessageCount ?? this.sentMessageCount,
    averageCharacterCount: averageCharacterCount ?? this.averageCharacterCount,
  );
}

extension ChatStatisticsAdministratorActionsInfoExtensions
    on ChatStatisticsAdministratorActionsInfo {
  ChatStatisticsAdministratorActionsInfo copyWith({
    int? userId,
    int? deletedMessageCount,
    int? bannedUserCount,
    int? restrictedUserCount,
  }) => ChatStatisticsAdministratorActionsInfo(
    userId: userId ?? this.userId,
    deletedMessageCount: deletedMessageCount ?? this.deletedMessageCount,
    bannedUserCount: bannedUserCount ?? this.bannedUserCount,
    restrictedUserCount: restrictedUserCount ?? this.restrictedUserCount,
  );
}

extension ChatStatisticsInviterInfoExtensions on ChatStatisticsInviterInfo {
  ChatStatisticsInviterInfo copyWith({int? userId, int? addedMemberCount}) =>
      ChatStatisticsInviterInfo(
        userId: userId ?? this.userId,
        addedMemberCount: addedMemberCount ?? this.addedMemberCount,
      );
}

extension ChatStatisticsExtensions on ChatStatistics {
  TResult map<TResult extends Object?>({
    required TResult Function(ChatStatisticsSupergroup value) supergroup,
    required TResult Function(ChatStatisticsChannel value) channel,
  }) {
    switch (getConstructor()) {
      case ChatStatisticsSupergroup.constructor:
        return supergroup.call(this as ChatStatisticsSupergroup);
      case ChatStatisticsChannel.constructor:
        return channel.call(this as ChatStatisticsChannel);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ChatStatisticsSupergroup value)? supergroup,
    TResult Function(ChatStatisticsChannel value)? channel,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ChatStatisticsSupergroup.constructor:
        if (supergroup != null) {
          return supergroup.call(this as ChatStatisticsSupergroup);
        }
        break;
      case ChatStatisticsChannel.constructor:
        if (channel != null) {
          return channel.call(this as ChatStatisticsChannel);
        }
        break;
    }
    return orElse.call();
  }
}

extension ChatStatisticsSupergroupExtensions on ChatStatisticsSupergroup {
  ChatStatisticsSupergroup copyWith({
    DateRange? period,
    StatisticalValue? memberCount,
    StatisticalValue? messageCount,
    StatisticalValue? viewerCount,
    StatisticalValue? senderCount,
    StatisticalGraph? memberCountGraph,
    StatisticalGraph? joinGraph,
    StatisticalGraph? joinBySourceGraph,
    StatisticalGraph? languageGraph,
    StatisticalGraph? messageContentGraph,
    StatisticalGraph? actionGraph,
    StatisticalGraph? dayGraph,
    StatisticalGraph? weekGraph,
    List<ChatStatisticsMessageSenderInfo>? topSenders,
    List<ChatStatisticsAdministratorActionsInfo>? topAdministrators,
    List<ChatStatisticsInviterInfo>? topInviters,
  }) => ChatStatisticsSupergroup(
    period: period ?? this.period,
    memberCount: memberCount ?? this.memberCount,
    messageCount: messageCount ?? this.messageCount,
    viewerCount: viewerCount ?? this.viewerCount,
    senderCount: senderCount ?? this.senderCount,
    memberCountGraph: memberCountGraph ?? this.memberCountGraph,
    joinGraph: joinGraph ?? this.joinGraph,
    joinBySourceGraph: joinBySourceGraph ?? this.joinBySourceGraph,
    languageGraph: languageGraph ?? this.languageGraph,
    messageContentGraph: messageContentGraph ?? this.messageContentGraph,
    actionGraph: actionGraph ?? this.actionGraph,
    dayGraph: dayGraph ?? this.dayGraph,
    weekGraph: weekGraph ?? this.weekGraph,
    topSenders: topSenders ?? this.topSenders,
    topAdministrators: topAdministrators ?? this.topAdministrators,
    topInviters: topInviters ?? this.topInviters,
  );
}

extension ChatStatisticsChannelExtensions on ChatStatisticsChannel {
  ChatStatisticsChannel copyWith({
    DateRange? period,
    StatisticalValue? memberCount,
    StatisticalValue? meanMessageViewCount,
    StatisticalValue? meanMessageShareCount,
    StatisticalValue? meanMessageReactionCount,
    StatisticalValue? meanStoryViewCount,
    StatisticalValue? meanStoryShareCount,
    StatisticalValue? meanStoryReactionCount,
    double? enabledNotificationsPercentage,
    StatisticalGraph? memberCountGraph,
    StatisticalGraph? joinGraph,
    StatisticalGraph? muteGraph,
    StatisticalGraph? viewCountByHourGraph,
    StatisticalGraph? viewCountBySourceGraph,
    StatisticalGraph? joinBySourceGraph,
    StatisticalGraph? languageGraph,
    StatisticalGraph? messageInteractionGraph,
    StatisticalGraph? messageReactionGraph,
    StatisticalGraph? storyInteractionGraph,
    StatisticalGraph? storyReactionGraph,
    StatisticalGraph? instantViewInteractionGraph,
    List<ChatStatisticsInteractionInfo>? recentInteractions,
  }) => ChatStatisticsChannel(
    period: period ?? this.period,
    memberCount: memberCount ?? this.memberCount,
    meanMessageViewCount: meanMessageViewCount ?? this.meanMessageViewCount,
    meanMessageShareCount: meanMessageShareCount ?? this.meanMessageShareCount,
    meanMessageReactionCount:
        meanMessageReactionCount ?? this.meanMessageReactionCount,
    meanStoryViewCount: meanStoryViewCount ?? this.meanStoryViewCount,
    meanStoryShareCount: meanStoryShareCount ?? this.meanStoryShareCount,
    meanStoryReactionCount:
        meanStoryReactionCount ?? this.meanStoryReactionCount,
    enabledNotificationsPercentage:
        enabledNotificationsPercentage ?? this.enabledNotificationsPercentage,
    memberCountGraph: memberCountGraph ?? this.memberCountGraph,
    joinGraph: joinGraph ?? this.joinGraph,
    muteGraph: muteGraph ?? this.muteGraph,
    viewCountByHourGraph: viewCountByHourGraph ?? this.viewCountByHourGraph,
    viewCountBySourceGraph:
        viewCountBySourceGraph ?? this.viewCountBySourceGraph,
    joinBySourceGraph: joinBySourceGraph ?? this.joinBySourceGraph,
    languageGraph: languageGraph ?? this.languageGraph,
    messageInteractionGraph:
        messageInteractionGraph ?? this.messageInteractionGraph,
    messageReactionGraph: messageReactionGraph ?? this.messageReactionGraph,
    storyInteractionGraph: storyInteractionGraph ?? this.storyInteractionGraph,
    storyReactionGraph: storyReactionGraph ?? this.storyReactionGraph,
    instantViewInteractionGraph:
        instantViewInteractionGraph ?? this.instantViewInteractionGraph,
    recentInteractions: recentInteractions ?? this.recentInteractions,
  );
}

extension ChatRevenueAmountExtensions on ChatRevenueAmount {
  ChatRevenueAmount copyWith({
    String? cryptocurrency,
    int? totalAmount,
    int? balanceAmount,
    int? availableAmount,
    bool? withdrawalEnabled,
  }) => ChatRevenueAmount(
    cryptocurrency: cryptocurrency ?? this.cryptocurrency,
    totalAmount: totalAmount ?? this.totalAmount,
    balanceAmount: balanceAmount ?? this.balanceAmount,
    availableAmount: availableAmount ?? this.availableAmount,
    withdrawalEnabled: withdrawalEnabled ?? this.withdrawalEnabled,
  );
}

extension ChatRevenueStatisticsExtensions on ChatRevenueStatistics {
  ChatRevenueStatistics copyWith({
    StatisticalGraph? revenueByHourGraph,
    StatisticalGraph? revenueGraph,
    ChatRevenueAmount? revenueAmount,
    double? usdRate,
  }) => ChatRevenueStatistics(
    revenueByHourGraph: revenueByHourGraph ?? this.revenueByHourGraph,
    revenueGraph: revenueGraph ?? this.revenueGraph,
    revenueAmount: revenueAmount ?? this.revenueAmount,
    usdRate: usdRate ?? this.usdRate,
  );
}

extension MessageStatisticsExtensions on MessageStatistics {
  MessageStatistics copyWith({
    StatisticalGraph? messageInteractionGraph,
    StatisticalGraph? messageReactionGraph,
  }) => MessageStatistics(
    messageInteractionGraph:
        messageInteractionGraph ?? this.messageInteractionGraph,
    messageReactionGraph: messageReactionGraph ?? this.messageReactionGraph,
  );
}

extension StoryStatisticsExtensions on StoryStatistics {
  StoryStatistics copyWith({
    StatisticalGraph? storyInteractionGraph,
    StatisticalGraph? storyReactionGraph,
  }) => StoryStatistics(
    storyInteractionGraph: storyInteractionGraph ?? this.storyInteractionGraph,
    storyReactionGraph: storyReactionGraph ?? this.storyReactionGraph,
  );
}

extension RevenueWithdrawalStateExtensions on RevenueWithdrawalState {
  TResult map<TResult extends Object?>({
    required TResult Function(RevenueWithdrawalStatePending value) pending,
    required TResult Function(RevenueWithdrawalStateSucceeded value) succeeded,
    required TResult Function(RevenueWithdrawalStateFailed value) failed,
  }) {
    switch (getConstructor()) {
      case RevenueWithdrawalStatePending.constructor:
        return pending.call(this as RevenueWithdrawalStatePending);
      case RevenueWithdrawalStateSucceeded.constructor:
        return succeeded.call(this as RevenueWithdrawalStateSucceeded);
      case RevenueWithdrawalStateFailed.constructor:
        return failed.call(this as RevenueWithdrawalStateFailed);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(RevenueWithdrawalStatePending value)? pending,
    TResult Function(RevenueWithdrawalStateSucceeded value)? succeeded,
    TResult Function(RevenueWithdrawalStateFailed value)? failed,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case RevenueWithdrawalStatePending.constructor:
        if (pending != null) {
          return pending.call(this as RevenueWithdrawalStatePending);
        }
        break;
      case RevenueWithdrawalStateSucceeded.constructor:
        if (succeeded != null) {
          return succeeded.call(this as RevenueWithdrawalStateSucceeded);
        }
        break;
      case RevenueWithdrawalStateFailed.constructor:
        if (failed != null) {
          return failed.call(this as RevenueWithdrawalStateFailed);
        }
        break;
    }
    return orElse.call();
  }
}

extension RevenueWithdrawalStateSucceededExtensions
    on RevenueWithdrawalStateSucceeded {
  RevenueWithdrawalStateSucceeded copyWith({int? date, String? url}) =>
      RevenueWithdrawalStateSucceeded(
        date: date ?? this.date,
        url: url ?? this.url,
      );
}

extension ChatRevenueTransactionTypeExtensions on ChatRevenueTransactionType {
  TResult map<TResult extends Object?>({
    required TResult Function(ChatRevenueTransactionTypeEarnings value)
    earnings,
    required TResult Function(ChatRevenueTransactionTypeWithdrawal value)
    withdrawal,
    required TResult Function(ChatRevenueTransactionTypeRefund value) refund,
  }) {
    switch (getConstructor()) {
      case ChatRevenueTransactionTypeEarnings.constructor:
        return earnings.call(this as ChatRevenueTransactionTypeEarnings);
      case ChatRevenueTransactionTypeWithdrawal.constructor:
        return withdrawal.call(this as ChatRevenueTransactionTypeWithdrawal);
      case ChatRevenueTransactionTypeRefund.constructor:
        return refund.call(this as ChatRevenueTransactionTypeRefund);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(ChatRevenueTransactionTypeEarnings value)? earnings,
    TResult Function(ChatRevenueTransactionTypeWithdrawal value)? withdrawal,
    TResult Function(ChatRevenueTransactionTypeRefund value)? refund,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case ChatRevenueTransactionTypeEarnings.constructor:
        if (earnings != null) {
          return earnings.call(this as ChatRevenueTransactionTypeEarnings);
        }
        break;
      case ChatRevenueTransactionTypeWithdrawal.constructor:
        if (withdrawal != null) {
          return withdrawal.call(this as ChatRevenueTransactionTypeWithdrawal);
        }
        break;
      case ChatRevenueTransactionTypeRefund.constructor:
        if (refund != null) {
          return refund.call(this as ChatRevenueTransactionTypeRefund);
        }
        break;
    }
    return orElse.call();
  }
}

extension ChatRevenueTransactionTypeEarningsExtensions
    on ChatRevenueTransactionTypeEarnings {
  ChatRevenueTransactionTypeEarnings copyWith({int? startDate, int? endDate}) =>
      ChatRevenueTransactionTypeEarnings(
        startDate: startDate ?? this.startDate,
        endDate: endDate ?? this.endDate,
      );
}

extension ChatRevenueTransactionTypeWithdrawalExtensions
    on ChatRevenueTransactionTypeWithdrawal {
  ChatRevenueTransactionTypeWithdrawal copyWith({
    int? withdrawalDate,
    String? provider,
    RevenueWithdrawalState? state,
  }) => ChatRevenueTransactionTypeWithdrawal(
    withdrawalDate: withdrawalDate ?? this.withdrawalDate,
    provider: provider ?? this.provider,
    state: state ?? this.state,
  );
}

extension ChatRevenueTransactionTypeRefundExtensions
    on ChatRevenueTransactionTypeRefund {
  ChatRevenueTransactionTypeRefund copyWith({
    int? refundDate,
    String? provider,
  }) => ChatRevenueTransactionTypeRefund(
    refundDate: refundDate ?? this.refundDate,
    provider: provider ?? this.provider,
  );
}

extension ChatRevenueTransactionExtensions on ChatRevenueTransaction {
  ChatRevenueTransaction copyWith({
    String? cryptocurrency,
    int? cryptocurrencyAmount,
    ChatRevenueTransactionType? type,
  }) => ChatRevenueTransaction(
    cryptocurrency: cryptocurrency ?? this.cryptocurrency,
    cryptocurrencyAmount: cryptocurrencyAmount ?? this.cryptocurrencyAmount,
    type: type ?? this.type,
  );
}

extension ChatRevenueTransactionsExtensions on ChatRevenueTransactions {
  ChatRevenueTransactions copyWith({
    int? totalCount,
    List<ChatRevenueTransaction>? transactions,
  }) => ChatRevenueTransactions(
    totalCount: totalCount ?? this.totalCount,
    transactions: transactions ?? this.transactions,
  );
}

extension StarRevenueStatusExtensions on StarRevenueStatus {
  StarRevenueStatus copyWith({
    StarAmount? totalAmount,
    StarAmount? currentAmount,
    StarAmount? availableAmount,
    bool? withdrawalEnabled,
    int? nextWithdrawalIn,
  }) => StarRevenueStatus(
    totalAmount: totalAmount ?? this.totalAmount,
    currentAmount: currentAmount ?? this.currentAmount,
    availableAmount: availableAmount ?? this.availableAmount,
    withdrawalEnabled: withdrawalEnabled ?? this.withdrawalEnabled,
    nextWithdrawalIn: nextWithdrawalIn ?? this.nextWithdrawalIn,
  );
}

extension StarRevenueStatisticsExtensions on StarRevenueStatistics {
  StarRevenueStatistics copyWith({
    StatisticalGraph? revenueByDayGraph,
    StarRevenueStatus? status,
    double? usdRate,
  }) => StarRevenueStatistics(
    revenueByDayGraph: revenueByDayGraph ?? this.revenueByDayGraph,
    status: status ?? this.status,
    usdRate: usdRate ?? this.usdRate,
  );
}

extension PointExtensions on Point {
  Point copyWith({double? x, double? y}) =>
      Point(x: x ?? this.x, y: y ?? this.y);
}

extension VectorPathCommandExtensions on VectorPathCommand {
  TResult map<TResult extends Object?>({
    required TResult Function(VectorPathCommandLine value) line,
    required TResult Function(VectorPathCommandCubicBezierCurve value)
    cubicBezierCurve,
  }) {
    switch (getConstructor()) {
      case VectorPathCommandLine.constructor:
        return line.call(this as VectorPathCommandLine);
      case VectorPathCommandCubicBezierCurve.constructor:
        return cubicBezierCurve.call(this as VectorPathCommandCubicBezierCurve);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(VectorPathCommandLine value)? line,
    TResult Function(VectorPathCommandCubicBezierCurve value)? cubicBezierCurve,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case VectorPathCommandLine.constructor:
        if (line != null) {
          return line.call(this as VectorPathCommandLine);
        }
        break;
      case VectorPathCommandCubicBezierCurve.constructor:
        if (cubicBezierCurve != null) {
          return cubicBezierCurve.call(
            this as VectorPathCommandCubicBezierCurve,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension VectorPathCommandLineExtensions on VectorPathCommandLine {
  VectorPathCommandLine copyWith({Point? endPoint}) =>
      VectorPathCommandLine(endPoint: endPoint ?? this.endPoint);
}

extension VectorPathCommandCubicBezierCurveExtensions
    on VectorPathCommandCubicBezierCurve {
  VectorPathCommandCubicBezierCurve copyWith({
    Point? startControlPoint,
    Point? endControlPoint,
    Point? endPoint,
  }) => VectorPathCommandCubicBezierCurve(
    startControlPoint: startControlPoint ?? this.startControlPoint,
    endControlPoint: endControlPoint ?? this.endControlPoint,
    endPoint: endPoint ?? this.endPoint,
  );
}

extension BotCommandScopeExtensions on BotCommandScope {
  TResult map<TResult extends Object?>({
    required TResult Function(BotCommandScopeDefault value) $default,
    required TResult Function(BotCommandScopeAllPrivateChats value)
    allPrivateChats,
    required TResult Function(BotCommandScopeAllGroupChats value) allGroupChats,
    required TResult Function(BotCommandScopeAllChatAdministrators value)
    allChatAdministrators,
    required TResult Function(BotCommandScopeChat value) chat,
    required TResult Function(BotCommandScopeChatAdministrators value)
    chatAdministrators,
    required TResult Function(BotCommandScopeChatMember value) chatMember,
  }) {
    switch (getConstructor()) {
      case BotCommandScopeDefault.constructor:
        return $default.call(this as BotCommandScopeDefault);
      case BotCommandScopeAllPrivateChats.constructor:
        return allPrivateChats.call(this as BotCommandScopeAllPrivateChats);
      case BotCommandScopeAllGroupChats.constructor:
        return allGroupChats.call(this as BotCommandScopeAllGroupChats);
      case BotCommandScopeAllChatAdministrators.constructor:
        return allChatAdministrators.call(
          this as BotCommandScopeAllChatAdministrators,
        );
      case BotCommandScopeChat.constructor:
        return chat.call(this as BotCommandScopeChat);
      case BotCommandScopeChatAdministrators.constructor:
        return chatAdministrators.call(
          this as BotCommandScopeChatAdministrators,
        );
      case BotCommandScopeChatMember.constructor:
        return chatMember.call(this as BotCommandScopeChatMember);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(BotCommandScopeDefault value)? $default,
    TResult Function(BotCommandScopeAllPrivateChats value)? allPrivateChats,
    TResult Function(BotCommandScopeAllGroupChats value)? allGroupChats,
    TResult Function(BotCommandScopeAllChatAdministrators value)?
    allChatAdministrators,
    TResult Function(BotCommandScopeChat value)? chat,
    TResult Function(BotCommandScopeChatAdministrators value)?
    chatAdministrators,
    TResult Function(BotCommandScopeChatMember value)? chatMember,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case BotCommandScopeDefault.constructor:
        if ($default != null) {
          return $default.call(this as BotCommandScopeDefault);
        }
        break;
      case BotCommandScopeAllPrivateChats.constructor:
        if (allPrivateChats != null) {
          return allPrivateChats.call(this as BotCommandScopeAllPrivateChats);
        }
        break;
      case BotCommandScopeAllGroupChats.constructor:
        if (allGroupChats != null) {
          return allGroupChats.call(this as BotCommandScopeAllGroupChats);
        }
        break;
      case BotCommandScopeAllChatAdministrators.constructor:
        if (allChatAdministrators != null) {
          return allChatAdministrators.call(
            this as BotCommandScopeAllChatAdministrators,
          );
        }
        break;
      case BotCommandScopeChat.constructor:
        if (chat != null) {
          return chat.call(this as BotCommandScopeChat);
        }
        break;
      case BotCommandScopeChatAdministrators.constructor:
        if (chatAdministrators != null) {
          return chatAdministrators.call(
            this as BotCommandScopeChatAdministrators,
          );
        }
        break;
      case BotCommandScopeChatMember.constructor:
        if (chatMember != null) {
          return chatMember.call(this as BotCommandScopeChatMember);
        }
        break;
    }
    return orElse.call();
  }
}

extension BotCommandScopeChatExtensions on BotCommandScopeChat {
  BotCommandScopeChat copyWith({int? chatId}) =>
      BotCommandScopeChat(chatId: chatId ?? this.chatId);
}

extension BotCommandScopeChatAdministratorsExtensions
    on BotCommandScopeChatAdministrators {
  BotCommandScopeChatAdministrators copyWith({int? chatId}) =>
      BotCommandScopeChatAdministrators(chatId: chatId ?? this.chatId);
}

extension BotCommandScopeChatMemberExtensions on BotCommandScopeChatMember {
  BotCommandScopeChatMember copyWith({int? chatId, int? userId}) =>
      BotCommandScopeChatMember(
        chatId: chatId ?? this.chatId,
        userId: userId ?? this.userId,
      );
}

extension PhoneNumberCodeTypeExtensions on PhoneNumberCodeType {
  TResult map<TResult extends Object?>({
    required TResult Function(PhoneNumberCodeTypeChange value) change,
    required TResult Function(PhoneNumberCodeTypeVerify value) verify,
    required TResult Function(PhoneNumberCodeTypeConfirmOwnership value)
    confirmOwnership,
  }) {
    switch (getConstructor()) {
      case PhoneNumberCodeTypeChange.constructor:
        return change.call(this as PhoneNumberCodeTypeChange);
      case PhoneNumberCodeTypeVerify.constructor:
        return verify.call(this as PhoneNumberCodeTypeVerify);
      case PhoneNumberCodeTypeConfirmOwnership.constructor:
        return confirmOwnership.call(
          this as PhoneNumberCodeTypeConfirmOwnership,
        );
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(PhoneNumberCodeTypeChange value)? change,
    TResult Function(PhoneNumberCodeTypeVerify value)? verify,
    TResult Function(PhoneNumberCodeTypeConfirmOwnership value)?
    confirmOwnership,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case PhoneNumberCodeTypeChange.constructor:
        if (change != null) {
          return change.call(this as PhoneNumberCodeTypeChange);
        }
        break;
      case PhoneNumberCodeTypeVerify.constructor:
        if (verify != null) {
          return verify.call(this as PhoneNumberCodeTypeVerify);
        }
        break;
      case PhoneNumberCodeTypeConfirmOwnership.constructor:
        if (confirmOwnership != null) {
          return confirmOwnership.call(
            this as PhoneNumberCodeTypeConfirmOwnership,
          );
        }
        break;
    }
    return orElse.call();
  }
}

extension PhoneNumberCodeTypeConfirmOwnershipExtensions
    on PhoneNumberCodeTypeConfirmOwnership {
  PhoneNumberCodeTypeConfirmOwnership copyWith({String? hash}) =>
      PhoneNumberCodeTypeConfirmOwnership(hash: hash ?? this.hash);
}

extension UpdateExtensions on Update {
  TResult map<TResult extends Object?>({
    required TResult Function(UpdateAuthorizationState value)
    authorizationState,
    required TResult Function(UpdateNewMessage value) newMessage,
    required TResult Function(UpdateMessageSendAcknowledged value)
    messageSendAcknowledged,
    required TResult Function(UpdateMessageSendSucceeded value)
    messageSendSucceeded,
    required TResult Function(UpdateMessageSendFailed value) messageSendFailed,
    required TResult Function(UpdateMessageContent value) messageContent,
    required TResult Function(UpdateMessageEdited value) messageEdited,
    required TResult Function(UpdateMessageIsPinned value) messageIsPinned,
    required TResult Function(UpdateMessageInteractionInfo value)
    messageInteractionInfo,
    required TResult Function(UpdateMessageContentOpened value)
    messageContentOpened,
    required TResult Function(UpdateMessageMentionRead value)
    messageMentionRead,
    required TResult Function(UpdateMessageUnreadReactions value)
    messageUnreadReactions,
    required TResult Function(UpdateMessageFactCheck value) messageFactCheck,
    required TResult Function(UpdateMessageLiveLocationViewed value)
    messageLiveLocationViewed,
    required TResult Function(UpdateVideoPublished value) videoPublished,
    required TResult Function(UpdateNewChat value) newChat,
    required TResult Function(UpdateChatTitle value) chatTitle,
    required TResult Function(UpdateChatPhoto value) chatPhoto,
    required TResult Function(UpdateChatAccentColors value) chatAccentColors,
    required TResult Function(UpdateChatPermissions value) chatPermissions,
    required TResult Function(UpdateChatLastMessage value) chatLastMessage,
    required TResult Function(UpdateChatPosition value) chatPosition,
    required TResult Function(UpdateChatAddedToList value) chatAddedToList,
    required TResult Function(UpdateChatRemovedFromList value)
    chatRemovedFromList,
    required TResult Function(UpdateChatReadInbox value) chatReadInbox,
    required TResult Function(UpdateChatReadOutbox value) chatReadOutbox,
    required TResult Function(UpdateChatActionBar value) chatActionBar,
    required TResult Function(UpdateChatBusinessBotManageBar value)
    chatBusinessBotManageBar,
    required TResult Function(UpdateChatAvailableReactions value)
    chatAvailableReactions,
    required TResult Function(UpdateChatDraftMessage value) chatDraftMessage,
    required TResult Function(UpdateChatEmojiStatus value) chatEmojiStatus,
    required TResult Function(UpdateChatMessageSender value) chatMessageSender,
    required TResult Function(UpdateChatMessageAutoDeleteTime value)
    chatMessageAutoDeleteTime,
    required TResult Function(UpdateChatNotificationSettings value)
    chatNotificationSettings,
    required TResult Function(UpdateChatPendingJoinRequests value)
    chatPendingJoinRequests,
    required TResult Function(UpdateChatReplyMarkup value) chatReplyMarkup,
    required TResult Function(UpdateChatBackground value) chatBackground,
    required TResult Function(UpdateChatTheme value) chatTheme,
    required TResult Function(UpdateChatUnreadMentionCount value)
    chatUnreadMentionCount,
    required TResult Function(UpdateChatUnreadReactionCount value)
    chatUnreadReactionCount,
    required TResult Function(UpdateChatVideoChat value) chatVideoChat,
    required TResult Function(UpdateChatDefaultDisableNotification value)
    chatDefaultDisableNotification,
    required TResult Function(UpdateChatHasProtectedContent value)
    chatHasProtectedContent,
    required TResult Function(UpdateChatIsTranslatable value)
    chatIsTranslatable,
    required TResult Function(UpdateChatIsMarkedAsUnread value)
    chatIsMarkedAsUnread,
    required TResult Function(UpdateChatViewAsTopics value) chatViewAsTopics,
    required TResult Function(UpdateChatBlockList value) chatBlockList,
    required TResult Function(UpdateChatHasScheduledMessages value)
    chatHasScheduledMessages,
    required TResult Function(UpdateChatFolders value) chatFolders,
    required TResult Function(UpdateChatOnlineMemberCount value)
    chatOnlineMemberCount,
    required TResult Function(UpdateSavedMessagesTopic value)
    savedMessagesTopic,
    required TResult Function(UpdateSavedMessagesTopicCount value)
    savedMessagesTopicCount,
    required TResult Function(UpdateDirectMessagesChatTopic value)
    directMessagesChatTopic,
    required TResult Function(UpdateTopicMessageCount value) topicMessageCount,
    required TResult Function(UpdateQuickReplyShortcut value)
    quickReplyShortcut,
    required TResult Function(UpdateQuickReplyShortcutDeleted value)
    quickReplyShortcutDeleted,
    required TResult Function(UpdateQuickReplyShortcuts value)
    quickReplyShortcuts,
    required TResult Function(UpdateQuickReplyShortcutMessages value)
    quickReplyShortcutMessages,
    required TResult Function(UpdateForumTopicInfo value) forumTopicInfo,
    required TResult Function(UpdateForumTopic value) forumTopic,
    required TResult Function(UpdateScopeNotificationSettings value)
    scopeNotificationSettings,
    required TResult Function(UpdateReactionNotificationSettings value)
    reactionNotificationSettings,
    required TResult Function(UpdateNotification value) notification,
    required TResult Function(UpdateNotificationGroup value) notificationGroup,
    required TResult Function(UpdateActiveNotifications value)
    activeNotifications,
    required TResult Function(UpdateHavePendingNotifications value)
    havePendingNotifications,
    required TResult Function(UpdateDeleteMessages value) deleteMessages,
    required TResult Function(UpdateChatAction value) chatAction,
    required TResult Function(UpdateUserStatus value) userStatus,
    required TResult Function(UpdateUser value) user,
    required TResult Function(UpdateBasicGroup value) basicGroup,
    required TResult Function(UpdateSupergroup value) supergroup,
    required TResult Function(UpdateSecretChat value) secretChat,
    required TResult Function(UpdateUserFullInfo value) userFullInfo,
    required TResult Function(UpdateBasicGroupFullInfo value)
    basicGroupFullInfo,
    required TResult Function(UpdateSupergroupFullInfo value)
    supergroupFullInfo,
    required TResult Function(UpdateServiceNotification value)
    serviceNotification,
    required TResult Function(UpdateFile value) file,
    required TResult Function(UpdateFileGenerationStart value)
    fileGenerationStart,
    required TResult Function(UpdateFileGenerationStop value)
    fileGenerationStop,
    required TResult Function(UpdateFileDownloads value) fileDownloads,
    required TResult Function(UpdateFileAddedToDownloads value)
    fileAddedToDownloads,
    required TResult Function(UpdateFileDownload value) fileDownload,
    required TResult Function(UpdateFileRemovedFromDownloads value)
    fileRemovedFromDownloads,
    required TResult Function(UpdateApplicationVerificationRequired value)
    applicationVerificationRequired,
    required TResult Function(
      UpdateApplicationRecaptchaVerificationRequired value,
    )
    applicationRecaptchaVerificationRequired,
    required TResult Function(UpdateCall value) call,
    required TResult Function(UpdateGroupCall value) groupCall,
    required TResult Function(UpdateGroupCallParticipant value)
    groupCallParticipant,
    required TResult Function(UpdateGroupCallParticipants value)
    groupCallParticipants,
    required TResult Function(UpdateGroupCallVerificationState value)
    groupCallVerificationState,
    required TResult Function(UpdateNewCallSignalingData value)
    newCallSignalingData,
    required TResult Function(UpdateUserPrivacySettingRules value)
    userPrivacySettingRules,
    required TResult Function(UpdateUnreadMessageCount value)
    unreadMessageCount,
    required TResult Function(UpdateUnreadChatCount value) unreadChatCount,
    required TResult Function(UpdateStory value) story,
    required TResult Function(UpdateStoryDeleted value) storyDeleted,
    required TResult Function(UpdateStoryPostSucceeded value)
    storyPostSucceeded,
    required TResult Function(UpdateStoryPostFailed value) storyPostFailed,
    required TResult Function(UpdateChatActiveStories value) chatActiveStories,
    required TResult Function(UpdateStoryListChatCount value)
    storyListChatCount,
    required TResult Function(UpdateStoryStealthMode value) storyStealthMode,
    required TResult Function(UpdateOption value) option,
    required TResult Function(UpdateStickerSet value) stickerSet,
    required TResult Function(UpdateInstalledStickerSets value)
    installedStickerSets,
    required TResult Function(UpdateTrendingStickerSets value)
    trendingStickerSets,
    required TResult Function(UpdateRecentStickers value) recentStickers,
    required TResult Function(UpdateFavoriteStickers value) favoriteStickers,
    required TResult Function(UpdateSavedAnimations value) savedAnimations,
    required TResult Function(UpdateSavedNotificationSounds value)
    savedNotificationSounds,
    required TResult Function(UpdateDefaultBackground value) defaultBackground,
    required TResult Function(UpdateChatThemes value) chatThemes,
    required TResult Function(UpdateAccentColors value) accentColors,
    required TResult Function(UpdateProfileAccentColors value)
    profileAccentColors,
    required TResult Function(UpdateLanguagePackStrings value)
    languagePackStrings,
    required TResult Function(UpdateConnectionState value) connectionState,
    required TResult Function(UpdateFreezeState value) freezeState,
    required TResult Function(UpdateTermsOfService value) termsOfService,
    required TResult Function(UpdateUnconfirmedSession value)
    unconfirmedSession,
    required TResult Function(UpdateAttachmentMenuBots value)
    attachmentMenuBots,
    required TResult Function(UpdateWebAppMessageSent value) webAppMessageSent,
    required TResult Function(UpdateActiveEmojiReactions value)
    activeEmojiReactions,
    required TResult Function(UpdateAvailableMessageEffects value)
    availableMessageEffects,
    required TResult Function(UpdateDefaultReactionType value)
    defaultReactionType,
    required TResult Function(UpdateDefaultPaidReactionType value)
    defaultPaidReactionType,
    required TResult Function(UpdateSavedMessagesTags value) savedMessagesTags,
    required TResult Function(UpdateActiveLiveLocationMessages value)
    activeLiveLocationMessages,
    required TResult Function(UpdateOwnedStarCount value) ownedStarCount,
    required TResult Function(UpdateChatRevenueAmount value) chatRevenueAmount,
    required TResult Function(UpdateStarRevenueStatus value) starRevenueStatus,
    required TResult Function(UpdateSpeechRecognitionTrial value)
    speechRecognitionTrial,
    required TResult Function(UpdateDiceEmojis value) diceEmojis,
    required TResult Function(UpdateAnimatedEmojiMessageClicked value)
    animatedEmojiMessageClicked,
    required TResult Function(UpdateAnimationSearchParameters value)
    animationSearchParameters,
    required TResult Function(UpdateSuggestedActions value) suggestedActions,
    required TResult Function(UpdateSpeedLimitNotification value)
    speedLimitNotification,
    required TResult Function(UpdateContactCloseBirthdays value)
    contactCloseBirthdays,
    required TResult Function(UpdateAutosaveSettings value) autosaveSettings,
    required TResult Function(UpdateBusinessConnection value)
    businessConnection,
    required TResult Function(UpdateNewBusinessMessage value)
    newBusinessMessage,
    required TResult Function(UpdateBusinessMessageEdited value)
    businessMessageEdited,
    required TResult Function(UpdateBusinessMessagesDeleted value)
    businessMessagesDeleted,
    required TResult Function(UpdateNewInlineQuery value) newInlineQuery,
    required TResult Function(UpdateNewChosenInlineResult value)
    newChosenInlineResult,
    required TResult Function(UpdateNewCallbackQuery value) newCallbackQuery,
    required TResult Function(UpdateNewInlineCallbackQuery value)
    newInlineCallbackQuery,
    required TResult Function(UpdateNewBusinessCallbackQuery value)
    newBusinessCallbackQuery,
    required TResult Function(UpdateNewShippingQuery value) newShippingQuery,
    required TResult Function(UpdateNewPreCheckoutQuery value)
    newPreCheckoutQuery,
    required TResult Function(UpdateNewCustomEvent value) newCustomEvent,
    required TResult Function(UpdateNewCustomQuery value) newCustomQuery,
    required TResult Function(UpdatePoll value) poll,
    required TResult Function(UpdatePollAnswer value) pollAnswer,
    required TResult Function(UpdateChatMember value) chatMember,
    required TResult Function(UpdateNewChatJoinRequest value)
    newChatJoinRequest,
    required TResult Function(UpdateChatBoost value) chatBoost,
    required TResult Function(UpdateMessageReaction value) messageReaction,
    required TResult Function(UpdateMessageReactions value) messageReactions,
    required TResult Function(UpdatePaidMediaPurchased value)
    paidMediaPurchased,
  }) {
    switch (getConstructor()) {
      case UpdateAuthorizationState.constructor:
        return authorizationState.call(this as UpdateAuthorizationState);
      case UpdateNewMessage.constructor:
        return newMessage.call(this as UpdateNewMessage);
      case UpdateMessageSendAcknowledged.constructor:
        return messageSendAcknowledged.call(
          this as UpdateMessageSendAcknowledged,
        );
      case UpdateMessageSendSucceeded.constructor:
        return messageSendSucceeded.call(this as UpdateMessageSendSucceeded);
      case UpdateMessageSendFailed.constructor:
        return messageSendFailed.call(this as UpdateMessageSendFailed);
      case UpdateMessageContent.constructor:
        return messageContent.call(this as UpdateMessageContent);
      case UpdateMessageEdited.constructor:
        return messageEdited.call(this as UpdateMessageEdited);
      case UpdateMessageIsPinned.constructor:
        return messageIsPinned.call(this as UpdateMessageIsPinned);
      case UpdateMessageInteractionInfo.constructor:
        return messageInteractionInfo.call(
          this as UpdateMessageInteractionInfo,
        );
      case UpdateMessageContentOpened.constructor:
        return messageContentOpened.call(this as UpdateMessageContentOpened);
      case UpdateMessageMentionRead.constructor:
        return messageMentionRead.call(this as UpdateMessageMentionRead);
      case UpdateMessageUnreadReactions.constructor:
        return messageUnreadReactions.call(
          this as UpdateMessageUnreadReactions,
        );
      case UpdateMessageFactCheck.constructor:
        return messageFactCheck.call(this as UpdateMessageFactCheck);
      case UpdateMessageLiveLocationViewed.constructor:
        return messageLiveLocationViewed.call(
          this as UpdateMessageLiveLocationViewed,
        );
      case UpdateVideoPublished.constructor:
        return videoPublished.call(this as UpdateVideoPublished);
      case UpdateNewChat.constructor:
        return newChat.call(this as UpdateNewChat);
      case UpdateChatTitle.constructor:
        return chatTitle.call(this as UpdateChatTitle);
      case UpdateChatPhoto.constructor:
        return chatPhoto.call(this as UpdateChatPhoto);
      case UpdateChatAccentColors.constructor:
        return chatAccentColors.call(this as UpdateChatAccentColors);
      case UpdateChatPermissions.constructor:
        return chatPermissions.call(this as UpdateChatPermissions);
      case UpdateChatLastMessage.constructor:
        return chatLastMessage.call(this as UpdateChatLastMessage);
      case UpdateChatPosition.constructor:
        return chatPosition.call(this as UpdateChatPosition);
      case UpdateChatAddedToList.constructor:
        return chatAddedToList.call(this as UpdateChatAddedToList);
      case UpdateChatRemovedFromList.constructor:
        return chatRemovedFromList.call(this as UpdateChatRemovedFromList);
      case UpdateChatReadInbox.constructor:
        return chatReadInbox.call(this as UpdateChatReadInbox);
      case UpdateChatReadOutbox.constructor:
        return chatReadOutbox.call(this as UpdateChatReadOutbox);
      case UpdateChatActionBar.constructor:
        return chatActionBar.call(this as UpdateChatActionBar);
      case UpdateChatBusinessBotManageBar.constructor:
        return chatBusinessBotManageBar.call(
          this as UpdateChatBusinessBotManageBar,
        );
      case UpdateChatAvailableReactions.constructor:
        return chatAvailableReactions.call(
          this as UpdateChatAvailableReactions,
        );
      case UpdateChatDraftMessage.constructor:
        return chatDraftMessage.call(this as UpdateChatDraftMessage);
      case UpdateChatEmojiStatus.constructor:
        return chatEmojiStatus.call(this as UpdateChatEmojiStatus);
      case UpdateChatMessageSender.constructor:
        return chatMessageSender.call(this as UpdateChatMessageSender);
      case UpdateChatMessageAutoDeleteTime.constructor:
        return chatMessageAutoDeleteTime.call(
          this as UpdateChatMessageAutoDeleteTime,
        );
      case UpdateChatNotificationSettings.constructor:
        return chatNotificationSettings.call(
          this as UpdateChatNotificationSettings,
        );
      case UpdateChatPendingJoinRequests.constructor:
        return chatPendingJoinRequests.call(
          this as UpdateChatPendingJoinRequests,
        );
      case UpdateChatReplyMarkup.constructor:
        return chatReplyMarkup.call(this as UpdateChatReplyMarkup);
      case UpdateChatBackground.constructor:
        return chatBackground.call(this as UpdateChatBackground);
      case UpdateChatTheme.constructor:
        return chatTheme.call(this as UpdateChatTheme);
      case UpdateChatUnreadMentionCount.constructor:
        return chatUnreadMentionCount.call(
          this as UpdateChatUnreadMentionCount,
        );
      case UpdateChatUnreadReactionCount.constructor:
        return chatUnreadReactionCount.call(
          this as UpdateChatUnreadReactionCount,
        );
      case UpdateChatVideoChat.constructor:
        return chatVideoChat.call(this as UpdateChatVideoChat);
      case UpdateChatDefaultDisableNotification.constructor:
        return chatDefaultDisableNotification.call(
          this as UpdateChatDefaultDisableNotification,
        );
      case UpdateChatHasProtectedContent.constructor:
        return chatHasProtectedContent.call(
          this as UpdateChatHasProtectedContent,
        );
      case UpdateChatIsTranslatable.constructor:
        return chatIsTranslatable.call(this as UpdateChatIsTranslatable);
      case UpdateChatIsMarkedAsUnread.constructor:
        return chatIsMarkedAsUnread.call(this as UpdateChatIsMarkedAsUnread);
      case UpdateChatViewAsTopics.constructor:
        return chatViewAsTopics.call(this as UpdateChatViewAsTopics);
      case UpdateChatBlockList.constructor:
        return chatBlockList.call(this as UpdateChatBlockList);
      case UpdateChatHasScheduledMessages.constructor:
        return chatHasScheduledMessages.call(
          this as UpdateChatHasScheduledMessages,
        );
      case UpdateChatFolders.constructor:
        return chatFolders.call(this as UpdateChatFolders);
      case UpdateChatOnlineMemberCount.constructor:
        return chatOnlineMemberCount.call(this as UpdateChatOnlineMemberCount);
      case UpdateSavedMessagesTopic.constructor:
        return savedMessagesTopic.call(this as UpdateSavedMessagesTopic);
      case UpdateSavedMessagesTopicCount.constructor:
        return savedMessagesTopicCount.call(
          this as UpdateSavedMessagesTopicCount,
        );
      case UpdateDirectMessagesChatTopic.constructor:
        return directMessagesChatTopic.call(
          this as UpdateDirectMessagesChatTopic,
        );
      case UpdateTopicMessageCount.constructor:
        return topicMessageCount.call(this as UpdateTopicMessageCount);
      case UpdateQuickReplyShortcut.constructor:
        return quickReplyShortcut.call(this as UpdateQuickReplyShortcut);
      case UpdateQuickReplyShortcutDeleted.constructor:
        return quickReplyShortcutDeleted.call(
          this as UpdateQuickReplyShortcutDeleted,
        );
      case UpdateQuickReplyShortcuts.constructor:
        return quickReplyShortcuts.call(this as UpdateQuickReplyShortcuts);
      case UpdateQuickReplyShortcutMessages.constructor:
        return quickReplyShortcutMessages.call(
          this as UpdateQuickReplyShortcutMessages,
        );
      case UpdateForumTopicInfo.constructor:
        return forumTopicInfo.call(this as UpdateForumTopicInfo);
      case UpdateForumTopic.constructor:
        return forumTopic.call(this as UpdateForumTopic);
      case UpdateScopeNotificationSettings.constructor:
        return scopeNotificationSettings.call(
          this as UpdateScopeNotificationSettings,
        );
      case UpdateReactionNotificationSettings.constructor:
        return reactionNotificationSettings.call(
          this as UpdateReactionNotificationSettings,
        );
      case UpdateNotification.constructor:
        return notification.call(this as UpdateNotification);
      case UpdateNotificationGroup.constructor:
        return notificationGroup.call(this as UpdateNotificationGroup);
      case UpdateActiveNotifications.constructor:
        return activeNotifications.call(this as UpdateActiveNotifications);
      case UpdateHavePendingNotifications.constructor:
        return havePendingNotifications.call(
          this as UpdateHavePendingNotifications,
        );
      case UpdateDeleteMessages.constructor:
        return deleteMessages.call(this as UpdateDeleteMessages);
      case UpdateChatAction.constructor:
        return chatAction.call(this as UpdateChatAction);
      case UpdateUserStatus.constructor:
        return userStatus.call(this as UpdateUserStatus);
      case UpdateUser.constructor:
        return user.call(this as UpdateUser);
      case UpdateBasicGroup.constructor:
        return basicGroup.call(this as UpdateBasicGroup);
      case UpdateSupergroup.constructor:
        return supergroup.call(this as UpdateSupergroup);
      case UpdateSecretChat.constructor:
        return secretChat.call(this as UpdateSecretChat);
      case UpdateUserFullInfo.constructor:
        return userFullInfo.call(this as UpdateUserFullInfo);
      case UpdateBasicGroupFullInfo.constructor:
        return basicGroupFullInfo.call(this as UpdateBasicGroupFullInfo);
      case UpdateSupergroupFullInfo.constructor:
        return supergroupFullInfo.call(this as UpdateSupergroupFullInfo);
      case UpdateServiceNotification.constructor:
        return serviceNotification.call(this as UpdateServiceNotification);
      case UpdateFile.constructor:
        return file.call(this as UpdateFile);
      case UpdateFileGenerationStart.constructor:
        return fileGenerationStart.call(this as UpdateFileGenerationStart);
      case UpdateFileGenerationStop.constructor:
        return fileGenerationStop.call(this as UpdateFileGenerationStop);
      case UpdateFileDownloads.constructor:
        return fileDownloads.call(this as UpdateFileDownloads);
      case UpdateFileAddedToDownloads.constructor:
        return fileAddedToDownloads.call(this as UpdateFileAddedToDownloads);
      case UpdateFileDownload.constructor:
        return fileDownload.call(this as UpdateFileDownload);
      case UpdateFileRemovedFromDownloads.constructor:
        return fileRemovedFromDownloads.call(
          this as UpdateFileRemovedFromDownloads,
        );
      case UpdateApplicationVerificationRequired.constructor:
        return applicationVerificationRequired.call(
          this as UpdateApplicationVerificationRequired,
        );
      case UpdateApplicationRecaptchaVerificationRequired.constructor:
        return applicationRecaptchaVerificationRequired.call(
          this as UpdateApplicationRecaptchaVerificationRequired,
        );
      case UpdateCall.constructor:
        return call.call(this as UpdateCall);
      case UpdateGroupCall.constructor:
        return groupCall.call(this as UpdateGroupCall);
      case UpdateGroupCallParticipant.constructor:
        return groupCallParticipant.call(this as UpdateGroupCallParticipant);
      case UpdateGroupCallParticipants.constructor:
        return groupCallParticipants.call(this as UpdateGroupCallParticipants);
      case UpdateGroupCallVerificationState.constructor:
        return groupCallVerificationState.call(
          this as UpdateGroupCallVerificationState,
        );
      case UpdateNewCallSignalingData.constructor:
        return newCallSignalingData.call(this as UpdateNewCallSignalingData);
      case UpdateUserPrivacySettingRules.constructor:
        return userPrivacySettingRules.call(
          this as UpdateUserPrivacySettingRules,
        );
      case UpdateUnreadMessageCount.constructor:
        return unreadMessageCount.call(this as UpdateUnreadMessageCount);
      case UpdateUnreadChatCount.constructor:
        return unreadChatCount.call(this as UpdateUnreadChatCount);
      case UpdateStory.constructor:
        return story.call(this as UpdateStory);
      case UpdateStoryDeleted.constructor:
        return storyDeleted.call(this as UpdateStoryDeleted);
      case UpdateStoryPostSucceeded.constructor:
        return storyPostSucceeded.call(this as UpdateStoryPostSucceeded);
      case UpdateStoryPostFailed.constructor:
        return storyPostFailed.call(this as UpdateStoryPostFailed);
      case UpdateChatActiveStories.constructor:
        return chatActiveStories.call(this as UpdateChatActiveStories);
      case UpdateStoryListChatCount.constructor:
        return storyListChatCount.call(this as UpdateStoryListChatCount);
      case UpdateStoryStealthMode.constructor:
        return storyStealthMode.call(this as UpdateStoryStealthMode);
      case UpdateOption.constructor:
        return option.call(this as UpdateOption);
      case UpdateStickerSet.constructor:
        return stickerSet.call(this as UpdateStickerSet);
      case UpdateInstalledStickerSets.constructor:
        return installedStickerSets.call(this as UpdateInstalledStickerSets);
      case UpdateTrendingStickerSets.constructor:
        return trendingStickerSets.call(this as UpdateTrendingStickerSets);
      case UpdateRecentStickers.constructor:
        return recentStickers.call(this as UpdateRecentStickers);
      case UpdateFavoriteStickers.constructor:
        return favoriteStickers.call(this as UpdateFavoriteStickers);
      case UpdateSavedAnimations.constructor:
        return savedAnimations.call(this as UpdateSavedAnimations);
      case UpdateSavedNotificationSounds.constructor:
        return savedNotificationSounds.call(
          this as UpdateSavedNotificationSounds,
        );
      case UpdateDefaultBackground.constructor:
        return defaultBackground.call(this as UpdateDefaultBackground);
      case UpdateChatThemes.constructor:
        return chatThemes.call(this as UpdateChatThemes);
      case UpdateAccentColors.constructor:
        return accentColors.call(this as UpdateAccentColors);
      case UpdateProfileAccentColors.constructor:
        return profileAccentColors.call(this as UpdateProfileAccentColors);
      case UpdateLanguagePackStrings.constructor:
        return languagePackStrings.call(this as UpdateLanguagePackStrings);
      case UpdateConnectionState.constructor:
        return connectionState.call(this as UpdateConnectionState);
      case UpdateFreezeState.constructor:
        return freezeState.call(this as UpdateFreezeState);
      case UpdateTermsOfService.constructor:
        return termsOfService.call(this as UpdateTermsOfService);
      case UpdateUnconfirmedSession.constructor:
        return unconfirmedSession.call(this as UpdateUnconfirmedSession);
      case UpdateAttachmentMenuBots.constructor:
        return attachmentMenuBots.call(this as UpdateAttachmentMenuBots);
      case UpdateWebAppMessageSent.constructor:
        return webAppMessageSent.call(this as UpdateWebAppMessageSent);
      case UpdateActiveEmojiReactions.constructor:
        return activeEmojiReactions.call(this as UpdateActiveEmojiReactions);
      case UpdateAvailableMessageEffects.constructor:
        return availableMessageEffects.call(
          this as UpdateAvailableMessageEffects,
        );
      case UpdateDefaultReactionType.constructor:
        return defaultReactionType.call(this as UpdateDefaultReactionType);
      case UpdateDefaultPaidReactionType.constructor:
        return defaultPaidReactionType.call(
          this as UpdateDefaultPaidReactionType,
        );
      case UpdateSavedMessagesTags.constructor:
        return savedMessagesTags.call(this as UpdateSavedMessagesTags);
      case UpdateActiveLiveLocationMessages.constructor:
        return activeLiveLocationMessages.call(
          this as UpdateActiveLiveLocationMessages,
        );
      case UpdateOwnedStarCount.constructor:
        return ownedStarCount.call(this as UpdateOwnedStarCount);
      case UpdateChatRevenueAmount.constructor:
        return chatRevenueAmount.call(this as UpdateChatRevenueAmount);
      case UpdateStarRevenueStatus.constructor:
        return starRevenueStatus.call(this as UpdateStarRevenueStatus);
      case UpdateSpeechRecognitionTrial.constructor:
        return speechRecognitionTrial.call(
          this as UpdateSpeechRecognitionTrial,
        );
      case UpdateDiceEmojis.constructor:
        return diceEmojis.call(this as UpdateDiceEmojis);
      case UpdateAnimatedEmojiMessageClicked.constructor:
        return animatedEmojiMessageClicked.call(
          this as UpdateAnimatedEmojiMessageClicked,
        );
      case UpdateAnimationSearchParameters.constructor:
        return animationSearchParameters.call(
          this as UpdateAnimationSearchParameters,
        );
      case UpdateSuggestedActions.constructor:
        return suggestedActions.call(this as UpdateSuggestedActions);
      case UpdateSpeedLimitNotification.constructor:
        return speedLimitNotification.call(
          this as UpdateSpeedLimitNotification,
        );
      case UpdateContactCloseBirthdays.constructor:
        return contactCloseBirthdays.call(this as UpdateContactCloseBirthdays);
      case UpdateAutosaveSettings.constructor:
        return autosaveSettings.call(this as UpdateAutosaveSettings);
      case UpdateBusinessConnection.constructor:
        return businessConnection.call(this as UpdateBusinessConnection);
      case UpdateNewBusinessMessage.constructor:
        return newBusinessMessage.call(this as UpdateNewBusinessMessage);
      case UpdateBusinessMessageEdited.constructor:
        return businessMessageEdited.call(this as UpdateBusinessMessageEdited);
      case UpdateBusinessMessagesDeleted.constructor:
        return businessMessagesDeleted.call(
          this as UpdateBusinessMessagesDeleted,
        );
      case UpdateNewInlineQuery.constructor:
        return newInlineQuery.call(this as UpdateNewInlineQuery);
      case UpdateNewChosenInlineResult.constructor:
        return newChosenInlineResult.call(this as UpdateNewChosenInlineResult);
      case UpdateNewCallbackQuery.constructor:
        return newCallbackQuery.call(this as UpdateNewCallbackQuery);
      case UpdateNewInlineCallbackQuery.constructor:
        return newInlineCallbackQuery.call(
          this as UpdateNewInlineCallbackQuery,
        );
      case UpdateNewBusinessCallbackQuery.constructor:
        return newBusinessCallbackQuery.call(
          this as UpdateNewBusinessCallbackQuery,
        );
      case UpdateNewShippingQuery.constructor:
        return newShippingQuery.call(this as UpdateNewShippingQuery);
      case UpdateNewPreCheckoutQuery.constructor:
        return newPreCheckoutQuery.call(this as UpdateNewPreCheckoutQuery);
      case UpdateNewCustomEvent.constructor:
        return newCustomEvent.call(this as UpdateNewCustomEvent);
      case UpdateNewCustomQuery.constructor:
        return newCustomQuery.call(this as UpdateNewCustomQuery);
      case UpdatePoll.constructor:
        return poll.call(this as UpdatePoll);
      case UpdatePollAnswer.constructor:
        return pollAnswer.call(this as UpdatePollAnswer);
      case UpdateChatMember.constructor:
        return chatMember.call(this as UpdateChatMember);
      case UpdateNewChatJoinRequest.constructor:
        return newChatJoinRequest.call(this as UpdateNewChatJoinRequest);
      case UpdateChatBoost.constructor:
        return chatBoost.call(this as UpdateChatBoost);
      case UpdateMessageReaction.constructor:
        return messageReaction.call(this as UpdateMessageReaction);
      case UpdateMessageReactions.constructor:
        return messageReactions.call(this as UpdateMessageReactions);
      case UpdatePaidMediaPurchased.constructor:
        return paidMediaPurchased.call(this as UpdatePaidMediaPurchased);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(UpdateAuthorizationState value)? authorizationState,
    TResult Function(UpdateNewMessage value)? newMessage,
    TResult Function(UpdateMessageSendAcknowledged value)?
    messageSendAcknowledged,
    TResult Function(UpdateMessageSendSucceeded value)? messageSendSucceeded,
    TResult Function(UpdateMessageSendFailed value)? messageSendFailed,
    TResult Function(UpdateMessageContent value)? messageContent,
    TResult Function(UpdateMessageEdited value)? messageEdited,
    TResult Function(UpdateMessageIsPinned value)? messageIsPinned,
    TResult Function(UpdateMessageInteractionInfo value)?
    messageInteractionInfo,
    TResult Function(UpdateMessageContentOpened value)? messageContentOpened,
    TResult Function(UpdateMessageMentionRead value)? messageMentionRead,
    TResult Function(UpdateMessageUnreadReactions value)?
    messageUnreadReactions,
    TResult Function(UpdateMessageFactCheck value)? messageFactCheck,
    TResult Function(UpdateMessageLiveLocationViewed value)?
    messageLiveLocationViewed,
    TResult Function(UpdateVideoPublished value)? videoPublished,
    TResult Function(UpdateNewChat value)? newChat,
    TResult Function(UpdateChatTitle value)? chatTitle,
    TResult Function(UpdateChatPhoto value)? chatPhoto,
    TResult Function(UpdateChatAccentColors value)? chatAccentColors,
    TResult Function(UpdateChatPermissions value)? chatPermissions,
    TResult Function(UpdateChatLastMessage value)? chatLastMessage,
    TResult Function(UpdateChatPosition value)? chatPosition,
    TResult Function(UpdateChatAddedToList value)? chatAddedToList,
    TResult Function(UpdateChatRemovedFromList value)? chatRemovedFromList,
    TResult Function(UpdateChatReadInbox value)? chatReadInbox,
    TResult Function(UpdateChatReadOutbox value)? chatReadOutbox,
    TResult Function(UpdateChatActionBar value)? chatActionBar,
    TResult Function(UpdateChatBusinessBotManageBar value)?
    chatBusinessBotManageBar,
    TResult Function(UpdateChatAvailableReactions value)?
    chatAvailableReactions,
    TResult Function(UpdateChatDraftMessage value)? chatDraftMessage,
    TResult Function(UpdateChatEmojiStatus value)? chatEmojiStatus,
    TResult Function(UpdateChatMessageSender value)? chatMessageSender,
    TResult Function(UpdateChatMessageAutoDeleteTime value)?
    chatMessageAutoDeleteTime,
    TResult Function(UpdateChatNotificationSettings value)?
    chatNotificationSettings,
    TResult Function(UpdateChatPendingJoinRequests value)?
    chatPendingJoinRequests,
    TResult Function(UpdateChatReplyMarkup value)? chatReplyMarkup,
    TResult Function(UpdateChatBackground value)? chatBackground,
    TResult Function(UpdateChatTheme value)? chatTheme,
    TResult Function(UpdateChatUnreadMentionCount value)?
    chatUnreadMentionCount,
    TResult Function(UpdateChatUnreadReactionCount value)?
    chatUnreadReactionCount,
    TResult Function(UpdateChatVideoChat value)? chatVideoChat,
    TResult Function(UpdateChatDefaultDisableNotification value)?
    chatDefaultDisableNotification,
    TResult Function(UpdateChatHasProtectedContent value)?
    chatHasProtectedContent,
    TResult Function(UpdateChatIsTranslatable value)? chatIsTranslatable,
    TResult Function(UpdateChatIsMarkedAsUnread value)? chatIsMarkedAsUnread,
    TResult Function(UpdateChatViewAsTopics value)? chatViewAsTopics,
    TResult Function(UpdateChatBlockList value)? chatBlockList,
    TResult Function(UpdateChatHasScheduledMessages value)?
    chatHasScheduledMessages,
    TResult Function(UpdateChatFolders value)? chatFolders,
    TResult Function(UpdateChatOnlineMemberCount value)? chatOnlineMemberCount,
    TResult Function(UpdateSavedMessagesTopic value)? savedMessagesTopic,
    TResult Function(UpdateSavedMessagesTopicCount value)?
    savedMessagesTopicCount,
    TResult Function(UpdateDirectMessagesChatTopic value)?
    directMessagesChatTopic,
    TResult Function(UpdateTopicMessageCount value)? topicMessageCount,
    TResult Function(UpdateQuickReplyShortcut value)? quickReplyShortcut,
    TResult Function(UpdateQuickReplyShortcutDeleted value)?
    quickReplyShortcutDeleted,
    TResult Function(UpdateQuickReplyShortcuts value)? quickReplyShortcuts,
    TResult Function(UpdateQuickReplyShortcutMessages value)?
    quickReplyShortcutMessages,
    TResult Function(UpdateForumTopicInfo value)? forumTopicInfo,
    TResult Function(UpdateForumTopic value)? forumTopic,
    TResult Function(UpdateScopeNotificationSettings value)?
    scopeNotificationSettings,
    TResult Function(UpdateReactionNotificationSettings value)?
    reactionNotificationSettings,
    TResult Function(UpdateNotification value)? notification,
    TResult Function(UpdateNotificationGroup value)? notificationGroup,
    TResult Function(UpdateActiveNotifications value)? activeNotifications,
    TResult Function(UpdateHavePendingNotifications value)?
    havePendingNotifications,
    TResult Function(UpdateDeleteMessages value)? deleteMessages,
    TResult Function(UpdateChatAction value)? chatAction,
    TResult Function(UpdateUserStatus value)? userStatus,
    TResult Function(UpdateUser value)? user,
    TResult Function(UpdateBasicGroup value)? basicGroup,
    TResult Function(UpdateSupergroup value)? supergroup,
    TResult Function(UpdateSecretChat value)? secretChat,
    TResult Function(UpdateUserFullInfo value)? userFullInfo,
    TResult Function(UpdateBasicGroupFullInfo value)? basicGroupFullInfo,
    TResult Function(UpdateSupergroupFullInfo value)? supergroupFullInfo,
    TResult Function(UpdateServiceNotification value)? serviceNotification,
    TResult Function(UpdateFile value)? file,
    TResult Function(UpdateFileGenerationStart value)? fileGenerationStart,
    TResult Function(UpdateFileGenerationStop value)? fileGenerationStop,
    TResult Function(UpdateFileDownloads value)? fileDownloads,
    TResult Function(UpdateFileAddedToDownloads value)? fileAddedToDownloads,
    TResult Function(UpdateFileDownload value)? fileDownload,
    TResult Function(UpdateFileRemovedFromDownloads value)?
    fileRemovedFromDownloads,
    TResult Function(UpdateApplicationVerificationRequired value)?
    applicationVerificationRequired,
    TResult Function(UpdateApplicationRecaptchaVerificationRequired value)?
    applicationRecaptchaVerificationRequired,
    TResult Function(UpdateCall value)? call,
    TResult Function(UpdateGroupCall value)? groupCall,
    TResult Function(UpdateGroupCallParticipant value)? groupCallParticipant,
    TResult Function(UpdateGroupCallParticipants value)? groupCallParticipants,
    TResult Function(UpdateGroupCallVerificationState value)?
    groupCallVerificationState,
    TResult Function(UpdateNewCallSignalingData value)? newCallSignalingData,
    TResult Function(UpdateUserPrivacySettingRules value)?
    userPrivacySettingRules,
    TResult Function(UpdateUnreadMessageCount value)? unreadMessageCount,
    TResult Function(UpdateUnreadChatCount value)? unreadChatCount,
    TResult Function(UpdateStory value)? story,
    TResult Function(UpdateStoryDeleted value)? storyDeleted,
    TResult Function(UpdateStoryPostSucceeded value)? storyPostSucceeded,
    TResult Function(UpdateStoryPostFailed value)? storyPostFailed,
    TResult Function(UpdateChatActiveStories value)? chatActiveStories,
    TResult Function(UpdateStoryListChatCount value)? storyListChatCount,
    TResult Function(UpdateStoryStealthMode value)? storyStealthMode,
    TResult Function(UpdateOption value)? option,
    TResult Function(UpdateStickerSet value)? stickerSet,
    TResult Function(UpdateInstalledStickerSets value)? installedStickerSets,
    TResult Function(UpdateTrendingStickerSets value)? trendingStickerSets,
    TResult Function(UpdateRecentStickers value)? recentStickers,
    TResult Function(UpdateFavoriteStickers value)? favoriteStickers,
    TResult Function(UpdateSavedAnimations value)? savedAnimations,
    TResult Function(UpdateSavedNotificationSounds value)?
    savedNotificationSounds,
    TResult Function(UpdateDefaultBackground value)? defaultBackground,
    TResult Function(UpdateChatThemes value)? chatThemes,
    TResult Function(UpdateAccentColors value)? accentColors,
    TResult Function(UpdateProfileAccentColors value)? profileAccentColors,
    TResult Function(UpdateLanguagePackStrings value)? languagePackStrings,
    TResult Function(UpdateConnectionState value)? connectionState,
    TResult Function(UpdateFreezeState value)? freezeState,
    TResult Function(UpdateTermsOfService value)? termsOfService,
    TResult Function(UpdateUnconfirmedSession value)? unconfirmedSession,
    TResult Function(UpdateAttachmentMenuBots value)? attachmentMenuBots,
    TResult Function(UpdateWebAppMessageSent value)? webAppMessageSent,
    TResult Function(UpdateActiveEmojiReactions value)? activeEmojiReactions,
    TResult Function(UpdateAvailableMessageEffects value)?
    availableMessageEffects,
    TResult Function(UpdateDefaultReactionType value)? defaultReactionType,
    TResult Function(UpdateDefaultPaidReactionType value)?
    defaultPaidReactionType,
    TResult Function(UpdateSavedMessagesTags value)? savedMessagesTags,
    TResult Function(UpdateActiveLiveLocationMessages value)?
    activeLiveLocationMessages,
    TResult Function(UpdateOwnedStarCount value)? ownedStarCount,
    TResult Function(UpdateChatRevenueAmount value)? chatRevenueAmount,
    TResult Function(UpdateStarRevenueStatus value)? starRevenueStatus,
    TResult Function(UpdateSpeechRecognitionTrial value)?
    speechRecognitionTrial,
    TResult Function(UpdateDiceEmojis value)? diceEmojis,
    TResult Function(UpdateAnimatedEmojiMessageClicked value)?
    animatedEmojiMessageClicked,
    TResult Function(UpdateAnimationSearchParameters value)?
    animationSearchParameters,
    TResult Function(UpdateSuggestedActions value)? suggestedActions,
    TResult Function(UpdateSpeedLimitNotification value)?
    speedLimitNotification,
    TResult Function(UpdateContactCloseBirthdays value)? contactCloseBirthdays,
    TResult Function(UpdateAutosaveSettings value)? autosaveSettings,
    TResult Function(UpdateBusinessConnection value)? businessConnection,
    TResult Function(UpdateNewBusinessMessage value)? newBusinessMessage,
    TResult Function(UpdateBusinessMessageEdited value)? businessMessageEdited,
    TResult Function(UpdateBusinessMessagesDeleted value)?
    businessMessagesDeleted,
    TResult Function(UpdateNewInlineQuery value)? newInlineQuery,
    TResult Function(UpdateNewChosenInlineResult value)? newChosenInlineResult,
    TResult Function(UpdateNewCallbackQuery value)? newCallbackQuery,
    TResult Function(UpdateNewInlineCallbackQuery value)?
    newInlineCallbackQuery,
    TResult Function(UpdateNewBusinessCallbackQuery value)?
    newBusinessCallbackQuery,
    TResult Function(UpdateNewShippingQuery value)? newShippingQuery,
    TResult Function(UpdateNewPreCheckoutQuery value)? newPreCheckoutQuery,
    TResult Function(UpdateNewCustomEvent value)? newCustomEvent,
    TResult Function(UpdateNewCustomQuery value)? newCustomQuery,
    TResult Function(UpdatePoll value)? poll,
    TResult Function(UpdatePollAnswer value)? pollAnswer,
    TResult Function(UpdateChatMember value)? chatMember,
    TResult Function(UpdateNewChatJoinRequest value)? newChatJoinRequest,
    TResult Function(UpdateChatBoost value)? chatBoost,
    TResult Function(UpdateMessageReaction value)? messageReaction,
    TResult Function(UpdateMessageReactions value)? messageReactions,
    TResult Function(UpdatePaidMediaPurchased value)? paidMediaPurchased,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case UpdateAuthorizationState.constructor:
        if (authorizationState != null) {
          return authorizationState.call(this as UpdateAuthorizationState);
        }
        break;
      case UpdateNewMessage.constructor:
        if (newMessage != null) {
          return newMessage.call(this as UpdateNewMessage);
        }
        break;
      case UpdateMessageSendAcknowledged.constructor:
        if (messageSendAcknowledged != null) {
          return messageSendAcknowledged.call(
            this as UpdateMessageSendAcknowledged,
          );
        }
        break;
      case UpdateMessageSendSucceeded.constructor:
        if (messageSendSucceeded != null) {
          return messageSendSucceeded.call(this as UpdateMessageSendSucceeded);
        }
        break;
      case UpdateMessageSendFailed.constructor:
        if (messageSendFailed != null) {
          return messageSendFailed.call(this as UpdateMessageSendFailed);
        }
        break;
      case UpdateMessageContent.constructor:
        if (messageContent != null) {
          return messageContent.call(this as UpdateMessageContent);
        }
        break;
      case UpdateMessageEdited.constructor:
        if (messageEdited != null) {
          return messageEdited.call(this as UpdateMessageEdited);
        }
        break;
      case UpdateMessageIsPinned.constructor:
        if (messageIsPinned != null) {
          return messageIsPinned.call(this as UpdateMessageIsPinned);
        }
        break;
      case UpdateMessageInteractionInfo.constructor:
        if (messageInteractionInfo != null) {
          return messageInteractionInfo.call(
            this as UpdateMessageInteractionInfo,
          );
        }
        break;
      case UpdateMessageContentOpened.constructor:
        if (messageContentOpened != null) {
          return messageContentOpened.call(this as UpdateMessageContentOpened);
        }
        break;
      case UpdateMessageMentionRead.constructor:
        if (messageMentionRead != null) {
          return messageMentionRead.call(this as UpdateMessageMentionRead);
        }
        break;
      case UpdateMessageUnreadReactions.constructor:
        if (messageUnreadReactions != null) {
          return messageUnreadReactions.call(
            this as UpdateMessageUnreadReactions,
          );
        }
        break;
      case UpdateMessageFactCheck.constructor:
        if (messageFactCheck != null) {
          return messageFactCheck.call(this as UpdateMessageFactCheck);
        }
        break;
      case UpdateMessageLiveLocationViewed.constructor:
        if (messageLiveLocationViewed != null) {
          return messageLiveLocationViewed.call(
            this as UpdateMessageLiveLocationViewed,
          );
        }
        break;
      case UpdateVideoPublished.constructor:
        if (videoPublished != null) {
          return videoPublished.call(this as UpdateVideoPublished);
        }
        break;
      case UpdateNewChat.constructor:
        if (newChat != null) {
          return newChat.call(this as UpdateNewChat);
        }
        break;
      case UpdateChatTitle.constructor:
        if (chatTitle != null) {
          return chatTitle.call(this as UpdateChatTitle);
        }
        break;
      case UpdateChatPhoto.constructor:
        if (chatPhoto != null) {
          return chatPhoto.call(this as UpdateChatPhoto);
        }
        break;
      case UpdateChatAccentColors.constructor:
        if (chatAccentColors != null) {
          return chatAccentColors.call(this as UpdateChatAccentColors);
        }
        break;
      case UpdateChatPermissions.constructor:
        if (chatPermissions != null) {
          return chatPermissions.call(this as UpdateChatPermissions);
        }
        break;
      case UpdateChatLastMessage.constructor:
        if (chatLastMessage != null) {
          return chatLastMessage.call(this as UpdateChatLastMessage);
        }
        break;
      case UpdateChatPosition.constructor:
        if (chatPosition != null) {
          return chatPosition.call(this as UpdateChatPosition);
        }
        break;
      case UpdateChatAddedToList.constructor:
        if (chatAddedToList != null) {
          return chatAddedToList.call(this as UpdateChatAddedToList);
        }
        break;
      case UpdateChatRemovedFromList.constructor:
        if (chatRemovedFromList != null) {
          return chatRemovedFromList.call(this as UpdateChatRemovedFromList);
        }
        break;
      case UpdateChatReadInbox.constructor:
        if (chatReadInbox != null) {
          return chatReadInbox.call(this as UpdateChatReadInbox);
        }
        break;
      case UpdateChatReadOutbox.constructor:
        if (chatReadOutbox != null) {
          return chatReadOutbox.call(this as UpdateChatReadOutbox);
        }
        break;
      case UpdateChatActionBar.constructor:
        if (chatActionBar != null) {
          return chatActionBar.call(this as UpdateChatActionBar);
        }
        break;
      case UpdateChatBusinessBotManageBar.constructor:
        if (chatBusinessBotManageBar != null) {
          return chatBusinessBotManageBar.call(
            this as UpdateChatBusinessBotManageBar,
          );
        }
        break;
      case UpdateChatAvailableReactions.constructor:
        if (chatAvailableReactions != null) {
          return chatAvailableReactions.call(
            this as UpdateChatAvailableReactions,
          );
        }
        break;
      case UpdateChatDraftMessage.constructor:
        if (chatDraftMessage != null) {
          return chatDraftMessage.call(this as UpdateChatDraftMessage);
        }
        break;
      case UpdateChatEmojiStatus.constructor:
        if (chatEmojiStatus != null) {
          return chatEmojiStatus.call(this as UpdateChatEmojiStatus);
        }
        break;
      case UpdateChatMessageSender.constructor:
        if (chatMessageSender != null) {
          return chatMessageSender.call(this as UpdateChatMessageSender);
        }
        break;
      case UpdateChatMessageAutoDeleteTime.constructor:
        if (chatMessageAutoDeleteTime != null) {
          return chatMessageAutoDeleteTime.call(
            this as UpdateChatMessageAutoDeleteTime,
          );
        }
        break;
      case UpdateChatNotificationSettings.constructor:
        if (chatNotificationSettings != null) {
          return chatNotificationSettings.call(
            this as UpdateChatNotificationSettings,
          );
        }
        break;
      case UpdateChatPendingJoinRequests.constructor:
        if (chatPendingJoinRequests != null) {
          return chatPendingJoinRequests.call(
            this as UpdateChatPendingJoinRequests,
          );
        }
        break;
      case UpdateChatReplyMarkup.constructor:
        if (chatReplyMarkup != null) {
          return chatReplyMarkup.call(this as UpdateChatReplyMarkup);
        }
        break;
      case UpdateChatBackground.constructor:
        if (chatBackground != null) {
          return chatBackground.call(this as UpdateChatBackground);
        }
        break;
      case UpdateChatTheme.constructor:
        if (chatTheme != null) {
          return chatTheme.call(this as UpdateChatTheme);
        }
        break;
      case UpdateChatUnreadMentionCount.constructor:
        if (chatUnreadMentionCount != null) {
          return chatUnreadMentionCount.call(
            this as UpdateChatUnreadMentionCount,
          );
        }
        break;
      case UpdateChatUnreadReactionCount.constructor:
        if (chatUnreadReactionCount != null) {
          return chatUnreadReactionCount.call(
            this as UpdateChatUnreadReactionCount,
          );
        }
        break;
      case UpdateChatVideoChat.constructor:
        if (chatVideoChat != null) {
          return chatVideoChat.call(this as UpdateChatVideoChat);
        }
        break;
      case UpdateChatDefaultDisableNotification.constructor:
        if (chatDefaultDisableNotification != null) {
          return chatDefaultDisableNotification.call(
            this as UpdateChatDefaultDisableNotification,
          );
        }
        break;
      case UpdateChatHasProtectedContent.constructor:
        if (chatHasProtectedContent != null) {
          return chatHasProtectedContent.call(
            this as UpdateChatHasProtectedContent,
          );
        }
        break;
      case UpdateChatIsTranslatable.constructor:
        if (chatIsTranslatable != null) {
          return chatIsTranslatable.call(this as UpdateChatIsTranslatable);
        }
        break;
      case UpdateChatIsMarkedAsUnread.constructor:
        if (chatIsMarkedAsUnread != null) {
          return chatIsMarkedAsUnread.call(this as UpdateChatIsMarkedAsUnread);
        }
        break;
      case UpdateChatViewAsTopics.constructor:
        if (chatViewAsTopics != null) {
          return chatViewAsTopics.call(this as UpdateChatViewAsTopics);
        }
        break;
      case UpdateChatBlockList.constructor:
        if (chatBlockList != null) {
          return chatBlockList.call(this as UpdateChatBlockList);
        }
        break;
      case UpdateChatHasScheduledMessages.constructor:
        if (chatHasScheduledMessages != null) {
          return chatHasScheduledMessages.call(
            this as UpdateChatHasScheduledMessages,
          );
        }
        break;
      case UpdateChatFolders.constructor:
        if (chatFolders != null) {
          return chatFolders.call(this as UpdateChatFolders);
        }
        break;
      case UpdateChatOnlineMemberCount.constructor:
        if (chatOnlineMemberCount != null) {
          return chatOnlineMemberCount.call(
            this as UpdateChatOnlineMemberCount,
          );
        }
        break;
      case UpdateSavedMessagesTopic.constructor:
        if (savedMessagesTopic != null) {
          return savedMessagesTopic.call(this as UpdateSavedMessagesTopic);
        }
        break;
      case UpdateSavedMessagesTopicCount.constructor:
        if (savedMessagesTopicCount != null) {
          return savedMessagesTopicCount.call(
            this as UpdateSavedMessagesTopicCount,
          );
        }
        break;
      case UpdateDirectMessagesChatTopic.constructor:
        if (directMessagesChatTopic != null) {
          return directMessagesChatTopic.call(
            this as UpdateDirectMessagesChatTopic,
          );
        }
        break;
      case UpdateTopicMessageCount.constructor:
        if (topicMessageCount != null) {
          return topicMessageCount.call(this as UpdateTopicMessageCount);
        }
        break;
      case UpdateQuickReplyShortcut.constructor:
        if (quickReplyShortcut != null) {
          return quickReplyShortcut.call(this as UpdateQuickReplyShortcut);
        }
        break;
      case UpdateQuickReplyShortcutDeleted.constructor:
        if (quickReplyShortcutDeleted != null) {
          return quickReplyShortcutDeleted.call(
            this as UpdateQuickReplyShortcutDeleted,
          );
        }
        break;
      case UpdateQuickReplyShortcuts.constructor:
        if (quickReplyShortcuts != null) {
          return quickReplyShortcuts.call(this as UpdateQuickReplyShortcuts);
        }
        break;
      case UpdateQuickReplyShortcutMessages.constructor:
        if (quickReplyShortcutMessages != null) {
          return quickReplyShortcutMessages.call(
            this as UpdateQuickReplyShortcutMessages,
          );
        }
        break;
      case UpdateForumTopicInfo.constructor:
        if (forumTopicInfo != null) {
          return forumTopicInfo.call(this as UpdateForumTopicInfo);
        }
        break;
      case UpdateForumTopic.constructor:
        if (forumTopic != null) {
          return forumTopic.call(this as UpdateForumTopic);
        }
        break;
      case UpdateScopeNotificationSettings.constructor:
        if (scopeNotificationSettings != null) {
          return scopeNotificationSettings.call(
            this as UpdateScopeNotificationSettings,
          );
        }
        break;
      case UpdateReactionNotificationSettings.constructor:
        if (reactionNotificationSettings != null) {
          return reactionNotificationSettings.call(
            this as UpdateReactionNotificationSettings,
          );
        }
        break;
      case UpdateNotification.constructor:
        if (notification != null) {
          return notification.call(this as UpdateNotification);
        }
        break;
      case UpdateNotificationGroup.constructor:
        if (notificationGroup != null) {
          return notificationGroup.call(this as UpdateNotificationGroup);
        }
        break;
      case UpdateActiveNotifications.constructor:
        if (activeNotifications != null) {
          return activeNotifications.call(this as UpdateActiveNotifications);
        }
        break;
      case UpdateHavePendingNotifications.constructor:
        if (havePendingNotifications != null) {
          return havePendingNotifications.call(
            this as UpdateHavePendingNotifications,
          );
        }
        break;
      case UpdateDeleteMessages.constructor:
        if (deleteMessages != null) {
          return deleteMessages.call(this as UpdateDeleteMessages);
        }
        break;
      case UpdateChatAction.constructor:
        if (chatAction != null) {
          return chatAction.call(this as UpdateChatAction);
        }
        break;
      case UpdateUserStatus.constructor:
        if (userStatus != null) {
          return userStatus.call(this as UpdateUserStatus);
        }
        break;
      case UpdateUser.constructor:
        if (user != null) {
          return user.call(this as UpdateUser);
        }
        break;
      case UpdateBasicGroup.constructor:
        if (basicGroup != null) {
          return basicGroup.call(this as UpdateBasicGroup);
        }
        break;
      case UpdateSupergroup.constructor:
        if (supergroup != null) {
          return supergroup.call(this as UpdateSupergroup);
        }
        break;
      case UpdateSecretChat.constructor:
        if (secretChat != null) {
          return secretChat.call(this as UpdateSecretChat);
        }
        break;
      case UpdateUserFullInfo.constructor:
        if (userFullInfo != null) {
          return userFullInfo.call(this as UpdateUserFullInfo);
        }
        break;
      case UpdateBasicGroupFullInfo.constructor:
        if (basicGroupFullInfo != null) {
          return basicGroupFullInfo.call(this as UpdateBasicGroupFullInfo);
        }
        break;
      case UpdateSupergroupFullInfo.constructor:
        if (supergroupFullInfo != null) {
          return supergroupFullInfo.call(this as UpdateSupergroupFullInfo);
        }
        break;
      case UpdateServiceNotification.constructor:
        if (serviceNotification != null) {
          return serviceNotification.call(this as UpdateServiceNotification);
        }
        break;
      case UpdateFile.constructor:
        if (file != null) {
          return file.call(this as UpdateFile);
        }
        break;
      case UpdateFileGenerationStart.constructor:
        if (fileGenerationStart != null) {
          return fileGenerationStart.call(this as UpdateFileGenerationStart);
        }
        break;
      case UpdateFileGenerationStop.constructor:
        if (fileGenerationStop != null) {
          return fileGenerationStop.call(this as UpdateFileGenerationStop);
        }
        break;
      case UpdateFileDownloads.constructor:
        if (fileDownloads != null) {
          return fileDownloads.call(this as UpdateFileDownloads);
        }
        break;
      case UpdateFileAddedToDownloads.constructor:
        if (fileAddedToDownloads != null) {
          return fileAddedToDownloads.call(this as UpdateFileAddedToDownloads);
        }
        break;
      case UpdateFileDownload.constructor:
        if (fileDownload != null) {
          return fileDownload.call(this as UpdateFileDownload);
        }
        break;
      case UpdateFileRemovedFromDownloads.constructor:
        if (fileRemovedFromDownloads != null) {
          return fileRemovedFromDownloads.call(
            this as UpdateFileRemovedFromDownloads,
          );
        }
        break;
      case UpdateApplicationVerificationRequired.constructor:
        if (applicationVerificationRequired != null) {
          return applicationVerificationRequired.call(
            this as UpdateApplicationVerificationRequired,
          );
        }
        break;
      case UpdateApplicationRecaptchaVerificationRequired.constructor:
        if (applicationRecaptchaVerificationRequired != null) {
          return applicationRecaptchaVerificationRequired.call(
            this as UpdateApplicationRecaptchaVerificationRequired,
          );
        }
        break;
      case UpdateCall.constructor:
        if (call != null) {
          return call.call(this as UpdateCall);
        }
        break;
      case UpdateGroupCall.constructor:
        if (groupCall != null) {
          return groupCall.call(this as UpdateGroupCall);
        }
        break;
      case UpdateGroupCallParticipant.constructor:
        if (groupCallParticipant != null) {
          return groupCallParticipant.call(this as UpdateGroupCallParticipant);
        }
        break;
      case UpdateGroupCallParticipants.constructor:
        if (groupCallParticipants != null) {
          return groupCallParticipants.call(
            this as UpdateGroupCallParticipants,
          );
        }
        break;
      case UpdateGroupCallVerificationState.constructor:
        if (groupCallVerificationState != null) {
          return groupCallVerificationState.call(
            this as UpdateGroupCallVerificationState,
          );
        }
        break;
      case UpdateNewCallSignalingData.constructor:
        if (newCallSignalingData != null) {
          return newCallSignalingData.call(this as UpdateNewCallSignalingData);
        }
        break;
      case UpdateUserPrivacySettingRules.constructor:
        if (userPrivacySettingRules != null) {
          return userPrivacySettingRules.call(
            this as UpdateUserPrivacySettingRules,
          );
        }
        break;
      case UpdateUnreadMessageCount.constructor:
        if (unreadMessageCount != null) {
          return unreadMessageCount.call(this as UpdateUnreadMessageCount);
        }
        break;
      case UpdateUnreadChatCount.constructor:
        if (unreadChatCount != null) {
          return unreadChatCount.call(this as UpdateUnreadChatCount);
        }
        break;
      case UpdateStory.constructor:
        if (story != null) {
          return story.call(this as UpdateStory);
        }
        break;
      case UpdateStoryDeleted.constructor:
        if (storyDeleted != null) {
          return storyDeleted.call(this as UpdateStoryDeleted);
        }
        break;
      case UpdateStoryPostSucceeded.constructor:
        if (storyPostSucceeded != null) {
          return storyPostSucceeded.call(this as UpdateStoryPostSucceeded);
        }
        break;
      case UpdateStoryPostFailed.constructor:
        if (storyPostFailed != null) {
          return storyPostFailed.call(this as UpdateStoryPostFailed);
        }
        break;
      case UpdateChatActiveStories.constructor:
        if (chatActiveStories != null) {
          return chatActiveStories.call(this as UpdateChatActiveStories);
        }
        break;
      case UpdateStoryListChatCount.constructor:
        if (storyListChatCount != null) {
          return storyListChatCount.call(this as UpdateStoryListChatCount);
        }
        break;
      case UpdateStoryStealthMode.constructor:
        if (storyStealthMode != null) {
          return storyStealthMode.call(this as UpdateStoryStealthMode);
        }
        break;
      case UpdateOption.constructor:
        if (option != null) {
          return option.call(this as UpdateOption);
        }
        break;
      case UpdateStickerSet.constructor:
        if (stickerSet != null) {
          return stickerSet.call(this as UpdateStickerSet);
        }
        break;
      case UpdateInstalledStickerSets.constructor:
        if (installedStickerSets != null) {
          return installedStickerSets.call(this as UpdateInstalledStickerSets);
        }
        break;
      case UpdateTrendingStickerSets.constructor:
        if (trendingStickerSets != null) {
          return trendingStickerSets.call(this as UpdateTrendingStickerSets);
        }
        break;
      case UpdateRecentStickers.constructor:
        if (recentStickers != null) {
          return recentStickers.call(this as UpdateRecentStickers);
        }
        break;
      case UpdateFavoriteStickers.constructor:
        if (favoriteStickers != null) {
          return favoriteStickers.call(this as UpdateFavoriteStickers);
        }
        break;
      case UpdateSavedAnimations.constructor:
        if (savedAnimations != null) {
          return savedAnimations.call(this as UpdateSavedAnimations);
        }
        break;
      case UpdateSavedNotificationSounds.constructor:
        if (savedNotificationSounds != null) {
          return savedNotificationSounds.call(
            this as UpdateSavedNotificationSounds,
          );
        }
        break;
      case UpdateDefaultBackground.constructor:
        if (defaultBackground != null) {
          return defaultBackground.call(this as UpdateDefaultBackground);
        }
        break;
      case UpdateChatThemes.constructor:
        if (chatThemes != null) {
          return chatThemes.call(this as UpdateChatThemes);
        }
        break;
      case UpdateAccentColors.constructor:
        if (accentColors != null) {
          return accentColors.call(this as UpdateAccentColors);
        }
        break;
      case UpdateProfileAccentColors.constructor:
        if (profileAccentColors != null) {
          return profileAccentColors.call(this as UpdateProfileAccentColors);
        }
        break;
      case UpdateLanguagePackStrings.constructor:
        if (languagePackStrings != null) {
          return languagePackStrings.call(this as UpdateLanguagePackStrings);
        }
        break;
      case UpdateConnectionState.constructor:
        if (connectionState != null) {
          return connectionState.call(this as UpdateConnectionState);
        }
        break;
      case UpdateFreezeState.constructor:
        if (freezeState != null) {
          return freezeState.call(this as UpdateFreezeState);
        }
        break;
      case UpdateTermsOfService.constructor:
        if (termsOfService != null) {
          return termsOfService.call(this as UpdateTermsOfService);
        }
        break;
      case UpdateUnconfirmedSession.constructor:
        if (unconfirmedSession != null) {
          return unconfirmedSession.call(this as UpdateUnconfirmedSession);
        }
        break;
      case UpdateAttachmentMenuBots.constructor:
        if (attachmentMenuBots != null) {
          return attachmentMenuBots.call(this as UpdateAttachmentMenuBots);
        }
        break;
      case UpdateWebAppMessageSent.constructor:
        if (webAppMessageSent != null) {
          return webAppMessageSent.call(this as UpdateWebAppMessageSent);
        }
        break;
      case UpdateActiveEmojiReactions.constructor:
        if (activeEmojiReactions != null) {
          return activeEmojiReactions.call(this as UpdateActiveEmojiReactions);
        }
        break;
      case UpdateAvailableMessageEffects.constructor:
        if (availableMessageEffects != null) {
          return availableMessageEffects.call(
            this as UpdateAvailableMessageEffects,
          );
        }
        break;
      case UpdateDefaultReactionType.constructor:
        if (defaultReactionType != null) {
          return defaultReactionType.call(this as UpdateDefaultReactionType);
        }
        break;
      case UpdateDefaultPaidReactionType.constructor:
        if (defaultPaidReactionType != null) {
          return defaultPaidReactionType.call(
            this as UpdateDefaultPaidReactionType,
          );
        }
        break;
      case UpdateSavedMessagesTags.constructor:
        if (savedMessagesTags != null) {
          return savedMessagesTags.call(this as UpdateSavedMessagesTags);
        }
        break;
      case UpdateActiveLiveLocationMessages.constructor:
        if (activeLiveLocationMessages != null) {
          return activeLiveLocationMessages.call(
            this as UpdateActiveLiveLocationMessages,
          );
        }
        break;
      case UpdateOwnedStarCount.constructor:
        if (ownedStarCount != null) {
          return ownedStarCount.call(this as UpdateOwnedStarCount);
        }
        break;
      case UpdateChatRevenueAmount.constructor:
        if (chatRevenueAmount != null) {
          return chatRevenueAmount.call(this as UpdateChatRevenueAmount);
        }
        break;
      case UpdateStarRevenueStatus.constructor:
        if (starRevenueStatus != null) {
          return starRevenueStatus.call(this as UpdateStarRevenueStatus);
        }
        break;
      case UpdateSpeechRecognitionTrial.constructor:
        if (speechRecognitionTrial != null) {
          return speechRecognitionTrial.call(
            this as UpdateSpeechRecognitionTrial,
          );
        }
        break;
      case UpdateDiceEmojis.constructor:
        if (diceEmojis != null) {
          return diceEmojis.call(this as UpdateDiceEmojis);
        }
        break;
      case UpdateAnimatedEmojiMessageClicked.constructor:
        if (animatedEmojiMessageClicked != null) {
          return animatedEmojiMessageClicked.call(
            this as UpdateAnimatedEmojiMessageClicked,
          );
        }
        break;
      case UpdateAnimationSearchParameters.constructor:
        if (animationSearchParameters != null) {
          return animationSearchParameters.call(
            this as UpdateAnimationSearchParameters,
          );
        }
        break;
      case UpdateSuggestedActions.constructor:
        if (suggestedActions != null) {
          return suggestedActions.call(this as UpdateSuggestedActions);
        }
        break;
      case UpdateSpeedLimitNotification.constructor:
        if (speedLimitNotification != null) {
          return speedLimitNotification.call(
            this as UpdateSpeedLimitNotification,
          );
        }
        break;
      case UpdateContactCloseBirthdays.constructor:
        if (contactCloseBirthdays != null) {
          return contactCloseBirthdays.call(
            this as UpdateContactCloseBirthdays,
          );
        }
        break;
      case UpdateAutosaveSettings.constructor:
        if (autosaveSettings != null) {
          return autosaveSettings.call(this as UpdateAutosaveSettings);
        }
        break;
      case UpdateBusinessConnection.constructor:
        if (businessConnection != null) {
          return businessConnection.call(this as UpdateBusinessConnection);
        }
        break;
      case UpdateNewBusinessMessage.constructor:
        if (newBusinessMessage != null) {
          return newBusinessMessage.call(this as UpdateNewBusinessMessage);
        }
        break;
      case UpdateBusinessMessageEdited.constructor:
        if (businessMessageEdited != null) {
          return businessMessageEdited.call(
            this as UpdateBusinessMessageEdited,
          );
        }
        break;
      case UpdateBusinessMessagesDeleted.constructor:
        if (businessMessagesDeleted != null) {
          return businessMessagesDeleted.call(
            this as UpdateBusinessMessagesDeleted,
          );
        }
        break;
      case UpdateNewInlineQuery.constructor:
        if (newInlineQuery != null) {
          return newInlineQuery.call(this as UpdateNewInlineQuery);
        }
        break;
      case UpdateNewChosenInlineResult.constructor:
        if (newChosenInlineResult != null) {
          return newChosenInlineResult.call(
            this as UpdateNewChosenInlineResult,
          );
        }
        break;
      case UpdateNewCallbackQuery.constructor:
        if (newCallbackQuery != null) {
          return newCallbackQuery.call(this as UpdateNewCallbackQuery);
        }
        break;
      case UpdateNewInlineCallbackQuery.constructor:
        if (newInlineCallbackQuery != null) {
          return newInlineCallbackQuery.call(
            this as UpdateNewInlineCallbackQuery,
          );
        }
        break;
      case UpdateNewBusinessCallbackQuery.constructor:
        if (newBusinessCallbackQuery != null) {
          return newBusinessCallbackQuery.call(
            this as UpdateNewBusinessCallbackQuery,
          );
        }
        break;
      case UpdateNewShippingQuery.constructor:
        if (newShippingQuery != null) {
          return newShippingQuery.call(this as UpdateNewShippingQuery);
        }
        break;
      case UpdateNewPreCheckoutQuery.constructor:
        if (newPreCheckoutQuery != null) {
          return newPreCheckoutQuery.call(this as UpdateNewPreCheckoutQuery);
        }
        break;
      case UpdateNewCustomEvent.constructor:
        if (newCustomEvent != null) {
          return newCustomEvent.call(this as UpdateNewCustomEvent);
        }
        break;
      case UpdateNewCustomQuery.constructor:
        if (newCustomQuery != null) {
          return newCustomQuery.call(this as UpdateNewCustomQuery);
        }
        break;
      case UpdatePoll.constructor:
        if (poll != null) {
          return poll.call(this as UpdatePoll);
        }
        break;
      case UpdatePollAnswer.constructor:
        if (pollAnswer != null) {
          return pollAnswer.call(this as UpdatePollAnswer);
        }
        break;
      case UpdateChatMember.constructor:
        if (chatMember != null) {
          return chatMember.call(this as UpdateChatMember);
        }
        break;
      case UpdateNewChatJoinRequest.constructor:
        if (newChatJoinRequest != null) {
          return newChatJoinRequest.call(this as UpdateNewChatJoinRequest);
        }
        break;
      case UpdateChatBoost.constructor:
        if (chatBoost != null) {
          return chatBoost.call(this as UpdateChatBoost);
        }
        break;
      case UpdateMessageReaction.constructor:
        if (messageReaction != null) {
          return messageReaction.call(this as UpdateMessageReaction);
        }
        break;
      case UpdateMessageReactions.constructor:
        if (messageReactions != null) {
          return messageReactions.call(this as UpdateMessageReactions);
        }
        break;
      case UpdatePaidMediaPurchased.constructor:
        if (paidMediaPurchased != null) {
          return paidMediaPurchased.call(this as UpdatePaidMediaPurchased);
        }
        break;
    }
    return orElse.call();
  }
}

extension UpdateAuthorizationStateExtensions on UpdateAuthorizationState {
  UpdateAuthorizationState copyWith({AuthorizationState? authorizationState}) =>
      UpdateAuthorizationState(
        authorizationState: authorizationState ?? this.authorizationState,
      );
}

extension UpdateNewMessageExtensions on UpdateNewMessage {
  UpdateNewMessage copyWith({Message? message}) =>
      UpdateNewMessage(message: message ?? this.message);
}

extension UpdateMessageSendAcknowledgedExtensions
    on UpdateMessageSendAcknowledged {
  UpdateMessageSendAcknowledged copyWith({int? chatId, int? messageId}) =>
      UpdateMessageSendAcknowledged(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension UpdateMessageSendSucceededExtensions on UpdateMessageSendSucceeded {
  UpdateMessageSendSucceeded copyWith({Message? message, int? oldMessageId}) =>
      UpdateMessageSendSucceeded(
        message: message ?? this.message,
        oldMessageId: oldMessageId ?? this.oldMessageId,
      );
}

extension UpdateMessageSendFailedExtensions on UpdateMessageSendFailed {
  UpdateMessageSendFailed copyWith({
    Message? message,
    int? oldMessageId,
    TdError? error,
  }) => UpdateMessageSendFailed(
    message: message ?? this.message,
    oldMessageId: oldMessageId ?? this.oldMessageId,
    error: error ?? this.error,
  );
}

extension UpdateMessageContentExtensions on UpdateMessageContent {
  UpdateMessageContent copyWith({
    int? chatId,
    int? messageId,
    MessageContent? newContent,
  }) => UpdateMessageContent(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    newContent: newContent ?? this.newContent,
  );
}

extension UpdateMessageEditedExtensions on UpdateMessageEdited {
  UpdateMessageEdited copyWith({
    int? chatId,
    int? messageId,
    int? editDate,
    ReplyMarkup? replyMarkup,
  }) => UpdateMessageEdited(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    editDate: editDate ?? this.editDate,
    replyMarkup: replyMarkup ?? this.replyMarkup,
  );
}

extension UpdateMessageIsPinnedExtensions on UpdateMessageIsPinned {
  UpdateMessageIsPinned copyWith({
    int? chatId,
    int? messageId,
    bool? isPinned,
  }) => UpdateMessageIsPinned(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    isPinned: isPinned ?? this.isPinned,
  );
}

extension UpdateMessageInteractionInfoExtensions
    on UpdateMessageInteractionInfo {
  UpdateMessageInteractionInfo copyWith({
    int? chatId,
    int? messageId,
    MessageInteractionInfo? interactionInfo,
  }) => UpdateMessageInteractionInfo(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    interactionInfo: interactionInfo ?? this.interactionInfo,
  );
}

extension UpdateMessageContentOpenedExtensions on UpdateMessageContentOpened {
  UpdateMessageContentOpened copyWith({int? chatId, int? messageId}) =>
      UpdateMessageContentOpened(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension UpdateMessageMentionReadExtensions on UpdateMessageMentionRead {
  UpdateMessageMentionRead copyWith({
    int? chatId,
    int? messageId,
    int? unreadMentionCount,
  }) => UpdateMessageMentionRead(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    unreadMentionCount: unreadMentionCount ?? this.unreadMentionCount,
  );
}

extension UpdateMessageUnreadReactionsExtensions
    on UpdateMessageUnreadReactions {
  UpdateMessageUnreadReactions copyWith({
    int? chatId,
    int? messageId,
    List<UnreadReaction>? unreadReactions,
    int? unreadReactionCount,
  }) => UpdateMessageUnreadReactions(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    unreadReactions: unreadReactions ?? this.unreadReactions,
    unreadReactionCount: unreadReactionCount ?? this.unreadReactionCount,
  );
}

extension UpdateMessageFactCheckExtensions on UpdateMessageFactCheck {
  UpdateMessageFactCheck copyWith({
    int? chatId,
    int? messageId,
    FactCheck? factCheck,
  }) => UpdateMessageFactCheck(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    factCheck: factCheck ?? this.factCheck,
  );
}

extension UpdateMessageLiveLocationViewedExtensions
    on UpdateMessageLiveLocationViewed {
  UpdateMessageLiveLocationViewed copyWith({int? chatId, int? messageId}) =>
      UpdateMessageLiveLocationViewed(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension UpdateVideoPublishedExtensions on UpdateVideoPublished {
  UpdateVideoPublished copyWith({int? chatId, int? messageId}) =>
      UpdateVideoPublished(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension UpdateNewChatExtensions on UpdateNewChat {
  UpdateNewChat copyWith({Chat? chat}) =>
      UpdateNewChat(chat: chat ?? this.chat);
}

extension UpdateChatTitleExtensions on UpdateChatTitle {
  UpdateChatTitle copyWith({int? chatId, String? title}) => UpdateChatTitle(
    chatId: chatId ?? this.chatId,
    title: title ?? this.title,
  );
}

extension UpdateChatPhotoExtensions on UpdateChatPhoto {
  UpdateChatPhoto copyWith({int? chatId, ChatPhotoInfo? photo}) =>
      UpdateChatPhoto(
        chatId: chatId ?? this.chatId,
        photo: photo ?? this.photo,
      );
}

extension UpdateChatAccentColorsExtensions on UpdateChatAccentColors {
  UpdateChatAccentColors copyWith({
    int? chatId,
    int? accentColorId,
    int? backgroundCustomEmojiId,
    int? profileAccentColorId,
    int? profileBackgroundCustomEmojiId,
  }) => UpdateChatAccentColors(
    chatId: chatId ?? this.chatId,
    accentColorId: accentColorId ?? this.accentColorId,
    backgroundCustomEmojiId:
        backgroundCustomEmojiId ?? this.backgroundCustomEmojiId,
    profileAccentColorId: profileAccentColorId ?? this.profileAccentColorId,
    profileBackgroundCustomEmojiId:
        profileBackgroundCustomEmojiId ?? this.profileBackgroundCustomEmojiId,
  );
}

extension UpdateChatPermissionsExtensions on UpdateChatPermissions {
  UpdateChatPermissions copyWith({int? chatId, ChatPermissions? permissions}) =>
      UpdateChatPermissions(
        chatId: chatId ?? this.chatId,
        permissions: permissions ?? this.permissions,
      );
}

extension UpdateChatLastMessageExtensions on UpdateChatLastMessage {
  UpdateChatLastMessage copyWith({
    int? chatId,
    Message? lastMessage,
    List<ChatPosition>? positions,
  }) => UpdateChatLastMessage(
    chatId: chatId ?? this.chatId,
    lastMessage: lastMessage ?? this.lastMessage,
    positions: positions ?? this.positions,
  );
}

extension UpdateChatPositionExtensions on UpdateChatPosition {
  UpdateChatPosition copyWith({int? chatId, ChatPosition? position}) =>
      UpdateChatPosition(
        chatId: chatId ?? this.chatId,
        position: position ?? this.position,
      );
}

extension UpdateChatAddedToListExtensions on UpdateChatAddedToList {
  UpdateChatAddedToList copyWith({int? chatId, ChatList? chatList}) =>
      UpdateChatAddedToList(
        chatId: chatId ?? this.chatId,
        chatList: chatList ?? this.chatList,
      );
}

extension UpdateChatRemovedFromListExtensions on UpdateChatRemovedFromList {
  UpdateChatRemovedFromList copyWith({int? chatId, ChatList? chatList}) =>
      UpdateChatRemovedFromList(
        chatId: chatId ?? this.chatId,
        chatList: chatList ?? this.chatList,
      );
}

extension UpdateChatReadInboxExtensions on UpdateChatReadInbox {
  UpdateChatReadInbox copyWith({
    int? chatId,
    int? lastReadInboxMessageId,
    int? unreadCount,
  }) => UpdateChatReadInbox(
    chatId: chatId ?? this.chatId,
    lastReadInboxMessageId:
        lastReadInboxMessageId ?? this.lastReadInboxMessageId,
    unreadCount: unreadCount ?? this.unreadCount,
  );
}

extension UpdateChatReadOutboxExtensions on UpdateChatReadOutbox {
  UpdateChatReadOutbox copyWith({int? chatId, int? lastReadOutboxMessageId}) =>
      UpdateChatReadOutbox(
        chatId: chatId ?? this.chatId,
        lastReadOutboxMessageId:
            lastReadOutboxMessageId ?? this.lastReadOutboxMessageId,
      );
}

extension UpdateChatActionBarExtensions on UpdateChatActionBar {
  UpdateChatActionBar copyWith({int? chatId, ChatActionBar? actionBar}) =>
      UpdateChatActionBar(
        chatId: chatId ?? this.chatId,
        actionBar: actionBar ?? this.actionBar,
      );
}

extension UpdateChatBusinessBotManageBarExtensions
    on UpdateChatBusinessBotManageBar {
  UpdateChatBusinessBotManageBar copyWith({
    int? chatId,
    BusinessBotManageBar? businessBotManageBar,
  }) => UpdateChatBusinessBotManageBar(
    chatId: chatId ?? this.chatId,
    businessBotManageBar: businessBotManageBar ?? this.businessBotManageBar,
  );
}

extension UpdateChatAvailableReactionsExtensions
    on UpdateChatAvailableReactions {
  UpdateChatAvailableReactions copyWith({
    int? chatId,
    ChatAvailableReactions? availableReactions,
  }) => UpdateChatAvailableReactions(
    chatId: chatId ?? this.chatId,
    availableReactions: availableReactions ?? this.availableReactions,
  );
}

extension UpdateChatDraftMessageExtensions on UpdateChatDraftMessage {
  UpdateChatDraftMessage copyWith({
    int? chatId,
    DraftMessage? draftMessage,
    List<ChatPosition>? positions,
  }) => UpdateChatDraftMessage(
    chatId: chatId ?? this.chatId,
    draftMessage: draftMessage ?? this.draftMessage,
    positions: positions ?? this.positions,
  );
}

extension UpdateChatEmojiStatusExtensions on UpdateChatEmojiStatus {
  UpdateChatEmojiStatus copyWith({int? chatId, EmojiStatus? emojiStatus}) =>
      UpdateChatEmojiStatus(
        chatId: chatId ?? this.chatId,
        emojiStatus: emojiStatus ?? this.emojiStatus,
      );
}

extension UpdateChatMessageSenderExtensions on UpdateChatMessageSender {
  UpdateChatMessageSender copyWith({
    int? chatId,
    MessageSender? messageSenderId,
  }) => UpdateChatMessageSender(
    chatId: chatId ?? this.chatId,
    messageSenderId: messageSenderId ?? this.messageSenderId,
  );
}

extension UpdateChatMessageAutoDeleteTimeExtensions
    on UpdateChatMessageAutoDeleteTime {
  UpdateChatMessageAutoDeleteTime copyWith({
    int? chatId,
    int? messageAutoDeleteTime,
  }) => UpdateChatMessageAutoDeleteTime(
    chatId: chatId ?? this.chatId,
    messageAutoDeleteTime: messageAutoDeleteTime ?? this.messageAutoDeleteTime,
  );
}

extension UpdateChatNotificationSettingsExtensions
    on UpdateChatNotificationSettings {
  UpdateChatNotificationSettings copyWith({
    int? chatId,
    ChatNotificationSettings? notificationSettings,
  }) => UpdateChatNotificationSettings(
    chatId: chatId ?? this.chatId,
    notificationSettings: notificationSettings ?? this.notificationSettings,
  );
}

extension UpdateChatPendingJoinRequestsExtensions
    on UpdateChatPendingJoinRequests {
  UpdateChatPendingJoinRequests copyWith({
    int? chatId,
    ChatJoinRequestsInfo? pendingJoinRequests,
  }) => UpdateChatPendingJoinRequests(
    chatId: chatId ?? this.chatId,
    pendingJoinRequests: pendingJoinRequests ?? this.pendingJoinRequests,
  );
}

extension UpdateChatReplyMarkupExtensions on UpdateChatReplyMarkup {
  UpdateChatReplyMarkup copyWith({int? chatId, int? replyMarkupMessageId}) =>
      UpdateChatReplyMarkup(
        chatId: chatId ?? this.chatId,
        replyMarkupMessageId: replyMarkupMessageId ?? this.replyMarkupMessageId,
      );
}

extension UpdateChatBackgroundExtensions on UpdateChatBackground {
  UpdateChatBackground copyWith({int? chatId, ChatBackground? background}) =>
      UpdateChatBackground(
        chatId: chatId ?? this.chatId,
        background: background ?? this.background,
      );
}

extension UpdateChatThemeExtensions on UpdateChatTheme {
  UpdateChatTheme copyWith({int? chatId, String? themeName}) => UpdateChatTheme(
    chatId: chatId ?? this.chatId,
    themeName: themeName ?? this.themeName,
  );
}

extension UpdateChatUnreadMentionCountExtensions
    on UpdateChatUnreadMentionCount {
  UpdateChatUnreadMentionCount copyWith({
    int? chatId,
    int? unreadMentionCount,
  }) => UpdateChatUnreadMentionCount(
    chatId: chatId ?? this.chatId,
    unreadMentionCount: unreadMentionCount ?? this.unreadMentionCount,
  );
}

extension UpdateChatUnreadReactionCountExtensions
    on UpdateChatUnreadReactionCount {
  UpdateChatUnreadReactionCount copyWith({
    int? chatId,
    int? unreadReactionCount,
  }) => UpdateChatUnreadReactionCount(
    chatId: chatId ?? this.chatId,
    unreadReactionCount: unreadReactionCount ?? this.unreadReactionCount,
  );
}

extension UpdateChatVideoChatExtensions on UpdateChatVideoChat {
  UpdateChatVideoChat copyWith({int? chatId, VideoChat? videoChat}) =>
      UpdateChatVideoChat(
        chatId: chatId ?? this.chatId,
        videoChat: videoChat ?? this.videoChat,
      );
}

extension UpdateChatDefaultDisableNotificationExtensions
    on UpdateChatDefaultDisableNotification {
  UpdateChatDefaultDisableNotification copyWith({
    int? chatId,
    bool? defaultDisableNotification,
  }) => UpdateChatDefaultDisableNotification(
    chatId: chatId ?? this.chatId,
    defaultDisableNotification:
        defaultDisableNotification ?? this.defaultDisableNotification,
  );
}

extension UpdateChatHasProtectedContentExtensions
    on UpdateChatHasProtectedContent {
  UpdateChatHasProtectedContent copyWith({
    int? chatId,
    bool? hasProtectedContent,
  }) => UpdateChatHasProtectedContent(
    chatId: chatId ?? this.chatId,
    hasProtectedContent: hasProtectedContent ?? this.hasProtectedContent,
  );
}

extension UpdateChatIsTranslatableExtensions on UpdateChatIsTranslatable {
  UpdateChatIsTranslatable copyWith({int? chatId, bool? isTranslatable}) =>
      UpdateChatIsTranslatable(
        chatId: chatId ?? this.chatId,
        isTranslatable: isTranslatable ?? this.isTranslatable,
      );
}

extension UpdateChatIsMarkedAsUnreadExtensions on UpdateChatIsMarkedAsUnread {
  UpdateChatIsMarkedAsUnread copyWith({int? chatId, bool? isMarkedAsUnread}) =>
      UpdateChatIsMarkedAsUnread(
        chatId: chatId ?? this.chatId,
        isMarkedAsUnread: isMarkedAsUnread ?? this.isMarkedAsUnread,
      );
}

extension UpdateChatViewAsTopicsExtensions on UpdateChatViewAsTopics {
  UpdateChatViewAsTopics copyWith({int? chatId, bool? viewAsTopics}) =>
      UpdateChatViewAsTopics(
        chatId: chatId ?? this.chatId,
        viewAsTopics: viewAsTopics ?? this.viewAsTopics,
      );
}

extension UpdateChatBlockListExtensions on UpdateChatBlockList {
  UpdateChatBlockList copyWith({int? chatId, BlockList? blockList}) =>
      UpdateChatBlockList(
        chatId: chatId ?? this.chatId,
        blockList: blockList ?? this.blockList,
      );
}

extension UpdateChatHasScheduledMessagesExtensions
    on UpdateChatHasScheduledMessages {
  UpdateChatHasScheduledMessages copyWith({
    int? chatId,
    bool? hasScheduledMessages,
  }) => UpdateChatHasScheduledMessages(
    chatId: chatId ?? this.chatId,
    hasScheduledMessages: hasScheduledMessages ?? this.hasScheduledMessages,
  );
}

extension UpdateChatFoldersExtensions on UpdateChatFolders {
  UpdateChatFolders copyWith({
    List<ChatFolderInfo>? chatFolders,
    int? mainChatListPosition,
    bool? areTagsEnabled,
  }) => UpdateChatFolders(
    chatFolders: chatFolders ?? this.chatFolders,
    mainChatListPosition: mainChatListPosition ?? this.mainChatListPosition,
    areTagsEnabled: areTagsEnabled ?? this.areTagsEnabled,
  );
}

extension UpdateChatOnlineMemberCountExtensions on UpdateChatOnlineMemberCount {
  UpdateChatOnlineMemberCount copyWith({int? chatId, int? onlineMemberCount}) =>
      UpdateChatOnlineMemberCount(
        chatId: chatId ?? this.chatId,
        onlineMemberCount: onlineMemberCount ?? this.onlineMemberCount,
      );
}

extension UpdateSavedMessagesTopicExtensions on UpdateSavedMessagesTopic {
  UpdateSavedMessagesTopic copyWith({SavedMessagesTopic? topic}) =>
      UpdateSavedMessagesTopic(topic: topic ?? this.topic);
}

extension UpdateSavedMessagesTopicCountExtensions
    on UpdateSavedMessagesTopicCount {
  UpdateSavedMessagesTopicCount copyWith({int? topicCount}) =>
      UpdateSavedMessagesTopicCount(topicCount: topicCount ?? this.topicCount);
}

extension UpdateDirectMessagesChatTopicExtensions
    on UpdateDirectMessagesChatTopic {
  UpdateDirectMessagesChatTopic copyWith({DirectMessagesChatTopic? topic}) =>
      UpdateDirectMessagesChatTopic(topic: topic ?? this.topic);
}

extension UpdateTopicMessageCountExtensions on UpdateTopicMessageCount {
  UpdateTopicMessageCount copyWith({
    int? chatId,
    MessageTopic? topicId,
    int? messageCount,
  }) => UpdateTopicMessageCount(
    chatId: chatId ?? this.chatId,
    topicId: topicId ?? this.topicId,
    messageCount: messageCount ?? this.messageCount,
  );
}

extension UpdateQuickReplyShortcutExtensions on UpdateQuickReplyShortcut {
  UpdateQuickReplyShortcut copyWith({QuickReplyShortcut? shortcut}) =>
      UpdateQuickReplyShortcut(shortcut: shortcut ?? this.shortcut);
}

extension UpdateQuickReplyShortcutDeletedExtensions
    on UpdateQuickReplyShortcutDeleted {
  UpdateQuickReplyShortcutDeleted copyWith({int? shortcutId}) =>
      UpdateQuickReplyShortcutDeleted(
        shortcutId: shortcutId ?? this.shortcutId,
      );
}

extension UpdateQuickReplyShortcutsExtensions on UpdateQuickReplyShortcuts {
  UpdateQuickReplyShortcuts copyWith({List<int>? shortcutIds}) =>
      UpdateQuickReplyShortcuts(shortcutIds: shortcutIds ?? this.shortcutIds);
}

extension UpdateQuickReplyShortcutMessagesExtensions
    on UpdateQuickReplyShortcutMessages {
  UpdateQuickReplyShortcutMessages copyWith({
    int? shortcutId,
    List<QuickReplyMessage>? messages,
  }) => UpdateQuickReplyShortcutMessages(
    shortcutId: shortcutId ?? this.shortcutId,
    messages: messages ?? this.messages,
  );
}

extension UpdateForumTopicInfoExtensions on UpdateForumTopicInfo {
  UpdateForumTopicInfo copyWith({ForumTopicInfo? info}) =>
      UpdateForumTopicInfo(info: info ?? this.info);
}

extension UpdateForumTopicExtensions on UpdateForumTopic {
  UpdateForumTopic copyWith({
    int? chatId,
    int? messageThreadId,
    bool? isPinned,
    int? lastReadInboxMessageId,
    int? lastReadOutboxMessageId,
    int? unreadMentionCount,
    int? unreadReactionCount,
    ChatNotificationSettings? notificationSettings,
  }) => UpdateForumTopic(
    chatId: chatId ?? this.chatId,
    messageThreadId: messageThreadId ?? this.messageThreadId,
    isPinned: isPinned ?? this.isPinned,
    lastReadInboxMessageId:
        lastReadInboxMessageId ?? this.lastReadInboxMessageId,
    lastReadOutboxMessageId:
        lastReadOutboxMessageId ?? this.lastReadOutboxMessageId,
    unreadMentionCount: unreadMentionCount ?? this.unreadMentionCount,
    unreadReactionCount: unreadReactionCount ?? this.unreadReactionCount,
    notificationSettings: notificationSettings ?? this.notificationSettings,
  );
}

extension UpdateScopeNotificationSettingsExtensions
    on UpdateScopeNotificationSettings {
  UpdateScopeNotificationSettings copyWith({
    NotificationSettingsScope? scope,
    ScopeNotificationSettings? notificationSettings,
  }) => UpdateScopeNotificationSettings(
    scope: scope ?? this.scope,
    notificationSettings: notificationSettings ?? this.notificationSettings,
  );
}

extension UpdateReactionNotificationSettingsExtensions
    on UpdateReactionNotificationSettings {
  UpdateReactionNotificationSettings copyWith({
    ReactionNotificationSettings? notificationSettings,
  }) => UpdateReactionNotificationSettings(
    notificationSettings: notificationSettings ?? this.notificationSettings,
  );
}

extension UpdateNotificationExtensions on UpdateNotification {
  UpdateNotification copyWith({
    int? notificationGroupId,
    Notification? notification,
  }) => UpdateNotification(
    notificationGroupId: notificationGroupId ?? this.notificationGroupId,
    notification: notification ?? this.notification,
  );
}

extension UpdateNotificationGroupExtensions on UpdateNotificationGroup {
  UpdateNotificationGroup copyWith({
    int? notificationGroupId,
    NotificationGroupType? type,
    int? chatId,
    int? notificationSettingsChatId,
    int? notificationSoundId,
    int? totalCount,
    List<Notification>? addedNotifications,
    List<int>? removedNotificationIds,
  }) => UpdateNotificationGroup(
    notificationGroupId: notificationGroupId ?? this.notificationGroupId,
    type: type ?? this.type,
    chatId: chatId ?? this.chatId,
    notificationSettingsChatId:
        notificationSettingsChatId ?? this.notificationSettingsChatId,
    notificationSoundId: notificationSoundId ?? this.notificationSoundId,
    totalCount: totalCount ?? this.totalCount,
    addedNotifications: addedNotifications ?? this.addedNotifications,
    removedNotificationIds:
        removedNotificationIds ?? this.removedNotificationIds,
  );
}

extension UpdateActiveNotificationsExtensions on UpdateActiveNotifications {
  UpdateActiveNotifications copyWith({List<NotificationGroup>? groups}) =>
      UpdateActiveNotifications(groups: groups ?? this.groups);
}

extension UpdateHavePendingNotificationsExtensions
    on UpdateHavePendingNotifications {
  UpdateHavePendingNotifications copyWith({
    bool? haveDelayedNotifications,
    bool? haveUnreceivedNotifications,
  }) => UpdateHavePendingNotifications(
    haveDelayedNotifications:
        haveDelayedNotifications ?? this.haveDelayedNotifications,
    haveUnreceivedNotifications:
        haveUnreceivedNotifications ?? this.haveUnreceivedNotifications,
  );
}

extension UpdateDeleteMessagesExtensions on UpdateDeleteMessages {
  UpdateDeleteMessages copyWith({
    int? chatId,
    List<int>? messageIds,
    bool? isPermanent,
    bool? fromCache,
  }) => UpdateDeleteMessages(
    chatId: chatId ?? this.chatId,
    messageIds: messageIds ?? this.messageIds,
    isPermanent: isPermanent ?? this.isPermanent,
    fromCache: fromCache ?? this.fromCache,
  );
}

extension UpdateChatActionExtensions on UpdateChatAction {
  UpdateChatAction copyWith({
    int? chatId,
    int? messageThreadId,
    MessageSender? senderId,
    ChatAction? action,
  }) => UpdateChatAction(
    chatId: chatId ?? this.chatId,
    messageThreadId: messageThreadId ?? this.messageThreadId,
    senderId: senderId ?? this.senderId,
    action: action ?? this.action,
  );
}

extension UpdateUserStatusExtensions on UpdateUserStatus {
  UpdateUserStatus copyWith({int? userId, UserStatus? status}) =>
      UpdateUserStatus(
        userId: userId ?? this.userId,
        status: status ?? this.status,
      );
}

extension UpdateUserExtensions on UpdateUser {
  UpdateUser copyWith({User? user}) => UpdateUser(user: user ?? this.user);
}

extension UpdateBasicGroupExtensions on UpdateBasicGroup {
  UpdateBasicGroup copyWith({BasicGroup? basicGroup}) =>
      UpdateBasicGroup(basicGroup: basicGroup ?? this.basicGroup);
}

extension UpdateSupergroupExtensions on UpdateSupergroup {
  UpdateSupergroup copyWith({Supergroup? supergroup}) =>
      UpdateSupergroup(supergroup: supergroup ?? this.supergroup);
}

extension UpdateSecretChatExtensions on UpdateSecretChat {
  UpdateSecretChat copyWith({SecretChat? secretChat}) =>
      UpdateSecretChat(secretChat: secretChat ?? this.secretChat);
}

extension UpdateUserFullInfoExtensions on UpdateUserFullInfo {
  UpdateUserFullInfo copyWith({int? userId, UserFullInfo? userFullInfo}) =>
      UpdateUserFullInfo(
        userId: userId ?? this.userId,
        userFullInfo: userFullInfo ?? this.userFullInfo,
      );
}

extension UpdateBasicGroupFullInfoExtensions on UpdateBasicGroupFullInfo {
  UpdateBasicGroupFullInfo copyWith({
    int? basicGroupId,
    BasicGroupFullInfo? basicGroupFullInfo,
  }) => UpdateBasicGroupFullInfo(
    basicGroupId: basicGroupId ?? this.basicGroupId,
    basicGroupFullInfo: basicGroupFullInfo ?? this.basicGroupFullInfo,
  );
}

extension UpdateSupergroupFullInfoExtensions on UpdateSupergroupFullInfo {
  UpdateSupergroupFullInfo copyWith({
    int? supergroupId,
    SupergroupFullInfo? supergroupFullInfo,
  }) => UpdateSupergroupFullInfo(
    supergroupId: supergroupId ?? this.supergroupId,
    supergroupFullInfo: supergroupFullInfo ?? this.supergroupFullInfo,
  );
}

extension UpdateServiceNotificationExtensions on UpdateServiceNotification {
  UpdateServiceNotification copyWith({String? type, MessageContent? content}) =>
      UpdateServiceNotification(
        type: type ?? this.type,
        content: content ?? this.content,
      );
}

extension UpdateFileExtensions on UpdateFile {
  UpdateFile copyWith({File? file}) => UpdateFile(file: file ?? this.file);
}

extension UpdateFileGenerationStartExtensions on UpdateFileGenerationStart {
  UpdateFileGenerationStart copyWith({
    int? generationId,
    String? originalPath,
    String? destinationPath,
    String? conversion,
  }) => UpdateFileGenerationStart(
    generationId: generationId ?? this.generationId,
    originalPath: originalPath ?? this.originalPath,
    destinationPath: destinationPath ?? this.destinationPath,
    conversion: conversion ?? this.conversion,
  );
}

extension UpdateFileGenerationStopExtensions on UpdateFileGenerationStop {
  UpdateFileGenerationStop copyWith({int? generationId}) =>
      UpdateFileGenerationStop(generationId: generationId ?? this.generationId);
}

extension UpdateFileDownloadsExtensions on UpdateFileDownloads {
  UpdateFileDownloads copyWith({
    int? totalSize,
    int? totalCount,
    int? downloadedSize,
  }) => UpdateFileDownloads(
    totalSize: totalSize ?? this.totalSize,
    totalCount: totalCount ?? this.totalCount,
    downloadedSize: downloadedSize ?? this.downloadedSize,
  );
}

extension UpdateFileAddedToDownloadsExtensions on UpdateFileAddedToDownloads {
  UpdateFileAddedToDownloads copyWith({
    FileDownload? fileDownload,
    DownloadedFileCounts? counts,
  }) => UpdateFileAddedToDownloads(
    fileDownload: fileDownload ?? this.fileDownload,
    counts: counts ?? this.counts,
  );
}

extension UpdateFileDownloadExtensions on UpdateFileDownload {
  UpdateFileDownload copyWith({
    int? fileId,
    int? completeDate,
    bool? isPaused,
    DownloadedFileCounts? counts,
  }) => UpdateFileDownload(
    fileId: fileId ?? this.fileId,
    completeDate: completeDate ?? this.completeDate,
    isPaused: isPaused ?? this.isPaused,
    counts: counts ?? this.counts,
  );
}

extension UpdateFileRemovedFromDownloadsExtensions
    on UpdateFileRemovedFromDownloads {
  UpdateFileRemovedFromDownloads copyWith({
    int? fileId,
    DownloadedFileCounts? counts,
  }) => UpdateFileRemovedFromDownloads(
    fileId: fileId ?? this.fileId,
    counts: counts ?? this.counts,
  );
}

extension UpdateApplicationVerificationRequiredExtensions
    on UpdateApplicationVerificationRequired {
  UpdateApplicationVerificationRequired copyWith({
    int? verificationId,
    String? nonce,
    int? cloudProjectNumber,
  }) => UpdateApplicationVerificationRequired(
    verificationId: verificationId ?? this.verificationId,
    nonce: nonce ?? this.nonce,
    cloudProjectNumber: cloudProjectNumber ?? this.cloudProjectNumber,
  );
}

extension UpdateApplicationRecaptchaVerificationRequiredExtensions
    on UpdateApplicationRecaptchaVerificationRequired {
  UpdateApplicationRecaptchaVerificationRequired copyWith({
    int? verificationId,
    String? action,
    String? recaptchaKeyId,
  }) => UpdateApplicationRecaptchaVerificationRequired(
    verificationId: verificationId ?? this.verificationId,
    action: action ?? this.action,
    recaptchaKeyId: recaptchaKeyId ?? this.recaptchaKeyId,
  );
}

extension UpdateCallExtensions on UpdateCall {
  UpdateCall copyWith({Call? call}) => UpdateCall(call: call ?? this.call);
}

extension UpdateGroupCallExtensions on UpdateGroupCall {
  UpdateGroupCall copyWith({GroupCall? groupCall}) =>
      UpdateGroupCall(groupCall: groupCall ?? this.groupCall);
}

extension UpdateGroupCallParticipantExtensions on UpdateGroupCallParticipant {
  UpdateGroupCallParticipant copyWith({
    int? groupCallId,
    GroupCallParticipant? participant,
  }) => UpdateGroupCallParticipant(
    groupCallId: groupCallId ?? this.groupCallId,
    participant: participant ?? this.participant,
  );
}

extension UpdateGroupCallParticipantsExtensions on UpdateGroupCallParticipants {
  UpdateGroupCallParticipants copyWith({
    int? groupCallId,
    List<int>? participantUserIds,
  }) => UpdateGroupCallParticipants(
    groupCallId: groupCallId ?? this.groupCallId,
    participantUserIds: participantUserIds ?? this.participantUserIds,
  );
}

extension UpdateGroupCallVerificationStateExtensions
    on UpdateGroupCallVerificationState {
  UpdateGroupCallVerificationState copyWith({
    int? groupCallId,
    int? generation,
    List<String>? emojis,
  }) => UpdateGroupCallVerificationState(
    groupCallId: groupCallId ?? this.groupCallId,
    generation: generation ?? this.generation,
    emojis: emojis ?? this.emojis,
  );
}

extension UpdateNewCallSignalingDataExtensions on UpdateNewCallSignalingData {
  UpdateNewCallSignalingData copyWith({int? callId, String? data}) =>
      UpdateNewCallSignalingData(
        callId: callId ?? this.callId,
        data: data ?? this.data,
      );
}

extension UpdateUserPrivacySettingRulesExtensions
    on UpdateUserPrivacySettingRules {
  UpdateUserPrivacySettingRules copyWith({
    UserPrivacySetting? setting,
    UserPrivacySettingRules? rules,
  }) => UpdateUserPrivacySettingRules(
    setting: setting ?? this.setting,
    rules: rules ?? this.rules,
  );
}

extension UpdateUnreadMessageCountExtensions on UpdateUnreadMessageCount {
  UpdateUnreadMessageCount copyWith({
    ChatList? chatList,
    int? unreadCount,
    int? unreadUnmutedCount,
  }) => UpdateUnreadMessageCount(
    chatList: chatList ?? this.chatList,
    unreadCount: unreadCount ?? this.unreadCount,
    unreadUnmutedCount: unreadUnmutedCount ?? this.unreadUnmutedCount,
  );
}

extension UpdateUnreadChatCountExtensions on UpdateUnreadChatCount {
  UpdateUnreadChatCount copyWith({
    ChatList? chatList,
    int? totalCount,
    int? unreadCount,
    int? unreadUnmutedCount,
    int? markedAsUnreadCount,
    int? markedAsUnreadUnmutedCount,
  }) => UpdateUnreadChatCount(
    chatList: chatList ?? this.chatList,
    totalCount: totalCount ?? this.totalCount,
    unreadCount: unreadCount ?? this.unreadCount,
    unreadUnmutedCount: unreadUnmutedCount ?? this.unreadUnmutedCount,
    markedAsUnreadCount: markedAsUnreadCount ?? this.markedAsUnreadCount,
    markedAsUnreadUnmutedCount:
        markedAsUnreadUnmutedCount ?? this.markedAsUnreadUnmutedCount,
  );
}

extension UpdateStoryExtensions on UpdateStory {
  UpdateStory copyWith({Story? story}) =>
      UpdateStory(story: story ?? this.story);
}

extension UpdateStoryDeletedExtensions on UpdateStoryDeleted {
  UpdateStoryDeleted copyWith({int? storyPosterChatId, int? storyId}) =>
      UpdateStoryDeleted(
        storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
        storyId: storyId ?? this.storyId,
      );
}

extension UpdateStoryPostSucceededExtensions on UpdateStoryPostSucceeded {
  UpdateStoryPostSucceeded copyWith({Story? story, int? oldStoryId}) =>
      UpdateStoryPostSucceeded(
        story: story ?? this.story,
        oldStoryId: oldStoryId ?? this.oldStoryId,
      );
}

extension UpdateStoryPostFailedExtensions on UpdateStoryPostFailed {
  UpdateStoryPostFailed copyWith({
    Story? story,
    TdError? error,
    CanPostStoryResult? errorType,
  }) => UpdateStoryPostFailed(
    story: story ?? this.story,
    error: error ?? this.error,
    errorType: errorType ?? this.errorType,
  );
}

extension UpdateChatActiveStoriesExtensions on UpdateChatActiveStories {
  UpdateChatActiveStories copyWith({ChatActiveStories? activeStories}) =>
      UpdateChatActiveStories(
        activeStories: activeStories ?? this.activeStories,
      );
}

extension UpdateStoryListChatCountExtensions on UpdateStoryListChatCount {
  UpdateStoryListChatCount copyWith({StoryList? storyList, int? chatCount}) =>
      UpdateStoryListChatCount(
        storyList: storyList ?? this.storyList,
        chatCount: chatCount ?? this.chatCount,
      );
}

extension UpdateStoryStealthModeExtensions on UpdateStoryStealthMode {
  UpdateStoryStealthMode copyWith({
    int? activeUntilDate,
    int? cooldownUntilDate,
  }) => UpdateStoryStealthMode(
    activeUntilDate: activeUntilDate ?? this.activeUntilDate,
    cooldownUntilDate: cooldownUntilDate ?? this.cooldownUntilDate,
  );
}

extension UpdateOptionExtensions on UpdateOption {
  UpdateOption copyWith({String? name, OptionValue? value}) =>
      UpdateOption(name: name ?? this.name, value: value ?? this.value);
}

extension UpdateStickerSetExtensions on UpdateStickerSet {
  UpdateStickerSet copyWith({StickerSet? stickerSet}) =>
      UpdateStickerSet(stickerSet: stickerSet ?? this.stickerSet);
}

extension UpdateInstalledStickerSetsExtensions on UpdateInstalledStickerSets {
  UpdateInstalledStickerSets copyWith({
    StickerType? stickerType,
    List<int>? stickerSetIds,
  }) => UpdateInstalledStickerSets(
    stickerType: stickerType ?? this.stickerType,
    stickerSetIds: stickerSetIds ?? this.stickerSetIds,
  );
}

extension UpdateTrendingStickerSetsExtensions on UpdateTrendingStickerSets {
  UpdateTrendingStickerSets copyWith({
    StickerType? stickerType,
    TrendingStickerSets? stickerSets,
  }) => UpdateTrendingStickerSets(
    stickerType: stickerType ?? this.stickerType,
    stickerSets: stickerSets ?? this.stickerSets,
  );
}

extension UpdateRecentStickersExtensions on UpdateRecentStickers {
  UpdateRecentStickers copyWith({bool? isAttached, List<int>? stickerIds}) =>
      UpdateRecentStickers(
        isAttached: isAttached ?? this.isAttached,
        stickerIds: stickerIds ?? this.stickerIds,
      );
}

extension UpdateFavoriteStickersExtensions on UpdateFavoriteStickers {
  UpdateFavoriteStickers copyWith({List<int>? stickerIds}) =>
      UpdateFavoriteStickers(stickerIds: stickerIds ?? this.stickerIds);
}

extension UpdateSavedAnimationsExtensions on UpdateSavedAnimations {
  UpdateSavedAnimations copyWith({List<int>? animationIds}) =>
      UpdateSavedAnimations(animationIds: animationIds ?? this.animationIds);
}

extension UpdateSavedNotificationSoundsExtensions
    on UpdateSavedNotificationSounds {
  UpdateSavedNotificationSounds copyWith({List<int>? notificationSoundIds}) =>
      UpdateSavedNotificationSounds(
        notificationSoundIds: notificationSoundIds ?? this.notificationSoundIds,
      );
}

extension UpdateDefaultBackgroundExtensions on UpdateDefaultBackground {
  UpdateDefaultBackground copyWith({
    bool? forDarkTheme,
    Background? background,
  }) => UpdateDefaultBackground(
    forDarkTheme: forDarkTheme ?? this.forDarkTheme,
    background: background ?? this.background,
  );
}

extension UpdateChatThemesExtensions on UpdateChatThemes {
  UpdateChatThemes copyWith({List<ChatTheme>? chatThemes}) =>
      UpdateChatThemes(chatThemes: chatThemes ?? this.chatThemes);
}

extension UpdateAccentColorsExtensions on UpdateAccentColors {
  UpdateAccentColors copyWith({
    List<AccentColor>? colors,
    List<int>? availableAccentColorIds,
  }) => UpdateAccentColors(
    colors: colors ?? this.colors,
    availableAccentColorIds:
        availableAccentColorIds ?? this.availableAccentColorIds,
  );
}

extension UpdateProfileAccentColorsExtensions on UpdateProfileAccentColors {
  UpdateProfileAccentColors copyWith({
    List<ProfileAccentColor>? colors,
    List<int>? availableAccentColorIds,
  }) => UpdateProfileAccentColors(
    colors: colors ?? this.colors,
    availableAccentColorIds:
        availableAccentColorIds ?? this.availableAccentColorIds,
  );
}

extension UpdateLanguagePackStringsExtensions on UpdateLanguagePackStrings {
  UpdateLanguagePackStrings copyWith({
    String? localizationTarget,
    String? languagePackId,
    List<LanguagePackString>? strings,
  }) => UpdateLanguagePackStrings(
    localizationTarget: localizationTarget ?? this.localizationTarget,
    languagePackId: languagePackId ?? this.languagePackId,
    strings: strings ?? this.strings,
  );
}

extension UpdateConnectionStateExtensions on UpdateConnectionState {
  UpdateConnectionState copyWith({ConnectionState? state}) =>
      UpdateConnectionState(state: state ?? this.state);
}

extension UpdateFreezeStateExtensions on UpdateFreezeState {
  UpdateFreezeState copyWith({
    bool? isFrozen,
    int? freezingDate,
    int? deletionDate,
    String? appealLink,
  }) => UpdateFreezeState(
    isFrozen: isFrozen ?? this.isFrozen,
    freezingDate: freezingDate ?? this.freezingDate,
    deletionDate: deletionDate ?? this.deletionDate,
    appealLink: appealLink ?? this.appealLink,
  );
}

extension UpdateTermsOfServiceExtensions on UpdateTermsOfService {
  UpdateTermsOfService copyWith({
    String? termsOfServiceId,
    TermsOfService? termsOfService,
  }) => UpdateTermsOfService(
    termsOfServiceId: termsOfServiceId ?? this.termsOfServiceId,
    termsOfService: termsOfService ?? this.termsOfService,
  );
}

extension UpdateUnconfirmedSessionExtensions on UpdateUnconfirmedSession {
  UpdateUnconfirmedSession copyWith({UnconfirmedSession? session}) =>
      UpdateUnconfirmedSession(session: session ?? this.session);
}

extension UpdateAttachmentMenuBotsExtensions on UpdateAttachmentMenuBots {
  UpdateAttachmentMenuBots copyWith({List<AttachmentMenuBot>? bots}) =>
      UpdateAttachmentMenuBots(bots: bots ?? this.bots);
}

extension UpdateWebAppMessageSentExtensions on UpdateWebAppMessageSent {
  UpdateWebAppMessageSent copyWith({int? webAppLaunchId}) =>
      UpdateWebAppMessageSent(
        webAppLaunchId: webAppLaunchId ?? this.webAppLaunchId,
      );
}

extension UpdateActiveEmojiReactionsExtensions on UpdateActiveEmojiReactions {
  UpdateActiveEmojiReactions copyWith({List<String>? emojis}) =>
      UpdateActiveEmojiReactions(emojis: emojis ?? this.emojis);
}

extension UpdateAvailableMessageEffectsExtensions
    on UpdateAvailableMessageEffects {
  UpdateAvailableMessageEffects copyWith({
    List<int>? reactionEffectIds,
    List<int>? stickerEffectIds,
  }) => UpdateAvailableMessageEffects(
    reactionEffectIds: reactionEffectIds ?? this.reactionEffectIds,
    stickerEffectIds: stickerEffectIds ?? this.stickerEffectIds,
  );
}

extension UpdateDefaultReactionTypeExtensions on UpdateDefaultReactionType {
  UpdateDefaultReactionType copyWith({ReactionType? reactionType}) =>
      UpdateDefaultReactionType(
        reactionType: reactionType ?? this.reactionType,
      );
}

extension UpdateDefaultPaidReactionTypeExtensions
    on UpdateDefaultPaidReactionType {
  UpdateDefaultPaidReactionType copyWith({PaidReactionType? type}) =>
      UpdateDefaultPaidReactionType(type: type ?? this.type);
}

extension UpdateSavedMessagesTagsExtensions on UpdateSavedMessagesTags {
  UpdateSavedMessagesTags copyWith({
    int? savedMessagesTopicId,
    SavedMessagesTags? tags,
  }) => UpdateSavedMessagesTags(
    savedMessagesTopicId: savedMessagesTopicId ?? this.savedMessagesTopicId,
    tags: tags ?? this.tags,
  );
}

extension UpdateActiveLiveLocationMessagesExtensions
    on UpdateActiveLiveLocationMessages {
  UpdateActiveLiveLocationMessages copyWith({List<Message>? messages}) =>
      UpdateActiveLiveLocationMessages(messages: messages ?? this.messages);
}

extension UpdateOwnedStarCountExtensions on UpdateOwnedStarCount {
  UpdateOwnedStarCount copyWith({StarAmount? starAmount}) =>
      UpdateOwnedStarCount(starAmount: starAmount ?? this.starAmount);
}

extension UpdateChatRevenueAmountExtensions on UpdateChatRevenueAmount {
  UpdateChatRevenueAmount copyWith({
    int? chatId,
    ChatRevenueAmount? revenueAmount,
  }) => UpdateChatRevenueAmount(
    chatId: chatId ?? this.chatId,
    revenueAmount: revenueAmount ?? this.revenueAmount,
  );
}

extension UpdateStarRevenueStatusExtensions on UpdateStarRevenueStatus {
  UpdateStarRevenueStatus copyWith({
    MessageSender? ownerId,
    StarRevenueStatus? status,
  }) => UpdateStarRevenueStatus(
    ownerId: ownerId ?? this.ownerId,
    status: status ?? this.status,
  );
}

extension UpdateSpeechRecognitionTrialExtensions
    on UpdateSpeechRecognitionTrial {
  UpdateSpeechRecognitionTrial copyWith({
    int? maxMediaDuration,
    int? weeklyCount,
    int? leftCount,
    int? nextResetDate,
  }) => UpdateSpeechRecognitionTrial(
    maxMediaDuration: maxMediaDuration ?? this.maxMediaDuration,
    weeklyCount: weeklyCount ?? this.weeklyCount,
    leftCount: leftCount ?? this.leftCount,
    nextResetDate: nextResetDate ?? this.nextResetDate,
  );
}

extension UpdateDiceEmojisExtensions on UpdateDiceEmojis {
  UpdateDiceEmojis copyWith({List<String>? emojis}) =>
      UpdateDiceEmojis(emojis: emojis ?? this.emojis);
}

extension UpdateAnimatedEmojiMessageClickedExtensions
    on UpdateAnimatedEmojiMessageClicked {
  UpdateAnimatedEmojiMessageClicked copyWith({
    int? chatId,
    int? messageId,
    Sticker? sticker,
  }) => UpdateAnimatedEmojiMessageClicked(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    sticker: sticker ?? this.sticker,
  );
}

extension UpdateAnimationSearchParametersExtensions
    on UpdateAnimationSearchParameters {
  UpdateAnimationSearchParameters copyWith({
    String? provider,
    List<String>? emojis,
  }) => UpdateAnimationSearchParameters(
    provider: provider ?? this.provider,
    emojis: emojis ?? this.emojis,
  );
}

extension UpdateSuggestedActionsExtensions on UpdateSuggestedActions {
  UpdateSuggestedActions copyWith({
    List<SuggestedAction>? addedActions,
    List<SuggestedAction>? removedActions,
  }) => UpdateSuggestedActions(
    addedActions: addedActions ?? this.addedActions,
    removedActions: removedActions ?? this.removedActions,
  );
}

extension UpdateSpeedLimitNotificationExtensions
    on UpdateSpeedLimitNotification {
  UpdateSpeedLimitNotification copyWith({bool? isUpload}) =>
      UpdateSpeedLimitNotification(isUpload: isUpload ?? this.isUpload);
}

extension UpdateContactCloseBirthdaysExtensions on UpdateContactCloseBirthdays {
  UpdateContactCloseBirthdays copyWith({
    List<CloseBirthdayUser>? closeBirthdayUsers,
  }) => UpdateContactCloseBirthdays(
    closeBirthdayUsers: closeBirthdayUsers ?? this.closeBirthdayUsers,
  );
}

extension UpdateAutosaveSettingsExtensions on UpdateAutosaveSettings {
  UpdateAutosaveSettings copyWith({
    AutosaveSettingsScope? scope,
    ScopeAutosaveSettings? settings,
  }) => UpdateAutosaveSettings(
    scope: scope ?? this.scope,
    settings: settings ?? this.settings,
  );
}

extension UpdateBusinessConnectionExtensions on UpdateBusinessConnection {
  UpdateBusinessConnection copyWith({BusinessConnection? connection}) =>
      UpdateBusinessConnection(connection: connection ?? this.connection);
}

extension UpdateNewBusinessMessageExtensions on UpdateNewBusinessMessage {
  UpdateNewBusinessMessage copyWith({
    String? connectionId,
    BusinessMessage? message,
  }) => UpdateNewBusinessMessage(
    connectionId: connectionId ?? this.connectionId,
    message: message ?? this.message,
  );
}

extension UpdateBusinessMessageEditedExtensions on UpdateBusinessMessageEdited {
  UpdateBusinessMessageEdited copyWith({
    String? connectionId,
    BusinessMessage? message,
  }) => UpdateBusinessMessageEdited(
    connectionId: connectionId ?? this.connectionId,
    message: message ?? this.message,
  );
}

extension UpdateBusinessMessagesDeletedExtensions
    on UpdateBusinessMessagesDeleted {
  UpdateBusinessMessagesDeleted copyWith({
    String? connectionId,
    int? chatId,
    List<int>? messageIds,
  }) => UpdateBusinessMessagesDeleted(
    connectionId: connectionId ?? this.connectionId,
    chatId: chatId ?? this.chatId,
    messageIds: messageIds ?? this.messageIds,
  );
}

extension UpdateNewInlineQueryExtensions on UpdateNewInlineQuery {
  UpdateNewInlineQuery copyWith({
    int? id,
    int? senderUserId,
    Location? userLocation,
    ChatType? chatType,
    String? query,
    String? offset,
  }) => UpdateNewInlineQuery(
    id: id ?? this.id,
    senderUserId: senderUserId ?? this.senderUserId,
    userLocation: userLocation ?? this.userLocation,
    chatType: chatType ?? this.chatType,
    query: query ?? this.query,
    offset: offset ?? this.offset,
  );
}

extension UpdateNewChosenInlineResultExtensions on UpdateNewChosenInlineResult {
  UpdateNewChosenInlineResult copyWith({
    int? senderUserId,
    Location? userLocation,
    String? query,
    String? resultId,
    String? inlineMessageId,
  }) => UpdateNewChosenInlineResult(
    senderUserId: senderUserId ?? this.senderUserId,
    userLocation: userLocation ?? this.userLocation,
    query: query ?? this.query,
    resultId: resultId ?? this.resultId,
    inlineMessageId: inlineMessageId ?? this.inlineMessageId,
  );
}

extension UpdateNewCallbackQueryExtensions on UpdateNewCallbackQuery {
  UpdateNewCallbackQuery copyWith({
    int? id,
    int? senderUserId,
    int? chatId,
    int? messageId,
    int? chatInstance,
    CallbackQueryPayload? payload,
  }) => UpdateNewCallbackQuery(
    id: id ?? this.id,
    senderUserId: senderUserId ?? this.senderUserId,
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    chatInstance: chatInstance ?? this.chatInstance,
    payload: payload ?? this.payload,
  );
}

extension UpdateNewInlineCallbackQueryExtensions
    on UpdateNewInlineCallbackQuery {
  UpdateNewInlineCallbackQuery copyWith({
    int? id,
    int? senderUserId,
    String? inlineMessageId,
    int? chatInstance,
    CallbackQueryPayload? payload,
  }) => UpdateNewInlineCallbackQuery(
    id: id ?? this.id,
    senderUserId: senderUserId ?? this.senderUserId,
    inlineMessageId: inlineMessageId ?? this.inlineMessageId,
    chatInstance: chatInstance ?? this.chatInstance,
    payload: payload ?? this.payload,
  );
}

extension UpdateNewBusinessCallbackQueryExtensions
    on UpdateNewBusinessCallbackQuery {
  UpdateNewBusinessCallbackQuery copyWith({
    int? id,
    int? senderUserId,
    String? connectionId,
    BusinessMessage? message,
    int? chatInstance,
    CallbackQueryPayload? payload,
  }) => UpdateNewBusinessCallbackQuery(
    id: id ?? this.id,
    senderUserId: senderUserId ?? this.senderUserId,
    connectionId: connectionId ?? this.connectionId,
    message: message ?? this.message,
    chatInstance: chatInstance ?? this.chatInstance,
    payload: payload ?? this.payload,
  );
}

extension UpdateNewShippingQueryExtensions on UpdateNewShippingQuery {
  UpdateNewShippingQuery copyWith({
    int? id,
    int? senderUserId,
    String? invoicePayload,
    Address? shippingAddress,
  }) => UpdateNewShippingQuery(
    id: id ?? this.id,
    senderUserId: senderUserId ?? this.senderUserId,
    invoicePayload: invoicePayload ?? this.invoicePayload,
    shippingAddress: shippingAddress ?? this.shippingAddress,
  );
}

extension UpdateNewPreCheckoutQueryExtensions on UpdateNewPreCheckoutQuery {
  UpdateNewPreCheckoutQuery copyWith({
    int? id,
    int? senderUserId,
    String? currency,
    int? totalAmount,
    String? invoicePayload,
    String? shippingOptionId,
    OrderInfo? orderInfo,
  }) => UpdateNewPreCheckoutQuery(
    id: id ?? this.id,
    senderUserId: senderUserId ?? this.senderUserId,
    currency: currency ?? this.currency,
    totalAmount: totalAmount ?? this.totalAmount,
    invoicePayload: invoicePayload ?? this.invoicePayload,
    shippingOptionId: shippingOptionId ?? this.shippingOptionId,
    orderInfo: orderInfo ?? this.orderInfo,
  );
}

extension UpdateNewCustomEventExtensions on UpdateNewCustomEvent {
  UpdateNewCustomEvent copyWith({String? event}) =>
      UpdateNewCustomEvent(event: event ?? this.event);
}

extension UpdateNewCustomQueryExtensions on UpdateNewCustomQuery {
  UpdateNewCustomQuery copyWith({int? id, String? data, int? timeout}) =>
      UpdateNewCustomQuery(
        id: id ?? this.id,
        data: data ?? this.data,
        timeout: timeout ?? this.timeout,
      );
}

extension UpdatePollExtensions on UpdatePoll {
  UpdatePoll copyWith({Poll? poll}) => UpdatePoll(poll: poll ?? this.poll);
}

extension UpdatePollAnswerExtensions on UpdatePollAnswer {
  UpdatePollAnswer copyWith({
    int? pollId,
    MessageSender? voterId,
    List<int>? optionIds,
  }) => UpdatePollAnswer(
    pollId: pollId ?? this.pollId,
    voterId: voterId ?? this.voterId,
    optionIds: optionIds ?? this.optionIds,
  );
}

extension UpdateChatMemberExtensions on UpdateChatMember {
  UpdateChatMember copyWith({
    int? chatId,
    int? actorUserId,
    int? date,
    ChatInviteLink? inviteLink,
    bool? viaJoinRequest,
    bool? viaChatFolderInviteLink,
    ChatMember? oldChatMember,
    ChatMember? newChatMember,
  }) => UpdateChatMember(
    chatId: chatId ?? this.chatId,
    actorUserId: actorUserId ?? this.actorUserId,
    date: date ?? this.date,
    inviteLink: inviteLink ?? this.inviteLink,
    viaJoinRequest: viaJoinRequest ?? this.viaJoinRequest,
    viaChatFolderInviteLink:
        viaChatFolderInviteLink ?? this.viaChatFolderInviteLink,
    oldChatMember: oldChatMember ?? this.oldChatMember,
    newChatMember: newChatMember ?? this.newChatMember,
  );
}

extension UpdateNewChatJoinRequestExtensions on UpdateNewChatJoinRequest {
  UpdateNewChatJoinRequest copyWith({
    int? chatId,
    ChatJoinRequest? request,
    int? userChatId,
    ChatInviteLink? inviteLink,
  }) => UpdateNewChatJoinRequest(
    chatId: chatId ?? this.chatId,
    request: request ?? this.request,
    userChatId: userChatId ?? this.userChatId,
    inviteLink: inviteLink ?? this.inviteLink,
  );
}

extension UpdateChatBoostExtensions on UpdateChatBoost {
  UpdateChatBoost copyWith({int? chatId, ChatBoost? boost}) => UpdateChatBoost(
    chatId: chatId ?? this.chatId,
    boost: boost ?? this.boost,
  );
}

extension UpdateMessageReactionExtensions on UpdateMessageReaction {
  UpdateMessageReaction copyWith({
    int? chatId,
    int? messageId,
    MessageSender? actorId,
    int? date,
    List<ReactionType>? oldReactionTypes,
    List<ReactionType>? newReactionTypes,
  }) => UpdateMessageReaction(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    actorId: actorId ?? this.actorId,
    date: date ?? this.date,
    oldReactionTypes: oldReactionTypes ?? this.oldReactionTypes,
    newReactionTypes: newReactionTypes ?? this.newReactionTypes,
  );
}

extension UpdateMessageReactionsExtensions on UpdateMessageReactions {
  UpdateMessageReactions copyWith({
    int? chatId,
    int? messageId,
    int? date,
    List<MessageReaction>? reactions,
  }) => UpdateMessageReactions(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    date: date ?? this.date,
    reactions: reactions ?? this.reactions,
  );
}

extension UpdatePaidMediaPurchasedExtensions on UpdatePaidMediaPurchased {
  UpdatePaidMediaPurchased copyWith({int? userId, String? payload}) =>
      UpdatePaidMediaPurchased(
        userId: userId ?? this.userId,
        payload: payload ?? this.payload,
      );
}

extension UpdatesExtensions on Updates {
  Updates copyWith({List<Update>? updates}) =>
      Updates(updates: updates ?? this.updates);
}

extension LogStreamExtensions on LogStream {
  TResult map<TResult extends Object?>({
    required TResult Function(LogStreamDefault value) $default,
    required TResult Function(LogStreamFile value) file,
    required TResult Function(LogStreamEmpty value) empty,
  }) {
    switch (getConstructor()) {
      case LogStreamDefault.constructor:
        return $default.call(this as LogStreamDefault);
      case LogStreamFile.constructor:
        return file.call(this as LogStreamFile);
      case LogStreamEmpty.constructor:
        return empty.call(this as LogStreamEmpty);
    }
    throw StateError('not handled type Generator');
  }

  TResult maybeMap<TResult extends Object?>({
    TResult Function(LogStreamDefault value)? $default,
    TResult Function(LogStreamFile value)? file,
    TResult Function(LogStreamEmpty value)? empty,
    required TResult Function() orElse,
  }) {
    switch (getConstructor()) {
      case LogStreamDefault.constructor:
        if ($default != null) {
          return $default.call(this as LogStreamDefault);
        }
        break;
      case LogStreamFile.constructor:
        if (file != null) {
          return file.call(this as LogStreamFile);
        }
        break;
      case LogStreamEmpty.constructor:
        if (empty != null) {
          return empty.call(this as LogStreamEmpty);
        }
        break;
    }
    return orElse.call();
  }
}

extension LogStreamFileExtensions on LogStreamFile {
  LogStreamFile copyWith({
    String? path,
    int? maxFileSize,
    bool? redirectStderr,
  }) => LogStreamFile(
    path: path ?? this.path,
    maxFileSize: maxFileSize ?? this.maxFileSize,
    redirectStderr: redirectStderr ?? this.redirectStderr,
  );
}

extension LogVerbosityLevelExtensions on LogVerbosityLevel {
  LogVerbosityLevel copyWith({int? verbosityLevel}) =>
      LogVerbosityLevel(verbosityLevel: verbosityLevel ?? this.verbosityLevel);
}

extension LogTagsExtensions on LogTags {
  LogTags copyWith({List<String>? tags}) => LogTags(tags: tags ?? this.tags);
}

extension UserSupportInfoExtensions on UserSupportInfo {
  UserSupportInfo copyWith({
    FormattedText? message,
    String? author,
    int? date,
  }) => UserSupportInfo(
    message: message ?? this.message,
    author: author ?? this.author,
    date: date ?? this.date,
  );
}

extension TestIntExtensions on TestInt {
  TestInt copyWith({int? value}) => TestInt(value: value ?? this.value);
}

extension TestStringExtensions on TestString {
  TestString copyWith({String? value}) =>
      TestString(value: value ?? this.value);
}

extension TestBytesExtensions on TestBytes {
  TestBytes copyWith({String? value}) => TestBytes(value: value ?? this.value);
}

extension TestVectorIntExtensions on TestVectorInt {
  TestVectorInt copyWith({List<int>? value}) =>
      TestVectorInt(value: value ?? this.value);
}

extension TestVectorIntObjectExtensions on TestVectorIntObject {
  TestVectorIntObject copyWith({List<TestInt>? value}) =>
      TestVectorIntObject(value: value ?? this.value);
}

extension TestVectorStringExtensions on TestVectorString {
  TestVectorString copyWith({List<String>? value}) =>
      TestVectorString(value: value ?? this.value);
}

extension TestVectorStringObjectExtensions on TestVectorStringObject {
  TestVectorStringObject copyWith({List<TestString>? value}) =>
      TestVectorStringObject(value: value ?? this.value);
}

extension SetTdlibParametersExtensions on SetTdlibParameters {
  SetTdlibParameters copyWith({
    bool? useTestDc,
    String? databaseDirectory,
    String? filesDirectory,
    String? databaseEncryptionKey,
    bool? useFileDatabase,
    bool? useChatInfoDatabase,
    bool? useMessageDatabase,
    bool? useSecretChats,
    int? apiId,
    String? apiHash,
    String? systemLanguageCode,
    String? deviceModel,
    String? systemVersion,
    String? applicationVersion,
  }) => SetTdlibParameters(
    useTestDc: useTestDc ?? this.useTestDc,
    databaseDirectory: databaseDirectory ?? this.databaseDirectory,
    filesDirectory: filesDirectory ?? this.filesDirectory,
    databaseEncryptionKey: databaseEncryptionKey ?? this.databaseEncryptionKey,
    useFileDatabase: useFileDatabase ?? this.useFileDatabase,
    useChatInfoDatabase: useChatInfoDatabase ?? this.useChatInfoDatabase,
    useMessageDatabase: useMessageDatabase ?? this.useMessageDatabase,
    useSecretChats: useSecretChats ?? this.useSecretChats,
    apiId: apiId ?? this.apiId,
    apiHash: apiHash ?? this.apiHash,
    systemLanguageCode: systemLanguageCode ?? this.systemLanguageCode,
    deviceModel: deviceModel ?? this.deviceModel,
    systemVersion: systemVersion ?? this.systemVersion,
    applicationVersion: applicationVersion ?? this.applicationVersion,
  );
}

extension SetAuthenticationPhoneNumberExtensions
    on SetAuthenticationPhoneNumber {
  SetAuthenticationPhoneNumber copyWith({
    String? phoneNumber,
    PhoneNumberAuthenticationSettings? settings,
  }) => SetAuthenticationPhoneNumber(
    phoneNumber: phoneNumber ?? this.phoneNumber,
    settings: settings ?? this.settings,
  );
}

extension CheckAuthenticationPremiumPurchaseExtensions
    on CheckAuthenticationPremiumPurchase {
  CheckAuthenticationPremiumPurchase copyWith({
    String? currency,
    int? amount,
  }) => CheckAuthenticationPremiumPurchase(
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
  );
}

extension SetAuthenticationPremiumPurchaseTransactionExtensions
    on SetAuthenticationPremiumPurchaseTransaction {
  SetAuthenticationPremiumPurchaseTransaction copyWith({
    StoreTransaction? transaction,
    bool? isRestore,
    String? currency,
    int? amount,
  }) => SetAuthenticationPremiumPurchaseTransaction(
    transaction: transaction ?? this.transaction,
    isRestore: isRestore ?? this.isRestore,
    currency: currency ?? this.currency,
    amount: amount ?? this.amount,
  );
}

extension SetAuthenticationEmailAddressExtensions
    on SetAuthenticationEmailAddress {
  SetAuthenticationEmailAddress copyWith({String? emailAddress}) =>
      SetAuthenticationEmailAddress(
        emailAddress: emailAddress ?? this.emailAddress,
      );
}

extension ResendAuthenticationCodeExtensions on ResendAuthenticationCode {
  ResendAuthenticationCode copyWith({ResendCodeReason? reason}) =>
      ResendAuthenticationCode(reason: reason ?? this.reason);
}

extension CheckAuthenticationEmailCodeExtensions
    on CheckAuthenticationEmailCode {
  CheckAuthenticationEmailCode copyWith({EmailAddressAuthentication? code}) =>
      CheckAuthenticationEmailCode(code: code ?? this.code);
}

extension CheckAuthenticationCodeExtensions on CheckAuthenticationCode {
  CheckAuthenticationCode copyWith({String? code}) =>
      CheckAuthenticationCode(code: code ?? this.code);
}

extension RequestQrCodeAuthenticationExtensions on RequestQrCodeAuthentication {
  RequestQrCodeAuthentication copyWith({List<int>? otherUserIds}) =>
      RequestQrCodeAuthentication(
        otherUserIds: otherUserIds ?? this.otherUserIds,
      );
}

extension RegisterUserExtensions on RegisterUser {
  RegisterUser copyWith({
    String? firstName,
    String? lastName,
    bool? disableNotification,
  }) => RegisterUser(
    firstName: firstName ?? this.firstName,
    lastName: lastName ?? this.lastName,
    disableNotification: disableNotification ?? this.disableNotification,
  );
}

extension CheckAuthenticationPasswordExtensions on CheckAuthenticationPassword {
  CheckAuthenticationPassword copyWith({String? password}) =>
      CheckAuthenticationPassword(password: password ?? this.password);
}

extension CheckAuthenticationPasswordRecoveryCodeExtensions
    on CheckAuthenticationPasswordRecoveryCode {
  CheckAuthenticationPasswordRecoveryCode copyWith({String? recoveryCode}) =>
      CheckAuthenticationPasswordRecoveryCode(
        recoveryCode: recoveryCode ?? this.recoveryCode,
      );
}

extension RecoverAuthenticationPasswordExtensions
    on RecoverAuthenticationPassword {
  RecoverAuthenticationPassword copyWith({
    String? recoveryCode,
    String? newPassword,
    String? newHint,
  }) => RecoverAuthenticationPassword(
    recoveryCode: recoveryCode ?? this.recoveryCode,
    newPassword: newPassword ?? this.newPassword,
    newHint: newHint ?? this.newHint,
  );
}

extension SendAuthenticationFirebaseSmsExtensions
    on SendAuthenticationFirebaseSms {
  SendAuthenticationFirebaseSms copyWith({String? token}) =>
      SendAuthenticationFirebaseSms(token: token ?? this.token);
}

extension ReportAuthenticationCodeMissingExtensions
    on ReportAuthenticationCodeMissing {
  ReportAuthenticationCodeMissing copyWith({String? mobileNetworkCode}) =>
      ReportAuthenticationCodeMissing(
        mobileNetworkCode: mobileNetworkCode ?? this.mobileNetworkCode,
      );
}

extension CheckAuthenticationBotTokenExtensions on CheckAuthenticationBotToken {
  CheckAuthenticationBotToken copyWith({String? token}) =>
      CheckAuthenticationBotToken(token: token ?? this.token);
}

extension ConfirmQrCodeAuthenticationExtensions on ConfirmQrCodeAuthentication {
  ConfirmQrCodeAuthentication copyWith({String? link}) =>
      ConfirmQrCodeAuthentication(link: link ?? this.link);
}

extension SetDatabaseEncryptionKeyExtensions on SetDatabaseEncryptionKey {
  SetDatabaseEncryptionKey copyWith({String? newEncryptionKey}) =>
      SetDatabaseEncryptionKey(
        newEncryptionKey: newEncryptionKey ?? this.newEncryptionKey,
      );
}

extension SetPasswordExtensions on SetPassword {
  SetPassword copyWith({
    String? oldPassword,
    String? newPassword,
    String? newHint,
    bool? setRecoveryEmailAddress,
    String? newRecoveryEmailAddress,
  }) => SetPassword(
    oldPassword: oldPassword ?? this.oldPassword,
    newPassword: newPassword ?? this.newPassword,
    newHint: newHint ?? this.newHint,
    setRecoveryEmailAddress:
        setRecoveryEmailAddress ?? this.setRecoveryEmailAddress,
    newRecoveryEmailAddress:
        newRecoveryEmailAddress ?? this.newRecoveryEmailAddress,
  );
}

extension SetLoginEmailAddressExtensions on SetLoginEmailAddress {
  SetLoginEmailAddress copyWith({String? newLoginEmailAddress}) =>
      SetLoginEmailAddress(
        newLoginEmailAddress: newLoginEmailAddress ?? this.newLoginEmailAddress,
      );
}

extension CheckLoginEmailAddressCodeExtensions on CheckLoginEmailAddressCode {
  CheckLoginEmailAddressCode copyWith({EmailAddressAuthentication? code}) =>
      CheckLoginEmailAddressCode(code: code ?? this.code);
}

extension GetRecoveryEmailAddressExtensions on GetRecoveryEmailAddress {
  GetRecoveryEmailAddress copyWith({String? password}) =>
      GetRecoveryEmailAddress(password: password ?? this.password);
}

extension SetRecoveryEmailAddressExtensions on SetRecoveryEmailAddress {
  SetRecoveryEmailAddress copyWith({
    String? password,
    String? newRecoveryEmailAddress,
  }) => SetRecoveryEmailAddress(
    password: password ?? this.password,
    newRecoveryEmailAddress:
        newRecoveryEmailAddress ?? this.newRecoveryEmailAddress,
  );
}

extension CheckRecoveryEmailAddressCodeExtensions
    on CheckRecoveryEmailAddressCode {
  CheckRecoveryEmailAddressCode copyWith({String? code}) =>
      CheckRecoveryEmailAddressCode(code: code ?? this.code);
}

extension CheckPasswordRecoveryCodeExtensions on CheckPasswordRecoveryCode {
  CheckPasswordRecoveryCode copyWith({String? recoveryCode}) =>
      CheckPasswordRecoveryCode(
        recoveryCode: recoveryCode ?? this.recoveryCode,
      );
}

extension RecoverPasswordExtensions on RecoverPassword {
  RecoverPassword copyWith({
    String? recoveryCode,
    String? newPassword,
    String? newHint,
  }) => RecoverPassword(
    recoveryCode: recoveryCode ?? this.recoveryCode,
    newPassword: newPassword ?? this.newPassword,
    newHint: newHint ?? this.newHint,
  );
}

extension CreateTemporaryPasswordExtensions on CreateTemporaryPassword {
  CreateTemporaryPassword copyWith({String? password, int? validFor}) =>
      CreateTemporaryPassword(
        password: password ?? this.password,
        validFor: validFor ?? this.validFor,
      );
}

extension GetUserExtensions on GetUser {
  GetUser copyWith({int? userId}) => GetUser(userId: userId ?? this.userId);
}

extension GetUserFullInfoExtensions on GetUserFullInfo {
  GetUserFullInfo copyWith({int? userId}) =>
      GetUserFullInfo(userId: userId ?? this.userId);
}

extension GetBasicGroupExtensions on GetBasicGroup {
  GetBasicGroup copyWith({int? basicGroupId}) =>
      GetBasicGroup(basicGroupId: basicGroupId ?? this.basicGroupId);
}

extension GetBasicGroupFullInfoExtensions on GetBasicGroupFullInfo {
  GetBasicGroupFullInfo copyWith({int? basicGroupId}) =>
      GetBasicGroupFullInfo(basicGroupId: basicGroupId ?? this.basicGroupId);
}

extension GetSupergroupExtensions on GetSupergroup {
  GetSupergroup copyWith({int? supergroupId}) =>
      GetSupergroup(supergroupId: supergroupId ?? this.supergroupId);
}

extension GetSupergroupFullInfoExtensions on GetSupergroupFullInfo {
  GetSupergroupFullInfo copyWith({int? supergroupId}) =>
      GetSupergroupFullInfo(supergroupId: supergroupId ?? this.supergroupId);
}

extension GetSecretChatExtensions on GetSecretChat {
  GetSecretChat copyWith({int? secretChatId}) =>
      GetSecretChat(secretChatId: secretChatId ?? this.secretChatId);
}

extension GetChatExtensions on GetChat {
  GetChat copyWith({int? chatId}) => GetChat(chatId: chatId ?? this.chatId);
}

extension GetMessageExtensions on GetMessage {
  GetMessage copyWith({int? chatId, int? messageId}) => GetMessage(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
  );
}

extension GetMessageLocallyExtensions on GetMessageLocally {
  GetMessageLocally copyWith({int? chatId, int? messageId}) =>
      GetMessageLocally(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension GetRepliedMessageExtensions on GetRepliedMessage {
  GetRepliedMessage copyWith({int? chatId, int? messageId}) =>
      GetRepliedMessage(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension GetChatPinnedMessageExtensions on GetChatPinnedMessage {
  GetChatPinnedMessage copyWith({int? chatId}) =>
      GetChatPinnedMessage(chatId: chatId ?? this.chatId);
}

extension GetCallbackQueryMessageExtensions on GetCallbackQueryMessage {
  GetCallbackQueryMessage copyWith({
    int? chatId,
    int? messageId,
    int? callbackQueryId,
  }) => GetCallbackQueryMessage(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    callbackQueryId: callbackQueryId ?? this.callbackQueryId,
  );
}

extension GetMessagesExtensions on GetMessages {
  GetMessages copyWith({int? chatId, List<int>? messageIds}) => GetMessages(
    chatId: chatId ?? this.chatId,
    messageIds: messageIds ?? this.messageIds,
  );
}

extension GetMessagePropertiesExtensions on GetMessageProperties {
  GetMessageProperties copyWith({int? chatId, int? messageId}) =>
      GetMessageProperties(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension GetMessageThreadExtensions on GetMessageThread {
  GetMessageThread copyWith({int? chatId, int? messageId}) => GetMessageThread(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
  );
}

extension GetMessageReadDateExtensions on GetMessageReadDate {
  GetMessageReadDate copyWith({int? chatId, int? messageId}) =>
      GetMessageReadDate(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension GetMessageViewersExtensions on GetMessageViewers {
  GetMessageViewers copyWith({int? chatId, int? messageId}) =>
      GetMessageViewers(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension GetMessageAuthorExtensions on GetMessageAuthor {
  GetMessageAuthor copyWith({int? chatId, int? messageId}) => GetMessageAuthor(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
  );
}

extension GetFileExtensions on GetFile {
  GetFile copyWith({int? fileId}) => GetFile(fileId: fileId ?? this.fileId);
}

extension GetRemoteFileExtensions on GetRemoteFile {
  GetRemoteFile copyWith({String? remoteFileId, FileType? fileType}) =>
      GetRemoteFile(
        remoteFileId: remoteFileId ?? this.remoteFileId,
        fileType: fileType ?? this.fileType,
      );
}

extension LoadChatsExtensions on LoadChats {
  LoadChats copyWith({ChatList? chatList, int? limit}) => LoadChats(
    chatList: chatList ?? this.chatList,
    limit: limit ?? this.limit,
  );
}

extension GetChatsExtensions on GetChats {
  GetChats copyWith({ChatList? chatList, int? limit}) =>
      GetChats(chatList: chatList ?? this.chatList, limit: limit ?? this.limit);
}

extension SearchPublicChatExtensions on SearchPublicChat {
  SearchPublicChat copyWith({String? username}) =>
      SearchPublicChat(username: username ?? this.username);
}

extension SearchPublicChatsExtensions on SearchPublicChats {
  SearchPublicChats copyWith({String? query}) =>
      SearchPublicChats(query: query ?? this.query);
}

extension SearchChatsExtensions on SearchChats {
  SearchChats copyWith({String? query, int? limit}) =>
      SearchChats(query: query ?? this.query, limit: limit ?? this.limit);
}

extension SearchChatsOnServerExtensions on SearchChatsOnServer {
  SearchChatsOnServer copyWith({String? query, int? limit}) =>
      SearchChatsOnServer(
        query: query ?? this.query,
        limit: limit ?? this.limit,
      );
}

extension GetChatSimilarChatsExtensions on GetChatSimilarChats {
  GetChatSimilarChats copyWith({int? chatId}) =>
      GetChatSimilarChats(chatId: chatId ?? this.chatId);
}

extension GetChatSimilarChatCountExtensions on GetChatSimilarChatCount {
  GetChatSimilarChatCount copyWith({int? chatId, bool? returnLocal}) =>
      GetChatSimilarChatCount(
        chatId: chatId ?? this.chatId,
        returnLocal: returnLocal ?? this.returnLocal,
      );
}

extension OpenChatSimilarChatExtensions on OpenChatSimilarChat {
  OpenChatSimilarChat copyWith({int? chatId, int? openedChatId}) =>
      OpenChatSimilarChat(
        chatId: chatId ?? this.chatId,
        openedChatId: openedChatId ?? this.openedChatId,
      );
}

extension GetBotSimilarBotsExtensions on GetBotSimilarBots {
  GetBotSimilarBots copyWith({int? botUserId}) =>
      GetBotSimilarBots(botUserId: botUserId ?? this.botUserId);
}

extension GetBotSimilarBotCountExtensions on GetBotSimilarBotCount {
  GetBotSimilarBotCount copyWith({int? botUserId, bool? returnLocal}) =>
      GetBotSimilarBotCount(
        botUserId: botUserId ?? this.botUserId,
        returnLocal: returnLocal ?? this.returnLocal,
      );
}

extension OpenBotSimilarBotExtensions on OpenBotSimilarBot {
  OpenBotSimilarBot copyWith({int? botUserId, int? openedBotUserId}) =>
      OpenBotSimilarBot(
        botUserId: botUserId ?? this.botUserId,
        openedBotUserId: openedBotUserId ?? this.openedBotUserId,
      );
}

extension GetTopChatsExtensions on GetTopChats {
  GetTopChats copyWith({TopChatCategory? category, int? limit}) => GetTopChats(
    category: category ?? this.category,
    limit: limit ?? this.limit,
  );
}

extension RemoveTopChatExtensions on RemoveTopChat {
  RemoveTopChat copyWith({TopChatCategory? category, int? chatId}) =>
      RemoveTopChat(
        category: category ?? this.category,
        chatId: chatId ?? this.chatId,
      );
}

extension SearchRecentlyFoundChatsExtensions on SearchRecentlyFoundChats {
  SearchRecentlyFoundChats copyWith({String? query, int? limit}) =>
      SearchRecentlyFoundChats(
        query: query ?? this.query,
        limit: limit ?? this.limit,
      );
}

extension AddRecentlyFoundChatExtensions on AddRecentlyFoundChat {
  AddRecentlyFoundChat copyWith({int? chatId}) =>
      AddRecentlyFoundChat(chatId: chatId ?? this.chatId);
}

extension RemoveRecentlyFoundChatExtensions on RemoveRecentlyFoundChat {
  RemoveRecentlyFoundChat copyWith({int? chatId}) =>
      RemoveRecentlyFoundChat(chatId: chatId ?? this.chatId);
}

extension GetRecentlyOpenedChatsExtensions on GetRecentlyOpenedChats {
  GetRecentlyOpenedChats copyWith({int? limit}) =>
      GetRecentlyOpenedChats(limit: limit ?? this.limit);
}

extension CheckChatUsernameExtensions on CheckChatUsername {
  CheckChatUsername copyWith({int? chatId, String? username}) =>
      CheckChatUsername(
        chatId: chatId ?? this.chatId,
        username: username ?? this.username,
      );
}

extension GetCreatedPublicChatsExtensions on GetCreatedPublicChats {
  GetCreatedPublicChats copyWith({PublicChatType? type}) =>
      GetCreatedPublicChats(type: type ?? this.type);
}

extension CheckCreatedPublicChatsLimitExtensions
    on CheckCreatedPublicChatsLimit {
  CheckCreatedPublicChatsLimit copyWith({PublicChatType? type}) =>
      CheckCreatedPublicChatsLimit(type: type ?? this.type);
}

extension LoadDirectMessagesChatTopicsExtensions
    on LoadDirectMessagesChatTopics {
  LoadDirectMessagesChatTopics copyWith({int? chatId, int? limit}) =>
      LoadDirectMessagesChatTopics(
        chatId: chatId ?? this.chatId,
        limit: limit ?? this.limit,
      );
}

extension GetDirectMessagesChatTopicExtensions on GetDirectMessagesChatTopic {
  GetDirectMessagesChatTopic copyWith({int? chatId, int? topicId}) =>
      GetDirectMessagesChatTopic(
        chatId: chatId ?? this.chatId,
        topicId: topicId ?? this.topicId,
      );
}

extension GetDirectMessagesChatTopicHistoryExtensions
    on GetDirectMessagesChatTopicHistory {
  GetDirectMessagesChatTopicHistory copyWith({
    int? chatId,
    int? topicId,
    int? fromMessageId,
    int? offset,
    int? limit,
  }) => GetDirectMessagesChatTopicHistory(
    chatId: chatId ?? this.chatId,
    topicId: topicId ?? this.topicId,
    fromMessageId: fromMessageId ?? this.fromMessageId,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension GetDirectMessagesChatTopicMessageByDateExtensions
    on GetDirectMessagesChatTopicMessageByDate {
  GetDirectMessagesChatTopicMessageByDate copyWith({
    int? chatId,
    int? topicId,
    int? date,
  }) => GetDirectMessagesChatTopicMessageByDate(
    chatId: chatId ?? this.chatId,
    topicId: topicId ?? this.topicId,
    date: date ?? this.date,
  );
}

extension DeleteDirectMessagesChatTopicHistoryExtensions
    on DeleteDirectMessagesChatTopicHistory {
  DeleteDirectMessagesChatTopicHistory copyWith({int? chatId, int? topicId}) =>
      DeleteDirectMessagesChatTopicHistory(
        chatId: chatId ?? this.chatId,
        topicId: topicId ?? this.topicId,
      );
}

extension DeleteDirectMessagesChatTopicMessagesByDateExtensions
    on DeleteDirectMessagesChatTopicMessagesByDate {
  DeleteDirectMessagesChatTopicMessagesByDate copyWith({
    int? chatId,
    int? topicId,
    int? minDate,
    int? maxDate,
  }) => DeleteDirectMessagesChatTopicMessagesByDate(
    chatId: chatId ?? this.chatId,
    topicId: topicId ?? this.topicId,
    minDate: minDate ?? this.minDate,
    maxDate: maxDate ?? this.maxDate,
  );
}

extension SetDirectMessagesChatTopicIsMarkedAsUnreadExtensions
    on SetDirectMessagesChatTopicIsMarkedAsUnread {
  SetDirectMessagesChatTopicIsMarkedAsUnread copyWith({
    int? chatId,
    int? topicId,
    bool? isMarkedAsUnread,
  }) => SetDirectMessagesChatTopicIsMarkedAsUnread(
    chatId: chatId ?? this.chatId,
    topicId: topicId ?? this.topicId,
    isMarkedAsUnread: isMarkedAsUnread ?? this.isMarkedAsUnread,
  );
}

extension SetDirectMessagesChatTopicDraftMessageExtensions
    on SetDirectMessagesChatTopicDraftMessage {
  SetDirectMessagesChatTopicDraftMessage copyWith({
    int? chatId,
    int? topicId,
    DraftMessage? draftMessage,
  }) => SetDirectMessagesChatTopicDraftMessage(
    chatId: chatId ?? this.chatId,
    topicId: topicId ?? this.topicId,
    draftMessage: draftMessage ?? this.draftMessage,
  );
}

extension UnpinAllDirectMessagesChatTopicMessagesExtensions
    on UnpinAllDirectMessagesChatTopicMessages {
  UnpinAllDirectMessagesChatTopicMessages copyWith({
    int? chatId,
    int? topicId,
  }) => UnpinAllDirectMessagesChatTopicMessages(
    chatId: chatId ?? this.chatId,
    topicId: topicId ?? this.topicId,
  );
}

extension ReadAllDirectMessagesChatTopicReactionsExtensions
    on ReadAllDirectMessagesChatTopicReactions {
  ReadAllDirectMessagesChatTopicReactions copyWith({
    int? chatId,
    int? topicId,
  }) => ReadAllDirectMessagesChatTopicReactions(
    chatId: chatId ?? this.chatId,
    topicId: topicId ?? this.topicId,
  );
}

extension GetDirectMessagesChatTopicRevenueExtensions
    on GetDirectMessagesChatTopicRevenue {
  GetDirectMessagesChatTopicRevenue copyWith({int? chatId, int? topicId}) =>
      GetDirectMessagesChatTopicRevenue(
        chatId: chatId ?? this.chatId,
        topicId: topicId ?? this.topicId,
      );
}

extension ToggleDirectMessagesChatTopicCanSendUnpaidMessagesExtensions
    on ToggleDirectMessagesChatTopicCanSendUnpaidMessages {
  ToggleDirectMessagesChatTopicCanSendUnpaidMessages copyWith({
    int? chatId,
    int? topicId,
    bool? canSendUnpaidMessages,
    bool? refundPayments,
  }) => ToggleDirectMessagesChatTopicCanSendUnpaidMessages(
    chatId: chatId ?? this.chatId,
    topicId: topicId ?? this.topicId,
    canSendUnpaidMessages: canSendUnpaidMessages ?? this.canSendUnpaidMessages,
    refundPayments: refundPayments ?? this.refundPayments,
  );
}

extension LoadSavedMessagesTopicsExtensions on LoadSavedMessagesTopics {
  LoadSavedMessagesTopics copyWith({int? limit}) =>
      LoadSavedMessagesTopics(limit: limit ?? this.limit);
}

extension GetSavedMessagesTopicHistoryExtensions
    on GetSavedMessagesTopicHistory {
  GetSavedMessagesTopicHistory copyWith({
    int? savedMessagesTopicId,
    int? fromMessageId,
    int? offset,
    int? limit,
  }) => GetSavedMessagesTopicHistory(
    savedMessagesTopicId: savedMessagesTopicId ?? this.savedMessagesTopicId,
    fromMessageId: fromMessageId ?? this.fromMessageId,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension GetSavedMessagesTopicMessageByDateExtensions
    on GetSavedMessagesTopicMessageByDate {
  GetSavedMessagesTopicMessageByDate copyWith({
    int? savedMessagesTopicId,
    int? date,
  }) => GetSavedMessagesTopicMessageByDate(
    savedMessagesTopicId: savedMessagesTopicId ?? this.savedMessagesTopicId,
    date: date ?? this.date,
  );
}

extension DeleteSavedMessagesTopicHistoryExtensions
    on DeleteSavedMessagesTopicHistory {
  DeleteSavedMessagesTopicHistory copyWith({int? savedMessagesTopicId}) =>
      DeleteSavedMessagesTopicHistory(
        savedMessagesTopicId: savedMessagesTopicId ?? this.savedMessagesTopicId,
      );
}

extension DeleteSavedMessagesTopicMessagesByDateExtensions
    on DeleteSavedMessagesTopicMessagesByDate {
  DeleteSavedMessagesTopicMessagesByDate copyWith({
    int? savedMessagesTopicId,
    int? minDate,
    int? maxDate,
  }) => DeleteSavedMessagesTopicMessagesByDate(
    savedMessagesTopicId: savedMessagesTopicId ?? this.savedMessagesTopicId,
    minDate: minDate ?? this.minDate,
    maxDate: maxDate ?? this.maxDate,
  );
}

extension ToggleSavedMessagesTopicIsPinnedExtensions
    on ToggleSavedMessagesTopicIsPinned {
  ToggleSavedMessagesTopicIsPinned copyWith({
    int? savedMessagesTopicId,
    bool? isPinned,
  }) => ToggleSavedMessagesTopicIsPinned(
    savedMessagesTopicId: savedMessagesTopicId ?? this.savedMessagesTopicId,
    isPinned: isPinned ?? this.isPinned,
  );
}

extension SetPinnedSavedMessagesTopicsExtensions
    on SetPinnedSavedMessagesTopics {
  SetPinnedSavedMessagesTopics copyWith({List<int>? savedMessagesTopicIds}) =>
      SetPinnedSavedMessagesTopics(
        savedMessagesTopicIds:
            savedMessagesTopicIds ?? this.savedMessagesTopicIds,
      );
}

extension GetGroupsInCommonExtensions on GetGroupsInCommon {
  GetGroupsInCommon copyWith({int? userId, int? offsetChatId, int? limit}) =>
      GetGroupsInCommon(
        userId: userId ?? this.userId,
        offsetChatId: offsetChatId ?? this.offsetChatId,
        limit: limit ?? this.limit,
      );
}

extension GetChatHistoryExtensions on GetChatHistory {
  GetChatHistory copyWith({
    int? chatId,
    int? fromMessageId,
    int? offset,
    int? limit,
    bool? onlyLocal,
  }) => GetChatHistory(
    chatId: chatId ?? this.chatId,
    fromMessageId: fromMessageId ?? this.fromMessageId,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
    onlyLocal: onlyLocal ?? this.onlyLocal,
  );
}

extension GetMessageThreadHistoryExtensions on GetMessageThreadHistory {
  GetMessageThreadHistory copyWith({
    int? chatId,
    int? messageId,
    int? fromMessageId,
    int? offset,
    int? limit,
  }) => GetMessageThreadHistory(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    fromMessageId: fromMessageId ?? this.fromMessageId,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension DeleteChatHistoryExtensions on DeleteChatHistory {
  DeleteChatHistory copyWith({
    int? chatId,
    bool? removeFromChatList,
    bool? revoke,
  }) => DeleteChatHistory(
    chatId: chatId ?? this.chatId,
    removeFromChatList: removeFromChatList ?? this.removeFromChatList,
    revoke: revoke ?? this.revoke,
  );
}

extension DeleteChatExtensions on DeleteChat {
  DeleteChat copyWith({int? chatId}) =>
      DeleteChat(chatId: chatId ?? this.chatId);
}

extension SearchChatMessagesExtensions on SearchChatMessages {
  SearchChatMessages copyWith({
    int? chatId,
    MessageTopic? topicId,
    String? query,
    MessageSender? senderId,
    int? fromMessageId,
    int? offset,
    int? limit,
    SearchMessagesFilter? filter,
  }) => SearchChatMessages(
    chatId: chatId ?? this.chatId,
    topicId: topicId ?? this.topicId,
    query: query ?? this.query,
    senderId: senderId ?? this.senderId,
    fromMessageId: fromMessageId ?? this.fromMessageId,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
    filter: filter ?? this.filter,
  );
}

extension SearchMessagesExtensions on SearchMessages {
  SearchMessages copyWith({
    ChatList? chatList,
    String? query,
    String? offset,
    int? limit,
    SearchMessagesFilter? filter,
    SearchMessagesChatTypeFilter? chatTypeFilter,
    int? minDate,
    int? maxDate,
  }) => SearchMessages(
    chatList: chatList ?? this.chatList,
    query: query ?? this.query,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
    filter: filter ?? this.filter,
    chatTypeFilter: chatTypeFilter ?? this.chatTypeFilter,
    minDate: minDate ?? this.minDate,
    maxDate: maxDate ?? this.maxDate,
  );
}

extension SearchSecretMessagesExtensions on SearchSecretMessages {
  SearchSecretMessages copyWith({
    int? chatId,
    String? query,
    String? offset,
    int? limit,
    SearchMessagesFilter? filter,
  }) => SearchSecretMessages(
    chatId: chatId ?? this.chatId,
    query: query ?? this.query,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
    filter: filter ?? this.filter,
  );
}

extension SearchSavedMessagesExtensions on SearchSavedMessages {
  SearchSavedMessages copyWith({
    int? savedMessagesTopicId,
    ReactionType? tag,
    String? query,
    int? fromMessageId,
    int? offset,
    int? limit,
  }) => SearchSavedMessages(
    savedMessagesTopicId: savedMessagesTopicId ?? this.savedMessagesTopicId,
    tag: tag ?? this.tag,
    query: query ?? this.query,
    fromMessageId: fromMessageId ?? this.fromMessageId,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension SearchCallMessagesExtensions on SearchCallMessages {
  SearchCallMessages copyWith({String? offset, int? limit, bool? onlyMissed}) =>
      SearchCallMessages(
        offset: offset ?? this.offset,
        limit: limit ?? this.limit,
        onlyMissed: onlyMissed ?? this.onlyMissed,
      );
}

extension SearchOutgoingDocumentMessagesExtensions
    on SearchOutgoingDocumentMessages {
  SearchOutgoingDocumentMessages copyWith({String? query, int? limit}) =>
      SearchOutgoingDocumentMessages(
        query: query ?? this.query,
        limit: limit ?? this.limit,
      );
}

extension SearchPublicMessagesByTagExtensions on SearchPublicMessagesByTag {
  SearchPublicMessagesByTag copyWith({
    String? tag,
    String? offset,
    int? limit,
  }) => SearchPublicMessagesByTag(
    tag: tag ?? this.tag,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension SearchPublicStoriesByTagExtensions on SearchPublicStoriesByTag {
  SearchPublicStoriesByTag copyWith({
    int? storyPosterChatId,
    String? tag,
    String? offset,
    int? limit,
  }) => SearchPublicStoriesByTag(
    storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
    tag: tag ?? this.tag,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension SearchPublicStoriesByLocationExtensions
    on SearchPublicStoriesByLocation {
  SearchPublicStoriesByLocation copyWith({
    LocationAddress? address,
    String? offset,
    int? limit,
  }) => SearchPublicStoriesByLocation(
    address: address ?? this.address,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension SearchPublicStoriesByVenueExtensions on SearchPublicStoriesByVenue {
  SearchPublicStoriesByVenue copyWith({
    String? venueProvider,
    String? venueId,
    String? offset,
    int? limit,
  }) => SearchPublicStoriesByVenue(
    venueProvider: venueProvider ?? this.venueProvider,
    venueId: venueId ?? this.venueId,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension GetSearchedForTagsExtensions on GetSearchedForTags {
  GetSearchedForTags copyWith({String? tagPrefix, int? limit}) =>
      GetSearchedForTags(
        tagPrefix: tagPrefix ?? this.tagPrefix,
        limit: limit ?? this.limit,
      );
}

extension RemoveSearchedForTagExtensions on RemoveSearchedForTag {
  RemoveSearchedForTag copyWith({String? tag}) =>
      RemoveSearchedForTag(tag: tag ?? this.tag);
}

extension ClearSearchedForTagsExtensions on ClearSearchedForTags {
  ClearSearchedForTags copyWith({bool? clearCashtags}) =>
      ClearSearchedForTags(clearCashtags: clearCashtags ?? this.clearCashtags);
}

extension DeleteAllCallMessagesExtensions on DeleteAllCallMessages {
  DeleteAllCallMessages copyWith({bool? revoke}) =>
      DeleteAllCallMessages(revoke: revoke ?? this.revoke);
}

extension SearchChatRecentLocationMessagesExtensions
    on SearchChatRecentLocationMessages {
  SearchChatRecentLocationMessages copyWith({int? chatId, int? limit}) =>
      SearchChatRecentLocationMessages(
        chatId: chatId ?? this.chatId,
        limit: limit ?? this.limit,
      );
}

extension GetChatMessageByDateExtensions on GetChatMessageByDate {
  GetChatMessageByDate copyWith({int? chatId, int? date}) =>
      GetChatMessageByDate(
        chatId: chatId ?? this.chatId,
        date: date ?? this.date,
      );
}

extension GetChatSparseMessagePositionsExtensions
    on GetChatSparseMessagePositions {
  GetChatSparseMessagePositions copyWith({
    int? chatId,
    SearchMessagesFilter? filter,
    int? fromMessageId,
    int? limit,
    int? savedMessagesTopicId,
  }) => GetChatSparseMessagePositions(
    chatId: chatId ?? this.chatId,
    filter: filter ?? this.filter,
    fromMessageId: fromMessageId ?? this.fromMessageId,
    limit: limit ?? this.limit,
    savedMessagesTopicId: savedMessagesTopicId ?? this.savedMessagesTopicId,
  );
}

extension GetChatMessageCalendarExtensions on GetChatMessageCalendar {
  GetChatMessageCalendar copyWith({
    int? chatId,
    MessageTopic? topicId,
    SearchMessagesFilter? filter,
    int? fromMessageId,
  }) => GetChatMessageCalendar(
    chatId: chatId ?? this.chatId,
    topicId: topicId ?? this.topicId,
    filter: filter ?? this.filter,
    fromMessageId: fromMessageId ?? this.fromMessageId,
  );
}

extension GetChatMessageCountExtensions on GetChatMessageCount {
  GetChatMessageCount copyWith({
    int? chatId,
    MessageTopic? topicId,
    SearchMessagesFilter? filter,
    bool? returnLocal,
  }) => GetChatMessageCount(
    chatId: chatId ?? this.chatId,
    topicId: topicId ?? this.topicId,
    filter: filter ?? this.filter,
    returnLocal: returnLocal ?? this.returnLocal,
  );
}

extension GetChatMessagePositionExtensions on GetChatMessagePosition {
  GetChatMessagePosition copyWith({
    int? chatId,
    MessageTopic? topicId,
    SearchMessagesFilter? filter,
    int? messageId,
  }) => GetChatMessagePosition(
    chatId: chatId ?? this.chatId,
    topicId: topicId ?? this.topicId,
    filter: filter ?? this.filter,
    messageId: messageId ?? this.messageId,
  );
}

extension GetChatScheduledMessagesExtensions on GetChatScheduledMessages {
  GetChatScheduledMessages copyWith({int? chatId}) =>
      GetChatScheduledMessages(chatId: chatId ?? this.chatId);
}

extension GetChatSponsoredMessagesExtensions on GetChatSponsoredMessages {
  GetChatSponsoredMessages copyWith({int? chatId}) =>
      GetChatSponsoredMessages(chatId: chatId ?? this.chatId);
}

extension ClickChatSponsoredMessageExtensions on ClickChatSponsoredMessage {
  ClickChatSponsoredMessage copyWith({
    int? chatId,
    int? messageId,
    bool? isMediaClick,
    bool? fromFullscreen,
  }) => ClickChatSponsoredMessage(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    isMediaClick: isMediaClick ?? this.isMediaClick,
    fromFullscreen: fromFullscreen ?? this.fromFullscreen,
  );
}

extension ReportChatSponsoredMessageExtensions on ReportChatSponsoredMessage {
  ReportChatSponsoredMessage copyWith({
    int? chatId,
    int? messageId,
    String? optionId,
  }) => ReportChatSponsoredMessage(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    optionId: optionId ?? this.optionId,
  );
}

extension GetSearchSponsoredChatsExtensions on GetSearchSponsoredChats {
  GetSearchSponsoredChats copyWith({String? query}) =>
      GetSearchSponsoredChats(query: query ?? this.query);
}

extension ViewSponsoredChatExtensions on ViewSponsoredChat {
  ViewSponsoredChat copyWith({int? sponsoredChatUniqueId}) => ViewSponsoredChat(
    sponsoredChatUniqueId: sponsoredChatUniqueId ?? this.sponsoredChatUniqueId,
  );
}

extension OpenSponsoredChatExtensions on OpenSponsoredChat {
  OpenSponsoredChat copyWith({int? sponsoredChatUniqueId}) => OpenSponsoredChat(
    sponsoredChatUniqueId: sponsoredChatUniqueId ?? this.sponsoredChatUniqueId,
  );
}

extension ReportSponsoredChatExtensions on ReportSponsoredChat {
  ReportSponsoredChat copyWith({
    int? sponsoredChatUniqueId,
    String? optionId,
  }) => ReportSponsoredChat(
    sponsoredChatUniqueId: sponsoredChatUniqueId ?? this.sponsoredChatUniqueId,
    optionId: optionId ?? this.optionId,
  );
}

extension GetVideoMessageAdvertisementsExtensions
    on GetVideoMessageAdvertisements {
  GetVideoMessageAdvertisements copyWith({int? chatId, int? messageId}) =>
      GetVideoMessageAdvertisements(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension ViewVideoMessageAdvertisementExtensions
    on ViewVideoMessageAdvertisement {
  ViewVideoMessageAdvertisement copyWith({int? advertisementUniqueId}) =>
      ViewVideoMessageAdvertisement(
        advertisementUniqueId:
            advertisementUniqueId ?? this.advertisementUniqueId,
      );
}

extension ClickVideoMessageAdvertisementExtensions
    on ClickVideoMessageAdvertisement {
  ClickVideoMessageAdvertisement copyWith({int? advertisementUniqueId}) =>
      ClickVideoMessageAdvertisement(
        advertisementUniqueId:
            advertisementUniqueId ?? this.advertisementUniqueId,
      );
}

extension ReportVideoMessageAdvertisementExtensions
    on ReportVideoMessageAdvertisement {
  ReportVideoMessageAdvertisement copyWith({
    int? advertisementUniqueId,
    String? optionId,
  }) => ReportVideoMessageAdvertisement(
    advertisementUniqueId: advertisementUniqueId ?? this.advertisementUniqueId,
    optionId: optionId ?? this.optionId,
  );
}

extension RemoveNotificationExtensions on RemoveNotification {
  RemoveNotification copyWith({
    int? notificationGroupId,
    int? notificationId,
  }) => RemoveNotification(
    notificationGroupId: notificationGroupId ?? this.notificationGroupId,
    notificationId: notificationId ?? this.notificationId,
  );
}

extension RemoveNotificationGroupExtensions on RemoveNotificationGroup {
  RemoveNotificationGroup copyWith({
    int? notificationGroupId,
    int? maxNotificationId,
  }) => RemoveNotificationGroup(
    notificationGroupId: notificationGroupId ?? this.notificationGroupId,
    maxNotificationId: maxNotificationId ?? this.maxNotificationId,
  );
}

extension GetMessageLinkExtensions on GetMessageLink {
  GetMessageLink copyWith({
    int? chatId,
    int? messageId,
    int? mediaTimestamp,
    bool? forAlbum,
    bool? inMessageThread,
  }) => GetMessageLink(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    mediaTimestamp: mediaTimestamp ?? this.mediaTimestamp,
    forAlbum: forAlbum ?? this.forAlbum,
    inMessageThread: inMessageThread ?? this.inMessageThread,
  );
}

extension GetMessageEmbeddingCodeExtensions on GetMessageEmbeddingCode {
  GetMessageEmbeddingCode copyWith({
    int? chatId,
    int? messageId,
    bool? forAlbum,
  }) => GetMessageEmbeddingCode(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    forAlbum: forAlbum ?? this.forAlbum,
  );
}

extension GetMessageLinkInfoExtensions on GetMessageLinkInfo {
  GetMessageLinkInfo copyWith({String? url}) =>
      GetMessageLinkInfo(url: url ?? this.url);
}

extension TranslateTextExtensions on TranslateText {
  TranslateText copyWith({FormattedText? text, String? toLanguageCode}) =>
      TranslateText(
        text: text ?? this.text,
        toLanguageCode: toLanguageCode ?? this.toLanguageCode,
      );
}

extension TranslateMessageTextExtensions on TranslateMessageText {
  TranslateMessageText copyWith({
    int? chatId,
    int? messageId,
    String? toLanguageCode,
  }) => TranslateMessageText(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    toLanguageCode: toLanguageCode ?? this.toLanguageCode,
  );
}

extension RecognizeSpeechExtensions on RecognizeSpeech {
  RecognizeSpeech copyWith({int? chatId, int? messageId}) => RecognizeSpeech(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
  );
}

extension RateSpeechRecognitionExtensions on RateSpeechRecognition {
  RateSpeechRecognition copyWith({int? chatId, int? messageId, bool? isGood}) =>
      RateSpeechRecognition(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
        isGood: isGood ?? this.isGood,
      );
}

extension GetChatAvailableMessageSendersExtensions
    on GetChatAvailableMessageSenders {
  GetChatAvailableMessageSenders copyWith({int? chatId}) =>
      GetChatAvailableMessageSenders(chatId: chatId ?? this.chatId);
}

extension SetChatMessageSenderExtensions on SetChatMessageSender {
  SetChatMessageSender copyWith({
    int? chatId,
    MessageSender? messageSenderId,
  }) => SetChatMessageSender(
    chatId: chatId ?? this.chatId,
    messageSenderId: messageSenderId ?? this.messageSenderId,
  );
}

extension SendMessageExtensions on SendMessage {
  SendMessage copyWith({
    int? chatId,
    int? messageThreadId,
    InputMessageReplyTo? replyTo,
    MessageSendOptions? options,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => SendMessage(
    chatId: chatId ?? this.chatId,
    messageThreadId: messageThreadId ?? this.messageThreadId,
    replyTo: replyTo ?? this.replyTo,
    options: options ?? this.options,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension SendMessageAlbumExtensions on SendMessageAlbum {
  SendMessageAlbum copyWith({
    int? chatId,
    int? messageThreadId,
    InputMessageReplyTo? replyTo,
    MessageSendOptions? options,
    List<InputMessageContent>? inputMessageContents,
  }) => SendMessageAlbum(
    chatId: chatId ?? this.chatId,
    messageThreadId: messageThreadId ?? this.messageThreadId,
    replyTo: replyTo ?? this.replyTo,
    options: options ?? this.options,
    inputMessageContents: inputMessageContents ?? this.inputMessageContents,
  );
}

extension SendBotStartMessageExtensions on SendBotStartMessage {
  SendBotStartMessage copyWith({
    int? botUserId,
    int? chatId,
    String? parameter,
  }) => SendBotStartMessage(
    botUserId: botUserId ?? this.botUserId,
    chatId: chatId ?? this.chatId,
    parameter: parameter ?? this.parameter,
  );
}

extension SendInlineQueryResultMessageExtensions
    on SendInlineQueryResultMessage {
  SendInlineQueryResultMessage copyWith({
    int? chatId,
    int? messageThreadId,
    InputMessageReplyTo? replyTo,
    MessageSendOptions? options,
    int? queryId,
    String? resultId,
    bool? hideViaBot,
  }) => SendInlineQueryResultMessage(
    chatId: chatId ?? this.chatId,
    messageThreadId: messageThreadId ?? this.messageThreadId,
    replyTo: replyTo ?? this.replyTo,
    options: options ?? this.options,
    queryId: queryId ?? this.queryId,
    resultId: resultId ?? this.resultId,
    hideViaBot: hideViaBot ?? this.hideViaBot,
  );
}

extension ForwardMessagesExtensions on ForwardMessages {
  ForwardMessages copyWith({
    int? chatId,
    int? messageThreadId,
    int? fromChatId,
    List<int>? messageIds,
    MessageSendOptions? options,
    bool? sendCopy,
    bool? removeCaption,
  }) => ForwardMessages(
    chatId: chatId ?? this.chatId,
    messageThreadId: messageThreadId ?? this.messageThreadId,
    fromChatId: fromChatId ?? this.fromChatId,
    messageIds: messageIds ?? this.messageIds,
    options: options ?? this.options,
    sendCopy: sendCopy ?? this.sendCopy,
    removeCaption: removeCaption ?? this.removeCaption,
  );
}

extension SendQuickReplyShortcutMessagesExtensions
    on SendQuickReplyShortcutMessages {
  SendQuickReplyShortcutMessages copyWith({
    int? chatId,
    int? shortcutId,
    int? sendingId,
  }) => SendQuickReplyShortcutMessages(
    chatId: chatId ?? this.chatId,
    shortcutId: shortcutId ?? this.shortcutId,
    sendingId: sendingId ?? this.sendingId,
  );
}

extension ResendMessagesExtensions on ResendMessages {
  ResendMessages copyWith({
    int? chatId,
    List<int>? messageIds,
    InputTextQuote? quote,
    int? paidMessageStarCount,
  }) => ResendMessages(
    chatId: chatId ?? this.chatId,
    messageIds: messageIds ?? this.messageIds,
    quote: quote ?? this.quote,
    paidMessageStarCount: paidMessageStarCount ?? this.paidMessageStarCount,
  );
}

extension AddLocalMessageExtensions on AddLocalMessage {
  AddLocalMessage copyWith({
    int? chatId,
    MessageSender? senderId,
    InputMessageReplyTo? replyTo,
    bool? disableNotification,
    InputMessageContent? inputMessageContent,
  }) => AddLocalMessage(
    chatId: chatId ?? this.chatId,
    senderId: senderId ?? this.senderId,
    replyTo: replyTo ?? this.replyTo,
    disableNotification: disableNotification ?? this.disableNotification,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension DeleteMessagesExtensions on DeleteMessages {
  DeleteMessages copyWith({int? chatId, List<int>? messageIds, bool? revoke}) =>
      DeleteMessages(
        chatId: chatId ?? this.chatId,
        messageIds: messageIds ?? this.messageIds,
        revoke: revoke ?? this.revoke,
      );
}

extension DeleteChatMessagesBySenderExtensions on DeleteChatMessagesBySender {
  DeleteChatMessagesBySender copyWith({int? chatId, MessageSender? senderId}) =>
      DeleteChatMessagesBySender(
        chatId: chatId ?? this.chatId,
        senderId: senderId ?? this.senderId,
      );
}

extension DeleteChatMessagesByDateExtensions on DeleteChatMessagesByDate {
  DeleteChatMessagesByDate copyWith({
    int? chatId,
    int? minDate,
    int? maxDate,
    bool? revoke,
  }) => DeleteChatMessagesByDate(
    chatId: chatId ?? this.chatId,
    minDate: minDate ?? this.minDate,
    maxDate: maxDate ?? this.maxDate,
    revoke: revoke ?? this.revoke,
  );
}

extension EditMessageTextExtensions on EditMessageText {
  EditMessageText copyWith({
    int? chatId,
    int? messageId,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => EditMessageText(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension EditMessageLiveLocationExtensions on EditMessageLiveLocation {
  EditMessageLiveLocation copyWith({
    int? chatId,
    int? messageId,
    ReplyMarkup? replyMarkup,
    Location? location,
    int? livePeriod,
    int? heading,
    int? proximityAlertRadius,
  }) => EditMessageLiveLocation(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    location: location ?? this.location,
    livePeriod: livePeriod ?? this.livePeriod,
    heading: heading ?? this.heading,
    proximityAlertRadius: proximityAlertRadius ?? this.proximityAlertRadius,
  );
}

extension EditMessageChecklistExtensions on EditMessageChecklist {
  EditMessageChecklist copyWith({
    int? chatId,
    int? messageId,
    ReplyMarkup? replyMarkup,
    InputChecklist? checklist,
  }) => EditMessageChecklist(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    checklist: checklist ?? this.checklist,
  );
}

extension EditMessageMediaExtensions on EditMessageMedia {
  EditMessageMedia copyWith({
    int? chatId,
    int? messageId,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => EditMessageMedia(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension EditMessageCaptionExtensions on EditMessageCaption {
  EditMessageCaption copyWith({
    int? chatId,
    int? messageId,
    ReplyMarkup? replyMarkup,
    FormattedText? caption,
    bool? showCaptionAboveMedia,
  }) => EditMessageCaption(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    caption: caption ?? this.caption,
    showCaptionAboveMedia: showCaptionAboveMedia ?? this.showCaptionAboveMedia,
  );
}

extension EditMessageReplyMarkupExtensions on EditMessageReplyMarkup {
  EditMessageReplyMarkup copyWith({
    int? chatId,
    int? messageId,
    ReplyMarkup? replyMarkup,
  }) => EditMessageReplyMarkup(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
  );
}

extension EditInlineMessageTextExtensions on EditInlineMessageText {
  EditInlineMessageText copyWith({
    String? inlineMessageId,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => EditInlineMessageText(
    inlineMessageId: inlineMessageId ?? this.inlineMessageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension EditInlineMessageLiveLocationExtensions
    on EditInlineMessageLiveLocation {
  EditInlineMessageLiveLocation copyWith({
    String? inlineMessageId,
    ReplyMarkup? replyMarkup,
    Location? location,
    int? livePeriod,
    int? heading,
    int? proximityAlertRadius,
  }) => EditInlineMessageLiveLocation(
    inlineMessageId: inlineMessageId ?? this.inlineMessageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    location: location ?? this.location,
    livePeriod: livePeriod ?? this.livePeriod,
    heading: heading ?? this.heading,
    proximityAlertRadius: proximityAlertRadius ?? this.proximityAlertRadius,
  );
}

extension EditInlineMessageMediaExtensions on EditInlineMessageMedia {
  EditInlineMessageMedia copyWith({
    String? inlineMessageId,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => EditInlineMessageMedia(
    inlineMessageId: inlineMessageId ?? this.inlineMessageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension EditInlineMessageCaptionExtensions on EditInlineMessageCaption {
  EditInlineMessageCaption copyWith({
    String? inlineMessageId,
    ReplyMarkup? replyMarkup,
    FormattedText? caption,
    bool? showCaptionAboveMedia,
  }) => EditInlineMessageCaption(
    inlineMessageId: inlineMessageId ?? this.inlineMessageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    caption: caption ?? this.caption,
    showCaptionAboveMedia: showCaptionAboveMedia ?? this.showCaptionAboveMedia,
  );
}

extension EditInlineMessageReplyMarkupExtensions
    on EditInlineMessageReplyMarkup {
  EditInlineMessageReplyMarkup copyWith({
    String? inlineMessageId,
    ReplyMarkup? replyMarkup,
  }) => EditInlineMessageReplyMarkup(
    inlineMessageId: inlineMessageId ?? this.inlineMessageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
  );
}

extension EditMessageSchedulingStateExtensions on EditMessageSchedulingState {
  EditMessageSchedulingState copyWith({
    int? chatId,
    int? messageId,
    MessageSchedulingState? schedulingState,
  }) => EditMessageSchedulingState(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    schedulingState: schedulingState ?? this.schedulingState,
  );
}

extension SetMessageFactCheckExtensions on SetMessageFactCheck {
  SetMessageFactCheck copyWith({
    int? chatId,
    int? messageId,
    FormattedText? text,
  }) => SetMessageFactCheck(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    text: text ?? this.text,
  );
}

extension SendBusinessMessageExtensions on SendBusinessMessage {
  SendBusinessMessage copyWith({
    String? businessConnectionId,
    int? chatId,
    InputMessageReplyTo? replyTo,
    bool? disableNotification,
    bool? protectContent,
    int? effectId,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => SendBusinessMessage(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    chatId: chatId ?? this.chatId,
    replyTo: replyTo ?? this.replyTo,
    disableNotification: disableNotification ?? this.disableNotification,
    protectContent: protectContent ?? this.protectContent,
    effectId: effectId ?? this.effectId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension SendBusinessMessageAlbumExtensions on SendBusinessMessageAlbum {
  SendBusinessMessageAlbum copyWith({
    String? businessConnectionId,
    int? chatId,
    InputMessageReplyTo? replyTo,
    bool? disableNotification,
    bool? protectContent,
    int? effectId,
    List<InputMessageContent>? inputMessageContents,
  }) => SendBusinessMessageAlbum(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    chatId: chatId ?? this.chatId,
    replyTo: replyTo ?? this.replyTo,
    disableNotification: disableNotification ?? this.disableNotification,
    protectContent: protectContent ?? this.protectContent,
    effectId: effectId ?? this.effectId,
    inputMessageContents: inputMessageContents ?? this.inputMessageContents,
  );
}

extension EditBusinessMessageTextExtensions on EditBusinessMessageText {
  EditBusinessMessageText copyWith({
    String? businessConnectionId,
    int? chatId,
    int? messageId,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => EditBusinessMessageText(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension EditBusinessMessageLiveLocationExtensions
    on EditBusinessMessageLiveLocation {
  EditBusinessMessageLiveLocation copyWith({
    String? businessConnectionId,
    int? chatId,
    int? messageId,
    ReplyMarkup? replyMarkup,
    Location? location,
    int? livePeriod,
    int? heading,
    int? proximityAlertRadius,
  }) => EditBusinessMessageLiveLocation(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    location: location ?? this.location,
    livePeriod: livePeriod ?? this.livePeriod,
    heading: heading ?? this.heading,
    proximityAlertRadius: proximityAlertRadius ?? this.proximityAlertRadius,
  );
}

extension EditBusinessMessageChecklistExtensions
    on EditBusinessMessageChecklist {
  EditBusinessMessageChecklist copyWith({
    String? businessConnectionId,
    int? chatId,
    int? messageId,
    ReplyMarkup? replyMarkup,
    InputChecklist? checklist,
  }) => EditBusinessMessageChecklist(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    checklist: checklist ?? this.checklist,
  );
}

extension EditBusinessMessageMediaExtensions on EditBusinessMessageMedia {
  EditBusinessMessageMedia copyWith({
    String? businessConnectionId,
    int? chatId,
    int? messageId,
    ReplyMarkup? replyMarkup,
    InputMessageContent? inputMessageContent,
  }) => EditBusinessMessageMedia(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension EditBusinessMessageCaptionExtensions on EditBusinessMessageCaption {
  EditBusinessMessageCaption copyWith({
    String? businessConnectionId,
    int? chatId,
    int? messageId,
    ReplyMarkup? replyMarkup,
    FormattedText? caption,
    bool? showCaptionAboveMedia,
  }) => EditBusinessMessageCaption(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
    caption: caption ?? this.caption,
    showCaptionAboveMedia: showCaptionAboveMedia ?? this.showCaptionAboveMedia,
  );
}

extension EditBusinessMessageReplyMarkupExtensions
    on EditBusinessMessageReplyMarkup {
  EditBusinessMessageReplyMarkup copyWith({
    String? businessConnectionId,
    int? chatId,
    int? messageId,
    ReplyMarkup? replyMarkup,
  }) => EditBusinessMessageReplyMarkup(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
  );
}

extension StopBusinessPollExtensions on StopBusinessPoll {
  StopBusinessPoll copyWith({
    String? businessConnectionId,
    int? chatId,
    int? messageId,
    ReplyMarkup? replyMarkup,
  }) => StopBusinessPoll(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    replyMarkup: replyMarkup ?? this.replyMarkup,
  );
}

extension SetBusinessMessageIsPinnedExtensions on SetBusinessMessageIsPinned {
  SetBusinessMessageIsPinned copyWith({
    String? businessConnectionId,
    int? chatId,
    int? messageId,
    bool? isPinned,
  }) => SetBusinessMessageIsPinned(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    isPinned: isPinned ?? this.isPinned,
  );
}

extension ReadBusinessMessageExtensions on ReadBusinessMessage {
  ReadBusinessMessage copyWith({
    String? businessConnectionId,
    int? chatId,
    int? messageId,
  }) => ReadBusinessMessage(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
  );
}

extension DeleteBusinessMessagesExtensions on DeleteBusinessMessages {
  DeleteBusinessMessages copyWith({
    String? businessConnectionId,
    List<int>? messageIds,
  }) => DeleteBusinessMessages(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    messageIds: messageIds ?? this.messageIds,
  );
}

extension EditBusinessStoryExtensions on EditBusinessStory {
  EditBusinessStory copyWith({
    int? storyPosterChatId,
    int? storyId,
    InputStoryContent? content,
    InputStoryAreas? areas,
    FormattedText? caption,
    StoryPrivacySettings? privacySettings,
  }) => EditBusinessStory(
    storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
    storyId: storyId ?? this.storyId,
    content: content ?? this.content,
    areas: areas ?? this.areas,
    caption: caption ?? this.caption,
    privacySettings: privacySettings ?? this.privacySettings,
  );
}

extension DeleteBusinessStoryExtensions on DeleteBusinessStory {
  DeleteBusinessStory copyWith({String? businessConnectionId, int? storyId}) =>
      DeleteBusinessStory(
        businessConnectionId: businessConnectionId ?? this.businessConnectionId,
        storyId: storyId ?? this.storyId,
      );
}

extension SetBusinessAccountNameExtensions on SetBusinessAccountName {
  SetBusinessAccountName copyWith({
    String? businessConnectionId,
    String? firstName,
    String? lastName,
  }) => SetBusinessAccountName(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    firstName: firstName ?? this.firstName,
    lastName: lastName ?? this.lastName,
  );
}

extension SetBusinessAccountBioExtensions on SetBusinessAccountBio {
  SetBusinessAccountBio copyWith({String? businessConnectionId, String? bio}) =>
      SetBusinessAccountBio(
        businessConnectionId: businessConnectionId ?? this.businessConnectionId,
        bio: bio ?? this.bio,
      );
}

extension SetBusinessAccountProfilePhotoExtensions
    on SetBusinessAccountProfilePhoto {
  SetBusinessAccountProfilePhoto copyWith({
    String? businessConnectionId,
    InputChatPhoto? photo,
    bool? isPublic,
  }) => SetBusinessAccountProfilePhoto(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    photo: photo ?? this.photo,
    isPublic: isPublic ?? this.isPublic,
  );
}

extension SetBusinessAccountUsernameExtensions on SetBusinessAccountUsername {
  SetBusinessAccountUsername copyWith({
    String? businessConnectionId,
    String? username,
  }) => SetBusinessAccountUsername(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    username: username ?? this.username,
  );
}

extension SetBusinessAccountGiftSettingsExtensions
    on SetBusinessAccountGiftSettings {
  SetBusinessAccountGiftSettings copyWith({
    String? businessConnectionId,
    GiftSettings? settings,
  }) => SetBusinessAccountGiftSettings(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    settings: settings ?? this.settings,
  );
}

extension GetBusinessAccountStarAmountExtensions
    on GetBusinessAccountStarAmount {
  GetBusinessAccountStarAmount copyWith({String? businessConnectionId}) =>
      GetBusinessAccountStarAmount(
        businessConnectionId: businessConnectionId ?? this.businessConnectionId,
      );
}

extension TransferBusinessAccountStarsExtensions
    on TransferBusinessAccountStars {
  TransferBusinessAccountStars copyWith({
    String? businessConnectionId,
    int? starCount,
  }) => TransferBusinessAccountStars(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    starCount: starCount ?? this.starCount,
  );
}

extension CheckQuickReplyShortcutNameExtensions on CheckQuickReplyShortcutName {
  CheckQuickReplyShortcutName copyWith({String? name}) =>
      CheckQuickReplyShortcutName(name: name ?? this.name);
}

extension SetQuickReplyShortcutNameExtensions on SetQuickReplyShortcutName {
  SetQuickReplyShortcutName copyWith({int? shortcutId, String? name}) =>
      SetQuickReplyShortcutName(
        shortcutId: shortcutId ?? this.shortcutId,
        name: name ?? this.name,
      );
}

extension DeleteQuickReplyShortcutExtensions on DeleteQuickReplyShortcut {
  DeleteQuickReplyShortcut copyWith({int? shortcutId}) =>
      DeleteQuickReplyShortcut(shortcutId: shortcutId ?? this.shortcutId);
}

extension ReorderQuickReplyShortcutsExtensions on ReorderQuickReplyShortcuts {
  ReorderQuickReplyShortcuts copyWith({List<int>? shortcutIds}) =>
      ReorderQuickReplyShortcuts(shortcutIds: shortcutIds ?? this.shortcutIds);
}

extension LoadQuickReplyShortcutMessagesExtensions
    on LoadQuickReplyShortcutMessages {
  LoadQuickReplyShortcutMessages copyWith({int? shortcutId}) =>
      LoadQuickReplyShortcutMessages(shortcutId: shortcutId ?? this.shortcutId);
}

extension DeleteQuickReplyShortcutMessagesExtensions
    on DeleteQuickReplyShortcutMessages {
  DeleteQuickReplyShortcutMessages copyWith({
    int? shortcutId,
    List<int>? messageIds,
  }) => DeleteQuickReplyShortcutMessages(
    shortcutId: shortcutId ?? this.shortcutId,
    messageIds: messageIds ?? this.messageIds,
  );
}

extension AddQuickReplyShortcutMessageExtensions
    on AddQuickReplyShortcutMessage {
  AddQuickReplyShortcutMessage copyWith({
    String? shortcutName,
    int? replyToMessageId,
    InputMessageContent? inputMessageContent,
  }) => AddQuickReplyShortcutMessage(
    shortcutName: shortcutName ?? this.shortcutName,
    replyToMessageId: replyToMessageId ?? this.replyToMessageId,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension AddQuickReplyShortcutInlineQueryResultMessageExtensions
    on AddQuickReplyShortcutInlineQueryResultMessage {
  AddQuickReplyShortcutInlineQueryResultMessage copyWith({
    String? shortcutName,
    int? replyToMessageId,
    int? queryId,
    String? resultId,
    bool? hideViaBot,
  }) => AddQuickReplyShortcutInlineQueryResultMessage(
    shortcutName: shortcutName ?? this.shortcutName,
    replyToMessageId: replyToMessageId ?? this.replyToMessageId,
    queryId: queryId ?? this.queryId,
    resultId: resultId ?? this.resultId,
    hideViaBot: hideViaBot ?? this.hideViaBot,
  );
}

extension AddQuickReplyShortcutMessageAlbumExtensions
    on AddQuickReplyShortcutMessageAlbum {
  AddQuickReplyShortcutMessageAlbum copyWith({
    String? shortcutName,
    int? replyToMessageId,
    List<InputMessageContent>? inputMessageContents,
  }) => AddQuickReplyShortcutMessageAlbum(
    shortcutName: shortcutName ?? this.shortcutName,
    replyToMessageId: replyToMessageId ?? this.replyToMessageId,
    inputMessageContents: inputMessageContents ?? this.inputMessageContents,
  );
}

extension ReaddQuickReplyShortcutMessagesExtensions
    on ReaddQuickReplyShortcutMessages {
  ReaddQuickReplyShortcutMessages copyWith({
    String? shortcutName,
    List<int>? messageIds,
  }) => ReaddQuickReplyShortcutMessages(
    shortcutName: shortcutName ?? this.shortcutName,
    messageIds: messageIds ?? this.messageIds,
  );
}

extension EditQuickReplyMessageExtensions on EditQuickReplyMessage {
  EditQuickReplyMessage copyWith({
    int? shortcutId,
    int? messageId,
    InputMessageContent? inputMessageContent,
  }) => EditQuickReplyMessage(
    shortcutId: shortcutId ?? this.shortcutId,
    messageId: messageId ?? this.messageId,
    inputMessageContent: inputMessageContent ?? this.inputMessageContent,
  );
}

extension CreateForumTopicExtensions on CreateForumTopic {
  CreateForumTopic copyWith({
    int? chatId,
    String? name,
    ForumTopicIcon? icon,
  }) => CreateForumTopic(
    chatId: chatId ?? this.chatId,
    name: name ?? this.name,
    icon: icon ?? this.icon,
  );
}

extension EditForumTopicExtensions on EditForumTopic {
  EditForumTopic copyWith({
    int? chatId,
    int? messageThreadId,
    String? name,
    bool? editIconCustomEmoji,
    int? iconCustomEmojiId,
  }) => EditForumTopic(
    chatId: chatId ?? this.chatId,
    messageThreadId: messageThreadId ?? this.messageThreadId,
    name: name ?? this.name,
    editIconCustomEmoji: editIconCustomEmoji ?? this.editIconCustomEmoji,
    iconCustomEmojiId: iconCustomEmojiId ?? this.iconCustomEmojiId,
  );
}

extension GetForumTopicExtensions on GetForumTopic {
  GetForumTopic copyWith({int? chatId, int? messageThreadId}) => GetForumTopic(
    chatId: chatId ?? this.chatId,
    messageThreadId: messageThreadId ?? this.messageThreadId,
  );
}

extension GetForumTopicLinkExtensions on GetForumTopicLink {
  GetForumTopicLink copyWith({int? chatId, int? messageThreadId}) =>
      GetForumTopicLink(
        chatId: chatId ?? this.chatId,
        messageThreadId: messageThreadId ?? this.messageThreadId,
      );
}

extension GetForumTopicsExtensions on GetForumTopics {
  GetForumTopics copyWith({
    int? chatId,
    String? query,
    int? offsetDate,
    int? offsetMessageId,
    int? offsetMessageThreadId,
    int? limit,
  }) => GetForumTopics(
    chatId: chatId ?? this.chatId,
    query: query ?? this.query,
    offsetDate: offsetDate ?? this.offsetDate,
    offsetMessageId: offsetMessageId ?? this.offsetMessageId,
    offsetMessageThreadId: offsetMessageThreadId ?? this.offsetMessageThreadId,
    limit: limit ?? this.limit,
  );
}

extension SetForumTopicNotificationSettingsExtensions
    on SetForumTopicNotificationSettings {
  SetForumTopicNotificationSettings copyWith({
    int? chatId,
    int? messageThreadId,
    ChatNotificationSettings? notificationSettings,
  }) => SetForumTopicNotificationSettings(
    chatId: chatId ?? this.chatId,
    messageThreadId: messageThreadId ?? this.messageThreadId,
    notificationSettings: notificationSettings ?? this.notificationSettings,
  );
}

extension ToggleForumTopicIsClosedExtensions on ToggleForumTopicIsClosed {
  ToggleForumTopicIsClosed copyWith({
    int? chatId,
    int? messageThreadId,
    bool? isClosed,
  }) => ToggleForumTopicIsClosed(
    chatId: chatId ?? this.chatId,
    messageThreadId: messageThreadId ?? this.messageThreadId,
    isClosed: isClosed ?? this.isClosed,
  );
}

extension ToggleGeneralForumTopicIsHiddenExtensions
    on ToggleGeneralForumTopicIsHidden {
  ToggleGeneralForumTopicIsHidden copyWith({int? chatId, bool? isHidden}) =>
      ToggleGeneralForumTopicIsHidden(
        chatId: chatId ?? this.chatId,
        isHidden: isHidden ?? this.isHidden,
      );
}

extension ToggleForumTopicIsPinnedExtensions on ToggleForumTopicIsPinned {
  ToggleForumTopicIsPinned copyWith({
    int? chatId,
    int? messageThreadId,
    bool? isPinned,
  }) => ToggleForumTopicIsPinned(
    chatId: chatId ?? this.chatId,
    messageThreadId: messageThreadId ?? this.messageThreadId,
    isPinned: isPinned ?? this.isPinned,
  );
}

extension SetPinnedForumTopicsExtensions on SetPinnedForumTopics {
  SetPinnedForumTopics copyWith({int? chatId, List<int>? messageThreadIds}) =>
      SetPinnedForumTopics(
        chatId: chatId ?? this.chatId,
        messageThreadIds: messageThreadIds ?? this.messageThreadIds,
      );
}

extension DeleteForumTopicExtensions on DeleteForumTopic {
  DeleteForumTopic copyWith({int? chatId, int? messageThreadId}) =>
      DeleteForumTopic(
        chatId: chatId ?? this.chatId,
        messageThreadId: messageThreadId ?? this.messageThreadId,
      );
}

extension GetEmojiReactionExtensions on GetEmojiReaction {
  GetEmojiReaction copyWith({String? emoji}) =>
      GetEmojiReaction(emoji: emoji ?? this.emoji);
}

extension GetMessageAvailableReactionsExtensions
    on GetMessageAvailableReactions {
  GetMessageAvailableReactions copyWith({
    int? chatId,
    int? messageId,
    int? rowSize,
  }) => GetMessageAvailableReactions(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    rowSize: rowSize ?? this.rowSize,
  );
}

extension AddMessageReactionExtensions on AddMessageReaction {
  AddMessageReaction copyWith({
    int? chatId,
    int? messageId,
    ReactionType? reactionType,
    bool? isBig,
    bool? updateRecentReactions,
  }) => AddMessageReaction(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    reactionType: reactionType ?? this.reactionType,
    isBig: isBig ?? this.isBig,
    updateRecentReactions: updateRecentReactions ?? this.updateRecentReactions,
  );
}

extension RemoveMessageReactionExtensions on RemoveMessageReaction {
  RemoveMessageReaction copyWith({
    int? chatId,
    int? messageId,
    ReactionType? reactionType,
  }) => RemoveMessageReaction(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    reactionType: reactionType ?? this.reactionType,
  );
}

extension GetChatAvailablePaidMessageReactionSendersExtensions
    on GetChatAvailablePaidMessageReactionSenders {
  GetChatAvailablePaidMessageReactionSenders copyWith({int? chatId}) =>
      GetChatAvailablePaidMessageReactionSenders(chatId: chatId ?? this.chatId);
}

extension AddPendingPaidMessageReactionExtensions
    on AddPendingPaidMessageReaction {
  AddPendingPaidMessageReaction copyWith({
    int? chatId,
    int? messageId,
    int? starCount,
    PaidReactionType? type,
  }) => AddPendingPaidMessageReaction(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    starCount: starCount ?? this.starCount,
    type: type ?? this.type,
  );
}

extension CommitPendingPaidMessageReactionsExtensions
    on CommitPendingPaidMessageReactions {
  CommitPendingPaidMessageReactions copyWith({int? chatId, int? messageId}) =>
      CommitPendingPaidMessageReactions(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension RemovePendingPaidMessageReactionsExtensions
    on RemovePendingPaidMessageReactions {
  RemovePendingPaidMessageReactions copyWith({int? chatId, int? messageId}) =>
      RemovePendingPaidMessageReactions(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension SetPaidMessageReactionTypeExtensions on SetPaidMessageReactionType {
  SetPaidMessageReactionType copyWith({
    int? chatId,
    int? messageId,
    PaidReactionType? type,
  }) => SetPaidMessageReactionType(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    type: type ?? this.type,
  );
}

extension SetMessageReactionsExtensions on SetMessageReactions {
  SetMessageReactions copyWith({
    int? chatId,
    int? messageId,
    List<ReactionType>? reactionTypes,
    bool? isBig,
  }) => SetMessageReactions(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    reactionTypes: reactionTypes ?? this.reactionTypes,
    isBig: isBig ?? this.isBig,
  );
}

extension GetMessageAddedReactionsExtensions on GetMessageAddedReactions {
  GetMessageAddedReactions copyWith({
    int? chatId,
    int? messageId,
    ReactionType? reactionType,
    String? offset,
    int? limit,
  }) => GetMessageAddedReactions(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    reactionType: reactionType ?? this.reactionType,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension SetDefaultReactionTypeExtensions on SetDefaultReactionType {
  SetDefaultReactionType copyWith({ReactionType? reactionType}) =>
      SetDefaultReactionType(reactionType: reactionType ?? this.reactionType);
}

extension GetSavedMessagesTagsExtensions on GetSavedMessagesTags {
  GetSavedMessagesTags copyWith({int? savedMessagesTopicId}) =>
      GetSavedMessagesTags(
        savedMessagesTopicId: savedMessagesTopicId ?? this.savedMessagesTopicId,
      );
}

extension SetSavedMessagesTagLabelExtensions on SetSavedMessagesTagLabel {
  SetSavedMessagesTagLabel copyWith({ReactionType? tag, String? label}) =>
      SetSavedMessagesTagLabel(
        tag: tag ?? this.tag,
        label: label ?? this.label,
      );
}

extension GetMessageEffectExtensions on GetMessageEffect {
  GetMessageEffect copyWith({int? effectId}) =>
      GetMessageEffect(effectId: effectId ?? this.effectId);
}

extension SearchQuoteExtensions on SearchQuote {
  SearchQuote copyWith({
    FormattedText? text,
    FormattedText? quote,
    int? quotePosition,
  }) => SearchQuote(
    text: text ?? this.text,
    quote: quote ?? this.quote,
    quotePosition: quotePosition ?? this.quotePosition,
  );
}

extension GetTextEntitiesExtensions on GetTextEntities {
  GetTextEntities copyWith({String? text}) =>
      GetTextEntities(text: text ?? this.text);
}

extension ParseTextEntitiesExtensions on ParseTextEntities {
  ParseTextEntities copyWith({String? text, TextParseMode? parseMode}) =>
      ParseTextEntities(
        text: text ?? this.text,
        parseMode: parseMode ?? this.parseMode,
      );
}

extension ParseMarkdownExtensions on ParseMarkdown {
  ParseMarkdown copyWith({FormattedText? text}) =>
      ParseMarkdown(text: text ?? this.text);
}

extension GetMarkdownTextExtensions on GetMarkdownText {
  GetMarkdownText copyWith({FormattedText? text}) =>
      GetMarkdownText(text: text ?? this.text);
}

extension GetCountryFlagEmojiExtensions on GetCountryFlagEmoji {
  GetCountryFlagEmoji copyWith({String? countryCode}) =>
      GetCountryFlagEmoji(countryCode: countryCode ?? this.countryCode);
}

extension GetFileMimeTypeExtensions on GetFileMimeType {
  GetFileMimeType copyWith({String? fileName}) =>
      GetFileMimeType(fileName: fileName ?? this.fileName);
}

extension GetFileExtensionExtensions on GetFileExtension {
  GetFileExtension copyWith({String? mimeType}) =>
      GetFileExtension(mimeType: mimeType ?? this.mimeType);
}

extension CleanFileNameExtensions on CleanFileName {
  CleanFileName copyWith({String? fileName}) =>
      CleanFileName(fileName: fileName ?? this.fileName);
}

extension GetLanguagePackStringExtensions on GetLanguagePackString {
  GetLanguagePackString copyWith({
    String? languagePackDatabasePath,
    String? localizationTarget,
    String? languagePackId,
    String? key,
  }) => GetLanguagePackString(
    languagePackDatabasePath:
        languagePackDatabasePath ?? this.languagePackDatabasePath,
    localizationTarget: localizationTarget ?? this.localizationTarget,
    languagePackId: languagePackId ?? this.languagePackId,
    key: key ?? this.key,
  );
}

extension GetJsonValueExtensions on GetJsonValue {
  GetJsonValue copyWith({String? json}) =>
      GetJsonValue(json: json ?? this.json);
}

extension GetJsonStringExtensions on GetJsonString {
  GetJsonString copyWith({JsonValue? jsonValue}) =>
      GetJsonString(jsonValue: jsonValue ?? this.jsonValue);
}

extension GetThemeParametersJsonStringExtensions
    on GetThemeParametersJsonString {
  GetThemeParametersJsonString copyWith({ThemeParameters? theme}) =>
      GetThemeParametersJsonString(theme: theme ?? this.theme);
}

extension SetPollAnswerExtensions on SetPollAnswer {
  SetPollAnswer copyWith({int? chatId, int? messageId, List<int>? optionIds}) =>
      SetPollAnswer(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
        optionIds: optionIds ?? this.optionIds,
      );
}

extension GetPollVotersExtensions on GetPollVoters {
  GetPollVoters copyWith({
    int? chatId,
    int? messageId,
    int? optionId,
    int? offset,
    int? limit,
  }) => GetPollVoters(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    optionId: optionId ?? this.optionId,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension StopPollExtensions on StopPoll {
  StopPoll copyWith({int? chatId, int? messageId, ReplyMarkup? replyMarkup}) =>
      StopPoll(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
        replyMarkup: replyMarkup ?? this.replyMarkup,
      );
}

extension AddChecklistTasksExtensions on AddChecklistTasks {
  AddChecklistTasks copyWith({
    int? chatId,
    int? messageId,
    List<InputChecklistTask>? tasks,
  }) => AddChecklistTasks(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    tasks: tasks ?? this.tasks,
  );
}

extension MarkChecklistTasksAsDoneExtensions on MarkChecklistTasksAsDone {
  MarkChecklistTasksAsDone copyWith({
    int? chatId,
    int? messageId,
    List<int>? markedAsDoneTaskIds,
    List<int>? markedAsNotDoneTaskIds,
  }) => MarkChecklistTasksAsDone(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    markedAsDoneTaskIds: markedAsDoneTaskIds ?? this.markedAsDoneTaskIds,
    markedAsNotDoneTaskIds:
        markedAsNotDoneTaskIds ?? this.markedAsNotDoneTaskIds,
  );
}

extension HideSuggestedActionExtensions on HideSuggestedAction {
  HideSuggestedAction copyWith({SuggestedAction? action}) =>
      HideSuggestedAction(action: action ?? this.action);
}

extension GetBusinessConnectionExtensions on GetBusinessConnection {
  GetBusinessConnection copyWith({String? connectionId}) =>
      GetBusinessConnection(connectionId: connectionId ?? this.connectionId);
}

extension GetLoginUrlInfoExtensions on GetLoginUrlInfo {
  GetLoginUrlInfo copyWith({int? chatId, int? messageId, int? buttonId}) =>
      GetLoginUrlInfo(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
        buttonId: buttonId ?? this.buttonId,
      );
}

extension GetLoginUrlExtensions on GetLoginUrl {
  GetLoginUrl copyWith({
    int? chatId,
    int? messageId,
    int? buttonId,
    bool? allowWriteAccess,
  }) => GetLoginUrl(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    buttonId: buttonId ?? this.buttonId,
    allowWriteAccess: allowWriteAccess ?? this.allowWriteAccess,
  );
}

extension ShareUsersWithBotExtensions on ShareUsersWithBot {
  ShareUsersWithBot copyWith({
    int? chatId,
    int? messageId,
    int? buttonId,
    List<int>? sharedUserIds,
    bool? onlyCheck,
  }) => ShareUsersWithBot(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    buttonId: buttonId ?? this.buttonId,
    sharedUserIds: sharedUserIds ?? this.sharedUserIds,
    onlyCheck: onlyCheck ?? this.onlyCheck,
  );
}

extension ShareChatWithBotExtensions on ShareChatWithBot {
  ShareChatWithBot copyWith({
    int? chatId,
    int? messageId,
    int? buttonId,
    int? sharedChatId,
    bool? onlyCheck,
  }) => ShareChatWithBot(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    buttonId: buttonId ?? this.buttonId,
    sharedChatId: sharedChatId ?? this.sharedChatId,
    onlyCheck: onlyCheck ?? this.onlyCheck,
  );
}

extension GetInlineQueryResultsExtensions on GetInlineQueryResults {
  GetInlineQueryResults copyWith({
    int? botUserId,
    int? chatId,
    Location? userLocation,
    String? query,
    String? offset,
  }) => GetInlineQueryResults(
    botUserId: botUserId ?? this.botUserId,
    chatId: chatId ?? this.chatId,
    userLocation: userLocation ?? this.userLocation,
    query: query ?? this.query,
    offset: offset ?? this.offset,
  );
}

extension AnswerInlineQueryExtensions on AnswerInlineQuery {
  AnswerInlineQuery copyWith({
    int? inlineQueryId,
    bool? isPersonal,
    InlineQueryResultsButton? button,
    List<InputInlineQueryResult>? results,
    int? cacheTime,
    String? nextOffset,
  }) => AnswerInlineQuery(
    inlineQueryId: inlineQueryId ?? this.inlineQueryId,
    isPersonal: isPersonal ?? this.isPersonal,
    button: button ?? this.button,
    results: results ?? this.results,
    cacheTime: cacheTime ?? this.cacheTime,
    nextOffset: nextOffset ?? this.nextOffset,
  );
}

extension SavePreparedInlineMessageExtensions on SavePreparedInlineMessage {
  SavePreparedInlineMessage copyWith({
    int? userId,
    InputInlineQueryResult? result,
    TargetChatTypes? chatTypes,
  }) => SavePreparedInlineMessage(
    userId: userId ?? this.userId,
    result: result ?? this.result,
    chatTypes: chatTypes ?? this.chatTypes,
  );
}

extension GetPreparedInlineMessageExtensions on GetPreparedInlineMessage {
  GetPreparedInlineMessage copyWith({
    int? botUserId,
    String? preparedMessageId,
  }) => GetPreparedInlineMessage(
    botUserId: botUserId ?? this.botUserId,
    preparedMessageId: preparedMessageId ?? this.preparedMessageId,
  );
}

extension GetGrossingWebAppBotsExtensions on GetGrossingWebAppBots {
  GetGrossingWebAppBots copyWith({String? offset, int? limit}) =>
      GetGrossingWebAppBots(
        offset: offset ?? this.offset,
        limit: limit ?? this.limit,
      );
}

extension SearchWebAppExtensions on SearchWebApp {
  SearchWebApp copyWith({int? botUserId, String? webAppShortName}) =>
      SearchWebApp(
        botUserId: botUserId ?? this.botUserId,
        webAppShortName: webAppShortName ?? this.webAppShortName,
      );
}

extension GetWebAppPlaceholderExtensions on GetWebAppPlaceholder {
  GetWebAppPlaceholder copyWith({int? botUserId}) =>
      GetWebAppPlaceholder(botUserId: botUserId ?? this.botUserId);
}

extension GetWebAppLinkUrlExtensions on GetWebAppLinkUrl {
  GetWebAppLinkUrl copyWith({
    int? chatId,
    int? botUserId,
    String? webAppShortName,
    String? startParameter,
    bool? allowWriteAccess,
    WebAppOpenParameters? parameters,
  }) => GetWebAppLinkUrl(
    chatId: chatId ?? this.chatId,
    botUserId: botUserId ?? this.botUserId,
    webAppShortName: webAppShortName ?? this.webAppShortName,
    startParameter: startParameter ?? this.startParameter,
    allowWriteAccess: allowWriteAccess ?? this.allowWriteAccess,
    parameters: parameters ?? this.parameters,
  );
}

extension GetMainWebAppExtensions on GetMainWebApp {
  GetMainWebApp copyWith({
    int? chatId,
    int? botUserId,
    String? startParameter,
    WebAppOpenParameters? parameters,
  }) => GetMainWebApp(
    chatId: chatId ?? this.chatId,
    botUserId: botUserId ?? this.botUserId,
    startParameter: startParameter ?? this.startParameter,
    parameters: parameters ?? this.parameters,
  );
}

extension GetWebAppUrlExtensions on GetWebAppUrl {
  GetWebAppUrl copyWith({
    int? botUserId,
    String? url,
    WebAppOpenParameters? parameters,
  }) => GetWebAppUrl(
    botUserId: botUserId ?? this.botUserId,
    url: url ?? this.url,
    parameters: parameters ?? this.parameters,
  );
}

extension SendWebAppDataExtensions on SendWebAppData {
  SendWebAppData copyWith({int? botUserId, String? buttonText, String? data}) =>
      SendWebAppData(
        botUserId: botUserId ?? this.botUserId,
        buttonText: buttonText ?? this.buttonText,
        data: data ?? this.data,
      );
}

extension OpenWebAppExtensions on OpenWebApp {
  OpenWebApp copyWith({
    int? chatId,
    int? botUserId,
    String? url,
    int? messageThreadId,
    int? directMessagesChatTopicId,
    InputMessageReplyTo? replyTo,
    WebAppOpenParameters? parameters,
  }) => OpenWebApp(
    chatId: chatId ?? this.chatId,
    botUserId: botUserId ?? this.botUserId,
    url: url ?? this.url,
    messageThreadId: messageThreadId ?? this.messageThreadId,
    directMessagesChatTopicId:
        directMessagesChatTopicId ?? this.directMessagesChatTopicId,
    replyTo: replyTo ?? this.replyTo,
    parameters: parameters ?? this.parameters,
  );
}

extension CloseWebAppExtensions on CloseWebApp {
  CloseWebApp copyWith({int? webAppLaunchId}) =>
      CloseWebApp(webAppLaunchId: webAppLaunchId ?? this.webAppLaunchId);
}

extension AnswerWebAppQueryExtensions on AnswerWebAppQuery {
  AnswerWebAppQuery copyWith({
    String? webAppQueryId,
    InputInlineQueryResult? result,
  }) => AnswerWebAppQuery(
    webAppQueryId: webAppQueryId ?? this.webAppQueryId,
    result: result ?? this.result,
  );
}

extension CheckWebAppFileDownloadExtensions on CheckWebAppFileDownload {
  CheckWebAppFileDownload copyWith({
    int? botUserId,
    String? fileName,
    String? url,
  }) => CheckWebAppFileDownload(
    botUserId: botUserId ?? this.botUserId,
    fileName: fileName ?? this.fileName,
    url: url ?? this.url,
  );
}

extension GetCallbackQueryAnswerExtensions on GetCallbackQueryAnswer {
  GetCallbackQueryAnswer copyWith({
    int? chatId,
    int? messageId,
    CallbackQueryPayload? payload,
  }) => GetCallbackQueryAnswer(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    payload: payload ?? this.payload,
  );
}

extension AnswerCallbackQueryExtensions on AnswerCallbackQuery {
  AnswerCallbackQuery copyWith({
    int? callbackQueryId,
    String? text,
    bool? showAlert,
    String? url,
    int? cacheTime,
  }) => AnswerCallbackQuery(
    callbackQueryId: callbackQueryId ?? this.callbackQueryId,
    text: text ?? this.text,
    showAlert: showAlert ?? this.showAlert,
    url: url ?? this.url,
    cacheTime: cacheTime ?? this.cacheTime,
  );
}

extension AnswerShippingQueryExtensions on AnswerShippingQuery {
  AnswerShippingQuery copyWith({
    int? shippingQueryId,
    List<ShippingOption>? shippingOptions,
    String? errorMessage,
  }) => AnswerShippingQuery(
    shippingQueryId: shippingQueryId ?? this.shippingQueryId,
    shippingOptions: shippingOptions ?? this.shippingOptions,
    errorMessage: errorMessage ?? this.errorMessage,
  );
}

extension AnswerPreCheckoutQueryExtensions on AnswerPreCheckoutQuery {
  AnswerPreCheckoutQuery copyWith({
    int? preCheckoutQueryId,
    String? errorMessage,
  }) => AnswerPreCheckoutQuery(
    preCheckoutQueryId: preCheckoutQueryId ?? this.preCheckoutQueryId,
    errorMessage: errorMessage ?? this.errorMessage,
  );
}

extension SetGameScoreExtensions on SetGameScore {
  SetGameScore copyWith({
    int? chatId,
    int? messageId,
    bool? editMessage,
    int? userId,
    int? score,
    bool? force,
  }) => SetGameScore(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    editMessage: editMessage ?? this.editMessage,
    userId: userId ?? this.userId,
    score: score ?? this.score,
    force: force ?? this.force,
  );
}

extension SetInlineGameScoreExtensions on SetInlineGameScore {
  SetInlineGameScore copyWith({
    String? inlineMessageId,
    bool? editMessage,
    int? userId,
    int? score,
    bool? force,
  }) => SetInlineGameScore(
    inlineMessageId: inlineMessageId ?? this.inlineMessageId,
    editMessage: editMessage ?? this.editMessage,
    userId: userId ?? this.userId,
    score: score ?? this.score,
    force: force ?? this.force,
  );
}

extension GetGameHighScoresExtensions on GetGameHighScores {
  GetGameHighScores copyWith({int? chatId, int? messageId, int? userId}) =>
      GetGameHighScores(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
        userId: userId ?? this.userId,
      );
}

extension GetInlineGameHighScoresExtensions on GetInlineGameHighScores {
  GetInlineGameHighScores copyWith({String? inlineMessageId, int? userId}) =>
      GetInlineGameHighScores(
        inlineMessageId: inlineMessageId ?? this.inlineMessageId,
        userId: userId ?? this.userId,
      );
}

extension DeleteChatReplyMarkupExtensions on DeleteChatReplyMarkup {
  DeleteChatReplyMarkup copyWith({int? chatId, int? messageId}) =>
      DeleteChatReplyMarkup(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension SendChatActionExtensions on SendChatAction {
  SendChatAction copyWith({
    int? chatId,
    int? messageThreadId,
    String? businessConnectionId,
    ChatAction? action,
  }) => SendChatAction(
    chatId: chatId ?? this.chatId,
    messageThreadId: messageThreadId ?? this.messageThreadId,
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    action: action ?? this.action,
  );
}

extension OpenChatExtensions on OpenChat {
  OpenChat copyWith({int? chatId}) => OpenChat(chatId: chatId ?? this.chatId);
}

extension CloseChatExtensions on CloseChat {
  CloseChat copyWith({int? chatId}) => CloseChat(chatId: chatId ?? this.chatId);
}

extension ViewMessagesExtensions on ViewMessages {
  ViewMessages copyWith({
    int? chatId,
    List<int>? messageIds,
    MessageSource? source,
    bool? forceRead,
  }) => ViewMessages(
    chatId: chatId ?? this.chatId,
    messageIds: messageIds ?? this.messageIds,
    source: source ?? this.source,
    forceRead: forceRead ?? this.forceRead,
  );
}

extension OpenMessageContentExtensions on OpenMessageContent {
  OpenMessageContent copyWith({int? chatId, int? messageId}) =>
      OpenMessageContent(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension ClickAnimatedEmojiMessageExtensions on ClickAnimatedEmojiMessage {
  ClickAnimatedEmojiMessage copyWith({int? chatId, int? messageId}) =>
      ClickAnimatedEmojiMessage(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension GetInternalLinkExtensions on GetInternalLink {
  GetInternalLink copyWith({InternalLinkType? type, bool? isHttp}) =>
      GetInternalLink(type: type ?? this.type, isHttp: isHttp ?? this.isHttp);
}

extension GetInternalLinkTypeExtensions on GetInternalLinkType {
  GetInternalLinkType copyWith({String? link}) =>
      GetInternalLinkType(link: link ?? this.link);
}

extension GetExternalLinkInfoExtensions on GetExternalLinkInfo {
  GetExternalLinkInfo copyWith({String? link}) =>
      GetExternalLinkInfo(link: link ?? this.link);
}

extension GetExternalLinkExtensions on GetExternalLink {
  GetExternalLink copyWith({String? link, bool? allowWriteAccess}) =>
      GetExternalLink(
        link: link ?? this.link,
        allowWriteAccess: allowWriteAccess ?? this.allowWriteAccess,
      );
}

extension ReadAllChatMentionsExtensions on ReadAllChatMentions {
  ReadAllChatMentions copyWith({int? chatId}) =>
      ReadAllChatMentions(chatId: chatId ?? this.chatId);
}

extension ReadAllMessageThreadMentionsExtensions
    on ReadAllMessageThreadMentions {
  ReadAllMessageThreadMentions copyWith({int? chatId, int? messageThreadId}) =>
      ReadAllMessageThreadMentions(
        chatId: chatId ?? this.chatId,
        messageThreadId: messageThreadId ?? this.messageThreadId,
      );
}

extension ReadAllChatReactionsExtensions on ReadAllChatReactions {
  ReadAllChatReactions copyWith({int? chatId}) =>
      ReadAllChatReactions(chatId: chatId ?? this.chatId);
}

extension ReadAllMessageThreadReactionsExtensions
    on ReadAllMessageThreadReactions {
  ReadAllMessageThreadReactions copyWith({int? chatId, int? messageThreadId}) =>
      ReadAllMessageThreadReactions(
        chatId: chatId ?? this.chatId,
        messageThreadId: messageThreadId ?? this.messageThreadId,
      );
}

extension CreatePrivateChatExtensions on CreatePrivateChat {
  CreatePrivateChat copyWith({int? userId, bool? force}) => CreatePrivateChat(
    userId: userId ?? this.userId,
    force: force ?? this.force,
  );
}

extension CreateBasicGroupChatExtensions on CreateBasicGroupChat {
  CreateBasicGroupChat copyWith({int? basicGroupId, bool? force}) =>
      CreateBasicGroupChat(
        basicGroupId: basicGroupId ?? this.basicGroupId,
        force: force ?? this.force,
      );
}

extension CreateSupergroupChatExtensions on CreateSupergroupChat {
  CreateSupergroupChat copyWith({int? supergroupId, bool? force}) =>
      CreateSupergroupChat(
        supergroupId: supergroupId ?? this.supergroupId,
        force: force ?? this.force,
      );
}

extension CreateSecretChatExtensions on CreateSecretChat {
  CreateSecretChat copyWith({int? secretChatId}) =>
      CreateSecretChat(secretChatId: secretChatId ?? this.secretChatId);
}

extension CreateNewBasicGroupChatExtensions on CreateNewBasicGroupChat {
  CreateNewBasicGroupChat copyWith({
    List<int>? userIds,
    String? title,
    int? messageAutoDeleteTime,
  }) => CreateNewBasicGroupChat(
    userIds: userIds ?? this.userIds,
    title: title ?? this.title,
    messageAutoDeleteTime: messageAutoDeleteTime ?? this.messageAutoDeleteTime,
  );
}

extension CreateNewSupergroupChatExtensions on CreateNewSupergroupChat {
  CreateNewSupergroupChat copyWith({
    String? title,
    bool? isForum,
    bool? isChannel,
    String? description,
    ChatLocation? location,
    int? messageAutoDeleteTime,
    bool? forImport,
  }) => CreateNewSupergroupChat(
    title: title ?? this.title,
    isForum: isForum ?? this.isForum,
    isChannel: isChannel ?? this.isChannel,
    description: description ?? this.description,
    location: location ?? this.location,
    messageAutoDeleteTime: messageAutoDeleteTime ?? this.messageAutoDeleteTime,
    forImport: forImport ?? this.forImport,
  );
}

extension CreateNewSecretChatExtensions on CreateNewSecretChat {
  CreateNewSecretChat copyWith({int? userId}) =>
      CreateNewSecretChat(userId: userId ?? this.userId);
}

extension UpgradeBasicGroupChatToSupergroupChatExtensions
    on UpgradeBasicGroupChatToSupergroupChat {
  UpgradeBasicGroupChatToSupergroupChat copyWith({int? chatId}) =>
      UpgradeBasicGroupChatToSupergroupChat(chatId: chatId ?? this.chatId);
}

extension GetChatListsToAddChatExtensions on GetChatListsToAddChat {
  GetChatListsToAddChat copyWith({int? chatId}) =>
      GetChatListsToAddChat(chatId: chatId ?? this.chatId);
}

extension AddChatToListExtensions on AddChatToList {
  AddChatToList copyWith({int? chatId, ChatList? chatList}) => AddChatToList(
    chatId: chatId ?? this.chatId,
    chatList: chatList ?? this.chatList,
  );
}

extension GetChatFolderExtensions on GetChatFolder {
  GetChatFolder copyWith({int? chatFolderId}) =>
      GetChatFolder(chatFolderId: chatFolderId ?? this.chatFolderId);
}

extension CreateChatFolderExtensions on CreateChatFolder {
  CreateChatFolder copyWith({ChatFolder? folder}) =>
      CreateChatFolder(folder: folder ?? this.folder);
}

extension EditChatFolderExtensions on EditChatFolder {
  EditChatFolder copyWith({int? chatFolderId, ChatFolder? folder}) =>
      EditChatFolder(
        chatFolderId: chatFolderId ?? this.chatFolderId,
        folder: folder ?? this.folder,
      );
}

extension DeleteChatFolderExtensions on DeleteChatFolder {
  DeleteChatFolder copyWith({int? chatFolderId, List<int>? leaveChatIds}) =>
      DeleteChatFolder(
        chatFolderId: chatFolderId ?? this.chatFolderId,
        leaveChatIds: leaveChatIds ?? this.leaveChatIds,
      );
}

extension GetChatFolderChatsToLeaveExtensions on GetChatFolderChatsToLeave {
  GetChatFolderChatsToLeave copyWith({int? chatFolderId}) =>
      GetChatFolderChatsToLeave(
        chatFolderId: chatFolderId ?? this.chatFolderId,
      );
}

extension GetChatFolderChatCountExtensions on GetChatFolderChatCount {
  GetChatFolderChatCount copyWith({ChatFolder? folder}) =>
      GetChatFolderChatCount(folder: folder ?? this.folder);
}

extension ReorderChatFoldersExtensions on ReorderChatFolders {
  ReorderChatFolders copyWith({
    List<int>? chatFolderIds,
    int? mainChatListPosition,
  }) => ReorderChatFolders(
    chatFolderIds: chatFolderIds ?? this.chatFolderIds,
    mainChatListPosition: mainChatListPosition ?? this.mainChatListPosition,
  );
}

extension ToggleChatFolderTagsExtensions on ToggleChatFolderTags {
  ToggleChatFolderTags copyWith({bool? areTagsEnabled}) => ToggleChatFolderTags(
    areTagsEnabled: areTagsEnabled ?? this.areTagsEnabled,
  );
}

extension GetChatFolderDefaultIconNameExtensions
    on GetChatFolderDefaultIconName {
  GetChatFolderDefaultIconName copyWith({ChatFolder? folder}) =>
      GetChatFolderDefaultIconName(folder: folder ?? this.folder);
}

extension GetChatsForChatFolderInviteLinkExtensions
    on GetChatsForChatFolderInviteLink {
  GetChatsForChatFolderInviteLink copyWith({int? chatFolderId}) =>
      GetChatsForChatFolderInviteLink(
        chatFolderId: chatFolderId ?? this.chatFolderId,
      );
}

extension CreateChatFolderInviteLinkExtensions on CreateChatFolderInviteLink {
  CreateChatFolderInviteLink copyWith({
    int? chatFolderId,
    String? name,
    List<int>? chatIds,
  }) => CreateChatFolderInviteLink(
    chatFolderId: chatFolderId ?? this.chatFolderId,
    name: name ?? this.name,
    chatIds: chatIds ?? this.chatIds,
  );
}

extension GetChatFolderInviteLinksExtensions on GetChatFolderInviteLinks {
  GetChatFolderInviteLinks copyWith({int? chatFolderId}) =>
      GetChatFolderInviteLinks(chatFolderId: chatFolderId ?? this.chatFolderId);
}

extension EditChatFolderInviteLinkExtensions on EditChatFolderInviteLink {
  EditChatFolderInviteLink copyWith({
    int? chatFolderId,
    String? inviteLink,
    String? name,
    List<int>? chatIds,
  }) => EditChatFolderInviteLink(
    chatFolderId: chatFolderId ?? this.chatFolderId,
    inviteLink: inviteLink ?? this.inviteLink,
    name: name ?? this.name,
    chatIds: chatIds ?? this.chatIds,
  );
}

extension DeleteChatFolderInviteLinkExtensions on DeleteChatFolderInviteLink {
  DeleteChatFolderInviteLink copyWith({
    int? chatFolderId,
    String? inviteLink,
  }) => DeleteChatFolderInviteLink(
    chatFolderId: chatFolderId ?? this.chatFolderId,
    inviteLink: inviteLink ?? this.inviteLink,
  );
}

extension CheckChatFolderInviteLinkExtensions on CheckChatFolderInviteLink {
  CheckChatFolderInviteLink copyWith({String? inviteLink}) =>
      CheckChatFolderInviteLink(inviteLink: inviteLink ?? this.inviteLink);
}

extension AddChatFolderByInviteLinkExtensions on AddChatFolderByInviteLink {
  AddChatFolderByInviteLink copyWith({
    String? inviteLink,
    List<int>? chatIds,
  }) => AddChatFolderByInviteLink(
    inviteLink: inviteLink ?? this.inviteLink,
    chatIds: chatIds ?? this.chatIds,
  );
}

extension GetChatFolderNewChatsExtensions on GetChatFolderNewChats {
  GetChatFolderNewChats copyWith({int? chatFolderId}) =>
      GetChatFolderNewChats(chatFolderId: chatFolderId ?? this.chatFolderId);
}

extension ProcessChatFolderNewChatsExtensions on ProcessChatFolderNewChats {
  ProcessChatFolderNewChats copyWith({
    int? chatFolderId,
    List<int>? addedChatIds,
  }) => ProcessChatFolderNewChats(
    chatFolderId: chatFolderId ?? this.chatFolderId,
    addedChatIds: addedChatIds ?? this.addedChatIds,
  );
}

extension SetArchiveChatListSettingsExtensions on SetArchiveChatListSettings {
  SetArchiveChatListSettings copyWith({ArchiveChatListSettings? settings}) =>
      SetArchiveChatListSettings(settings: settings ?? this.settings);
}

extension SetChatTitleExtensions on SetChatTitle {
  SetChatTitle copyWith({int? chatId, String? title}) =>
      SetChatTitle(chatId: chatId ?? this.chatId, title: title ?? this.title);
}

extension SetChatPhotoExtensions on SetChatPhoto {
  SetChatPhoto copyWith({int? chatId, InputChatPhoto? photo}) =>
      SetChatPhoto(chatId: chatId ?? this.chatId, photo: photo ?? this.photo);
}

extension SetChatAccentColorExtensions on SetChatAccentColor {
  SetChatAccentColor copyWith({
    int? chatId,
    int? accentColorId,
    int? backgroundCustomEmojiId,
  }) => SetChatAccentColor(
    chatId: chatId ?? this.chatId,
    accentColorId: accentColorId ?? this.accentColorId,
    backgroundCustomEmojiId:
        backgroundCustomEmojiId ?? this.backgroundCustomEmojiId,
  );
}

extension SetChatProfileAccentColorExtensions on SetChatProfileAccentColor {
  SetChatProfileAccentColor copyWith({
    int? chatId,
    int? profileAccentColorId,
    int? profileBackgroundCustomEmojiId,
  }) => SetChatProfileAccentColor(
    chatId: chatId ?? this.chatId,
    profileAccentColorId: profileAccentColorId ?? this.profileAccentColorId,
    profileBackgroundCustomEmojiId:
        profileBackgroundCustomEmojiId ?? this.profileBackgroundCustomEmojiId,
  );
}

extension SetChatMessageAutoDeleteTimeExtensions
    on SetChatMessageAutoDeleteTime {
  SetChatMessageAutoDeleteTime copyWith({
    int? chatId,
    int? messageAutoDeleteTime,
  }) => SetChatMessageAutoDeleteTime(
    chatId: chatId ?? this.chatId,
    messageAutoDeleteTime: messageAutoDeleteTime ?? this.messageAutoDeleteTime,
  );
}

extension SetChatEmojiStatusExtensions on SetChatEmojiStatus {
  SetChatEmojiStatus copyWith({int? chatId, EmojiStatus? emojiStatus}) =>
      SetChatEmojiStatus(
        chatId: chatId ?? this.chatId,
        emojiStatus: emojiStatus ?? this.emojiStatus,
      );
}

extension SetChatPermissionsExtensions on SetChatPermissions {
  SetChatPermissions copyWith({int? chatId, ChatPermissions? permissions}) =>
      SetChatPermissions(
        chatId: chatId ?? this.chatId,
        permissions: permissions ?? this.permissions,
      );
}

extension SetChatBackgroundExtensions on SetChatBackground {
  SetChatBackground copyWith({
    int? chatId,
    InputBackground? background,
    BackgroundType? type,
    int? darkThemeDimming,
    bool? onlyForSelf,
  }) => SetChatBackground(
    chatId: chatId ?? this.chatId,
    background: background ?? this.background,
    type: type ?? this.type,
    darkThemeDimming: darkThemeDimming ?? this.darkThemeDimming,
    onlyForSelf: onlyForSelf ?? this.onlyForSelf,
  );
}

extension DeleteChatBackgroundExtensions on DeleteChatBackground {
  DeleteChatBackground copyWith({int? chatId, bool? restorePrevious}) =>
      DeleteChatBackground(
        chatId: chatId ?? this.chatId,
        restorePrevious: restorePrevious ?? this.restorePrevious,
      );
}

extension SetChatThemeExtensions on SetChatTheme {
  SetChatTheme copyWith({int? chatId, String? themeName}) => SetChatTheme(
    chatId: chatId ?? this.chatId,
    themeName: themeName ?? this.themeName,
  );
}

extension SetChatDraftMessageExtensions on SetChatDraftMessage {
  SetChatDraftMessage copyWith({
    int? chatId,
    int? messageThreadId,
    DraftMessage? draftMessage,
  }) => SetChatDraftMessage(
    chatId: chatId ?? this.chatId,
    messageThreadId: messageThreadId ?? this.messageThreadId,
    draftMessage: draftMessage ?? this.draftMessage,
  );
}

extension SetChatNotificationSettingsExtensions on SetChatNotificationSettings {
  SetChatNotificationSettings copyWith({
    int? chatId,
    ChatNotificationSettings? notificationSettings,
  }) => SetChatNotificationSettings(
    chatId: chatId ?? this.chatId,
    notificationSettings: notificationSettings ?? this.notificationSettings,
  );
}

extension ToggleChatHasProtectedContentExtensions
    on ToggleChatHasProtectedContent {
  ToggleChatHasProtectedContent copyWith({
    int? chatId,
    bool? hasProtectedContent,
  }) => ToggleChatHasProtectedContent(
    chatId: chatId ?? this.chatId,
    hasProtectedContent: hasProtectedContent ?? this.hasProtectedContent,
  );
}

extension ToggleChatViewAsTopicsExtensions on ToggleChatViewAsTopics {
  ToggleChatViewAsTopics copyWith({int? chatId, bool? viewAsTopics}) =>
      ToggleChatViewAsTopics(
        chatId: chatId ?? this.chatId,
        viewAsTopics: viewAsTopics ?? this.viewAsTopics,
      );
}

extension ToggleChatIsTranslatableExtensions on ToggleChatIsTranslatable {
  ToggleChatIsTranslatable copyWith({int? chatId, bool? isTranslatable}) =>
      ToggleChatIsTranslatable(
        chatId: chatId ?? this.chatId,
        isTranslatable: isTranslatable ?? this.isTranslatable,
      );
}

extension ToggleChatIsMarkedAsUnreadExtensions on ToggleChatIsMarkedAsUnread {
  ToggleChatIsMarkedAsUnread copyWith({int? chatId, bool? isMarkedAsUnread}) =>
      ToggleChatIsMarkedAsUnread(
        chatId: chatId ?? this.chatId,
        isMarkedAsUnread: isMarkedAsUnread ?? this.isMarkedAsUnread,
      );
}

extension ToggleChatDefaultDisableNotificationExtensions
    on ToggleChatDefaultDisableNotification {
  ToggleChatDefaultDisableNotification copyWith({
    int? chatId,
    bool? defaultDisableNotification,
  }) => ToggleChatDefaultDisableNotification(
    chatId: chatId ?? this.chatId,
    defaultDisableNotification:
        defaultDisableNotification ?? this.defaultDisableNotification,
  );
}

extension SetChatAvailableReactionsExtensions on SetChatAvailableReactions {
  SetChatAvailableReactions copyWith({
    int? chatId,
    ChatAvailableReactions? availableReactions,
  }) => SetChatAvailableReactions(
    chatId: chatId ?? this.chatId,
    availableReactions: availableReactions ?? this.availableReactions,
  );
}

extension SetChatClientDataExtensions on SetChatClientData {
  SetChatClientData copyWith({int? chatId, String? clientData}) =>
      SetChatClientData(
        chatId: chatId ?? this.chatId,
        clientData: clientData ?? this.clientData,
      );
}

extension SetChatDescriptionExtensions on SetChatDescription {
  SetChatDescription copyWith({int? chatId, String? description}) =>
      SetChatDescription(
        chatId: chatId ?? this.chatId,
        description: description ?? this.description,
      );
}

extension SetChatDiscussionGroupExtensions on SetChatDiscussionGroup {
  SetChatDiscussionGroup copyWith({int? chatId, int? discussionChatId}) =>
      SetChatDiscussionGroup(
        chatId: chatId ?? this.chatId,
        discussionChatId: discussionChatId ?? this.discussionChatId,
      );
}

extension SetChatDirectMessagesGroupExtensions on SetChatDirectMessagesGroup {
  SetChatDirectMessagesGroup copyWith({
    int? chatId,
    bool? isEnabled,
    int? paidMessageStarCount,
  }) => SetChatDirectMessagesGroup(
    chatId: chatId ?? this.chatId,
    isEnabled: isEnabled ?? this.isEnabled,
    paidMessageStarCount: paidMessageStarCount ?? this.paidMessageStarCount,
  );
}

extension SetChatLocationExtensions on SetChatLocation {
  SetChatLocation copyWith({int? chatId, ChatLocation? location}) =>
      SetChatLocation(
        chatId: chatId ?? this.chatId,
        location: location ?? this.location,
      );
}

extension SetChatSlowModeDelayExtensions on SetChatSlowModeDelay {
  SetChatSlowModeDelay copyWith({int? chatId, int? slowModeDelay}) =>
      SetChatSlowModeDelay(
        chatId: chatId ?? this.chatId,
        slowModeDelay: slowModeDelay ?? this.slowModeDelay,
      );
}

extension PinChatMessageExtensions on PinChatMessage {
  PinChatMessage copyWith({
    int? chatId,
    int? messageId,
    bool? disableNotification,
    bool? onlyForSelf,
  }) => PinChatMessage(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    disableNotification: disableNotification ?? this.disableNotification,
    onlyForSelf: onlyForSelf ?? this.onlyForSelf,
  );
}

extension UnpinChatMessageExtensions on UnpinChatMessage {
  UnpinChatMessage copyWith({int? chatId, int? messageId}) => UnpinChatMessage(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
  );
}

extension UnpinAllChatMessagesExtensions on UnpinAllChatMessages {
  UnpinAllChatMessages copyWith({int? chatId}) =>
      UnpinAllChatMessages(chatId: chatId ?? this.chatId);
}

extension UnpinAllMessageThreadMessagesExtensions
    on UnpinAllMessageThreadMessages {
  UnpinAllMessageThreadMessages copyWith({int? chatId, int? messageThreadId}) =>
      UnpinAllMessageThreadMessages(
        chatId: chatId ?? this.chatId,
        messageThreadId: messageThreadId ?? this.messageThreadId,
      );
}

extension JoinChatExtensions on JoinChat {
  JoinChat copyWith({int? chatId}) => JoinChat(chatId: chatId ?? this.chatId);
}

extension LeaveChatExtensions on LeaveChat {
  LeaveChat copyWith({int? chatId}) => LeaveChat(chatId: chatId ?? this.chatId);
}

extension AddChatMemberExtensions on AddChatMember {
  AddChatMember copyWith({int? chatId, int? userId, int? forwardLimit}) =>
      AddChatMember(
        chatId: chatId ?? this.chatId,
        userId: userId ?? this.userId,
        forwardLimit: forwardLimit ?? this.forwardLimit,
      );
}

extension AddChatMembersExtensions on AddChatMembers {
  AddChatMembers copyWith({int? chatId, List<int>? userIds}) => AddChatMembers(
    chatId: chatId ?? this.chatId,
    userIds: userIds ?? this.userIds,
  );
}

extension SetChatMemberStatusExtensions on SetChatMemberStatus {
  SetChatMemberStatus copyWith({
    int? chatId,
    MessageSender? memberId,
    ChatMemberStatus? status,
  }) => SetChatMemberStatus(
    chatId: chatId ?? this.chatId,
    memberId: memberId ?? this.memberId,
    status: status ?? this.status,
  );
}

extension BanChatMemberExtensions on BanChatMember {
  BanChatMember copyWith({
    int? chatId,
    MessageSender? memberId,
    int? bannedUntilDate,
    bool? revokeMessages,
  }) => BanChatMember(
    chatId: chatId ?? this.chatId,
    memberId: memberId ?? this.memberId,
    bannedUntilDate: bannedUntilDate ?? this.bannedUntilDate,
    revokeMessages: revokeMessages ?? this.revokeMessages,
  );
}

extension TransferChatOwnershipExtensions on TransferChatOwnership {
  TransferChatOwnership copyWith({
    int? chatId,
    int? userId,
    String? password,
  }) => TransferChatOwnership(
    chatId: chatId ?? this.chatId,
    userId: userId ?? this.userId,
    password: password ?? this.password,
  );
}

extension GetChatMemberExtensions on GetChatMember {
  GetChatMember copyWith({int? chatId, MessageSender? memberId}) =>
      GetChatMember(
        chatId: chatId ?? this.chatId,
        memberId: memberId ?? this.memberId,
      );
}

extension SearchChatMembersExtensions on SearchChatMembers {
  SearchChatMembers copyWith({
    int? chatId,
    String? query,
    int? limit,
    ChatMembersFilter? filter,
  }) => SearchChatMembers(
    chatId: chatId ?? this.chatId,
    query: query ?? this.query,
    limit: limit ?? this.limit,
    filter: filter ?? this.filter,
  );
}

extension GetChatAdministratorsExtensions on GetChatAdministrators {
  GetChatAdministrators copyWith({int? chatId}) =>
      GetChatAdministrators(chatId: chatId ?? this.chatId);
}

extension ClearAllDraftMessagesExtensions on ClearAllDraftMessages {
  ClearAllDraftMessages copyWith({bool? excludeSecretChats}) =>
      ClearAllDraftMessages(
        excludeSecretChats: excludeSecretChats ?? this.excludeSecretChats,
      );
}

extension GetSavedNotificationSoundExtensions on GetSavedNotificationSound {
  GetSavedNotificationSound copyWith({int? notificationSoundId}) =>
      GetSavedNotificationSound(
        notificationSoundId: notificationSoundId ?? this.notificationSoundId,
      );
}

extension AddSavedNotificationSoundExtensions on AddSavedNotificationSound {
  AddSavedNotificationSound copyWith({InputFile? sound}) =>
      AddSavedNotificationSound(sound: sound ?? this.sound);
}

extension RemoveSavedNotificationSoundExtensions
    on RemoveSavedNotificationSound {
  RemoveSavedNotificationSound copyWith({int? notificationSoundId}) =>
      RemoveSavedNotificationSound(
        notificationSoundId: notificationSoundId ?? this.notificationSoundId,
      );
}

extension GetChatNotificationSettingsExceptionsExtensions
    on GetChatNotificationSettingsExceptions {
  GetChatNotificationSettingsExceptions copyWith({
    NotificationSettingsScope? scope,
    bool? compareSound,
  }) => GetChatNotificationSettingsExceptions(
    scope: scope ?? this.scope,
    compareSound: compareSound ?? this.compareSound,
  );
}

extension GetScopeNotificationSettingsExtensions
    on GetScopeNotificationSettings {
  GetScopeNotificationSettings copyWith({NotificationSettingsScope? scope}) =>
      GetScopeNotificationSettings(scope: scope ?? this.scope);
}

extension SetScopeNotificationSettingsExtensions
    on SetScopeNotificationSettings {
  SetScopeNotificationSettings copyWith({
    NotificationSettingsScope? scope,
    ScopeNotificationSettings? notificationSettings,
  }) => SetScopeNotificationSettings(
    scope: scope ?? this.scope,
    notificationSettings: notificationSettings ?? this.notificationSettings,
  );
}

extension SetReactionNotificationSettingsExtensions
    on SetReactionNotificationSettings {
  SetReactionNotificationSettings copyWith({
    ReactionNotificationSettings? notificationSettings,
  }) => SetReactionNotificationSettings(
    notificationSettings: notificationSettings ?? this.notificationSettings,
  );
}

extension ToggleChatIsPinnedExtensions on ToggleChatIsPinned {
  ToggleChatIsPinned copyWith({
    ChatList? chatList,
    int? chatId,
    bool? isPinned,
  }) => ToggleChatIsPinned(
    chatList: chatList ?? this.chatList,
    chatId: chatId ?? this.chatId,
    isPinned: isPinned ?? this.isPinned,
  );
}

extension SetPinnedChatsExtensions on SetPinnedChats {
  SetPinnedChats copyWith({ChatList? chatList, List<int>? chatIds}) =>
      SetPinnedChats(
        chatList: chatList ?? this.chatList,
        chatIds: chatIds ?? this.chatIds,
      );
}

extension ReadChatListExtensions on ReadChatList {
  ReadChatList copyWith({ChatList? chatList}) =>
      ReadChatList(chatList: chatList ?? this.chatList);
}

extension GetCurrentWeatherExtensions on GetCurrentWeather {
  GetCurrentWeather copyWith({Location? location}) =>
      GetCurrentWeather(location: location ?? this.location);
}

extension GetStoryExtensions on GetStory {
  GetStory copyWith({int? storyPosterChatId, int? storyId, bool? onlyLocal}) =>
      GetStory(
        storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
        storyId: storyId ?? this.storyId,
        onlyLocal: onlyLocal ?? this.onlyLocal,
      );
}

extension CanPostStoryExtensions on CanPostStory {
  CanPostStory copyWith({int? chatId}) =>
      CanPostStory(chatId: chatId ?? this.chatId);
}

extension PostStoryExtensions on PostStory {
  PostStory copyWith({
    int? chatId,
    InputStoryContent? content,
    InputStoryAreas? areas,
    FormattedText? caption,
    StoryPrivacySettings? privacySettings,
    int? activePeriod,
    StoryFullId? fromStoryFullId,
    bool? isPostedToChatPage,
    bool? protectContent,
  }) => PostStory(
    chatId: chatId ?? this.chatId,
    content: content ?? this.content,
    areas: areas ?? this.areas,
    caption: caption ?? this.caption,
    privacySettings: privacySettings ?? this.privacySettings,
    activePeriod: activePeriod ?? this.activePeriod,
    fromStoryFullId: fromStoryFullId ?? this.fromStoryFullId,
    isPostedToChatPage: isPostedToChatPage ?? this.isPostedToChatPage,
    protectContent: protectContent ?? this.protectContent,
  );
}

extension EditStoryExtensions on EditStory {
  EditStory copyWith({
    int? storyPosterChatId,
    int? storyId,
    InputStoryContent? content,
    InputStoryAreas? areas,
    FormattedText? caption,
  }) => EditStory(
    storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
    storyId: storyId ?? this.storyId,
    content: content ?? this.content,
    areas: areas ?? this.areas,
    caption: caption ?? this.caption,
  );
}

extension EditStoryCoverExtensions on EditStoryCover {
  EditStoryCover copyWith({
    int? storyPosterChatId,
    int? storyId,
    double? coverFrameTimestamp,
  }) => EditStoryCover(
    storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
    storyId: storyId ?? this.storyId,
    coverFrameTimestamp: coverFrameTimestamp ?? this.coverFrameTimestamp,
  );
}

extension SetStoryPrivacySettingsExtensions on SetStoryPrivacySettings {
  SetStoryPrivacySettings copyWith({
    int? storyId,
    StoryPrivacySettings? privacySettings,
  }) => SetStoryPrivacySettings(
    storyId: storyId ?? this.storyId,
    privacySettings: privacySettings ?? this.privacySettings,
  );
}

extension ToggleStoryIsPostedToChatPageExtensions
    on ToggleStoryIsPostedToChatPage {
  ToggleStoryIsPostedToChatPage copyWith({
    int? storyPosterChatId,
    int? storyId,
    bool? isPostedToChatPage,
  }) => ToggleStoryIsPostedToChatPage(
    storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
    storyId: storyId ?? this.storyId,
    isPostedToChatPage: isPostedToChatPage ?? this.isPostedToChatPage,
  );
}

extension DeleteStoryExtensions on DeleteStory {
  DeleteStory copyWith({int? storyPosterChatId, int? storyId}) => DeleteStory(
    storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
    storyId: storyId ?? this.storyId,
  );
}

extension LoadActiveStoriesExtensions on LoadActiveStories {
  LoadActiveStories copyWith({StoryList? storyList}) =>
      LoadActiveStories(storyList: storyList ?? this.storyList);
}

extension SetChatActiveStoriesListExtensions on SetChatActiveStoriesList {
  SetChatActiveStoriesList copyWith({int? chatId, StoryList? storyList}) =>
      SetChatActiveStoriesList(
        chatId: chatId ?? this.chatId,
        storyList: storyList ?? this.storyList,
      );
}

extension GetChatActiveStoriesExtensions on GetChatActiveStories {
  GetChatActiveStories copyWith({int? chatId}) =>
      GetChatActiveStories(chatId: chatId ?? this.chatId);
}

extension GetChatPostedToChatPageStoriesExtensions
    on GetChatPostedToChatPageStories {
  GetChatPostedToChatPageStories copyWith({
    int? chatId,
    int? fromStoryId,
    int? limit,
  }) => GetChatPostedToChatPageStories(
    chatId: chatId ?? this.chatId,
    fromStoryId: fromStoryId ?? this.fromStoryId,
    limit: limit ?? this.limit,
  );
}

extension GetChatArchivedStoriesExtensions on GetChatArchivedStories {
  GetChatArchivedStories copyWith({
    int? chatId,
    int? fromStoryId,
    int? limit,
  }) => GetChatArchivedStories(
    chatId: chatId ?? this.chatId,
    fromStoryId: fromStoryId ?? this.fromStoryId,
    limit: limit ?? this.limit,
  );
}

extension SetChatPinnedStoriesExtensions on SetChatPinnedStories {
  SetChatPinnedStories copyWith({int? chatId, List<int>? storyIds}) =>
      SetChatPinnedStories(
        chatId: chatId ?? this.chatId,
        storyIds: storyIds ?? this.storyIds,
      );
}

extension OpenStoryExtensions on OpenStory {
  OpenStory copyWith({int? storyPosterChatId, int? storyId}) => OpenStory(
    storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
    storyId: storyId ?? this.storyId,
  );
}

extension CloseStoryExtensions on CloseStory {
  CloseStory copyWith({int? storyPosterChatId, int? storyId}) => CloseStory(
    storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
    storyId: storyId ?? this.storyId,
  );
}

extension GetStoryAvailableReactionsExtensions on GetStoryAvailableReactions {
  GetStoryAvailableReactions copyWith({int? rowSize}) =>
      GetStoryAvailableReactions(rowSize: rowSize ?? this.rowSize);
}

extension SetStoryReactionExtensions on SetStoryReaction {
  SetStoryReaction copyWith({
    int? storyPosterChatId,
    int? storyId,
    ReactionType? reactionType,
    bool? updateRecentReactions,
  }) => SetStoryReaction(
    storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
    storyId: storyId ?? this.storyId,
    reactionType: reactionType ?? this.reactionType,
    updateRecentReactions: updateRecentReactions ?? this.updateRecentReactions,
  );
}

extension GetStoryInteractionsExtensions on GetStoryInteractions {
  GetStoryInteractions copyWith({
    int? storyId,
    String? query,
    bool? onlyContacts,
    bool? preferForwards,
    bool? preferWithReaction,
    String? offset,
    int? limit,
  }) => GetStoryInteractions(
    storyId: storyId ?? this.storyId,
    query: query ?? this.query,
    onlyContacts: onlyContacts ?? this.onlyContacts,
    preferForwards: preferForwards ?? this.preferForwards,
    preferWithReaction: preferWithReaction ?? this.preferWithReaction,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension GetChatStoryInteractionsExtensions on GetChatStoryInteractions {
  GetChatStoryInteractions copyWith({
    int? storyPosterChatId,
    int? storyId,
    ReactionType? reactionType,
    bool? preferForwards,
    String? offset,
    int? limit,
  }) => GetChatStoryInteractions(
    storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
    storyId: storyId ?? this.storyId,
    reactionType: reactionType ?? this.reactionType,
    preferForwards: preferForwards ?? this.preferForwards,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension ReportStoryExtensions on ReportStory {
  ReportStory copyWith({
    int? storyPosterChatId,
    int? storyId,
    String? optionId,
    String? text,
  }) => ReportStory(
    storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
    storyId: storyId ?? this.storyId,
    optionId: optionId ?? this.optionId,
    text: text ?? this.text,
  );
}

extension GetStoryPublicForwardsExtensions on GetStoryPublicForwards {
  GetStoryPublicForwards copyWith({
    int? storyPosterChatId,
    int? storyId,
    String? offset,
    int? limit,
  }) => GetStoryPublicForwards(
    storyPosterChatId: storyPosterChatId ?? this.storyPosterChatId,
    storyId: storyId ?? this.storyId,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension GetChatBoostLevelFeaturesExtensions on GetChatBoostLevelFeatures {
  GetChatBoostLevelFeatures copyWith({bool? isChannel, int? level}) =>
      GetChatBoostLevelFeatures(
        isChannel: isChannel ?? this.isChannel,
        level: level ?? this.level,
      );
}

extension GetChatBoostFeaturesExtensions on GetChatBoostFeatures {
  GetChatBoostFeatures copyWith({bool? isChannel}) =>
      GetChatBoostFeatures(isChannel: isChannel ?? this.isChannel);
}

extension GetChatBoostStatusExtensions on GetChatBoostStatus {
  GetChatBoostStatus copyWith({int? chatId}) =>
      GetChatBoostStatus(chatId: chatId ?? this.chatId);
}

extension BoostChatExtensions on BoostChat {
  BoostChat copyWith({int? chatId, List<int>? slotIds}) => BoostChat(
    chatId: chatId ?? this.chatId,
    slotIds: slotIds ?? this.slotIds,
  );
}

extension GetChatBoostLinkExtensions on GetChatBoostLink {
  GetChatBoostLink copyWith({int? chatId}) =>
      GetChatBoostLink(chatId: chatId ?? this.chatId);
}

extension GetChatBoostLinkInfoExtensions on GetChatBoostLinkInfo {
  GetChatBoostLinkInfo copyWith({String? url}) =>
      GetChatBoostLinkInfo(url: url ?? this.url);
}

extension GetChatBoostsExtensions on GetChatBoosts {
  GetChatBoosts copyWith({
    int? chatId,
    bool? onlyGiftCodes,
    String? offset,
    int? limit,
  }) => GetChatBoosts(
    chatId: chatId ?? this.chatId,
    onlyGiftCodes: onlyGiftCodes ?? this.onlyGiftCodes,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension GetUserChatBoostsExtensions on GetUserChatBoosts {
  GetUserChatBoosts copyWith({int? chatId, int? userId}) => GetUserChatBoosts(
    chatId: chatId ?? this.chatId,
    userId: userId ?? this.userId,
  );
}

extension GetAttachmentMenuBotExtensions on GetAttachmentMenuBot {
  GetAttachmentMenuBot copyWith({int? botUserId}) =>
      GetAttachmentMenuBot(botUserId: botUserId ?? this.botUserId);
}

extension ToggleBotIsAddedToAttachmentMenuExtensions
    on ToggleBotIsAddedToAttachmentMenu {
  ToggleBotIsAddedToAttachmentMenu copyWith({
    int? botUserId,
    bool? isAdded,
    bool? allowWriteAccess,
  }) => ToggleBotIsAddedToAttachmentMenu(
    botUserId: botUserId ?? this.botUserId,
    isAdded: isAdded ?? this.isAdded,
    allowWriteAccess: allowWriteAccess ?? this.allowWriteAccess,
  );
}

extension DownloadFileExtensions on DownloadFile {
  DownloadFile copyWith({
    int? fileId,
    int? priority,
    int? offset,
    int? limit,
    bool? synchronous,
  }) => DownloadFile(
    fileId: fileId ?? this.fileId,
    priority: priority ?? this.priority,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
    synchronous: synchronous ?? this.synchronous,
  );
}

extension GetFileDownloadedPrefixSizeExtensions on GetFileDownloadedPrefixSize {
  GetFileDownloadedPrefixSize copyWith({int? fileId, int? offset}) =>
      GetFileDownloadedPrefixSize(
        fileId: fileId ?? this.fileId,
        offset: offset ?? this.offset,
      );
}

extension CancelDownloadFileExtensions on CancelDownloadFile {
  CancelDownloadFile copyWith({int? fileId, bool? onlyIfPending}) =>
      CancelDownloadFile(
        fileId: fileId ?? this.fileId,
        onlyIfPending: onlyIfPending ?? this.onlyIfPending,
      );
}

extension GetSuggestedFileNameExtensions on GetSuggestedFileName {
  GetSuggestedFileName copyWith({int? fileId, String? directory}) =>
      GetSuggestedFileName(
        fileId: fileId ?? this.fileId,
        directory: directory ?? this.directory,
      );
}

extension PreliminaryUploadFileExtensions on PreliminaryUploadFile {
  PreliminaryUploadFile copyWith({
    InputFile? file,
    FileType? fileType,
    int? priority,
  }) => PreliminaryUploadFile(
    file: file ?? this.file,
    fileType: fileType ?? this.fileType,
    priority: priority ?? this.priority,
  );
}

extension CancelPreliminaryUploadFileExtensions on CancelPreliminaryUploadFile {
  CancelPreliminaryUploadFile copyWith({int? fileId}) =>
      CancelPreliminaryUploadFile(fileId: fileId ?? this.fileId);
}

extension WriteGeneratedFilePartExtensions on WriteGeneratedFilePart {
  WriteGeneratedFilePart copyWith({
    int? generationId,
    int? offset,
    String? data,
  }) => WriteGeneratedFilePart(
    generationId: generationId ?? this.generationId,
    offset: offset ?? this.offset,
    data: data ?? this.data,
  );
}

extension SetFileGenerationProgressExtensions on SetFileGenerationProgress {
  SetFileGenerationProgress copyWith({
    int? generationId,
    int? expectedSize,
    int? localPrefixSize,
  }) => SetFileGenerationProgress(
    generationId: generationId ?? this.generationId,
    expectedSize: expectedSize ?? this.expectedSize,
    localPrefixSize: localPrefixSize ?? this.localPrefixSize,
  );
}

extension FinishFileGenerationExtensions on FinishFileGeneration {
  FinishFileGeneration copyWith({int? generationId, TdError? error}) =>
      FinishFileGeneration(
        generationId: generationId ?? this.generationId,
        error: error ?? this.error,
      );
}

extension ReadFilePartExtensions on ReadFilePart {
  ReadFilePart copyWith({int? fileId, int? offset, int? count}) => ReadFilePart(
    fileId: fileId ?? this.fileId,
    offset: offset ?? this.offset,
    count: count ?? this.count,
  );
}

extension DeleteFileExtensions on DeleteFile {
  DeleteFile copyWith({int? fileId}) =>
      DeleteFile(fileId: fileId ?? this.fileId);
}

extension AddFileToDownloadsExtensions on AddFileToDownloads {
  AddFileToDownloads copyWith({
    int? fileId,
    int? chatId,
    int? messageId,
    int? priority,
  }) => AddFileToDownloads(
    fileId: fileId ?? this.fileId,
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    priority: priority ?? this.priority,
  );
}

extension ToggleDownloadIsPausedExtensions on ToggleDownloadIsPaused {
  ToggleDownloadIsPaused copyWith({int? fileId, bool? isPaused}) =>
      ToggleDownloadIsPaused(
        fileId: fileId ?? this.fileId,
        isPaused: isPaused ?? this.isPaused,
      );
}

extension ToggleAllDownloadsArePausedExtensions on ToggleAllDownloadsArePaused {
  ToggleAllDownloadsArePaused copyWith({bool? arePaused}) =>
      ToggleAllDownloadsArePaused(arePaused: arePaused ?? this.arePaused);
}

extension RemoveFileFromDownloadsExtensions on RemoveFileFromDownloads {
  RemoveFileFromDownloads copyWith({int? fileId, bool? deleteFromCache}) =>
      RemoveFileFromDownloads(
        fileId: fileId ?? this.fileId,
        deleteFromCache: deleteFromCache ?? this.deleteFromCache,
      );
}

extension RemoveAllFilesFromDownloadsExtensions on RemoveAllFilesFromDownloads {
  RemoveAllFilesFromDownloads copyWith({
    bool? onlyActive,
    bool? onlyCompleted,
    bool? deleteFromCache,
  }) => RemoveAllFilesFromDownloads(
    onlyActive: onlyActive ?? this.onlyActive,
    onlyCompleted: onlyCompleted ?? this.onlyCompleted,
    deleteFromCache: deleteFromCache ?? this.deleteFromCache,
  );
}

extension SearchFileDownloadsExtensions on SearchFileDownloads {
  SearchFileDownloads copyWith({
    String? query,
    bool? onlyActive,
    bool? onlyCompleted,
    String? offset,
    int? limit,
  }) => SearchFileDownloads(
    query: query ?? this.query,
    onlyActive: onlyActive ?? this.onlyActive,
    onlyCompleted: onlyCompleted ?? this.onlyCompleted,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension SetApplicationVerificationTokenExtensions
    on SetApplicationVerificationToken {
  SetApplicationVerificationToken copyWith({
    int? verificationId,
    String? token,
  }) => SetApplicationVerificationToken(
    verificationId: verificationId ?? this.verificationId,
    token: token ?? this.token,
  );
}

extension GetMessageFileTypeExtensions on GetMessageFileType {
  GetMessageFileType copyWith({String? messageFileHead}) => GetMessageFileType(
    messageFileHead: messageFileHead ?? this.messageFileHead,
  );
}

extension GetMessageImportConfirmationTextExtensions
    on GetMessageImportConfirmationText {
  GetMessageImportConfirmationText copyWith({int? chatId}) =>
      GetMessageImportConfirmationText(chatId: chatId ?? this.chatId);
}

extension ImportMessagesExtensions on ImportMessages {
  ImportMessages copyWith({
    int? chatId,
    InputFile? messageFile,
    List<InputFile>? attachedFiles,
  }) => ImportMessages(
    chatId: chatId ?? this.chatId,
    messageFile: messageFile ?? this.messageFile,
    attachedFiles: attachedFiles ?? this.attachedFiles,
  );
}

extension ReplacePrimaryChatInviteLinkExtensions
    on ReplacePrimaryChatInviteLink {
  ReplacePrimaryChatInviteLink copyWith({int? chatId}) =>
      ReplacePrimaryChatInviteLink(chatId: chatId ?? this.chatId);
}

extension CreateChatInviteLinkExtensions on CreateChatInviteLink {
  CreateChatInviteLink copyWith({
    int? chatId,
    String? name,
    int? expirationDate,
    int? memberLimit,
    bool? createsJoinRequest,
  }) => CreateChatInviteLink(
    chatId: chatId ?? this.chatId,
    name: name ?? this.name,
    expirationDate: expirationDate ?? this.expirationDate,
    memberLimit: memberLimit ?? this.memberLimit,
    createsJoinRequest: createsJoinRequest ?? this.createsJoinRequest,
  );
}

extension CreateChatSubscriptionInviteLinkExtensions
    on CreateChatSubscriptionInviteLink {
  CreateChatSubscriptionInviteLink copyWith({
    int? chatId,
    String? name,
    StarSubscriptionPricing? subscriptionPricing,
  }) => CreateChatSubscriptionInviteLink(
    chatId: chatId ?? this.chatId,
    name: name ?? this.name,
    subscriptionPricing: subscriptionPricing ?? this.subscriptionPricing,
  );
}

extension EditChatInviteLinkExtensions on EditChatInviteLink {
  EditChatInviteLink copyWith({
    int? chatId,
    String? inviteLink,
    String? name,
    int? expirationDate,
    int? memberLimit,
    bool? createsJoinRequest,
  }) => EditChatInviteLink(
    chatId: chatId ?? this.chatId,
    inviteLink: inviteLink ?? this.inviteLink,
    name: name ?? this.name,
    expirationDate: expirationDate ?? this.expirationDate,
    memberLimit: memberLimit ?? this.memberLimit,
    createsJoinRequest: createsJoinRequest ?? this.createsJoinRequest,
  );
}

extension EditChatSubscriptionInviteLinkExtensions
    on EditChatSubscriptionInviteLink {
  EditChatSubscriptionInviteLink copyWith({
    int? chatId,
    String? inviteLink,
    String? name,
  }) => EditChatSubscriptionInviteLink(
    chatId: chatId ?? this.chatId,
    inviteLink: inviteLink ?? this.inviteLink,
    name: name ?? this.name,
  );
}

extension GetChatInviteLinkExtensions on GetChatInviteLink {
  GetChatInviteLink copyWith({int? chatId, String? inviteLink}) =>
      GetChatInviteLink(
        chatId: chatId ?? this.chatId,
        inviteLink: inviteLink ?? this.inviteLink,
      );
}

extension GetChatInviteLinkCountsExtensions on GetChatInviteLinkCounts {
  GetChatInviteLinkCounts copyWith({int? chatId}) =>
      GetChatInviteLinkCounts(chatId: chatId ?? this.chatId);
}

extension GetChatInviteLinksExtensions on GetChatInviteLinks {
  GetChatInviteLinks copyWith({
    int? chatId,
    int? creatorUserId,
    bool? isRevoked,
    int? offsetDate,
    String? offsetInviteLink,
    int? limit,
  }) => GetChatInviteLinks(
    chatId: chatId ?? this.chatId,
    creatorUserId: creatorUserId ?? this.creatorUserId,
    isRevoked: isRevoked ?? this.isRevoked,
    offsetDate: offsetDate ?? this.offsetDate,
    offsetInviteLink: offsetInviteLink ?? this.offsetInviteLink,
    limit: limit ?? this.limit,
  );
}

extension GetChatInviteLinkMembersExtensions on GetChatInviteLinkMembers {
  GetChatInviteLinkMembers copyWith({
    int? chatId,
    String? inviteLink,
    bool? onlyWithExpiredSubscription,
    ChatInviteLinkMember? offsetMember,
    int? limit,
  }) => GetChatInviteLinkMembers(
    chatId: chatId ?? this.chatId,
    inviteLink: inviteLink ?? this.inviteLink,
    onlyWithExpiredSubscription:
        onlyWithExpiredSubscription ?? this.onlyWithExpiredSubscription,
    offsetMember: offsetMember ?? this.offsetMember,
    limit: limit ?? this.limit,
  );
}

extension RevokeChatInviteLinkExtensions on RevokeChatInviteLink {
  RevokeChatInviteLink copyWith({int? chatId, String? inviteLink}) =>
      RevokeChatInviteLink(
        chatId: chatId ?? this.chatId,
        inviteLink: inviteLink ?? this.inviteLink,
      );
}

extension DeleteRevokedChatInviteLinkExtensions on DeleteRevokedChatInviteLink {
  DeleteRevokedChatInviteLink copyWith({int? chatId, String? inviteLink}) =>
      DeleteRevokedChatInviteLink(
        chatId: chatId ?? this.chatId,
        inviteLink: inviteLink ?? this.inviteLink,
      );
}

extension DeleteAllRevokedChatInviteLinksExtensions
    on DeleteAllRevokedChatInviteLinks {
  DeleteAllRevokedChatInviteLinks copyWith({int? chatId, int? creatorUserId}) =>
      DeleteAllRevokedChatInviteLinks(
        chatId: chatId ?? this.chatId,
        creatorUserId: creatorUserId ?? this.creatorUserId,
      );
}

extension CheckChatInviteLinkExtensions on CheckChatInviteLink {
  CheckChatInviteLink copyWith({String? inviteLink}) =>
      CheckChatInviteLink(inviteLink: inviteLink ?? this.inviteLink);
}

extension JoinChatByInviteLinkExtensions on JoinChatByInviteLink {
  JoinChatByInviteLink copyWith({String? inviteLink}) =>
      JoinChatByInviteLink(inviteLink: inviteLink ?? this.inviteLink);
}

extension GetChatJoinRequestsExtensions on GetChatJoinRequests {
  GetChatJoinRequests copyWith({
    int? chatId,
    String? inviteLink,
    String? query,
    ChatJoinRequest? offsetRequest,
    int? limit,
  }) => GetChatJoinRequests(
    chatId: chatId ?? this.chatId,
    inviteLink: inviteLink ?? this.inviteLink,
    query: query ?? this.query,
    offsetRequest: offsetRequest ?? this.offsetRequest,
    limit: limit ?? this.limit,
  );
}

extension ProcessChatJoinRequestExtensions on ProcessChatJoinRequest {
  ProcessChatJoinRequest copyWith({int? chatId, int? userId, bool? approve}) =>
      ProcessChatJoinRequest(
        chatId: chatId ?? this.chatId,
        userId: userId ?? this.userId,
        approve: approve ?? this.approve,
      );
}

extension ProcessChatJoinRequestsExtensions on ProcessChatJoinRequests {
  ProcessChatJoinRequests copyWith({
    int? chatId,
    String? inviteLink,
    bool? approve,
  }) => ProcessChatJoinRequests(
    chatId: chatId ?? this.chatId,
    inviteLink: inviteLink ?? this.inviteLink,
    approve: approve ?? this.approve,
  );
}

extension CreateCallExtensions on CreateCall {
  CreateCall copyWith({int? userId, CallProtocol? protocol, bool? isVideo}) =>
      CreateCall(
        userId: userId ?? this.userId,
        protocol: protocol ?? this.protocol,
        isVideo: isVideo ?? this.isVideo,
      );
}

extension AcceptCallExtensions on AcceptCall {
  AcceptCall copyWith({int? callId, CallProtocol? protocol}) => AcceptCall(
    callId: callId ?? this.callId,
    protocol: protocol ?? this.protocol,
  );
}

extension SendCallSignalingDataExtensions on SendCallSignalingData {
  SendCallSignalingData copyWith({int? callId, String? data}) =>
      SendCallSignalingData(
        callId: callId ?? this.callId,
        data: data ?? this.data,
      );
}

extension DiscardCallExtensions on DiscardCall {
  DiscardCall copyWith({
    int? callId,
    bool? isDisconnected,
    String? inviteLink,
    int? duration,
    bool? isVideo,
    int? connectionId,
  }) => DiscardCall(
    callId: callId ?? this.callId,
    isDisconnected: isDisconnected ?? this.isDisconnected,
    inviteLink: inviteLink ?? this.inviteLink,
    duration: duration ?? this.duration,
    isVideo: isVideo ?? this.isVideo,
    connectionId: connectionId ?? this.connectionId,
  );
}

extension SendCallRatingExtensions on SendCallRating {
  SendCallRating copyWith({
    int? callId,
    int? rating,
    String? comment,
    List<CallProblem>? problems,
  }) => SendCallRating(
    callId: callId ?? this.callId,
    rating: rating ?? this.rating,
    comment: comment ?? this.comment,
    problems: problems ?? this.problems,
  );
}

extension SendCallDebugInformationExtensions on SendCallDebugInformation {
  SendCallDebugInformation copyWith({int? callId, String? debugInformation}) =>
      SendCallDebugInformation(
        callId: callId ?? this.callId,
        debugInformation: debugInformation ?? this.debugInformation,
      );
}

extension SendCallLogExtensions on SendCallLog {
  SendCallLog copyWith({int? callId, InputFile? logFile}) => SendCallLog(
    callId: callId ?? this.callId,
    logFile: logFile ?? this.logFile,
  );
}

extension GetVideoChatAvailableParticipantsExtensions
    on GetVideoChatAvailableParticipants {
  GetVideoChatAvailableParticipants copyWith({int? chatId}) =>
      GetVideoChatAvailableParticipants(chatId: chatId ?? this.chatId);
}

extension SetVideoChatDefaultParticipantExtensions
    on SetVideoChatDefaultParticipant {
  SetVideoChatDefaultParticipant copyWith({
    int? chatId,
    MessageSender? defaultParticipantId,
  }) => SetVideoChatDefaultParticipant(
    chatId: chatId ?? this.chatId,
    defaultParticipantId: defaultParticipantId ?? this.defaultParticipantId,
  );
}

extension CreateVideoChatExtensions on CreateVideoChat {
  CreateVideoChat copyWith({
    int? chatId,
    String? title,
    int? startDate,
    bool? isRtmpStream,
  }) => CreateVideoChat(
    chatId: chatId ?? this.chatId,
    title: title ?? this.title,
    startDate: startDate ?? this.startDate,
    isRtmpStream: isRtmpStream ?? this.isRtmpStream,
  );
}

extension CreateGroupCallExtensions on CreateGroupCall {
  CreateGroupCall copyWith({GroupCallJoinParameters? joinParameters}) =>
      CreateGroupCall(joinParameters: joinParameters ?? this.joinParameters);
}

extension GetVideoChatRtmpUrlExtensions on GetVideoChatRtmpUrl {
  GetVideoChatRtmpUrl copyWith({int? chatId}) =>
      GetVideoChatRtmpUrl(chatId: chatId ?? this.chatId);
}

extension ReplaceVideoChatRtmpUrlExtensions on ReplaceVideoChatRtmpUrl {
  ReplaceVideoChatRtmpUrl copyWith({int? chatId}) =>
      ReplaceVideoChatRtmpUrl(chatId: chatId ?? this.chatId);
}

extension GetGroupCallExtensions on GetGroupCall {
  GetGroupCall copyWith({int? groupCallId}) =>
      GetGroupCall(groupCallId: groupCallId ?? this.groupCallId);
}

extension StartScheduledVideoChatExtensions on StartScheduledVideoChat {
  StartScheduledVideoChat copyWith({int? groupCallId}) =>
      StartScheduledVideoChat(groupCallId: groupCallId ?? this.groupCallId);
}

extension ToggleVideoChatEnabledStartNotificationExtensions
    on ToggleVideoChatEnabledStartNotification {
  ToggleVideoChatEnabledStartNotification copyWith({
    int? groupCallId,
    bool? enabledStartNotification,
  }) => ToggleVideoChatEnabledStartNotification(
    groupCallId: groupCallId ?? this.groupCallId,
    enabledStartNotification:
        enabledStartNotification ?? this.enabledStartNotification,
  );
}

extension JoinGroupCallExtensions on JoinGroupCall {
  JoinGroupCall copyWith({
    InputGroupCall? inputGroupCall,
    GroupCallJoinParameters? joinParameters,
  }) => JoinGroupCall(
    inputGroupCall: inputGroupCall ?? this.inputGroupCall,
    joinParameters: joinParameters ?? this.joinParameters,
  );
}

extension JoinVideoChatExtensions on JoinVideoChat {
  JoinVideoChat copyWith({
    int? groupCallId,
    MessageSender? participantId,
    GroupCallJoinParameters? joinParameters,
    String? inviteHash,
  }) => JoinVideoChat(
    groupCallId: groupCallId ?? this.groupCallId,
    participantId: participantId ?? this.participantId,
    joinParameters: joinParameters ?? this.joinParameters,
    inviteHash: inviteHash ?? this.inviteHash,
  );
}

extension StartGroupCallScreenSharingExtensions on StartGroupCallScreenSharing {
  StartGroupCallScreenSharing copyWith({
    int? groupCallId,
    int? audioSourceId,
    String? payload,
  }) => StartGroupCallScreenSharing(
    groupCallId: groupCallId ?? this.groupCallId,
    audioSourceId: audioSourceId ?? this.audioSourceId,
    payload: payload ?? this.payload,
  );
}

extension ToggleGroupCallScreenSharingIsPausedExtensions
    on ToggleGroupCallScreenSharingIsPaused {
  ToggleGroupCallScreenSharingIsPaused copyWith({
    int? groupCallId,
    bool? isPaused,
  }) => ToggleGroupCallScreenSharingIsPaused(
    groupCallId: groupCallId ?? this.groupCallId,
    isPaused: isPaused ?? this.isPaused,
  );
}

extension EndGroupCallScreenSharingExtensions on EndGroupCallScreenSharing {
  EndGroupCallScreenSharing copyWith({int? groupCallId}) =>
      EndGroupCallScreenSharing(groupCallId: groupCallId ?? this.groupCallId);
}

extension SetVideoChatTitleExtensions on SetVideoChatTitle {
  SetVideoChatTitle copyWith({int? groupCallId, String? title}) =>
      SetVideoChatTitle(
        groupCallId: groupCallId ?? this.groupCallId,
        title: title ?? this.title,
      );
}

extension ToggleVideoChatMuteNewParticipantsExtensions
    on ToggleVideoChatMuteNewParticipants {
  ToggleVideoChatMuteNewParticipants copyWith({
    int? groupCallId,
    bool? muteNewParticipants,
  }) => ToggleVideoChatMuteNewParticipants(
    groupCallId: groupCallId ?? this.groupCallId,
    muteNewParticipants: muteNewParticipants ?? this.muteNewParticipants,
  );
}

extension InviteGroupCallParticipantExtensions on InviteGroupCallParticipant {
  InviteGroupCallParticipant copyWith({
    int? groupCallId,
    int? userId,
    bool? isVideo,
  }) => InviteGroupCallParticipant(
    groupCallId: groupCallId ?? this.groupCallId,
    userId: userId ?? this.userId,
    isVideo: isVideo ?? this.isVideo,
  );
}

extension DeclineGroupCallInvitationExtensions on DeclineGroupCallInvitation {
  DeclineGroupCallInvitation copyWith({int? chatId, int? messageId}) =>
      DeclineGroupCallInvitation(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension BanGroupCallParticipantsExtensions on BanGroupCallParticipants {
  BanGroupCallParticipants copyWith({int? groupCallId, List<int>? userIds}) =>
      BanGroupCallParticipants(
        groupCallId: groupCallId ?? this.groupCallId,
        userIds: userIds ?? this.userIds,
      );
}

extension InviteVideoChatParticipantsExtensions on InviteVideoChatParticipants {
  InviteVideoChatParticipants copyWith({
    int? groupCallId,
    List<int>? userIds,
  }) => InviteVideoChatParticipants(
    groupCallId: groupCallId ?? this.groupCallId,
    userIds: userIds ?? this.userIds,
  );
}

extension GetVideoChatInviteLinkExtensions on GetVideoChatInviteLink {
  GetVideoChatInviteLink copyWith({int? groupCallId, bool? canSelfUnmute}) =>
      GetVideoChatInviteLink(
        groupCallId: groupCallId ?? this.groupCallId,
        canSelfUnmute: canSelfUnmute ?? this.canSelfUnmute,
      );
}

extension RevokeGroupCallInviteLinkExtensions on RevokeGroupCallInviteLink {
  RevokeGroupCallInviteLink copyWith({int? groupCallId}) =>
      RevokeGroupCallInviteLink(groupCallId: groupCallId ?? this.groupCallId);
}

extension StartGroupCallRecordingExtensions on StartGroupCallRecording {
  StartGroupCallRecording copyWith({
    int? groupCallId,
    String? title,
    bool? recordVideo,
    bool? usePortraitOrientation,
  }) => StartGroupCallRecording(
    groupCallId: groupCallId ?? this.groupCallId,
    title: title ?? this.title,
    recordVideo: recordVideo ?? this.recordVideo,
    usePortraitOrientation:
        usePortraitOrientation ?? this.usePortraitOrientation,
  );
}

extension EndGroupCallRecordingExtensions on EndGroupCallRecording {
  EndGroupCallRecording copyWith({int? groupCallId}) =>
      EndGroupCallRecording(groupCallId: groupCallId ?? this.groupCallId);
}

extension ToggleGroupCallIsMyVideoPausedExtensions
    on ToggleGroupCallIsMyVideoPaused {
  ToggleGroupCallIsMyVideoPaused copyWith({
    int? groupCallId,
    bool? isMyVideoPaused,
  }) => ToggleGroupCallIsMyVideoPaused(
    groupCallId: groupCallId ?? this.groupCallId,
    isMyVideoPaused: isMyVideoPaused ?? this.isMyVideoPaused,
  );
}

extension ToggleGroupCallIsMyVideoEnabledExtensions
    on ToggleGroupCallIsMyVideoEnabled {
  ToggleGroupCallIsMyVideoEnabled copyWith({
    int? groupCallId,
    bool? isMyVideoEnabled,
  }) => ToggleGroupCallIsMyVideoEnabled(
    groupCallId: groupCallId ?? this.groupCallId,
    isMyVideoEnabled: isMyVideoEnabled ?? this.isMyVideoEnabled,
  );
}

extension SetGroupCallParticipantIsSpeakingExtensions
    on SetGroupCallParticipantIsSpeaking {
  SetGroupCallParticipantIsSpeaking copyWith({
    int? groupCallId,
    int? audioSource,
    bool? isSpeaking,
  }) => SetGroupCallParticipantIsSpeaking(
    groupCallId: groupCallId ?? this.groupCallId,
    audioSource: audioSource ?? this.audioSource,
    isSpeaking: isSpeaking ?? this.isSpeaking,
  );
}

extension ToggleGroupCallParticipantIsMutedExtensions
    on ToggleGroupCallParticipantIsMuted {
  ToggleGroupCallParticipantIsMuted copyWith({
    int? groupCallId,
    MessageSender? participantId,
    bool? isMuted,
  }) => ToggleGroupCallParticipantIsMuted(
    groupCallId: groupCallId ?? this.groupCallId,
    participantId: participantId ?? this.participantId,
    isMuted: isMuted ?? this.isMuted,
  );
}

extension SetGroupCallParticipantVolumeLevelExtensions
    on SetGroupCallParticipantVolumeLevel {
  SetGroupCallParticipantVolumeLevel copyWith({
    int? groupCallId,
    MessageSender? participantId,
    int? volumeLevel,
  }) => SetGroupCallParticipantVolumeLevel(
    groupCallId: groupCallId ?? this.groupCallId,
    participantId: participantId ?? this.participantId,
    volumeLevel: volumeLevel ?? this.volumeLevel,
  );
}

extension ToggleGroupCallParticipantIsHandRaisedExtensions
    on ToggleGroupCallParticipantIsHandRaised {
  ToggleGroupCallParticipantIsHandRaised copyWith({
    int? groupCallId,
    MessageSender? participantId,
    bool? isHandRaised,
  }) => ToggleGroupCallParticipantIsHandRaised(
    groupCallId: groupCallId ?? this.groupCallId,
    participantId: participantId ?? this.participantId,
    isHandRaised: isHandRaised ?? this.isHandRaised,
  );
}

extension GetGroupCallParticipantsExtensions on GetGroupCallParticipants {
  GetGroupCallParticipants copyWith({
    InputGroupCall? inputGroupCall,
    int? limit,
  }) => GetGroupCallParticipants(
    inputGroupCall: inputGroupCall ?? this.inputGroupCall,
    limit: limit ?? this.limit,
  );
}

extension LoadGroupCallParticipantsExtensions on LoadGroupCallParticipants {
  LoadGroupCallParticipants copyWith({int? groupCallId, int? limit}) =>
      LoadGroupCallParticipants(
        groupCallId: groupCallId ?? this.groupCallId,
        limit: limit ?? this.limit,
      );
}

extension LeaveGroupCallExtensions on LeaveGroupCall {
  LeaveGroupCall copyWith({int? groupCallId}) =>
      LeaveGroupCall(groupCallId: groupCallId ?? this.groupCallId);
}

extension EndGroupCallExtensions on EndGroupCall {
  EndGroupCall copyWith({int? groupCallId}) =>
      EndGroupCall(groupCallId: groupCallId ?? this.groupCallId);
}

extension GetVideoChatStreamsExtensions on GetVideoChatStreams {
  GetVideoChatStreams copyWith({int? groupCallId}) =>
      GetVideoChatStreams(groupCallId: groupCallId ?? this.groupCallId);
}

extension GetVideoChatStreamSegmentExtensions on GetVideoChatStreamSegment {
  GetVideoChatStreamSegment copyWith({
    int? groupCallId,
    int? timeOffset,
    int? scale,
    int? channelId,
    GroupCallVideoQuality? videoQuality,
  }) => GetVideoChatStreamSegment(
    groupCallId: groupCallId ?? this.groupCallId,
    timeOffset: timeOffset ?? this.timeOffset,
    scale: scale ?? this.scale,
    channelId: channelId ?? this.channelId,
    videoQuality: videoQuality ?? this.videoQuality,
  );
}

extension EncryptGroupCallDataExtensions on EncryptGroupCallData {
  EncryptGroupCallData copyWith({
    int? groupCallId,
    GroupCallDataChannel? dataChannel,
    String? data,
    int? unencryptedPrefixSize,
  }) => EncryptGroupCallData(
    groupCallId: groupCallId ?? this.groupCallId,
    dataChannel: dataChannel ?? this.dataChannel,
    data: data ?? this.data,
    unencryptedPrefixSize: unencryptedPrefixSize ?? this.unencryptedPrefixSize,
  );
}

extension DecryptGroupCallDataExtensions on DecryptGroupCallData {
  DecryptGroupCallData copyWith({
    int? groupCallId,
    MessageSender? participantId,
    GroupCallDataChannel? dataChannel,
    String? data,
  }) => DecryptGroupCallData(
    groupCallId: groupCallId ?? this.groupCallId,
    participantId: participantId ?? this.participantId,
    dataChannel: dataChannel ?? this.dataChannel,
    data: data ?? this.data,
  );
}

extension SetMessageSenderBlockListExtensions on SetMessageSenderBlockList {
  SetMessageSenderBlockList copyWith({
    MessageSender? senderId,
    BlockList? blockList,
  }) => SetMessageSenderBlockList(
    senderId: senderId ?? this.senderId,
    blockList: blockList ?? this.blockList,
  );
}

extension BlockMessageSenderFromRepliesExtensions
    on BlockMessageSenderFromReplies {
  BlockMessageSenderFromReplies copyWith({
    int? messageId,
    bool? deleteMessage,
    bool? deleteAllMessages,
    bool? reportSpam,
  }) => BlockMessageSenderFromReplies(
    messageId: messageId ?? this.messageId,
    deleteMessage: deleteMessage ?? this.deleteMessage,
    deleteAllMessages: deleteAllMessages ?? this.deleteAllMessages,
    reportSpam: reportSpam ?? this.reportSpam,
  );
}

extension GetBlockedMessageSendersExtensions on GetBlockedMessageSenders {
  GetBlockedMessageSenders copyWith({
    BlockList? blockList,
    int? offset,
    int? limit,
  }) => GetBlockedMessageSenders(
    blockList: blockList ?? this.blockList,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension AddContactExtensions on AddContact {
  AddContact copyWith({Contact? contact, bool? sharePhoneNumber}) => AddContact(
    contact: contact ?? this.contact,
    sharePhoneNumber: sharePhoneNumber ?? this.sharePhoneNumber,
  );
}

extension ImportContactsExtensions on ImportContacts {
  ImportContacts copyWith({List<Contact>? contacts}) =>
      ImportContacts(contacts: contacts ?? this.contacts);
}

extension SearchContactsExtensions on SearchContacts {
  SearchContacts copyWith({String? query, int? limit}) =>
      SearchContacts(query: query ?? this.query, limit: limit ?? this.limit);
}

extension RemoveContactsExtensions on RemoveContacts {
  RemoveContacts copyWith({List<int>? userIds}) =>
      RemoveContacts(userIds: userIds ?? this.userIds);
}

extension ChangeImportedContactsExtensions on ChangeImportedContacts {
  ChangeImportedContacts copyWith({List<Contact>? contacts}) =>
      ChangeImportedContacts(contacts: contacts ?? this.contacts);
}

extension SetCloseFriendsExtensions on SetCloseFriends {
  SetCloseFriends copyWith({List<int>? userIds}) =>
      SetCloseFriends(userIds: userIds ?? this.userIds);
}

extension SetUserPersonalProfilePhotoExtensions on SetUserPersonalProfilePhoto {
  SetUserPersonalProfilePhoto copyWith({int? userId, InputChatPhoto? photo}) =>
      SetUserPersonalProfilePhoto(
        userId: userId ?? this.userId,
        photo: photo ?? this.photo,
      );
}

extension SuggestUserProfilePhotoExtensions on SuggestUserProfilePhoto {
  SuggestUserProfilePhoto copyWith({int? userId, InputChatPhoto? photo}) =>
      SuggestUserProfilePhoto(
        userId: userId ?? this.userId,
        photo: photo ?? this.photo,
      );
}

extension ToggleBotCanManageEmojiStatusExtensions
    on ToggleBotCanManageEmojiStatus {
  ToggleBotCanManageEmojiStatus copyWith({
    int? botUserId,
    bool? canManageEmojiStatus,
  }) => ToggleBotCanManageEmojiStatus(
    botUserId: botUserId ?? this.botUserId,
    canManageEmojiStatus: canManageEmojiStatus ?? this.canManageEmojiStatus,
  );
}

extension SetUserEmojiStatusExtensions on SetUserEmojiStatus {
  SetUserEmojiStatus copyWith({int? userId, EmojiStatus? emojiStatus}) =>
      SetUserEmojiStatus(
        userId: userId ?? this.userId,
        emojiStatus: emojiStatus ?? this.emojiStatus,
      );
}

extension SearchUserByPhoneNumberExtensions on SearchUserByPhoneNumber {
  SearchUserByPhoneNumber copyWith({String? phoneNumber, bool? onlyLocal}) =>
      SearchUserByPhoneNumber(
        phoneNumber: phoneNumber ?? this.phoneNumber,
        onlyLocal: onlyLocal ?? this.onlyLocal,
      );
}

extension SharePhoneNumberExtensions on SharePhoneNumber {
  SharePhoneNumber copyWith({int? userId}) =>
      SharePhoneNumber(userId: userId ?? this.userId);
}

extension GetUserProfilePhotosExtensions on GetUserProfilePhotos {
  GetUserProfilePhotos copyWith({int? userId, int? offset, int? limit}) =>
      GetUserProfilePhotos(
        userId: userId ?? this.userId,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit,
      );
}

extension GetStickerOutlineExtensions on GetStickerOutline {
  GetStickerOutline copyWith({
    int? stickerFileId,
    bool? forAnimatedEmoji,
    bool? forClickedAnimatedEmojiMessage,
  }) => GetStickerOutline(
    stickerFileId: stickerFileId ?? this.stickerFileId,
    forAnimatedEmoji: forAnimatedEmoji ?? this.forAnimatedEmoji,
    forClickedAnimatedEmojiMessage:
        forClickedAnimatedEmojiMessage ?? this.forClickedAnimatedEmojiMessage,
  );
}

extension GetStickersExtensions on GetStickers {
  GetStickers copyWith({
    StickerType? stickerType,
    String? query,
    int? limit,
    int? chatId,
  }) => GetStickers(
    stickerType: stickerType ?? this.stickerType,
    query: query ?? this.query,
    limit: limit ?? this.limit,
    chatId: chatId ?? this.chatId,
  );
}

extension GetAllStickerEmojisExtensions on GetAllStickerEmojis {
  GetAllStickerEmojis copyWith({
    StickerType? stickerType,
    String? query,
    int? chatId,
    bool? returnOnlyMainEmoji,
  }) => GetAllStickerEmojis(
    stickerType: stickerType ?? this.stickerType,
    query: query ?? this.query,
    chatId: chatId ?? this.chatId,
    returnOnlyMainEmoji: returnOnlyMainEmoji ?? this.returnOnlyMainEmoji,
  );
}

extension SearchStickersExtensions on SearchStickers {
  SearchStickers copyWith({
    StickerType? stickerType,
    String? emojis,
    String? query,
    List<String>? inputLanguageCodes,
    int? offset,
    int? limit,
  }) => SearchStickers(
    stickerType: stickerType ?? this.stickerType,
    emojis: emojis ?? this.emojis,
    query: query ?? this.query,
    inputLanguageCodes: inputLanguageCodes ?? this.inputLanguageCodes,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension GetPremiumStickersExtensions on GetPremiumStickers {
  GetPremiumStickers copyWith({int? limit}) =>
      GetPremiumStickers(limit: limit ?? this.limit);
}

extension GetInstalledStickerSetsExtensions on GetInstalledStickerSets {
  GetInstalledStickerSets copyWith({StickerType? stickerType}) =>
      GetInstalledStickerSets(stickerType: stickerType ?? this.stickerType);
}

extension GetArchivedStickerSetsExtensions on GetArchivedStickerSets {
  GetArchivedStickerSets copyWith({
    StickerType? stickerType,
    int? offsetStickerSetId,
    int? limit,
  }) => GetArchivedStickerSets(
    stickerType: stickerType ?? this.stickerType,
    offsetStickerSetId: offsetStickerSetId ?? this.offsetStickerSetId,
    limit: limit ?? this.limit,
  );
}

extension GetTrendingStickerSetsExtensions on GetTrendingStickerSets {
  GetTrendingStickerSets copyWith({
    StickerType? stickerType,
    int? offset,
    int? limit,
  }) => GetTrendingStickerSets(
    stickerType: stickerType ?? this.stickerType,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension GetAttachedStickerSetsExtensions on GetAttachedStickerSets {
  GetAttachedStickerSets copyWith({int? fileId}) =>
      GetAttachedStickerSets(fileId: fileId ?? this.fileId);
}

extension GetStickerSetExtensions on GetStickerSet {
  GetStickerSet copyWith({int? setId}) =>
      GetStickerSet(setId: setId ?? this.setId);
}

extension GetStickerSetNameExtensions on GetStickerSetName {
  GetStickerSetName copyWith({int? setId}) =>
      GetStickerSetName(setId: setId ?? this.setId);
}

extension SearchStickerSetExtensions on SearchStickerSet {
  SearchStickerSet copyWith({String? name, bool? ignoreCache}) =>
      SearchStickerSet(
        name: name ?? this.name,
        ignoreCache: ignoreCache ?? this.ignoreCache,
      );
}

extension SearchInstalledStickerSetsExtensions on SearchInstalledStickerSets {
  SearchInstalledStickerSets copyWith({
    StickerType? stickerType,
    String? query,
    int? limit,
  }) => SearchInstalledStickerSets(
    stickerType: stickerType ?? this.stickerType,
    query: query ?? this.query,
    limit: limit ?? this.limit,
  );
}

extension SearchStickerSetsExtensions on SearchStickerSets {
  SearchStickerSets copyWith({StickerType? stickerType, String? query}) =>
      SearchStickerSets(
        stickerType: stickerType ?? this.stickerType,
        query: query ?? this.query,
      );
}

extension ChangeStickerSetExtensions on ChangeStickerSet {
  ChangeStickerSet copyWith({
    int? setId,
    bool? isInstalled,
    bool? isArchived,
  }) => ChangeStickerSet(
    setId: setId ?? this.setId,
    isInstalled: isInstalled ?? this.isInstalled,
    isArchived: isArchived ?? this.isArchived,
  );
}

extension ViewTrendingStickerSetsExtensions on ViewTrendingStickerSets {
  ViewTrendingStickerSets copyWith({List<int>? stickerSetIds}) =>
      ViewTrendingStickerSets(
        stickerSetIds: stickerSetIds ?? this.stickerSetIds,
      );
}

extension ReorderInstalledStickerSetsExtensions on ReorderInstalledStickerSets {
  ReorderInstalledStickerSets copyWith({
    StickerType? stickerType,
    List<int>? stickerSetIds,
  }) => ReorderInstalledStickerSets(
    stickerType: stickerType ?? this.stickerType,
    stickerSetIds: stickerSetIds ?? this.stickerSetIds,
  );
}

extension GetRecentStickersExtensions on GetRecentStickers {
  GetRecentStickers copyWith({bool? isAttached}) =>
      GetRecentStickers(isAttached: isAttached ?? this.isAttached);
}

extension AddRecentStickerExtensions on AddRecentSticker {
  AddRecentSticker copyWith({bool? isAttached, InputFile? sticker}) =>
      AddRecentSticker(
        isAttached: isAttached ?? this.isAttached,
        sticker: sticker ?? this.sticker,
      );
}

extension RemoveRecentStickerExtensions on RemoveRecentSticker {
  RemoveRecentSticker copyWith({bool? isAttached, InputFile? sticker}) =>
      RemoveRecentSticker(
        isAttached: isAttached ?? this.isAttached,
        sticker: sticker ?? this.sticker,
      );
}

extension ClearRecentStickersExtensions on ClearRecentStickers {
  ClearRecentStickers copyWith({bool? isAttached}) =>
      ClearRecentStickers(isAttached: isAttached ?? this.isAttached);
}

extension AddFavoriteStickerExtensions on AddFavoriteSticker {
  AddFavoriteSticker copyWith({InputFile? sticker}) =>
      AddFavoriteSticker(sticker: sticker ?? this.sticker);
}

extension RemoveFavoriteStickerExtensions on RemoveFavoriteSticker {
  RemoveFavoriteSticker copyWith({InputFile? sticker}) =>
      RemoveFavoriteSticker(sticker: sticker ?? this.sticker);
}

extension GetStickerEmojisExtensions on GetStickerEmojis {
  GetStickerEmojis copyWith({InputFile? sticker}) =>
      GetStickerEmojis(sticker: sticker ?? this.sticker);
}

extension SearchEmojisExtensions on SearchEmojis {
  SearchEmojis copyWith({String? text, List<String>? inputLanguageCodes}) =>
      SearchEmojis(
        text: text ?? this.text,
        inputLanguageCodes: inputLanguageCodes ?? this.inputLanguageCodes,
      );
}

extension GetKeywordEmojisExtensions on GetKeywordEmojis {
  GetKeywordEmojis copyWith({String? text, List<String>? inputLanguageCodes}) =>
      GetKeywordEmojis(
        text: text ?? this.text,
        inputLanguageCodes: inputLanguageCodes ?? this.inputLanguageCodes,
      );
}

extension GetEmojiCategoriesExtensions on GetEmojiCategories {
  GetEmojiCategories copyWith({EmojiCategoryType? type}) =>
      GetEmojiCategories(type: type ?? this.type);
}

extension GetAnimatedEmojiExtensions on GetAnimatedEmoji {
  GetAnimatedEmoji copyWith({String? emoji}) =>
      GetAnimatedEmoji(emoji: emoji ?? this.emoji);
}

extension GetEmojiSuggestionsUrlExtensions on GetEmojiSuggestionsUrl {
  GetEmojiSuggestionsUrl copyWith({String? languageCode}) =>
      GetEmojiSuggestionsUrl(languageCode: languageCode ?? this.languageCode);
}

extension GetCustomEmojiStickersExtensions on GetCustomEmojiStickers {
  GetCustomEmojiStickers copyWith({List<int>? customEmojiIds}) =>
      GetCustomEmojiStickers(
        customEmojiIds: customEmojiIds ?? this.customEmojiIds,
      );
}

extension AddSavedAnimationExtensions on AddSavedAnimation {
  AddSavedAnimation copyWith({InputFile? animation}) =>
      AddSavedAnimation(animation: animation ?? this.animation);
}

extension RemoveSavedAnimationExtensions on RemoveSavedAnimation {
  RemoveSavedAnimation copyWith({InputFile? animation}) =>
      RemoveSavedAnimation(animation: animation ?? this.animation);
}

extension SearchHashtagsExtensions on SearchHashtags {
  SearchHashtags copyWith({String? prefix, int? limit}) =>
      SearchHashtags(prefix: prefix ?? this.prefix, limit: limit ?? this.limit);
}

extension RemoveRecentHashtagExtensions on RemoveRecentHashtag {
  RemoveRecentHashtag copyWith({String? hashtag}) =>
      RemoveRecentHashtag(hashtag: hashtag ?? this.hashtag);
}

extension GetLinkPreviewExtensions on GetLinkPreview {
  GetLinkPreview copyWith({
    FormattedText? text,
    LinkPreviewOptions? linkPreviewOptions,
  }) => GetLinkPreview(
    text: text ?? this.text,
    linkPreviewOptions: linkPreviewOptions ?? this.linkPreviewOptions,
  );
}

extension GetWebPageInstantViewExtensions on GetWebPageInstantView {
  GetWebPageInstantView copyWith({String? url, bool? onlyLocal}) =>
      GetWebPageInstantView(
        url: url ?? this.url,
        onlyLocal: onlyLocal ?? this.onlyLocal,
      );
}

extension SetProfilePhotoExtensions on SetProfilePhoto {
  SetProfilePhoto copyWith({InputChatPhoto? photo, bool? isPublic}) =>
      SetProfilePhoto(
        photo: photo ?? this.photo,
        isPublic: isPublic ?? this.isPublic,
      );
}

extension DeleteProfilePhotoExtensions on DeleteProfilePhoto {
  DeleteProfilePhoto copyWith({int? profilePhotoId}) =>
      DeleteProfilePhoto(profilePhotoId: profilePhotoId ?? this.profilePhotoId);
}

extension SetAccentColorExtensions on SetAccentColor {
  SetAccentColor copyWith({int? accentColorId, int? backgroundCustomEmojiId}) =>
      SetAccentColor(
        accentColorId: accentColorId ?? this.accentColorId,
        backgroundCustomEmojiId:
            backgroundCustomEmojiId ?? this.backgroundCustomEmojiId,
      );
}

extension SetProfileAccentColorExtensions on SetProfileAccentColor {
  SetProfileAccentColor copyWith({
    int? profileAccentColorId,
    int? profileBackgroundCustomEmojiId,
  }) => SetProfileAccentColor(
    profileAccentColorId: profileAccentColorId ?? this.profileAccentColorId,
    profileBackgroundCustomEmojiId:
        profileBackgroundCustomEmojiId ?? this.profileBackgroundCustomEmojiId,
  );
}

extension SetNameExtensions on SetName {
  SetName copyWith({String? firstName, String? lastName}) => SetName(
    firstName: firstName ?? this.firstName,
    lastName: lastName ?? this.lastName,
  );
}

extension SetBioExtensions on SetBio {
  SetBio copyWith({String? bio}) => SetBio(bio: bio ?? this.bio);
}

extension SetUsernameExtensions on SetUsername {
  SetUsername copyWith({String? username}) =>
      SetUsername(username: username ?? this.username);
}

extension ToggleUsernameIsActiveExtensions on ToggleUsernameIsActive {
  ToggleUsernameIsActive copyWith({String? username, bool? isActive}) =>
      ToggleUsernameIsActive(
        username: username ?? this.username,
        isActive: isActive ?? this.isActive,
      );
}

extension ReorderActiveUsernamesExtensions on ReorderActiveUsernames {
  ReorderActiveUsernames copyWith({List<String>? usernames}) =>
      ReorderActiveUsernames(usernames: usernames ?? this.usernames);
}

extension SetBirthdateExtensions on SetBirthdate {
  SetBirthdate copyWith({Birthdate? birthdate}) =>
      SetBirthdate(birthdate: birthdate ?? this.birthdate);
}

extension SetPersonalChatExtensions on SetPersonalChat {
  SetPersonalChat copyWith({int? chatId}) =>
      SetPersonalChat(chatId: chatId ?? this.chatId);
}

extension SetEmojiStatusExtensions on SetEmojiStatus {
  SetEmojiStatus copyWith({EmojiStatus? emojiStatus}) =>
      SetEmojiStatus(emojiStatus: emojiStatus ?? this.emojiStatus);
}

extension ToggleHasSponsoredMessagesEnabledExtensions
    on ToggleHasSponsoredMessagesEnabled {
  ToggleHasSponsoredMessagesEnabled copyWith({
    bool? hasSponsoredMessagesEnabled,
  }) => ToggleHasSponsoredMessagesEnabled(
    hasSponsoredMessagesEnabled:
        hasSponsoredMessagesEnabled ?? this.hasSponsoredMessagesEnabled,
  );
}

extension SetBusinessLocationExtensions on SetBusinessLocation {
  SetBusinessLocation copyWith({BusinessLocation? location}) =>
      SetBusinessLocation(location: location ?? this.location);
}

extension SetBusinessOpeningHoursExtensions on SetBusinessOpeningHours {
  SetBusinessOpeningHours copyWith({BusinessOpeningHours? openingHours}) =>
      SetBusinessOpeningHours(openingHours: openingHours ?? this.openingHours);
}

extension SetBusinessGreetingMessageSettingsExtensions
    on SetBusinessGreetingMessageSettings {
  SetBusinessGreetingMessageSettings copyWith({
    BusinessGreetingMessageSettings? greetingMessageSettings,
  }) => SetBusinessGreetingMessageSettings(
    greetingMessageSettings:
        greetingMessageSettings ?? this.greetingMessageSettings,
  );
}

extension SetBusinessAwayMessageSettingsExtensions
    on SetBusinessAwayMessageSettings {
  SetBusinessAwayMessageSettings copyWith({
    BusinessAwayMessageSettings? awayMessageSettings,
  }) => SetBusinessAwayMessageSettings(
    awayMessageSettings: awayMessageSettings ?? this.awayMessageSettings,
  );
}

extension SetBusinessStartPageExtensions on SetBusinessStartPage {
  SetBusinessStartPage copyWith({InputBusinessStartPage? startPage}) =>
      SetBusinessStartPage(startPage: startPage ?? this.startPage);
}

extension SendPhoneNumberCodeExtensions on SendPhoneNumberCode {
  SendPhoneNumberCode copyWith({
    String? phoneNumber,
    PhoneNumberAuthenticationSettings? settings,
    PhoneNumberCodeType? type,
  }) => SendPhoneNumberCode(
    phoneNumber: phoneNumber ?? this.phoneNumber,
    settings: settings ?? this.settings,
    type: type ?? this.type,
  );
}

extension SendPhoneNumberFirebaseSmsExtensions on SendPhoneNumberFirebaseSms {
  SendPhoneNumberFirebaseSms copyWith({String? token}) =>
      SendPhoneNumberFirebaseSms(token: token ?? this.token);
}

extension ReportPhoneNumberCodeMissingExtensions
    on ReportPhoneNumberCodeMissing {
  ReportPhoneNumberCodeMissing copyWith({String? mobileNetworkCode}) =>
      ReportPhoneNumberCodeMissing(
        mobileNetworkCode: mobileNetworkCode ?? this.mobileNetworkCode,
      );
}

extension ResendPhoneNumberCodeExtensions on ResendPhoneNumberCode {
  ResendPhoneNumberCode copyWith({ResendCodeReason? reason}) =>
      ResendPhoneNumberCode(reason: reason ?? this.reason);
}

extension CheckPhoneNumberCodeExtensions on CheckPhoneNumberCode {
  CheckPhoneNumberCode copyWith({String? code}) =>
      CheckPhoneNumberCode(code: code ?? this.code);
}

extension SetBusinessConnectedBotExtensions on SetBusinessConnectedBot {
  SetBusinessConnectedBot copyWith({BusinessConnectedBot? bot}) =>
      SetBusinessConnectedBot(bot: bot ?? this.bot);
}

extension DeleteBusinessConnectedBotExtensions on DeleteBusinessConnectedBot {
  DeleteBusinessConnectedBot copyWith({int? botUserId}) =>
      DeleteBusinessConnectedBot(botUserId: botUserId ?? this.botUserId);
}

extension ToggleBusinessConnectedBotChatIsPausedExtensions
    on ToggleBusinessConnectedBotChatIsPaused {
  ToggleBusinessConnectedBotChatIsPaused copyWith({
    int? chatId,
    bool? isPaused,
  }) => ToggleBusinessConnectedBotChatIsPaused(
    chatId: chatId ?? this.chatId,
    isPaused: isPaused ?? this.isPaused,
  );
}

extension RemoveBusinessConnectedBotFromChatExtensions
    on RemoveBusinessConnectedBotFromChat {
  RemoveBusinessConnectedBotFromChat copyWith({int? chatId}) =>
      RemoveBusinessConnectedBotFromChat(chatId: chatId ?? this.chatId);
}

extension CreateBusinessChatLinkExtensions on CreateBusinessChatLink {
  CreateBusinessChatLink copyWith({InputBusinessChatLink? linkInfo}) =>
      CreateBusinessChatLink(linkInfo: linkInfo ?? this.linkInfo);
}

extension EditBusinessChatLinkExtensions on EditBusinessChatLink {
  EditBusinessChatLink copyWith({
    String? link,
    InputBusinessChatLink? linkInfo,
  }) => EditBusinessChatLink(
    link: link ?? this.link,
    linkInfo: linkInfo ?? this.linkInfo,
  );
}

extension DeleteBusinessChatLinkExtensions on DeleteBusinessChatLink {
  DeleteBusinessChatLink copyWith({String? link}) =>
      DeleteBusinessChatLink(link: link ?? this.link);
}

extension GetBusinessChatLinkInfoExtensions on GetBusinessChatLinkInfo {
  GetBusinessChatLinkInfo copyWith({String? linkName}) =>
      GetBusinessChatLinkInfo(linkName: linkName ?? this.linkName);
}

extension SearchUserByTokenExtensions on SearchUserByToken {
  SearchUserByToken copyWith({String? token}) =>
      SearchUserByToken(token: token ?? this.token);
}

extension SetCommandsExtensions on SetCommands {
  SetCommands copyWith({
    BotCommandScope? scope,
    String? languageCode,
    List<BotCommand>? commands,
  }) => SetCommands(
    scope: scope ?? this.scope,
    languageCode: languageCode ?? this.languageCode,
    commands: commands ?? this.commands,
  );
}

extension DeleteCommandsExtensions on DeleteCommands {
  DeleteCommands copyWith({BotCommandScope? scope, String? languageCode}) =>
      DeleteCommands(
        scope: scope ?? this.scope,
        languageCode: languageCode ?? this.languageCode,
      );
}

extension GetCommandsExtensions on GetCommands {
  GetCommands copyWith({BotCommandScope? scope, String? languageCode}) =>
      GetCommands(
        scope: scope ?? this.scope,
        languageCode: languageCode ?? this.languageCode,
      );
}

extension SetMenuButtonExtensions on SetMenuButton {
  SetMenuButton copyWith({int? userId, BotMenuButton? menuButton}) =>
      SetMenuButton(
        userId: userId ?? this.userId,
        menuButton: menuButton ?? this.menuButton,
      );
}

extension GetMenuButtonExtensions on GetMenuButton {
  GetMenuButton copyWith({int? userId}) =>
      GetMenuButton(userId: userId ?? this.userId);
}

extension SetDefaultGroupAdministratorRightsExtensions
    on SetDefaultGroupAdministratorRights {
  SetDefaultGroupAdministratorRights copyWith({
    ChatAdministratorRights? defaultGroupAdministratorRights,
  }) => SetDefaultGroupAdministratorRights(
    defaultGroupAdministratorRights:
        defaultGroupAdministratorRights ?? this.defaultGroupAdministratorRights,
  );
}

extension SetDefaultChannelAdministratorRightsExtensions
    on SetDefaultChannelAdministratorRights {
  SetDefaultChannelAdministratorRights copyWith({
    ChatAdministratorRights? defaultChannelAdministratorRights,
  }) => SetDefaultChannelAdministratorRights(
    defaultChannelAdministratorRights:
        defaultChannelAdministratorRights ??
        this.defaultChannelAdministratorRights,
  );
}

extension CanBotSendMessagesExtensions on CanBotSendMessages {
  CanBotSendMessages copyWith({int? botUserId}) =>
      CanBotSendMessages(botUserId: botUserId ?? this.botUserId);
}

extension AllowBotToSendMessagesExtensions on AllowBotToSendMessages {
  AllowBotToSendMessages copyWith({int? botUserId}) =>
      AllowBotToSendMessages(botUserId: botUserId ?? this.botUserId);
}

extension SendWebAppCustomRequestExtensions on SendWebAppCustomRequest {
  SendWebAppCustomRequest copyWith({
    int? botUserId,
    String? method,
    String? parameters,
  }) => SendWebAppCustomRequest(
    botUserId: botUserId ?? this.botUserId,
    method: method ?? this.method,
    parameters: parameters ?? this.parameters,
  );
}

extension GetBotMediaPreviewsExtensions on GetBotMediaPreviews {
  GetBotMediaPreviews copyWith({int? botUserId}) =>
      GetBotMediaPreviews(botUserId: botUserId ?? this.botUserId);
}

extension GetBotMediaPreviewInfoExtensions on GetBotMediaPreviewInfo {
  GetBotMediaPreviewInfo copyWith({int? botUserId, String? languageCode}) =>
      GetBotMediaPreviewInfo(
        botUserId: botUserId ?? this.botUserId,
        languageCode: languageCode ?? this.languageCode,
      );
}

extension AddBotMediaPreviewExtensions on AddBotMediaPreview {
  AddBotMediaPreview copyWith({
    int? botUserId,
    String? languageCode,
    InputStoryContent? content,
  }) => AddBotMediaPreview(
    botUserId: botUserId ?? this.botUserId,
    languageCode: languageCode ?? this.languageCode,
    content: content ?? this.content,
  );
}

extension EditBotMediaPreviewExtensions on EditBotMediaPreview {
  EditBotMediaPreview copyWith({
    int? botUserId,
    String? languageCode,
    int? fileId,
    InputStoryContent? content,
  }) => EditBotMediaPreview(
    botUserId: botUserId ?? this.botUserId,
    languageCode: languageCode ?? this.languageCode,
    fileId: fileId ?? this.fileId,
    content: content ?? this.content,
  );
}

extension ReorderBotMediaPreviewsExtensions on ReorderBotMediaPreviews {
  ReorderBotMediaPreviews copyWith({
    int? botUserId,
    String? languageCode,
    List<int>? fileIds,
  }) => ReorderBotMediaPreviews(
    botUserId: botUserId ?? this.botUserId,
    languageCode: languageCode ?? this.languageCode,
    fileIds: fileIds ?? this.fileIds,
  );
}

extension DeleteBotMediaPreviewsExtensions on DeleteBotMediaPreviews {
  DeleteBotMediaPreviews copyWith({
    int? botUserId,
    String? languageCode,
    List<int>? fileIds,
  }) => DeleteBotMediaPreviews(
    botUserId: botUserId ?? this.botUserId,
    languageCode: languageCode ?? this.languageCode,
    fileIds: fileIds ?? this.fileIds,
  );
}

extension SetBotNameExtensions on SetBotName {
  SetBotName copyWith({int? botUserId, String? languageCode, String? name}) =>
      SetBotName(
        botUserId: botUserId ?? this.botUserId,
        languageCode: languageCode ?? this.languageCode,
        name: name ?? this.name,
      );
}

extension GetBotNameExtensions on GetBotName {
  GetBotName copyWith({int? botUserId, String? languageCode}) => GetBotName(
    botUserId: botUserId ?? this.botUserId,
    languageCode: languageCode ?? this.languageCode,
  );
}

extension SetBotProfilePhotoExtensions on SetBotProfilePhoto {
  SetBotProfilePhoto copyWith({int? botUserId, InputChatPhoto? photo}) =>
      SetBotProfilePhoto(
        botUserId: botUserId ?? this.botUserId,
        photo: photo ?? this.photo,
      );
}

extension ToggleBotUsernameIsActiveExtensions on ToggleBotUsernameIsActive {
  ToggleBotUsernameIsActive copyWith({
    int? botUserId,
    String? username,
    bool? isActive,
  }) => ToggleBotUsernameIsActive(
    botUserId: botUserId ?? this.botUserId,
    username: username ?? this.username,
    isActive: isActive ?? this.isActive,
  );
}

extension ReorderBotActiveUsernamesExtensions on ReorderBotActiveUsernames {
  ReorderBotActiveUsernames copyWith({
    int? botUserId,
    List<String>? usernames,
  }) => ReorderBotActiveUsernames(
    botUserId: botUserId ?? this.botUserId,
    usernames: usernames ?? this.usernames,
  );
}

extension SetBotInfoDescriptionExtensions on SetBotInfoDescription {
  SetBotInfoDescription copyWith({
    int? botUserId,
    String? languageCode,
    String? description,
  }) => SetBotInfoDescription(
    botUserId: botUserId ?? this.botUserId,
    languageCode: languageCode ?? this.languageCode,
    description: description ?? this.description,
  );
}

extension GetBotInfoDescriptionExtensions on GetBotInfoDescription {
  GetBotInfoDescription copyWith({int? botUserId, String? languageCode}) =>
      GetBotInfoDescription(
        botUserId: botUserId ?? this.botUserId,
        languageCode: languageCode ?? this.languageCode,
      );
}

extension SetBotInfoShortDescriptionExtensions on SetBotInfoShortDescription {
  SetBotInfoShortDescription copyWith({
    int? botUserId,
    String? languageCode,
    String? shortDescription,
  }) => SetBotInfoShortDescription(
    botUserId: botUserId ?? this.botUserId,
    languageCode: languageCode ?? this.languageCode,
    shortDescription: shortDescription ?? this.shortDescription,
  );
}

extension GetBotInfoShortDescriptionExtensions on GetBotInfoShortDescription {
  GetBotInfoShortDescription copyWith({int? botUserId, String? languageCode}) =>
      GetBotInfoShortDescription(
        botUserId: botUserId ?? this.botUserId,
        languageCode: languageCode ?? this.languageCode,
      );
}

extension SetMessageSenderBotVerificationExtensions
    on SetMessageSenderBotVerification {
  SetMessageSenderBotVerification copyWith({
    int? botUserId,
    MessageSender? verifiedId,
    String? customDescription,
  }) => SetMessageSenderBotVerification(
    botUserId: botUserId ?? this.botUserId,
    verifiedId: verifiedId ?? this.verifiedId,
    customDescription: customDescription ?? this.customDescription,
  );
}

extension RemoveMessageSenderBotVerificationExtensions
    on RemoveMessageSenderBotVerification {
  RemoveMessageSenderBotVerification copyWith({
    int? botUserId,
    MessageSender? verifiedId,
  }) => RemoveMessageSenderBotVerification(
    botUserId: botUserId ?? this.botUserId,
    verifiedId: verifiedId ?? this.verifiedId,
  );
}

extension TerminateSessionExtensions on TerminateSession {
  TerminateSession copyWith({int? sessionId}) =>
      TerminateSession(sessionId: sessionId ?? this.sessionId);
}

extension ConfirmSessionExtensions on ConfirmSession {
  ConfirmSession copyWith({int? sessionId}) =>
      ConfirmSession(sessionId: sessionId ?? this.sessionId);
}

extension ToggleSessionCanAcceptCallsExtensions on ToggleSessionCanAcceptCalls {
  ToggleSessionCanAcceptCalls copyWith({
    int? sessionId,
    bool? canAcceptCalls,
  }) => ToggleSessionCanAcceptCalls(
    sessionId: sessionId ?? this.sessionId,
    canAcceptCalls: canAcceptCalls ?? this.canAcceptCalls,
  );
}

extension ToggleSessionCanAcceptSecretChatsExtensions
    on ToggleSessionCanAcceptSecretChats {
  ToggleSessionCanAcceptSecretChats copyWith({
    int? sessionId,
    bool? canAcceptSecretChats,
  }) => ToggleSessionCanAcceptSecretChats(
    sessionId: sessionId ?? this.sessionId,
    canAcceptSecretChats: canAcceptSecretChats ?? this.canAcceptSecretChats,
  );
}

extension SetInactiveSessionTtlExtensions on SetInactiveSessionTtl {
  SetInactiveSessionTtl copyWith({int? inactiveSessionTtlDays}) =>
      SetInactiveSessionTtl(
        inactiveSessionTtlDays:
            inactiveSessionTtlDays ?? this.inactiveSessionTtlDays,
      );
}

extension DisconnectWebsiteExtensions on DisconnectWebsite {
  DisconnectWebsite copyWith({int? websiteId}) =>
      DisconnectWebsite(websiteId: websiteId ?? this.websiteId);
}

extension SetSupergroupUsernameExtensions on SetSupergroupUsername {
  SetSupergroupUsername copyWith({int? supergroupId, String? username}) =>
      SetSupergroupUsername(
        supergroupId: supergroupId ?? this.supergroupId,
        username: username ?? this.username,
      );
}

extension ToggleSupergroupUsernameIsActiveExtensions
    on ToggleSupergroupUsernameIsActive {
  ToggleSupergroupUsernameIsActive copyWith({
    int? supergroupId,
    String? username,
    bool? isActive,
  }) => ToggleSupergroupUsernameIsActive(
    supergroupId: supergroupId ?? this.supergroupId,
    username: username ?? this.username,
    isActive: isActive ?? this.isActive,
  );
}

extension DisableAllSupergroupUsernamesExtensions
    on DisableAllSupergroupUsernames {
  DisableAllSupergroupUsernames copyWith({int? supergroupId}) =>
      DisableAllSupergroupUsernames(
        supergroupId: supergroupId ?? this.supergroupId,
      );
}

extension ReorderSupergroupActiveUsernamesExtensions
    on ReorderSupergroupActiveUsernames {
  ReorderSupergroupActiveUsernames copyWith({
    int? supergroupId,
    List<String>? usernames,
  }) => ReorderSupergroupActiveUsernames(
    supergroupId: supergroupId ?? this.supergroupId,
    usernames: usernames ?? this.usernames,
  );
}

extension SetSupergroupStickerSetExtensions on SetSupergroupStickerSet {
  SetSupergroupStickerSet copyWith({int? supergroupId, int? stickerSetId}) =>
      SetSupergroupStickerSet(
        supergroupId: supergroupId ?? this.supergroupId,
        stickerSetId: stickerSetId ?? this.stickerSetId,
      );
}

extension SetSupergroupCustomEmojiStickerSetExtensions
    on SetSupergroupCustomEmojiStickerSet {
  SetSupergroupCustomEmojiStickerSet copyWith({
    int? supergroupId,
    int? customEmojiStickerSetId,
  }) => SetSupergroupCustomEmojiStickerSet(
    supergroupId: supergroupId ?? this.supergroupId,
    customEmojiStickerSetId:
        customEmojiStickerSetId ?? this.customEmojiStickerSetId,
  );
}

extension SetSupergroupUnrestrictBoostCountExtensions
    on SetSupergroupUnrestrictBoostCount {
  SetSupergroupUnrestrictBoostCount copyWith({
    int? supergroupId,
    int? unrestrictBoostCount,
  }) => SetSupergroupUnrestrictBoostCount(
    supergroupId: supergroupId ?? this.supergroupId,
    unrestrictBoostCount: unrestrictBoostCount ?? this.unrestrictBoostCount,
  );
}

extension ToggleSupergroupSignMessagesExtensions
    on ToggleSupergroupSignMessages {
  ToggleSupergroupSignMessages copyWith({
    int? supergroupId,
    bool? signMessages,
    bool? showMessageSender,
  }) => ToggleSupergroupSignMessages(
    supergroupId: supergroupId ?? this.supergroupId,
    signMessages: signMessages ?? this.signMessages,
    showMessageSender: showMessageSender ?? this.showMessageSender,
  );
}

extension ToggleSupergroupJoinToSendMessagesExtensions
    on ToggleSupergroupJoinToSendMessages {
  ToggleSupergroupJoinToSendMessages copyWith({
    int? supergroupId,
    bool? joinToSendMessages,
  }) => ToggleSupergroupJoinToSendMessages(
    supergroupId: supergroupId ?? this.supergroupId,
    joinToSendMessages: joinToSendMessages ?? this.joinToSendMessages,
  );
}

extension ToggleSupergroupJoinByRequestExtensions
    on ToggleSupergroupJoinByRequest {
  ToggleSupergroupJoinByRequest copyWith({
    int? supergroupId,
    bool? joinByRequest,
  }) => ToggleSupergroupJoinByRequest(
    supergroupId: supergroupId ?? this.supergroupId,
    joinByRequest: joinByRequest ?? this.joinByRequest,
  );
}

extension ToggleSupergroupIsAllHistoryAvailableExtensions
    on ToggleSupergroupIsAllHistoryAvailable {
  ToggleSupergroupIsAllHistoryAvailable copyWith({
    int? supergroupId,
    bool? isAllHistoryAvailable,
  }) => ToggleSupergroupIsAllHistoryAvailable(
    supergroupId: supergroupId ?? this.supergroupId,
    isAllHistoryAvailable: isAllHistoryAvailable ?? this.isAllHistoryAvailable,
  );
}

extension ToggleSupergroupCanHaveSponsoredMessagesExtensions
    on ToggleSupergroupCanHaveSponsoredMessages {
  ToggleSupergroupCanHaveSponsoredMessages copyWith({
    int? supergroupId,
    bool? canHaveSponsoredMessages,
  }) => ToggleSupergroupCanHaveSponsoredMessages(
    supergroupId: supergroupId ?? this.supergroupId,
    canHaveSponsoredMessages:
        canHaveSponsoredMessages ?? this.canHaveSponsoredMessages,
  );
}

extension ToggleSupergroupHasAutomaticTranslationExtensions
    on ToggleSupergroupHasAutomaticTranslation {
  ToggleSupergroupHasAutomaticTranslation copyWith({
    int? supergroupId,
    bool? hasAutomaticTranslation,
  }) => ToggleSupergroupHasAutomaticTranslation(
    supergroupId: supergroupId ?? this.supergroupId,
    hasAutomaticTranslation:
        hasAutomaticTranslation ?? this.hasAutomaticTranslation,
  );
}

extension ToggleSupergroupHasHiddenMembersExtensions
    on ToggleSupergroupHasHiddenMembers {
  ToggleSupergroupHasHiddenMembers copyWith({
    int? supergroupId,
    bool? hasHiddenMembers,
  }) => ToggleSupergroupHasHiddenMembers(
    supergroupId: supergroupId ?? this.supergroupId,
    hasHiddenMembers: hasHiddenMembers ?? this.hasHiddenMembers,
  );
}

extension ToggleSupergroupHasAggressiveAntiSpamEnabledExtensions
    on ToggleSupergroupHasAggressiveAntiSpamEnabled {
  ToggleSupergroupHasAggressiveAntiSpamEnabled copyWith({
    int? supergroupId,
    bool? hasAggressiveAntiSpamEnabled,
  }) => ToggleSupergroupHasAggressiveAntiSpamEnabled(
    supergroupId: supergroupId ?? this.supergroupId,
    hasAggressiveAntiSpamEnabled:
        hasAggressiveAntiSpamEnabled ?? this.hasAggressiveAntiSpamEnabled,
  );
}

extension ToggleSupergroupIsForumExtensions on ToggleSupergroupIsForum {
  ToggleSupergroupIsForum copyWith({
    int? supergroupId,
    bool? isForum,
    bool? hasForumTabs,
  }) => ToggleSupergroupIsForum(
    supergroupId: supergroupId ?? this.supergroupId,
    isForum: isForum ?? this.isForum,
    hasForumTabs: hasForumTabs ?? this.hasForumTabs,
  );
}

extension ToggleSupergroupIsBroadcastGroupExtensions
    on ToggleSupergroupIsBroadcastGroup {
  ToggleSupergroupIsBroadcastGroup copyWith({int? supergroupId}) =>
      ToggleSupergroupIsBroadcastGroup(
        supergroupId: supergroupId ?? this.supergroupId,
      );
}

extension ReportSupergroupSpamExtensions on ReportSupergroupSpam {
  ReportSupergroupSpam copyWith({int? supergroupId, List<int>? messageIds}) =>
      ReportSupergroupSpam(
        supergroupId: supergroupId ?? this.supergroupId,
        messageIds: messageIds ?? this.messageIds,
      );
}

extension ReportSupergroupAntiSpamFalsePositiveExtensions
    on ReportSupergroupAntiSpamFalsePositive {
  ReportSupergroupAntiSpamFalsePositive copyWith({
    int? supergroupId,
    int? messageId,
  }) => ReportSupergroupAntiSpamFalsePositive(
    supergroupId: supergroupId ?? this.supergroupId,
    messageId: messageId ?? this.messageId,
  );
}

extension GetSupergroupMembersExtensions on GetSupergroupMembers {
  GetSupergroupMembers copyWith({
    int? supergroupId,
    SupergroupMembersFilter? filter,
    int? offset,
    int? limit,
  }) => GetSupergroupMembers(
    supergroupId: supergroupId ?? this.supergroupId,
    filter: filter ?? this.filter,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension CloseSecretChatExtensions on CloseSecretChat {
  CloseSecretChat copyWith({int? secretChatId}) =>
      CloseSecretChat(secretChatId: secretChatId ?? this.secretChatId);
}

extension GetChatEventLogExtensions on GetChatEventLog {
  GetChatEventLog copyWith({
    int? chatId,
    String? query,
    int? fromEventId,
    int? limit,
    ChatEventLogFilters? filters,
    List<int>? userIds,
  }) => GetChatEventLog(
    chatId: chatId ?? this.chatId,
    query: query ?? this.query,
    fromEventId: fromEventId ?? this.fromEventId,
    limit: limit ?? this.limit,
    filters: filters ?? this.filters,
    userIds: userIds ?? this.userIds,
  );
}

extension GetPaymentFormExtensions on GetPaymentForm {
  GetPaymentForm copyWith({
    InputInvoice? inputInvoice,
    ThemeParameters? theme,
  }) => GetPaymentForm(
    inputInvoice: inputInvoice ?? this.inputInvoice,
    theme: theme ?? this.theme,
  );
}

extension ValidateOrderInfoExtensions on ValidateOrderInfo {
  ValidateOrderInfo copyWith({
    InputInvoice? inputInvoice,
    OrderInfo? orderInfo,
    bool? allowSave,
  }) => ValidateOrderInfo(
    inputInvoice: inputInvoice ?? this.inputInvoice,
    orderInfo: orderInfo ?? this.orderInfo,
    allowSave: allowSave ?? this.allowSave,
  );
}

extension SendPaymentFormExtensions on SendPaymentForm {
  SendPaymentForm copyWith({
    InputInvoice? inputInvoice,
    int? paymentFormId,
    String? orderInfoId,
    String? shippingOptionId,
    InputCredentials? credentials,
    int? tipAmount,
  }) => SendPaymentForm(
    inputInvoice: inputInvoice ?? this.inputInvoice,
    paymentFormId: paymentFormId ?? this.paymentFormId,
    orderInfoId: orderInfoId ?? this.orderInfoId,
    shippingOptionId: shippingOptionId ?? this.shippingOptionId,
    credentials: credentials ?? this.credentials,
    tipAmount: tipAmount ?? this.tipAmount,
  );
}

extension GetPaymentReceiptExtensions on GetPaymentReceipt {
  GetPaymentReceipt copyWith({int? chatId, int? messageId}) =>
      GetPaymentReceipt(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
      );
}

extension SetGiftSettingsExtensions on SetGiftSettings {
  SetGiftSettings copyWith({GiftSettings? settings}) =>
      SetGiftSettings(settings: settings ?? this.settings);
}

extension SendGiftExtensions on SendGift {
  SendGift copyWith({
    int? giftId,
    MessageSender? ownerId,
    FormattedText? text,
    bool? isPrivate,
    bool? payForUpgrade,
  }) => SendGift(
    giftId: giftId ?? this.giftId,
    ownerId: ownerId ?? this.ownerId,
    text: text ?? this.text,
    isPrivate: isPrivate ?? this.isPrivate,
    payForUpgrade: payForUpgrade ?? this.payForUpgrade,
  );
}

extension SellGiftExtensions on SellGift {
  SellGift copyWith({String? businessConnectionId, String? receivedGiftId}) =>
      SellGift(
        businessConnectionId: businessConnectionId ?? this.businessConnectionId,
        receivedGiftId: receivedGiftId ?? this.receivedGiftId,
      );
}

extension ToggleGiftIsSavedExtensions on ToggleGiftIsSaved {
  ToggleGiftIsSaved copyWith({String? receivedGiftId, bool? isSaved}) =>
      ToggleGiftIsSaved(
        receivedGiftId: receivedGiftId ?? this.receivedGiftId,
        isSaved: isSaved ?? this.isSaved,
      );
}

extension SetPinnedGiftsExtensions on SetPinnedGifts {
  SetPinnedGifts copyWith({
    MessageSender? ownerId,
    List<String>? receivedGiftIds,
  }) => SetPinnedGifts(
    ownerId: ownerId ?? this.ownerId,
    receivedGiftIds: receivedGiftIds ?? this.receivedGiftIds,
  );
}

extension ToggleChatGiftNotificationsExtensions on ToggleChatGiftNotifications {
  ToggleChatGiftNotifications copyWith({int? chatId, bool? areEnabled}) =>
      ToggleChatGiftNotifications(
        chatId: chatId ?? this.chatId,
        areEnabled: areEnabled ?? this.areEnabled,
      );
}

extension GetGiftUpgradePreviewExtensions on GetGiftUpgradePreview {
  GetGiftUpgradePreview copyWith({int? giftId}) =>
      GetGiftUpgradePreview(giftId: giftId ?? this.giftId);
}

extension UpgradeGiftExtensions on UpgradeGift {
  UpgradeGift copyWith({
    String? businessConnectionId,
    String? receivedGiftId,
    bool? keepOriginalDetails,
    int? starCount,
  }) => UpgradeGift(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    receivedGiftId: receivedGiftId ?? this.receivedGiftId,
    keepOriginalDetails: keepOriginalDetails ?? this.keepOriginalDetails,
    starCount: starCount ?? this.starCount,
  );
}

extension TransferGiftExtensions on TransferGift {
  TransferGift copyWith({
    String? businessConnectionId,
    String? receivedGiftId,
    MessageSender? newOwnerId,
    int? starCount,
  }) => TransferGift(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    receivedGiftId: receivedGiftId ?? this.receivedGiftId,
    newOwnerId: newOwnerId ?? this.newOwnerId,
    starCount: starCount ?? this.starCount,
  );
}

extension SendResoldGiftExtensions on SendResoldGift {
  SendResoldGift copyWith({
    String? giftName,
    MessageSender? ownerId,
    int? starCount,
  }) => SendResoldGift(
    giftName: giftName ?? this.giftName,
    ownerId: ownerId ?? this.ownerId,
    starCount: starCount ?? this.starCount,
  );
}

extension GetReceivedGiftsExtensions on GetReceivedGifts {
  GetReceivedGifts copyWith({
    String? businessConnectionId,
    MessageSender? ownerId,
    bool? excludeUnsaved,
    bool? excludeSaved,
    bool? excludeUnlimited,
    bool? excludeLimited,
    bool? excludeUpgraded,
    bool? sortByPrice,
    String? offset,
    int? limit,
  }) => GetReceivedGifts(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    ownerId: ownerId ?? this.ownerId,
    excludeUnsaved: excludeUnsaved ?? this.excludeUnsaved,
    excludeSaved: excludeSaved ?? this.excludeSaved,
    excludeUnlimited: excludeUnlimited ?? this.excludeUnlimited,
    excludeLimited: excludeLimited ?? this.excludeLimited,
    excludeUpgraded: excludeUpgraded ?? this.excludeUpgraded,
    sortByPrice: sortByPrice ?? this.sortByPrice,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension GetReceivedGiftExtensions on GetReceivedGift {
  GetReceivedGift copyWith({String? receivedGiftId}) =>
      GetReceivedGift(receivedGiftId: receivedGiftId ?? this.receivedGiftId);
}

extension GetUpgradedGiftExtensions on GetUpgradedGift {
  GetUpgradedGift copyWith({String? name}) =>
      GetUpgradedGift(name: name ?? this.name);
}

extension GetUpgradedGiftWithdrawalUrlExtensions
    on GetUpgradedGiftWithdrawalUrl {
  GetUpgradedGiftWithdrawalUrl copyWith({
    String? receivedGiftId,
    String? password,
  }) => GetUpgradedGiftWithdrawalUrl(
    receivedGiftId: receivedGiftId ?? this.receivedGiftId,
    password: password ?? this.password,
  );
}

extension SetGiftResalePriceExtensions on SetGiftResalePrice {
  SetGiftResalePrice copyWith({String? receivedGiftId, int? resaleStarCount}) =>
      SetGiftResalePrice(
        receivedGiftId: receivedGiftId ?? this.receivedGiftId,
        resaleStarCount: resaleStarCount ?? this.resaleStarCount,
      );
}

extension SearchGiftsForResaleExtensions on SearchGiftsForResale {
  SearchGiftsForResale copyWith({
    int? giftId,
    GiftForResaleOrder? order,
    List<UpgradedGiftAttributeId>? attributes,
    String? offset,
    int? limit,
  }) => SearchGiftsForResale(
    giftId: giftId ?? this.giftId,
    order: order ?? this.order,
    attributes: attributes ?? this.attributes,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension CreateInvoiceLinkExtensions on CreateInvoiceLink {
  CreateInvoiceLink copyWith({
    String? businessConnectionId,
    InputMessageContent? invoice,
  }) => CreateInvoiceLink(
    businessConnectionId: businessConnectionId ?? this.businessConnectionId,
    invoice: invoice ?? this.invoice,
  );
}

extension RefundStarPaymentExtensions on RefundStarPayment {
  RefundStarPayment copyWith({int? userId, String? telegramPaymentChargeId}) =>
      RefundStarPayment(
        userId: userId ?? this.userId,
        telegramPaymentChargeId:
            telegramPaymentChargeId ?? this.telegramPaymentChargeId,
      );
}

extension GetBackgroundUrlExtensions on GetBackgroundUrl {
  GetBackgroundUrl copyWith({String? name, BackgroundType? type}) =>
      GetBackgroundUrl(name: name ?? this.name, type: type ?? this.type);
}

extension SearchBackgroundExtensions on SearchBackground {
  SearchBackground copyWith({String? name}) =>
      SearchBackground(name: name ?? this.name);
}

extension SetDefaultBackgroundExtensions on SetDefaultBackground {
  SetDefaultBackground copyWith({
    InputBackground? background,
    BackgroundType? type,
    bool? forDarkTheme,
  }) => SetDefaultBackground(
    background: background ?? this.background,
    type: type ?? this.type,
    forDarkTheme: forDarkTheme ?? this.forDarkTheme,
  );
}

extension DeleteDefaultBackgroundExtensions on DeleteDefaultBackground {
  DeleteDefaultBackground copyWith({bool? forDarkTheme}) =>
      DeleteDefaultBackground(forDarkTheme: forDarkTheme ?? this.forDarkTheme);
}

extension GetInstalledBackgroundsExtensions on GetInstalledBackgrounds {
  GetInstalledBackgrounds copyWith({bool? forDarkTheme}) =>
      GetInstalledBackgrounds(forDarkTheme: forDarkTheme ?? this.forDarkTheme);
}

extension RemoveInstalledBackgroundExtensions on RemoveInstalledBackground {
  RemoveInstalledBackground copyWith({int? backgroundId}) =>
      RemoveInstalledBackground(
        backgroundId: backgroundId ?? this.backgroundId,
      );
}

extension GetLocalizationTargetInfoExtensions on GetLocalizationTargetInfo {
  GetLocalizationTargetInfo copyWith({bool? onlyLocal}) =>
      GetLocalizationTargetInfo(onlyLocal: onlyLocal ?? this.onlyLocal);
}

extension GetLanguagePackInfoExtensions on GetLanguagePackInfo {
  GetLanguagePackInfo copyWith({String? languagePackId}) => GetLanguagePackInfo(
    languagePackId: languagePackId ?? this.languagePackId,
  );
}

extension GetLanguagePackStringsExtensions on GetLanguagePackStrings {
  GetLanguagePackStrings copyWith({
    String? languagePackId,
    List<String>? keys,
  }) => GetLanguagePackStrings(
    languagePackId: languagePackId ?? this.languagePackId,
    keys: keys ?? this.keys,
  );
}

extension SynchronizeLanguagePackExtensions on SynchronizeLanguagePack {
  SynchronizeLanguagePack copyWith({String? languagePackId}) =>
      SynchronizeLanguagePack(
        languagePackId: languagePackId ?? this.languagePackId,
      );
}

extension AddCustomServerLanguagePackExtensions on AddCustomServerLanguagePack {
  AddCustomServerLanguagePack copyWith({String? languagePackId}) =>
      AddCustomServerLanguagePack(
        languagePackId: languagePackId ?? this.languagePackId,
      );
}

extension SetCustomLanguagePackExtensions on SetCustomLanguagePack {
  SetCustomLanguagePack copyWith({
    LanguagePackInfo? info,
    List<LanguagePackString>? strings,
  }) => SetCustomLanguagePack(
    info: info ?? this.info,
    strings: strings ?? this.strings,
  );
}

extension EditCustomLanguagePackInfoExtensions on EditCustomLanguagePackInfo {
  EditCustomLanguagePackInfo copyWith({LanguagePackInfo? info}) =>
      EditCustomLanguagePackInfo(info: info ?? this.info);
}

extension SetCustomLanguagePackStringExtensions on SetCustomLanguagePackString {
  SetCustomLanguagePackString copyWith({
    String? languagePackId,
    LanguagePackString? newString,
  }) => SetCustomLanguagePackString(
    languagePackId: languagePackId ?? this.languagePackId,
    newString: newString ?? this.newString,
  );
}

extension DeleteLanguagePackExtensions on DeleteLanguagePack {
  DeleteLanguagePack copyWith({String? languagePackId}) =>
      DeleteLanguagePack(languagePackId: languagePackId ?? this.languagePackId);
}

extension RegisterDeviceExtensions on RegisterDevice {
  RegisterDevice copyWith({
    DeviceToken? deviceToken,
    List<int>? otherUserIds,
  }) => RegisterDevice(
    deviceToken: deviceToken ?? this.deviceToken,
    otherUserIds: otherUserIds ?? this.otherUserIds,
  );
}

extension ProcessPushNotificationExtensions on ProcessPushNotification {
  ProcessPushNotification copyWith({String? payload}) =>
      ProcessPushNotification(payload: payload ?? this.payload);
}

extension GetPushReceiverIdExtensions on GetPushReceiverId {
  GetPushReceiverId copyWith({String? payload}) =>
      GetPushReceiverId(payload: payload ?? this.payload);
}

extension GetRecentlyVisitedTMeUrlsExtensions on GetRecentlyVisitedTMeUrls {
  GetRecentlyVisitedTMeUrls copyWith({String? referrer}) =>
      GetRecentlyVisitedTMeUrls(referrer: referrer ?? this.referrer);
}

extension SetUserPrivacySettingRulesExtensions on SetUserPrivacySettingRules {
  SetUserPrivacySettingRules copyWith({
    UserPrivacySetting? setting,
    UserPrivacySettingRules? rules,
  }) => SetUserPrivacySettingRules(
    setting: setting ?? this.setting,
    rules: rules ?? this.rules,
  );
}

extension GetUserPrivacySettingRulesExtensions on GetUserPrivacySettingRules {
  GetUserPrivacySettingRules copyWith({UserPrivacySetting? setting}) =>
      GetUserPrivacySettingRules(setting: setting ?? this.setting);
}

extension SetReadDatePrivacySettingsExtensions on SetReadDatePrivacySettings {
  SetReadDatePrivacySettings copyWith({ReadDatePrivacySettings? settings}) =>
      SetReadDatePrivacySettings(settings: settings ?? this.settings);
}

extension SetNewChatPrivacySettingsExtensions on SetNewChatPrivacySettings {
  SetNewChatPrivacySettings copyWith({NewChatPrivacySettings? settings}) =>
      SetNewChatPrivacySettings(settings: settings ?? this.settings);
}

extension GetPaidMessageRevenueExtensions on GetPaidMessageRevenue {
  GetPaidMessageRevenue copyWith({int? userId}) =>
      GetPaidMessageRevenue(userId: userId ?? this.userId);
}

extension AllowUnpaidMessagesFromUserExtensions on AllowUnpaidMessagesFromUser {
  AllowUnpaidMessagesFromUser copyWith({int? userId, bool? refundPayments}) =>
      AllowUnpaidMessagesFromUser(
        userId: userId ?? this.userId,
        refundPayments: refundPayments ?? this.refundPayments,
      );
}

extension SetChatPaidMessageStarCountExtensions on SetChatPaidMessageStarCount {
  SetChatPaidMessageStarCount copyWith({
    int? chatId,
    int? paidMessageStarCount,
  }) => SetChatPaidMessageStarCount(
    chatId: chatId ?? this.chatId,
    paidMessageStarCount: paidMessageStarCount ?? this.paidMessageStarCount,
  );
}

extension CanSendMessageToUserExtensions on CanSendMessageToUser {
  CanSendMessageToUser copyWith({int? userId, bool? onlyLocal}) =>
      CanSendMessageToUser(
        userId: userId ?? this.userId,
        onlyLocal: onlyLocal ?? this.onlyLocal,
      );
}

extension GetOptionExtensions on GetOption {
  GetOption copyWith({String? name}) => GetOption(name: name ?? this.name);
}

extension SetOptionExtensions on SetOption {
  SetOption copyWith({String? name, OptionValue? value}) =>
      SetOption(name: name ?? this.name, value: value ?? this.value);
}

extension SetAccountTtlExtensions on SetAccountTtl {
  SetAccountTtl copyWith({AccountTtl? ttl}) =>
      SetAccountTtl(ttl: ttl ?? this.ttl);
}

extension DeleteAccountExtensions on DeleteAccount {
  DeleteAccount copyWith({String? reason, String? password}) => DeleteAccount(
    reason: reason ?? this.reason,
    password: password ?? this.password,
  );
}

extension SetDefaultMessageAutoDeleteTimeExtensions
    on SetDefaultMessageAutoDeleteTime {
  SetDefaultMessageAutoDeleteTime copyWith({
    MessageAutoDeleteTime? messageAutoDeleteTime,
  }) => SetDefaultMessageAutoDeleteTime(
    messageAutoDeleteTime: messageAutoDeleteTime ?? this.messageAutoDeleteTime,
  );
}

extension RemoveChatActionBarExtensions on RemoveChatActionBar {
  RemoveChatActionBar copyWith({int? chatId}) =>
      RemoveChatActionBar(chatId: chatId ?? this.chatId);
}

extension ReportChatExtensions on ReportChat {
  ReportChat copyWith({
    int? chatId,
    String? optionId,
    List<int>? messageIds,
    String? text,
  }) => ReportChat(
    chatId: chatId ?? this.chatId,
    optionId: optionId ?? this.optionId,
    messageIds: messageIds ?? this.messageIds,
    text: text ?? this.text,
  );
}

extension ReportChatPhotoExtensions on ReportChatPhoto {
  ReportChatPhoto copyWith({
    int? chatId,
    int? fileId,
    ReportReason? reason,
    String? text,
  }) => ReportChatPhoto(
    chatId: chatId ?? this.chatId,
    fileId: fileId ?? this.fileId,
    reason: reason ?? this.reason,
    text: text ?? this.text,
  );
}

extension ReportMessageReactionsExtensions on ReportMessageReactions {
  ReportMessageReactions copyWith({
    int? chatId,
    int? messageId,
    MessageSender? senderId,
  }) => ReportMessageReactions(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    senderId: senderId ?? this.senderId,
  );
}

extension GetChatRevenueStatisticsExtensions on GetChatRevenueStatistics {
  GetChatRevenueStatistics copyWith({int? chatId, bool? isDark}) =>
      GetChatRevenueStatistics(
        chatId: chatId ?? this.chatId,
        isDark: isDark ?? this.isDark,
      );
}

extension GetChatRevenueWithdrawalUrlExtensions on GetChatRevenueWithdrawalUrl {
  GetChatRevenueWithdrawalUrl copyWith({int? chatId, String? password}) =>
      GetChatRevenueWithdrawalUrl(
        chatId: chatId ?? this.chatId,
        password: password ?? this.password,
      );
}

extension GetChatRevenueTransactionsExtensions on GetChatRevenueTransactions {
  GetChatRevenueTransactions copyWith({int? chatId, int? offset, int? limit}) =>
      GetChatRevenueTransactions(
        chatId: chatId ?? this.chatId,
        offset: offset ?? this.offset,
        limit: limit ?? this.limit,
      );
}

extension GetStarRevenueStatisticsExtensions on GetStarRevenueStatistics {
  GetStarRevenueStatistics copyWith({MessageSender? ownerId, bool? isDark}) =>
      GetStarRevenueStatistics(
        ownerId: ownerId ?? this.ownerId,
        isDark: isDark ?? this.isDark,
      );
}

extension GetStarWithdrawalUrlExtensions on GetStarWithdrawalUrl {
  GetStarWithdrawalUrl copyWith({
    MessageSender? ownerId,
    int? starCount,
    String? password,
  }) => GetStarWithdrawalUrl(
    ownerId: ownerId ?? this.ownerId,
    starCount: starCount ?? this.starCount,
    password: password ?? this.password,
  );
}

extension GetStarAdAccountUrlExtensions on GetStarAdAccountUrl {
  GetStarAdAccountUrl copyWith({MessageSender? ownerId}) =>
      GetStarAdAccountUrl(ownerId: ownerId ?? this.ownerId);
}

extension GetChatStatisticsExtensions on GetChatStatistics {
  GetChatStatistics copyWith({int? chatId, bool? isDark}) => GetChatStatistics(
    chatId: chatId ?? this.chatId,
    isDark: isDark ?? this.isDark,
  );
}

extension GetMessageStatisticsExtensions on GetMessageStatistics {
  GetMessageStatistics copyWith({int? chatId, int? messageId, bool? isDark}) =>
      GetMessageStatistics(
        chatId: chatId ?? this.chatId,
        messageId: messageId ?? this.messageId,
        isDark: isDark ?? this.isDark,
      );
}

extension GetMessagePublicForwardsExtensions on GetMessagePublicForwards {
  GetMessagePublicForwards copyWith({
    int? chatId,
    int? messageId,
    String? offset,
    int? limit,
  }) => GetMessagePublicForwards(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension GetStoryStatisticsExtensions on GetStoryStatistics {
  GetStoryStatistics copyWith({int? chatId, int? storyId, bool? isDark}) =>
      GetStoryStatistics(
        chatId: chatId ?? this.chatId,
        storyId: storyId ?? this.storyId,
        isDark: isDark ?? this.isDark,
      );
}

extension GetStatisticalGraphExtensions on GetStatisticalGraph {
  GetStatisticalGraph copyWith({int? chatId, String? token, int? x}) =>
      GetStatisticalGraph(
        chatId: chatId ?? this.chatId,
        token: token ?? this.token,
        x: x ?? this.x,
      );
}

extension GetStorageStatisticsExtensions on GetStorageStatistics {
  GetStorageStatistics copyWith({int? chatLimit}) =>
      GetStorageStatistics(chatLimit: chatLimit ?? this.chatLimit);
}

extension OptimizeStorageExtensions on OptimizeStorage {
  OptimizeStorage copyWith({
    int? size,
    int? ttl,
    int? count,
    int? immunityDelay,
    List<FileType>? fileTypes,
    List<int>? chatIds,
    List<int>? excludeChatIds,
    bool? returnDeletedFileStatistics,
    int? chatLimit,
  }) => OptimizeStorage(
    size: size ?? this.size,
    ttl: ttl ?? this.ttl,
    count: count ?? this.count,
    immunityDelay: immunityDelay ?? this.immunityDelay,
    fileTypes: fileTypes ?? this.fileTypes,
    chatIds: chatIds ?? this.chatIds,
    excludeChatIds: excludeChatIds ?? this.excludeChatIds,
    returnDeletedFileStatistics:
        returnDeletedFileStatistics ?? this.returnDeletedFileStatistics,
    chatLimit: chatLimit ?? this.chatLimit,
  );
}

extension SetNetworkTypeExtensions on SetNetworkType {
  SetNetworkType copyWith({NetworkType? type}) =>
      SetNetworkType(type: type ?? this.type);
}

extension GetNetworkStatisticsExtensions on GetNetworkStatistics {
  GetNetworkStatistics copyWith({bool? onlyCurrent}) =>
      GetNetworkStatistics(onlyCurrent: onlyCurrent ?? this.onlyCurrent);
}

extension AddNetworkStatisticsExtensions on AddNetworkStatistics {
  AddNetworkStatistics copyWith({NetworkStatisticsEntry? entry}) =>
      AddNetworkStatistics(entry: entry ?? this.entry);
}

extension SetAutoDownloadSettingsExtensions on SetAutoDownloadSettings {
  SetAutoDownloadSettings copyWith({
    AutoDownloadSettings? settings,
    NetworkType? type,
  }) => SetAutoDownloadSettings(
    settings: settings ?? this.settings,
    type: type ?? this.type,
  );
}

extension SetAutosaveSettingsExtensions on SetAutosaveSettings {
  SetAutosaveSettings copyWith({
    AutosaveSettingsScope? scope,
    ScopeAutosaveSettings? settings,
  }) => SetAutosaveSettings(
    scope: scope ?? this.scope,
    settings: settings ?? this.settings,
  );
}

extension GetBankCardInfoExtensions on GetBankCardInfo {
  GetBankCardInfo copyWith({String? bankCardNumber}) =>
      GetBankCardInfo(bankCardNumber: bankCardNumber ?? this.bankCardNumber);
}

extension GetPassportElementExtensions on GetPassportElement {
  GetPassportElement copyWith({PassportElementType? type, String? password}) =>
      GetPassportElement(
        type: type ?? this.type,
        password: password ?? this.password,
      );
}

extension GetAllPassportElementsExtensions on GetAllPassportElements {
  GetAllPassportElements copyWith({String? password}) =>
      GetAllPassportElements(password: password ?? this.password);
}

extension SetPassportElementExtensions on SetPassportElement {
  SetPassportElement copyWith({
    InputPassportElement? element,
    String? password,
  }) => SetPassportElement(
    element: element ?? this.element,
    password: password ?? this.password,
  );
}

extension DeletePassportElementExtensions on DeletePassportElement {
  DeletePassportElement copyWith({PassportElementType? type}) =>
      DeletePassportElement(type: type ?? this.type);
}

extension SetPassportElementErrorsExtensions on SetPassportElementErrors {
  SetPassportElementErrors copyWith({
    int? userId,
    List<InputPassportElementError>? errors,
  }) => SetPassportElementErrors(
    userId: userId ?? this.userId,
    errors: errors ?? this.errors,
  );
}

extension GetPreferredCountryLanguageExtensions on GetPreferredCountryLanguage {
  GetPreferredCountryLanguage copyWith({String? countryCode}) =>
      GetPreferredCountryLanguage(countryCode: countryCode ?? this.countryCode);
}

extension SendEmailAddressVerificationCodeExtensions
    on SendEmailAddressVerificationCode {
  SendEmailAddressVerificationCode copyWith({String? emailAddress}) =>
      SendEmailAddressVerificationCode(
        emailAddress: emailAddress ?? this.emailAddress,
      );
}

extension CheckEmailAddressVerificationCodeExtensions
    on CheckEmailAddressVerificationCode {
  CheckEmailAddressVerificationCode copyWith({String? code}) =>
      CheckEmailAddressVerificationCode(code: code ?? this.code);
}

extension GetPassportAuthorizationFormExtensions
    on GetPassportAuthorizationForm {
  GetPassportAuthorizationForm copyWith({
    int? botUserId,
    String? scope,
    String? publicKey,
    String? nonce,
  }) => GetPassportAuthorizationForm(
    botUserId: botUserId ?? this.botUserId,
    scope: scope ?? this.scope,
    publicKey: publicKey ?? this.publicKey,
    nonce: nonce ?? this.nonce,
  );
}

extension GetPassportAuthorizationFormAvailableElementsExtensions
    on GetPassportAuthorizationFormAvailableElements {
  GetPassportAuthorizationFormAvailableElements copyWith({
    int? authorizationFormId,
    String? password,
  }) => GetPassportAuthorizationFormAvailableElements(
    authorizationFormId: authorizationFormId ?? this.authorizationFormId,
    password: password ?? this.password,
  );
}

extension SendPassportAuthorizationFormExtensions
    on SendPassportAuthorizationForm {
  SendPassportAuthorizationForm copyWith({
    int? authorizationFormId,
    List<PassportElementType>? types,
  }) => SendPassportAuthorizationForm(
    authorizationFormId: authorizationFormId ?? this.authorizationFormId,
    types: types ?? this.types,
  );
}

extension SetBotUpdatesStatusExtensions on SetBotUpdatesStatus {
  SetBotUpdatesStatus copyWith({
    int? pendingUpdateCount,
    String? errorMessage,
  }) => SetBotUpdatesStatus(
    pendingUpdateCount: pendingUpdateCount ?? this.pendingUpdateCount,
    errorMessage: errorMessage ?? this.errorMessage,
  );
}

extension UploadStickerFileExtensions on UploadStickerFile {
  UploadStickerFile copyWith({
    int? userId,
    StickerFormat? stickerFormat,
    InputFile? sticker,
  }) => UploadStickerFile(
    userId: userId ?? this.userId,
    stickerFormat: stickerFormat ?? this.stickerFormat,
    sticker: sticker ?? this.sticker,
  );
}

extension GetSuggestedStickerSetNameExtensions on GetSuggestedStickerSetName {
  GetSuggestedStickerSetName copyWith({String? title}) =>
      GetSuggestedStickerSetName(title: title ?? this.title);
}

extension CheckStickerSetNameExtensions on CheckStickerSetName {
  CheckStickerSetName copyWith({String? name}) =>
      CheckStickerSetName(name: name ?? this.name);
}

extension CreateNewStickerSetExtensions on CreateNewStickerSet {
  CreateNewStickerSet copyWith({
    int? userId,
    String? title,
    String? name,
    StickerType? stickerType,
    bool? needsRepainting,
    List<InputSticker>? stickers,
    String? source,
  }) => CreateNewStickerSet(
    userId: userId ?? this.userId,
    title: title ?? this.title,
    name: name ?? this.name,
    stickerType: stickerType ?? this.stickerType,
    needsRepainting: needsRepainting ?? this.needsRepainting,
    stickers: stickers ?? this.stickers,
    source: source ?? this.source,
  );
}

extension AddStickerToSetExtensions on AddStickerToSet {
  AddStickerToSet copyWith({
    int? userId,
    String? name,
    InputSticker? sticker,
  }) => AddStickerToSet(
    userId: userId ?? this.userId,
    name: name ?? this.name,
    sticker: sticker ?? this.sticker,
  );
}

extension ReplaceStickerInSetExtensions on ReplaceStickerInSet {
  ReplaceStickerInSet copyWith({
    int? userId,
    String? name,
    InputFile? oldSticker,
    InputSticker? newSticker,
  }) => ReplaceStickerInSet(
    userId: userId ?? this.userId,
    name: name ?? this.name,
    oldSticker: oldSticker ?? this.oldSticker,
    newSticker: newSticker ?? this.newSticker,
  );
}

extension SetStickerSetThumbnailExtensions on SetStickerSetThumbnail {
  SetStickerSetThumbnail copyWith({
    int? userId,
    String? name,
    InputFile? thumbnail,
    StickerFormat? format,
  }) => SetStickerSetThumbnail(
    userId: userId ?? this.userId,
    name: name ?? this.name,
    thumbnail: thumbnail ?? this.thumbnail,
    format: format ?? this.format,
  );
}

extension SetCustomEmojiStickerSetThumbnailExtensions
    on SetCustomEmojiStickerSetThumbnail {
  SetCustomEmojiStickerSetThumbnail copyWith({
    String? name,
    int? customEmojiId,
  }) => SetCustomEmojiStickerSetThumbnail(
    name: name ?? this.name,
    customEmojiId: customEmojiId ?? this.customEmojiId,
  );
}

extension SetStickerSetTitleExtensions on SetStickerSetTitle {
  SetStickerSetTitle copyWith({String? name, String? title}) =>
      SetStickerSetTitle(name: name ?? this.name, title: title ?? this.title);
}

extension DeleteStickerSetExtensions on DeleteStickerSet {
  DeleteStickerSet copyWith({String? name}) =>
      DeleteStickerSet(name: name ?? this.name);
}

extension SetStickerPositionInSetExtensions on SetStickerPositionInSet {
  SetStickerPositionInSet copyWith({InputFile? sticker, int? position}) =>
      SetStickerPositionInSet(
        sticker: sticker ?? this.sticker,
        position: position ?? this.position,
      );
}

extension RemoveStickerFromSetExtensions on RemoveStickerFromSet {
  RemoveStickerFromSet copyWith({InputFile? sticker}) =>
      RemoveStickerFromSet(sticker: sticker ?? this.sticker);
}

extension SetStickerEmojisExtensions on SetStickerEmojis {
  SetStickerEmojis copyWith({InputFile? sticker, String? emojis}) =>
      SetStickerEmojis(
        sticker: sticker ?? this.sticker,
        emojis: emojis ?? this.emojis,
      );
}

extension SetStickerKeywordsExtensions on SetStickerKeywords {
  SetStickerKeywords copyWith({InputFile? sticker, List<String>? keywords}) =>
      SetStickerKeywords(
        sticker: sticker ?? this.sticker,
        keywords: keywords ?? this.keywords,
      );
}

extension SetStickerMaskPositionExtensions on SetStickerMaskPosition {
  SetStickerMaskPosition copyWith({
    InputFile? sticker,
    MaskPosition? maskPosition,
  }) => SetStickerMaskPosition(
    sticker: sticker ?? this.sticker,
    maskPosition: maskPosition ?? this.maskPosition,
  );
}

extension GetOwnedStickerSetsExtensions on GetOwnedStickerSets {
  GetOwnedStickerSets copyWith({int? offsetStickerSetId, int? limit}) =>
      GetOwnedStickerSets(
        offsetStickerSetId: offsetStickerSetId ?? this.offsetStickerSetId,
        limit: limit ?? this.limit,
      );
}

extension GetMapThumbnailFileExtensions on GetMapThumbnailFile {
  GetMapThumbnailFile copyWith({
    Location? location,
    int? zoom,
    int? width,
    int? height,
    int? scale,
    int? chatId,
  }) => GetMapThumbnailFile(
    location: location ?? this.location,
    zoom: zoom ?? this.zoom,
    width: width ?? this.width,
    height: height ?? this.height,
    scale: scale ?? this.scale,
    chatId: chatId ?? this.chatId,
  );
}

extension GetPremiumLimitExtensions on GetPremiumLimit {
  GetPremiumLimit copyWith({PremiumLimitType? limitType}) =>
      GetPremiumLimit(limitType: limitType ?? this.limitType);
}

extension GetPremiumFeaturesExtensions on GetPremiumFeatures {
  GetPremiumFeatures copyWith({PremiumSource? source}) =>
      GetPremiumFeatures(source: source ?? this.source);
}

extension GetPremiumInfoStickerExtensions on GetPremiumInfoSticker {
  GetPremiumInfoSticker copyWith({int? monthCount}) =>
      GetPremiumInfoSticker(monthCount: monthCount ?? this.monthCount);
}

extension ViewPremiumFeatureExtensions on ViewPremiumFeature {
  ViewPremiumFeature copyWith({PremiumFeature? feature}) =>
      ViewPremiumFeature(feature: feature ?? this.feature);
}

extension GetPremiumGiveawayPaymentOptionsExtensions
    on GetPremiumGiveawayPaymentOptions {
  GetPremiumGiveawayPaymentOptions copyWith({int? boostedChatId}) =>
      GetPremiumGiveawayPaymentOptions(
        boostedChatId: boostedChatId ?? this.boostedChatId,
      );
}

extension CheckPremiumGiftCodeExtensions on CheckPremiumGiftCode {
  CheckPremiumGiftCode copyWith({String? code}) =>
      CheckPremiumGiftCode(code: code ?? this.code);
}

extension ApplyPremiumGiftCodeExtensions on ApplyPremiumGiftCode {
  ApplyPremiumGiftCode copyWith({String? code}) =>
      ApplyPremiumGiftCode(code: code ?? this.code);
}

extension GiftPremiumWithStarsExtensions on GiftPremiumWithStars {
  GiftPremiumWithStars copyWith({
    int? userId,
    int? starCount,
    int? monthCount,
    FormattedText? text,
  }) => GiftPremiumWithStars(
    userId: userId ?? this.userId,
    starCount: starCount ?? this.starCount,
    monthCount: monthCount ?? this.monthCount,
    text: text ?? this.text,
  );
}

extension LaunchPrepaidGiveawayExtensions on LaunchPrepaidGiveaway {
  LaunchPrepaidGiveaway copyWith({
    int? giveawayId,
    GiveawayParameters? parameters,
    int? winnerCount,
    int? starCount,
  }) => LaunchPrepaidGiveaway(
    giveawayId: giveawayId ?? this.giveawayId,
    parameters: parameters ?? this.parameters,
    winnerCount: winnerCount ?? this.winnerCount,
    starCount: starCount ?? this.starCount,
  );
}

extension GetGiveawayInfoExtensions on GetGiveawayInfo {
  GetGiveawayInfo copyWith({int? chatId, int? messageId}) => GetGiveawayInfo(
    chatId: chatId ?? this.chatId,
    messageId: messageId ?? this.messageId,
  );
}

extension GetStarGiftPaymentOptionsExtensions on GetStarGiftPaymentOptions {
  GetStarGiftPaymentOptions copyWith({int? userId}) =>
      GetStarGiftPaymentOptions(userId: userId ?? this.userId);
}

extension GetStarTransactionsExtensions on GetStarTransactions {
  GetStarTransactions copyWith({
    MessageSender? ownerId,
    String? subscriptionId,
    StarTransactionDirection? direction,
    String? offset,
    int? limit,
  }) => GetStarTransactions(
    ownerId: ownerId ?? this.ownerId,
    subscriptionId: subscriptionId ?? this.subscriptionId,
    direction: direction ?? this.direction,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension GetStarSubscriptionsExtensions on GetStarSubscriptions {
  GetStarSubscriptions copyWith({bool? onlyExpiring, String? offset}) =>
      GetStarSubscriptions(
        onlyExpiring: onlyExpiring ?? this.onlyExpiring,
        offset: offset ?? this.offset,
      );
}

extension CanPurchaseFromStoreExtensions on CanPurchaseFromStore {
  CanPurchaseFromStore copyWith({StorePaymentPurpose? purpose}) =>
      CanPurchaseFromStore(purpose: purpose ?? this.purpose);
}

extension AssignStoreTransactionExtensions on AssignStoreTransaction {
  AssignStoreTransaction copyWith({
    StoreTransaction? transaction,
    StorePaymentPurpose? purpose,
  }) => AssignStoreTransaction(
    transaction: transaction ?? this.transaction,
    purpose: purpose ?? this.purpose,
  );
}

extension EditStarSubscriptionExtensions on EditStarSubscription {
  EditStarSubscription copyWith({String? subscriptionId, bool? isCanceled}) =>
      EditStarSubscription(
        subscriptionId: subscriptionId ?? this.subscriptionId,
        isCanceled: isCanceled ?? this.isCanceled,
      );
}

extension EditUserStarSubscriptionExtensions on EditUserStarSubscription {
  EditUserStarSubscription copyWith({
    int? userId,
    String? telegramPaymentChargeId,
    bool? isCanceled,
  }) => EditUserStarSubscription(
    userId: userId ?? this.userId,
    telegramPaymentChargeId:
        telegramPaymentChargeId ?? this.telegramPaymentChargeId,
    isCanceled: isCanceled ?? this.isCanceled,
  );
}

extension ReuseStarSubscriptionExtensions on ReuseStarSubscription {
  ReuseStarSubscription copyWith({String? subscriptionId}) =>
      ReuseStarSubscription(
        subscriptionId: subscriptionId ?? this.subscriptionId,
      );
}

extension SetChatAffiliateProgramExtensions on SetChatAffiliateProgram {
  SetChatAffiliateProgram copyWith({
    int? chatId,
    AffiliateProgramParameters? parameters,
  }) => SetChatAffiliateProgram(
    chatId: chatId ?? this.chatId,
    parameters: parameters ?? this.parameters,
  );
}

extension SearchChatAffiliateProgramExtensions on SearchChatAffiliateProgram {
  SearchChatAffiliateProgram copyWith({String? username, String? referrer}) =>
      SearchChatAffiliateProgram(
        username: username ?? this.username,
        referrer: referrer ?? this.referrer,
      );
}

extension SearchAffiliateProgramsExtensions on SearchAffiliatePrograms {
  SearchAffiliatePrograms copyWith({
    AffiliateType? affiliate,
    AffiliateProgramSortOrder? sortOrder,
    String? offset,
    int? limit,
  }) => SearchAffiliatePrograms(
    affiliate: affiliate ?? this.affiliate,
    sortOrder: sortOrder ?? this.sortOrder,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension ConnectAffiliateProgramExtensions on ConnectAffiliateProgram {
  ConnectAffiliateProgram copyWith({
    AffiliateType? affiliate,
    int? botUserId,
  }) => ConnectAffiliateProgram(
    affiliate: affiliate ?? this.affiliate,
    botUserId: botUserId ?? this.botUserId,
  );
}

extension DisconnectAffiliateProgramExtensions on DisconnectAffiliateProgram {
  DisconnectAffiliateProgram copyWith({
    AffiliateType? affiliate,
    String? url,
  }) => DisconnectAffiliateProgram(
    affiliate: affiliate ?? this.affiliate,
    url: url ?? this.url,
  );
}

extension GetConnectedAffiliateProgramExtensions
    on GetConnectedAffiliateProgram {
  GetConnectedAffiliateProgram copyWith({
    AffiliateType? affiliate,
    int? botUserId,
  }) => GetConnectedAffiliateProgram(
    affiliate: affiliate ?? this.affiliate,
    botUserId: botUserId ?? this.botUserId,
  );
}

extension GetConnectedAffiliateProgramsExtensions
    on GetConnectedAffiliatePrograms {
  GetConnectedAffiliatePrograms copyWith({
    AffiliateType? affiliate,
    String? offset,
    int? limit,
  }) => GetConnectedAffiliatePrograms(
    affiliate: affiliate ?? this.affiliate,
    offset: offset ?? this.offset,
    limit: limit ?? this.limit,
  );
}

extension GetBusinessFeaturesExtensions on GetBusinessFeatures {
  GetBusinessFeatures copyWith({BusinessFeature? source}) =>
      GetBusinessFeatures(source: source ?? this.source);
}

extension AcceptTermsOfServiceExtensions on AcceptTermsOfService {
  AcceptTermsOfService copyWith({String? termsOfServiceId}) =>
      AcceptTermsOfService(
        termsOfServiceId: termsOfServiceId ?? this.termsOfServiceId,
      );
}

extension SearchStringsByPrefixExtensions on SearchStringsByPrefix {
  SearchStringsByPrefix copyWith({
    List<String>? strings,
    String? query,
    int? limit,
    bool? returnNoneForEmptyQuery,
  }) => SearchStringsByPrefix(
    strings: strings ?? this.strings,
    query: query ?? this.query,
    limit: limit ?? this.limit,
    returnNoneForEmptyQuery:
        returnNoneForEmptyQuery ?? this.returnNoneForEmptyQuery,
  );
}

extension SendCustomRequestExtensions on SendCustomRequest {
  SendCustomRequest copyWith({String? method, String? parameters}) =>
      SendCustomRequest(
        method: method ?? this.method,
        parameters: parameters ?? this.parameters,
      );
}

extension AnswerCustomQueryExtensions on AnswerCustomQuery {
  AnswerCustomQuery copyWith({int? customQueryId, String? data}) =>
      AnswerCustomQuery(
        customQueryId: customQueryId ?? this.customQueryId,
        data: data ?? this.data,
      );
}

extension SetAlarmExtensions on SetAlarm {
  SetAlarm copyWith({double? seconds}) =>
      SetAlarm(seconds: seconds ?? this.seconds);
}

extension GetPhoneNumberInfoExtensions on GetPhoneNumberInfo {
  GetPhoneNumberInfo copyWith({String? phoneNumberPrefix}) =>
      GetPhoneNumberInfo(
        phoneNumberPrefix: phoneNumberPrefix ?? this.phoneNumberPrefix,
      );
}

extension GetPhoneNumberInfoSyncExtensions on GetPhoneNumberInfoSync {
  GetPhoneNumberInfoSync copyWith({
    String? languageCode,
    String? phoneNumberPrefix,
  }) => GetPhoneNumberInfoSync(
    languageCode: languageCode ?? this.languageCode,
    phoneNumberPrefix: phoneNumberPrefix ?? this.phoneNumberPrefix,
  );
}

extension GetCollectibleItemInfoExtensions on GetCollectibleItemInfo {
  GetCollectibleItemInfo copyWith({CollectibleItemType? type}) =>
      GetCollectibleItemInfo(type: type ?? this.type);
}

extension GetDeepLinkInfoExtensions on GetDeepLinkInfo {
  GetDeepLinkInfo copyWith({String? link}) =>
      GetDeepLinkInfo(link: link ?? this.link);
}

extension SaveApplicationLogEventExtensions on SaveApplicationLogEvent {
  SaveApplicationLogEvent copyWith({
    String? type,
    int? chatId,
    JsonValue? data,
  }) => SaveApplicationLogEvent(
    type: type ?? this.type,
    chatId: chatId ?? this.chatId,
    data: data ?? this.data,
  );
}

extension AddProxyExtensions on AddProxy {
  AddProxy copyWith({
    String? server,
    int? port,
    bool? enable,
    ProxyType? type,
  }) => AddProxy(
    server: server ?? this.server,
    port: port ?? this.port,
    enable: enable ?? this.enable,
    type: type ?? this.type,
  );
}

extension EditProxyExtensions on EditProxy {
  EditProxy copyWith({
    int? proxyId,
    String? server,
    int? port,
    bool? enable,
    ProxyType? type,
  }) => EditProxy(
    proxyId: proxyId ?? this.proxyId,
    server: server ?? this.server,
    port: port ?? this.port,
    enable: enable ?? this.enable,
    type: type ?? this.type,
  );
}

extension EnableProxyExtensions on EnableProxy {
  EnableProxy copyWith({int? proxyId}) =>
      EnableProxy(proxyId: proxyId ?? this.proxyId);
}

extension RemoveProxyExtensions on RemoveProxy {
  RemoveProxy copyWith({int? proxyId}) =>
      RemoveProxy(proxyId: proxyId ?? this.proxyId);
}

extension GetProxyLinkExtensions on GetProxyLink {
  GetProxyLink copyWith({int? proxyId}) =>
      GetProxyLink(proxyId: proxyId ?? this.proxyId);
}

extension PingProxyExtensions on PingProxy {
  PingProxy copyWith({int? proxyId}) =>
      PingProxy(proxyId: proxyId ?? this.proxyId);
}

extension SetLogStreamExtensions on SetLogStream {
  SetLogStream copyWith({LogStream? logStream}) =>
      SetLogStream(logStream: logStream ?? this.logStream);
}

extension SetLogVerbosityLevelExtensions on SetLogVerbosityLevel {
  SetLogVerbosityLevel copyWith({int? newVerbosityLevel}) =>
      SetLogVerbosityLevel(
        newVerbosityLevel: newVerbosityLevel ?? this.newVerbosityLevel,
      );
}

extension SetLogTagVerbosityLevelExtensions on SetLogTagVerbosityLevel {
  SetLogTagVerbosityLevel copyWith({String? tag, int? newVerbosityLevel}) =>
      SetLogTagVerbosityLevel(
        tag: tag ?? this.tag,
        newVerbosityLevel: newVerbosityLevel ?? this.newVerbosityLevel,
      );
}

extension GetLogTagVerbosityLevelExtensions on GetLogTagVerbosityLevel {
  GetLogTagVerbosityLevel copyWith({String? tag}) =>
      GetLogTagVerbosityLevel(tag: tag ?? this.tag);
}

extension AddLogMessageExtensions on AddLogMessage {
  AddLogMessage copyWith({int? verbosityLevel, String? text}) => AddLogMessage(
    verbosityLevel: verbosityLevel ?? this.verbosityLevel,
    text: text ?? this.text,
  );
}

extension GetUserSupportInfoExtensions on GetUserSupportInfo {
  GetUserSupportInfo copyWith({int? userId}) =>
      GetUserSupportInfo(userId: userId ?? this.userId);
}

extension SetUserSupportInfoExtensions on SetUserSupportInfo {
  SetUserSupportInfo copyWith({int? userId, FormattedText? message}) =>
      SetUserSupportInfo(
        userId: userId ?? this.userId,
        message: message ?? this.message,
      );
}

extension TestCallStringExtensions on TestCallString {
  TestCallString copyWith({String? x}) => TestCallString(x: x ?? this.x);
}

extension TestCallBytesExtensions on TestCallBytes {
  TestCallBytes copyWith({String? x}) => TestCallBytes(x: x ?? this.x);
}

extension TestCallVectorIntExtensions on TestCallVectorInt {
  TestCallVectorInt copyWith({List<int>? x}) =>
      TestCallVectorInt(x: x ?? this.x);
}

extension TestCallVectorIntObjectExtensions on TestCallVectorIntObject {
  TestCallVectorIntObject copyWith({List<TestInt>? x}) =>
      TestCallVectorIntObject(x: x ?? this.x);
}

extension TestCallVectorStringExtensions on TestCallVectorString {
  TestCallVectorString copyWith({List<String>? x}) =>
      TestCallVectorString(x: x ?? this.x);
}

extension TestCallVectorStringObjectExtensions on TestCallVectorStringObject {
  TestCallVectorStringObject copyWith({List<TestString>? x}) =>
      TestCallVectorStringObject(x: x ?? this.x);
}

extension TestSquareIntExtensions on TestSquareInt {
  TestSquareInt copyWith({int? x}) => TestSquareInt(x: x ?? this.x);
}

extension TestProxyExtensions on TestProxy {
  TestProxy copyWith({
    String? server,
    int? port,
    ProxyType? type,
    int? dcId,
    double? timeout,
  }) => TestProxy(
    server: server ?? this.server,
    port: port ?? this.port,
    type: type ?? this.type,
    dcId: dcId ?? this.dcId,
    timeout: timeout ?? this.timeout,
  );
}

extension TestReturnErrorExtensions on TestReturnError {
  TestReturnError copyWith({TdError? error}) =>
      TestReturnError(error: error ?? this.error);
}
