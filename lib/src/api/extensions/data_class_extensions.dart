import 'package:tdlib/td_api.dart';
import 'package:collection/collection.dart';
extension TdErrorDataClassExtensions on TdError {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TdError &&
          const DeepCollectionEquality().equals(other.code, code) &&
          const DeepCollectionEquality().equals(other.message, message));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(code),
    const DeepCollectionEquality().hash(message),
  ]);
}

extension OkDataClassExtensions on Ok {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is Ok);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AuthenticationCodeTypeDataClassExtensions on AuthenticationCodeType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is AuthenticationCodeType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AuthenticationCodeTypeTelegramMessageDataClassExtensions
    on AuthenticationCodeTypeTelegramMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthenticationCodeTypeTelegramMessage &&
          const DeepCollectionEquality().equals(other.length, length));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(length),
  ]);
}

extension AuthenticationCodeTypeSmsDataClassExtensions
    on AuthenticationCodeTypeSms {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthenticationCodeTypeSms &&
          const DeepCollectionEquality().equals(other.length, length));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(length),
  ]);
}

extension AuthenticationCodeTypeSmsWordDataClassExtensions
    on AuthenticationCodeTypeSmsWord {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthenticationCodeTypeSmsWord &&
          const DeepCollectionEquality().equals(
            other.firstLetter,
            firstLetter,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(firstLetter),
  ]);
}

extension AuthenticationCodeTypeSmsPhraseDataClassExtensions
    on AuthenticationCodeTypeSmsPhrase {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthenticationCodeTypeSmsPhrase &&
          const DeepCollectionEquality().equals(other.firstWord, firstWord));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(firstWord),
  ]);
}

extension AuthenticationCodeTypeCallDataClassExtensions
    on AuthenticationCodeTypeCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthenticationCodeTypeCall &&
          const DeepCollectionEquality().equals(other.length, length));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(length),
  ]);
}

extension AuthenticationCodeTypeFlashCallDataClassExtensions
    on AuthenticationCodeTypeFlashCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthenticationCodeTypeFlashCall &&
          const DeepCollectionEquality().equals(other.pattern, pattern));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(pattern),
  ]);
}

extension AuthenticationCodeTypeMissedCallDataClassExtensions
    on AuthenticationCodeTypeMissedCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthenticationCodeTypeMissedCall &&
          const DeepCollectionEquality().equals(
            other.phoneNumberPrefix,
            phoneNumberPrefix,
          ) &&
          const DeepCollectionEquality().equals(other.length, length));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(phoneNumberPrefix),
    const DeepCollectionEquality().hash(length),
  ]);
}

extension AuthenticationCodeTypeFragmentDataClassExtensions
    on AuthenticationCodeTypeFragment {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthenticationCodeTypeFragment &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.length, length));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(length),
  ]);
}

extension AuthenticationCodeTypeFirebaseAndroidDataClassExtensions
    on AuthenticationCodeTypeFirebaseAndroid {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthenticationCodeTypeFirebaseAndroid &&
          const DeepCollectionEquality().equals(
            other.deviceVerificationParameters,
            deviceVerificationParameters,
          ) &&
          const DeepCollectionEquality().equals(other.length, length));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(deviceVerificationParameters),
    const DeepCollectionEquality().hash(length),
  ]);
}

extension AuthenticationCodeTypeFirebaseIosDataClassExtensions
    on AuthenticationCodeTypeFirebaseIos {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthenticationCodeTypeFirebaseIos &&
          const DeepCollectionEquality().equals(other.receipt, receipt) &&
          const DeepCollectionEquality().equals(
            other.pushTimeout,
            pushTimeout,
          ) &&
          const DeepCollectionEquality().equals(other.length, length));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(receipt),
    const DeepCollectionEquality().hash(pushTimeout),
    const DeepCollectionEquality().hash(length),
  ]);
}

extension AuthenticationCodeInfoDataClassExtensions on AuthenticationCodeInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthenticationCodeInfo &&
          const DeepCollectionEquality().equals(
            other.phoneNumber,
            phoneNumber,
          ) &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.nextType, nextType) &&
          const DeepCollectionEquality().equals(other.timeout, timeout));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(phoneNumber),
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(nextType),
    const DeepCollectionEquality().hash(timeout),
  ]);
}

extension EmailAddressAuthenticationCodeInfoDataClassExtensions
    on EmailAddressAuthenticationCodeInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmailAddressAuthenticationCodeInfo &&
          const DeepCollectionEquality().equals(
            other.emailAddressPattern,
            emailAddressPattern,
          ) &&
          const DeepCollectionEquality().equals(other.length, length));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(emailAddressPattern),
    const DeepCollectionEquality().hash(length),
  ]);
}

extension EmailAddressAuthenticationDataClassExtensions
    on EmailAddressAuthentication {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is EmailAddressAuthentication);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension EmailAddressAuthenticationCodeDataClassExtensions
    on EmailAddressAuthenticationCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmailAddressAuthenticationCode &&
          const DeepCollectionEquality().equals(other.code, code));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(code)]);
}

extension EmailAddressAuthenticationAppleIdDataClassExtensions
    on EmailAddressAuthenticationAppleId {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmailAddressAuthenticationAppleId &&
          const DeepCollectionEquality().equals(other.token, token));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(token)]);
}

extension EmailAddressAuthenticationGoogleIdDataClassExtensions
    on EmailAddressAuthenticationGoogleId {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmailAddressAuthenticationGoogleId &&
          const DeepCollectionEquality().equals(other.token, token));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(token)]);
}

extension EmailAddressResetStateDataClassExtensions on EmailAddressResetState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is EmailAddressResetState);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension EmailAddressResetStateAvailableDataClassExtensions
    on EmailAddressResetStateAvailable {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmailAddressResetStateAvailable &&
          const DeepCollectionEquality().equals(other.waitPeriod, waitPeriod));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(waitPeriod),
  ]);
}

extension EmailAddressResetStatePendingDataClassExtensions
    on EmailAddressResetStatePending {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmailAddressResetStatePending &&
          const DeepCollectionEquality().equals(other.resetIn, resetIn));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(resetIn),
  ]);
}

extension TextEntityDataClassExtensions on TextEntity {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TextEntity &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.length, length) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(length),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension TextEntitiesDataClassExtensions on TextEntities {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TextEntities &&
          const DeepCollectionEquality().equals(other.entities, entities));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(entities),
  ]);
}

extension FormattedTextDataClassExtensions on FormattedText {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FormattedText &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.entities, entities));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(entities),
  ]);
}

extension TermsOfServiceDataClassExtensions on TermsOfService {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TermsOfService &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.minUserAge, minUserAge) &&
          const DeepCollectionEquality().equals(other.showPopup, showPopup));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(minUserAge),
    const DeepCollectionEquality().hash(showPopup),
  ]);
}

extension AuthorizationStateDataClassExtensions on AuthorizationState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is AuthorizationState);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AuthorizationStateWaitTdlibParametersDataClassExtensions
    on AuthorizationStateWaitTdlibParameters {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthorizationStateWaitTdlibParameters);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AuthorizationStateWaitPhoneNumberDataClassExtensions
    on AuthorizationStateWaitPhoneNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthorizationStateWaitPhoneNumber);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AuthorizationStateWaitPremiumPurchaseDataClassExtensions
    on AuthorizationStateWaitPremiumPurchase {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthorizationStateWaitPremiumPurchase &&
          const DeepCollectionEquality().equals(
            other.storeProductId,
            storeProductId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storeProductId),
  ]);
}

extension AuthorizationStateWaitEmailAddressDataClassExtensions
    on AuthorizationStateWaitEmailAddress {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthorizationStateWaitEmailAddress &&
          const DeepCollectionEquality().equals(
            other.allowAppleId,
            allowAppleId,
          ) &&
          const DeepCollectionEquality().equals(
            other.allowGoogleId,
            allowGoogleId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(allowAppleId),
    const DeepCollectionEquality().hash(allowGoogleId),
  ]);
}

extension AuthorizationStateWaitEmailCodeDataClassExtensions
    on AuthorizationStateWaitEmailCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthorizationStateWaitEmailCode &&
          const DeepCollectionEquality().equals(
            other.allowAppleId,
            allowAppleId,
          ) &&
          const DeepCollectionEquality().equals(
            other.allowGoogleId,
            allowGoogleId,
          ) &&
          const DeepCollectionEquality().equals(other.codeInfo, codeInfo) &&
          const DeepCollectionEquality().equals(
            other.emailAddressResetState,
            emailAddressResetState,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(allowAppleId),
    const DeepCollectionEquality().hash(allowGoogleId),
    const DeepCollectionEquality().hash(codeInfo),
    const DeepCollectionEquality().hash(emailAddressResetState),
  ]);
}

extension AuthorizationStateWaitCodeDataClassExtensions
    on AuthorizationStateWaitCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthorizationStateWaitCode &&
          const DeepCollectionEquality().equals(other.codeInfo, codeInfo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(codeInfo),
  ]);
}

extension AuthorizationStateWaitOtherDeviceConfirmationDataClassExtensions
    on AuthorizationStateWaitOtherDeviceConfirmation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthorizationStateWaitOtherDeviceConfirmation &&
          const DeepCollectionEquality().equals(other.link, link));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(link)]);
}

extension AuthorizationStateWaitRegistrationDataClassExtensions
    on AuthorizationStateWaitRegistration {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthorizationStateWaitRegistration &&
          const DeepCollectionEquality().equals(
            other.termsOfService,
            termsOfService,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(termsOfService),
  ]);
}

extension AuthorizationStateWaitPasswordDataClassExtensions
    on AuthorizationStateWaitPassword {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthorizationStateWaitPassword &&
          const DeepCollectionEquality().equals(
            other.passwordHint,
            passwordHint,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasRecoveryEmailAddress,
            hasRecoveryEmailAddress,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasPassportData,
            hasPassportData,
          ) &&
          const DeepCollectionEquality().equals(
            other.recoveryEmailAddressPattern,
            recoveryEmailAddressPattern,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(passwordHint),
    const DeepCollectionEquality().hash(hasRecoveryEmailAddress),
    const DeepCollectionEquality().hash(hasPassportData),
    const DeepCollectionEquality().hash(recoveryEmailAddressPattern),
  ]);
}

extension AuthorizationStateReadyDataClassExtensions
    on AuthorizationStateReady {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is AuthorizationStateReady);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AuthorizationStateLoggingOutDataClassExtensions
    on AuthorizationStateLoggingOut {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AuthorizationStateLoggingOut);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AuthorizationStateClosingDataClassExtensions
    on AuthorizationStateClosing {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is AuthorizationStateClosing);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AuthorizationStateClosedDataClassExtensions
    on AuthorizationStateClosed {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is AuthorizationStateClosed);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FirebaseDeviceVerificationParametersDataClassExtensions
    on FirebaseDeviceVerificationParameters {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FirebaseDeviceVerificationParameters);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FirebaseDeviceVerificationParametersSafetyNetDataClassExtensions
    on FirebaseDeviceVerificationParametersSafetyNet {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FirebaseDeviceVerificationParametersSafetyNet &&
          const DeepCollectionEquality().equals(other.nonce, nonce));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(nonce)]);
}

extension FirebaseDeviceVerificationParametersPlayIntegrityDataClassExtensions
    on FirebaseDeviceVerificationParametersPlayIntegrity {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FirebaseDeviceVerificationParametersPlayIntegrity &&
          const DeepCollectionEquality().equals(other.nonce, nonce) &&
          const DeepCollectionEquality().equals(
            other.cloudProjectNumber,
            cloudProjectNumber,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(nonce),
    const DeepCollectionEquality().hash(cloudProjectNumber),
  ]);
}

extension PasswordStateDataClassExtensions on PasswordState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PasswordState &&
          const DeepCollectionEquality().equals(
            other.hasPassword,
            hasPassword,
          ) &&
          const DeepCollectionEquality().equals(
            other.passwordHint,
            passwordHint,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasRecoveryEmailAddress,
            hasRecoveryEmailAddress,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasPassportData,
            hasPassportData,
          ) &&
          const DeepCollectionEquality().equals(
            other.recoveryEmailAddressCodeInfo,
            recoveryEmailAddressCodeInfo,
          ) &&
          const DeepCollectionEquality().equals(
            other.loginEmailAddressPattern,
            loginEmailAddressPattern,
          ) &&
          const DeepCollectionEquality().equals(
            other.pendingResetDate,
            pendingResetDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(hasPassword),
    const DeepCollectionEquality().hash(passwordHint),
    const DeepCollectionEquality().hash(hasRecoveryEmailAddress),
    const DeepCollectionEquality().hash(hasPassportData),
    const DeepCollectionEquality().hash(recoveryEmailAddressCodeInfo),
    const DeepCollectionEquality().hash(loginEmailAddressPattern),
    const DeepCollectionEquality().hash(pendingResetDate),
  ]);
}

extension RecoveryEmailAddressDataClassExtensions on RecoveryEmailAddress {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RecoveryEmailAddress &&
          const DeepCollectionEquality().equals(
            other.recoveryEmailAddress,
            recoveryEmailAddress,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(recoveryEmailAddress),
  ]);
}

extension TemporaryPasswordStateDataClassExtensions on TemporaryPasswordState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TemporaryPasswordState &&
          const DeepCollectionEquality().equals(
            other.hasPassword,
            hasPassword,
          ) &&
          const DeepCollectionEquality().equals(other.validFor, validFor));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(hasPassword),
    const DeepCollectionEquality().hash(validFor),
  ]);
}

extension LocalFileDataClassExtensions on LocalFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LocalFile &&
          const DeepCollectionEquality().equals(other.path, path) &&
          const DeepCollectionEquality().equals(
            other.canBeDownloaded,
            canBeDownloaded,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeDeleted,
            canBeDeleted,
          ) &&
          const DeepCollectionEquality().equals(
            other.isDownloadingActive,
            isDownloadingActive,
          ) &&
          const DeepCollectionEquality().equals(
            other.isDownloadingCompleted,
            isDownloadingCompleted,
          ) &&
          const DeepCollectionEquality().equals(
            other.downloadOffset,
            downloadOffset,
          ) &&
          const DeepCollectionEquality().equals(
            other.downloadedPrefixSize,
            downloadedPrefixSize,
          ) &&
          const DeepCollectionEquality().equals(
            other.downloadedSize,
            downloadedSize,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(path),
    const DeepCollectionEquality().hash(canBeDownloaded),
    const DeepCollectionEquality().hash(canBeDeleted),
    const DeepCollectionEquality().hash(isDownloadingActive),
    const DeepCollectionEquality().hash(isDownloadingCompleted),
    const DeepCollectionEquality().hash(downloadOffset),
    const DeepCollectionEquality().hash(downloadedPrefixSize),
    const DeepCollectionEquality().hash(downloadedSize),
  ]);
}

extension RemoteFileDataClassExtensions on RemoteFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoteFile &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.uniqueId, uniqueId) &&
          const DeepCollectionEquality().equals(
            other.isUploadingActive,
            isUploadingActive,
          ) &&
          const DeepCollectionEquality().equals(
            other.isUploadingCompleted,
            isUploadingCompleted,
          ) &&
          const DeepCollectionEquality().equals(
            other.uploadedSize,
            uploadedSize,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(uniqueId),
    const DeepCollectionEquality().hash(isUploadingActive),
    const DeepCollectionEquality().hash(isUploadingCompleted),
    const DeepCollectionEquality().hash(uploadedSize),
  ]);
}

extension FileDataClassExtensions on File {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is File &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.size, size) &&
          const DeepCollectionEquality().equals(
            other.expectedSize,
            expectedSize,
          ) &&
          const DeepCollectionEquality().equals(other.local, local) &&
          const DeepCollectionEquality().equals(other.remote, remote));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(size),
    const DeepCollectionEquality().hash(expectedSize),
    const DeepCollectionEquality().hash(local),
    const DeepCollectionEquality().hash(remote),
  ]);
}

extension InputFileDataClassExtensions on InputFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InputFile);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InputFileIdDataClassExtensions on InputFileId {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputFileId &&
          const DeepCollectionEquality().equals(other.id, id));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(id)]);
}

extension InputFileRemoteDataClassExtensions on InputFileRemote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputFileRemote &&
          const DeepCollectionEquality().equals(other.id, id));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(id)]);
}

extension InputFileLocalDataClassExtensions on InputFileLocal {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputFileLocal &&
          const DeepCollectionEquality().equals(other.path, path));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(path)]);
}

extension InputFileGeneratedDataClassExtensions on InputFileGenerated {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputFileGenerated &&
          const DeepCollectionEquality().equals(
            other.originalPath,
            originalPath,
          ) &&
          const DeepCollectionEquality().equals(other.conversion, conversion) &&
          const DeepCollectionEquality().equals(
            other.expectedSize,
            expectedSize,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(originalPath),
    const DeepCollectionEquality().hash(conversion),
    const DeepCollectionEquality().hash(expectedSize),
  ]);
}

extension PhotoSizeDataClassExtensions on PhotoSize {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PhotoSize &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(
            other.progressiveSizes,
            progressiveSizes,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(progressiveSizes),
  ]);
}

extension MinithumbnailDataClassExtensions on Minithumbnail {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Minithumbnail &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(other.data, data));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(data),
  ]);
}

extension ThumbnailFormatDataClassExtensions on ThumbnailFormat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ThumbnailFormat);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ThumbnailFormatJpegDataClassExtensions on ThumbnailFormatJpeg {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ThumbnailFormatJpeg);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ThumbnailFormatGifDataClassExtensions on ThumbnailFormatGif {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ThumbnailFormatGif);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ThumbnailFormatMpeg4DataClassExtensions on ThumbnailFormatMpeg4 {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ThumbnailFormatMpeg4);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ThumbnailFormatPngDataClassExtensions on ThumbnailFormatPng {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ThumbnailFormatPng);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ThumbnailFormatTgsDataClassExtensions on ThumbnailFormatTgs {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ThumbnailFormatTgs);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ThumbnailFormatWebmDataClassExtensions on ThumbnailFormatWebm {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ThumbnailFormatWebm);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ThumbnailFormatWebpDataClassExtensions on ThumbnailFormatWebp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ThumbnailFormatWebp);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ThumbnailDataClassExtensions on Thumbnail {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Thumbnail &&
          const DeepCollectionEquality().equals(other.format, format) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(other.file, file));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(format),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(file),
  ]);
}

extension MaskPointDataClassExtensions on MaskPoint {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MaskPoint);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MaskPointForeheadDataClassExtensions on MaskPointForehead {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MaskPointForehead);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MaskPointEyesDataClassExtensions on MaskPointEyes {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MaskPointEyes);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MaskPointMouthDataClassExtensions on MaskPointMouth {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MaskPointMouth);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MaskPointChinDataClassExtensions on MaskPointChin {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MaskPointChin);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MaskPositionDataClassExtensions on MaskPosition {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MaskPosition &&
          const DeepCollectionEquality().equals(other.point, point) &&
          const DeepCollectionEquality().equals(other.xShift, xShift) &&
          const DeepCollectionEquality().equals(other.yShift, yShift) &&
          const DeepCollectionEquality().equals(other.scale, scale));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(point),
    const DeepCollectionEquality().hash(xShift),
    const DeepCollectionEquality().hash(yShift),
    const DeepCollectionEquality().hash(scale),
  ]);
}

extension StickerFormatDataClassExtensions on StickerFormat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StickerFormat);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StickerFormatWebpDataClassExtensions on StickerFormatWebp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StickerFormatWebp);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StickerFormatTgsDataClassExtensions on StickerFormatTgs {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StickerFormatTgs);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StickerFormatWebmDataClassExtensions on StickerFormatWebm {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StickerFormatWebm);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StickerTypeDataClassExtensions on StickerType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StickerType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StickerTypeRegularDataClassExtensions on StickerTypeRegular {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StickerTypeRegular);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StickerTypeMaskDataClassExtensions on StickerTypeMask {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StickerTypeMask);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StickerTypeCustomEmojiDataClassExtensions on StickerTypeCustomEmoji {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StickerTypeCustomEmoji);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StickerFullTypeDataClassExtensions on StickerFullType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StickerFullType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StickerFullTypeRegularDataClassExtensions on StickerFullTypeRegular {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StickerFullTypeRegular &&
          const DeepCollectionEquality().equals(
            other.premiumAnimation,
            premiumAnimation,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(premiumAnimation),
  ]);
}

extension StickerFullTypeMaskDataClassExtensions on StickerFullTypeMask {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StickerFullTypeMask &&
          const DeepCollectionEquality().equals(
            other.maskPosition,
            maskPosition,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(maskPosition),
  ]);
}

extension StickerFullTypeCustomEmojiDataClassExtensions
    on StickerFullTypeCustomEmoji {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StickerFullTypeCustomEmoji &&
          const DeepCollectionEquality().equals(
            other.customEmojiId,
            customEmojiId,
          ) &&
          const DeepCollectionEquality().equals(
            other.needsRepainting,
            needsRepainting,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(customEmojiId),
    const DeepCollectionEquality().hash(needsRepainting),
  ]);
}

extension ClosedVectorPathDataClassExtensions on ClosedVectorPath {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ClosedVectorPath &&
          const DeepCollectionEquality().equals(other.commands, commands));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(commands),
  ]);
}

extension OutlineDataClassExtensions on Outline {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Outline &&
          const DeepCollectionEquality().equals(other.paths, paths));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(paths)]);
}

extension PollOptionDataClassExtensions on PollOption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PollOption &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.voterCount, voterCount) &&
          const DeepCollectionEquality().equals(
            other.votePercentage,
            votePercentage,
          ) &&
          const DeepCollectionEquality().equals(other.isChosen, isChosen) &&
          const DeepCollectionEquality().equals(
            other.isBeingChosen,
            isBeingChosen,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(voterCount),
    const DeepCollectionEquality().hash(votePercentage),
    const DeepCollectionEquality().hash(isChosen),
    const DeepCollectionEquality().hash(isBeingChosen),
  ]);
}

extension PollTypeDataClassExtensions on PollType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PollType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PollTypeRegularDataClassExtensions on PollTypeRegular {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PollTypeRegular &&
          const DeepCollectionEquality().equals(
            other.allowMultipleAnswers,
            allowMultipleAnswers,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(allowMultipleAnswers),
  ]);
}

extension PollTypeQuizDataClassExtensions on PollTypeQuiz {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PollTypeQuiz &&
          const DeepCollectionEquality().equals(
            other.correctOptionId,
            correctOptionId,
          ) &&
          const DeepCollectionEquality().equals(
            other.explanation,
            explanation,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(correctOptionId),
    const DeepCollectionEquality().hash(explanation),
  ]);
}

extension ChecklistTaskDataClassExtensions on ChecklistTask {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChecklistTask &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(
            other.completedByUserId,
            completedByUserId,
          ) &&
          const DeepCollectionEquality().equals(
            other.completionDate,
            completionDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(completedByUserId),
    const DeepCollectionEquality().hash(completionDate),
  ]);
}

extension InputChecklistTaskDataClassExtensions on InputChecklistTask {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputChecklistTask &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(text),
  ]);
}

extension ChecklistDataClassExtensions on Checklist {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Checklist &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.tasks, tasks) &&
          const DeepCollectionEquality().equals(
            other.othersCanAddTasks,
            othersCanAddTasks,
          ) &&
          const DeepCollectionEquality().equals(
            other.canAddTasks,
            canAddTasks,
          ) &&
          const DeepCollectionEquality().equals(
            other.othersCanMarkTasksAsDone,
            othersCanMarkTasksAsDone,
          ) &&
          const DeepCollectionEquality().equals(
            other.canMarkTasksAsDone,
            canMarkTasksAsDone,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(tasks),
    const DeepCollectionEquality().hash(othersCanAddTasks),
    const DeepCollectionEquality().hash(canAddTasks),
    const DeepCollectionEquality().hash(othersCanMarkTasksAsDone),
    const DeepCollectionEquality().hash(canMarkTasksAsDone),
  ]);
}

extension InputChecklistDataClassExtensions on InputChecklist {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputChecklist &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.tasks, tasks) &&
          const DeepCollectionEquality().equals(
            other.othersCanAddTasks,
            othersCanAddTasks,
          ) &&
          const DeepCollectionEquality().equals(
            other.othersCanMarkTasksAsDone,
            othersCanMarkTasksAsDone,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(tasks),
    const DeepCollectionEquality().hash(othersCanAddTasks),
    const DeepCollectionEquality().hash(othersCanMarkTasksAsDone),
  ]);
}

extension AnimationDataClassExtensions on Animation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Animation &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(other.fileName, fileName) &&
          const DeepCollectionEquality().equals(other.mimeType, mimeType) &&
          const DeepCollectionEquality().equals(
            other.hasStickers,
            hasStickers,
          ) &&
          const DeepCollectionEquality().equals(
            other.minithumbnail,
            minithumbnail,
          ) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(other.animation, animation));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(fileName),
    const DeepCollectionEquality().hash(mimeType),
    const DeepCollectionEquality().hash(hasStickers),
    const DeepCollectionEquality().hash(minithumbnail),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(animation),
  ]);
}

extension AudioDataClassExtensions on Audio {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Audio &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.performer, performer) &&
          const DeepCollectionEquality().equals(other.fileName, fileName) &&
          const DeepCollectionEquality().equals(other.mimeType, mimeType) &&
          const DeepCollectionEquality().equals(
            other.albumCoverMinithumbnail,
            albumCoverMinithumbnail,
          ) &&
          const DeepCollectionEquality().equals(
            other.albumCoverThumbnail,
            albumCoverThumbnail,
          ) &&
          const DeepCollectionEquality().equals(
            other.externalAlbumCovers,
            externalAlbumCovers,
          ) &&
          const DeepCollectionEquality().equals(other.audio, audio));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(performer),
    const DeepCollectionEquality().hash(fileName),
    const DeepCollectionEquality().hash(mimeType),
    const DeepCollectionEquality().hash(albumCoverMinithumbnail),
    const DeepCollectionEquality().hash(albumCoverThumbnail),
    const DeepCollectionEquality().hash(externalAlbumCovers),
    const DeepCollectionEquality().hash(audio),
  ]);
}

extension DocumentDataClassExtensions on Document {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Document &&
          const DeepCollectionEquality().equals(other.fileName, fileName) &&
          const DeepCollectionEquality().equals(other.mimeType, mimeType) &&
          const DeepCollectionEquality().equals(
            other.minithumbnail,
            minithumbnail,
          ) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(other.document, document));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileName),
    const DeepCollectionEquality().hash(mimeType),
    const DeepCollectionEquality().hash(minithumbnail),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(document),
  ]);
}

extension PhotoDataClassExtensions on Photo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Photo &&
          const DeepCollectionEquality().equals(
            other.hasStickers,
            hasStickers,
          ) &&
          const DeepCollectionEquality().equals(
            other.minithumbnail,
            minithumbnail,
          ) &&
          const DeepCollectionEquality().equals(other.sizes, sizes));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(hasStickers),
    const DeepCollectionEquality().hash(minithumbnail),
    const DeepCollectionEquality().hash(sizes),
  ]);
}

extension StickerDataClassExtensions on Sticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Sticker &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.setId, setId) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(other.emoji, emoji) &&
          const DeepCollectionEquality().equals(other.format, format) &&
          const DeepCollectionEquality().equals(other.fullType, fullType) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(setId),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(emoji),
    const DeepCollectionEquality().hash(format),
    const DeepCollectionEquality().hash(fullType),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension VideoDataClassExtensions on Video {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Video &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(other.fileName, fileName) &&
          const DeepCollectionEquality().equals(other.mimeType, mimeType) &&
          const DeepCollectionEquality().equals(
            other.hasStickers,
            hasStickers,
          ) &&
          const DeepCollectionEquality().equals(
            other.supportsStreaming,
            supportsStreaming,
          ) &&
          const DeepCollectionEquality().equals(
            other.minithumbnail,
            minithumbnail,
          ) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(other.video, video));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(fileName),
    const DeepCollectionEquality().hash(mimeType),
    const DeepCollectionEquality().hash(hasStickers),
    const DeepCollectionEquality().hash(supportsStreaming),
    const DeepCollectionEquality().hash(minithumbnail),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(video),
  ]);
}

extension VideoNoteDataClassExtensions on VideoNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is VideoNote &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(other.waveform, waveform) &&
          const DeepCollectionEquality().equals(other.length, length) &&
          const DeepCollectionEquality().equals(
            other.minithumbnail,
            minithumbnail,
          ) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(
            other.speechRecognitionResult,
            speechRecognitionResult,
          ) &&
          const DeepCollectionEquality().equals(other.video, video));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(waveform),
    const DeepCollectionEquality().hash(length),
    const DeepCollectionEquality().hash(minithumbnail),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(speechRecognitionResult),
    const DeepCollectionEquality().hash(video),
  ]);
}

extension VoiceNoteDataClassExtensions on VoiceNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is VoiceNote &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(other.waveform, waveform) &&
          const DeepCollectionEquality().equals(other.mimeType, mimeType) &&
          const DeepCollectionEquality().equals(
            other.speechRecognitionResult,
            speechRecognitionResult,
          ) &&
          const DeepCollectionEquality().equals(other.voice, voice));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(waveform),
    const DeepCollectionEquality().hash(mimeType),
    const DeepCollectionEquality().hash(speechRecognitionResult),
    const DeepCollectionEquality().hash(voice),
  ]);
}

extension AnimatedEmojiDataClassExtensions on AnimatedEmoji {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AnimatedEmoji &&
          const DeepCollectionEquality().equals(other.sticker, sticker) &&
          const DeepCollectionEquality().equals(
            other.stickerWidth,
            stickerWidth,
          ) &&
          const DeepCollectionEquality().equals(
            other.stickerHeight,
            stickerHeight,
          ) &&
          const DeepCollectionEquality().equals(
            other.fitzpatrickType,
            fitzpatrickType,
          ) &&
          const DeepCollectionEquality().equals(other.sound, sound));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sticker),
    const DeepCollectionEquality().hash(stickerWidth),
    const DeepCollectionEquality().hash(stickerHeight),
    const DeepCollectionEquality().hash(fitzpatrickType),
    const DeepCollectionEquality().hash(sound),
  ]);
}

extension ContactDataClassExtensions on Contact {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Contact &&
          const DeepCollectionEquality().equals(
            other.phoneNumber,
            phoneNumber,
          ) &&
          const DeepCollectionEquality().equals(other.firstName, firstName) &&
          const DeepCollectionEquality().equals(other.lastName, lastName) &&
          const DeepCollectionEquality().equals(other.vcard, vcard) &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(phoneNumber),
    const DeepCollectionEquality().hash(firstName),
    const DeepCollectionEquality().hash(lastName),
    const DeepCollectionEquality().hash(vcard),
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension LocationDataClassExtensions on Location {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Location &&
          const DeepCollectionEquality().equals(other.latitude, latitude) &&
          const DeepCollectionEquality().equals(other.longitude, longitude) &&
          const DeepCollectionEquality().equals(
            other.horizontalAccuracy,
            horizontalAccuracy,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(latitude),
    const DeepCollectionEquality().hash(longitude),
    const DeepCollectionEquality().hash(horizontalAccuracy),
  ]);
}

extension VenueDataClassExtensions on Venue {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Venue &&
          const DeepCollectionEquality().equals(other.location, location) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.address, address) &&
          const DeepCollectionEquality().equals(other.provider, provider) &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(location),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(address),
    const DeepCollectionEquality().hash(provider),
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension GameDataClassExtensions on Game {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Game &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.shortName, shortName) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ) &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(other.animation, animation));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(shortName),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(description),
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(animation),
  ]);
}

extension WebAppDataClassExtensions on WebApp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is WebApp &&
          const DeepCollectionEquality().equals(other.shortName, shortName) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ) &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(other.animation, animation));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortName),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(description),
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(animation),
  ]);
}

extension PollDataClassExtensions on Poll {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Poll &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.question, question) &&
          const DeepCollectionEquality().equals(other.options, options) &&
          const DeepCollectionEquality().equals(
            other.totalVoterCount,
            totalVoterCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.recentVoterIds,
            recentVoterIds,
          ) &&
          const DeepCollectionEquality().equals(
            other.isAnonymous,
            isAnonymous,
          ) &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.openPeriod, openPeriod) &&
          const DeepCollectionEquality().equals(other.closeDate, closeDate) &&
          const DeepCollectionEquality().equals(other.isClosed, isClosed));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(question),
    const DeepCollectionEquality().hash(options),
    const DeepCollectionEquality().hash(totalVoterCount),
    const DeepCollectionEquality().hash(recentVoterIds),
    const DeepCollectionEquality().hash(isAnonymous),
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(openPeriod),
    const DeepCollectionEquality().hash(closeDate),
    const DeepCollectionEquality().hash(isClosed),
  ]);
}

extension AlternativeVideoDataClassExtensions on AlternativeVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AlternativeVideo &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(other.codec, codec) &&
          const DeepCollectionEquality().equals(other.hlsFile, hlsFile) &&
          const DeepCollectionEquality().equals(other.video, video));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(codec),
    const DeepCollectionEquality().hash(hlsFile),
    const DeepCollectionEquality().hash(video),
  ]);
}

extension VideoStoryboardDataClassExtensions on VideoStoryboard {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is VideoStoryboard &&
          const DeepCollectionEquality().equals(
            other.storyboardFile,
            storyboardFile,
          ) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(other.mapFile, mapFile));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyboardFile),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(mapFile),
  ]);
}

extension BackgroundDataClassExtensions on Background {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Background &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.isDefault, isDefault) &&
          const DeepCollectionEquality().equals(other.isDark, isDark) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.document, document) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(isDefault),
    const DeepCollectionEquality().hash(isDark),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(document),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension BackgroundsDataClassExtensions on Backgrounds {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Backgrounds &&
          const DeepCollectionEquality().equals(
            other.backgrounds,
            backgrounds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(backgrounds),
  ]);
}

extension ChatBackgroundDataClassExtensions on ChatBackground {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatBackground &&
          const DeepCollectionEquality().equals(other.background, background) &&
          const DeepCollectionEquality().equals(
            other.darkThemeDimming,
            darkThemeDimming,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(background),
    const DeepCollectionEquality().hash(darkThemeDimming),
  ]);
}

extension ProfilePhotoDataClassExtensions on ProfilePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ProfilePhoto &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.small, small) &&
          const DeepCollectionEquality().equals(other.big, big) &&
          const DeepCollectionEquality().equals(
            other.minithumbnail,
            minithumbnail,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasAnimation,
            hasAnimation,
          ) &&
          const DeepCollectionEquality().equals(other.isPersonal, isPersonal));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(small),
    const DeepCollectionEquality().hash(big),
    const DeepCollectionEquality().hash(minithumbnail),
    const DeepCollectionEquality().hash(hasAnimation),
    const DeepCollectionEquality().hash(isPersonal),
  ]);
}

extension ChatPhotoInfoDataClassExtensions on ChatPhotoInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatPhotoInfo &&
          const DeepCollectionEquality().equals(other.small, small) &&
          const DeepCollectionEquality().equals(other.big, big) &&
          const DeepCollectionEquality().equals(
            other.minithumbnail,
            minithumbnail,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasAnimation,
            hasAnimation,
          ) &&
          const DeepCollectionEquality().equals(other.isPersonal, isPersonal));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(small),
    const DeepCollectionEquality().hash(big),
    const DeepCollectionEquality().hash(minithumbnail),
    const DeepCollectionEquality().hash(hasAnimation),
    const DeepCollectionEquality().hash(isPersonal),
  ]);
}

extension UserTypeDataClassExtensions on UserType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is UserType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserTypeRegularDataClassExtensions on UserTypeRegular {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is UserTypeRegular);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserTypeDeletedDataClassExtensions on UserTypeDeleted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is UserTypeDeleted);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserTypeBotDataClassExtensions on UserTypeBot {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserTypeBot &&
          const DeepCollectionEquality().equals(
            other.canBeEdited,
            canBeEdited,
          ) &&
          const DeepCollectionEquality().equals(
            other.canJoinGroups,
            canJoinGroups,
          ) &&
          const DeepCollectionEquality().equals(
            other.canReadAllGroupMessages,
            canReadAllGroupMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasMainWebApp,
            hasMainWebApp,
          ) &&
          const DeepCollectionEquality().equals(other.isInline, isInline) &&
          const DeepCollectionEquality().equals(
            other.inlineQueryPlaceholder,
            inlineQueryPlaceholder,
          ) &&
          const DeepCollectionEquality().equals(
            other.needLocation,
            needLocation,
          ) &&
          const DeepCollectionEquality().equals(
            other.canConnectToBusiness,
            canConnectToBusiness,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeAddedToAttachmentMenu,
            canBeAddedToAttachmentMenu,
          ) &&
          const DeepCollectionEquality().equals(
            other.activeUserCount,
            activeUserCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(canBeEdited),
    const DeepCollectionEquality().hash(canJoinGroups),
    const DeepCollectionEquality().hash(canReadAllGroupMessages),
    const DeepCollectionEquality().hash(hasMainWebApp),
    const DeepCollectionEquality().hash(isInline),
    const DeepCollectionEquality().hash(inlineQueryPlaceholder),
    const DeepCollectionEquality().hash(needLocation),
    const DeepCollectionEquality().hash(canConnectToBusiness),
    const DeepCollectionEquality().hash(canBeAddedToAttachmentMenu),
    const DeepCollectionEquality().hash(activeUserCount),
  ]);
}

extension UserTypeUnknownDataClassExtensions on UserTypeUnknown {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is UserTypeUnknown);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BotCommandDataClassExtensions on BotCommand {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotCommand &&
          const DeepCollectionEquality().equals(other.command, command) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(command),
    const DeepCollectionEquality().hash(description),
  ]);
}

extension BotCommandsDataClassExtensions on BotCommands {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotCommands &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.commands, commands));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(commands),
  ]);
}

extension BotMenuButtonDataClassExtensions on BotMenuButton {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotMenuButton &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(url),
  ]);
}

extension BotVerificationParametersDataClassExtensions
    on BotVerificationParameters {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotVerificationParameters &&
          const DeepCollectionEquality().equals(
            other.iconCustomEmojiId,
            iconCustomEmojiId,
          ) &&
          const DeepCollectionEquality().equals(
            other.organizationName,
            organizationName,
          ) &&
          const DeepCollectionEquality().equals(
            other.defaultCustomDescription,
            defaultCustomDescription,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSetCustomDescription,
            canSetCustomDescription,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(iconCustomEmojiId),
    const DeepCollectionEquality().hash(organizationName),
    const DeepCollectionEquality().hash(defaultCustomDescription),
    const DeepCollectionEquality().hash(canSetCustomDescription),
  ]);
}

extension BotVerificationDataClassExtensions on BotVerification {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotVerification &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.iconCustomEmojiId,
            iconCustomEmojiId,
          ) &&
          const DeepCollectionEquality().equals(
            other.customDescription,
            customDescription,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(iconCustomEmojiId),
    const DeepCollectionEquality().hash(customDescription),
  ]);
}

extension VerificationStatusDataClassExtensions on VerificationStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is VerificationStatus &&
          const DeepCollectionEquality().equals(other.isVerified, isVerified) &&
          const DeepCollectionEquality().equals(other.isScam, isScam) &&
          const DeepCollectionEquality().equals(other.isFake, isFake) &&
          const DeepCollectionEquality().equals(
            other.botVerificationIconCustomEmojiId,
            botVerificationIconCustomEmojiId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isVerified),
    const DeepCollectionEquality().hash(isScam),
    const DeepCollectionEquality().hash(isFake),
    const DeepCollectionEquality().hash(botVerificationIconCustomEmojiId),
  ]);
}

extension ChatLocationDataClassExtensions on ChatLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatLocation &&
          const DeepCollectionEquality().equals(other.location, location) &&
          const DeepCollectionEquality().equals(other.address, address));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(location),
    const DeepCollectionEquality().hash(address),
  ]);
}

extension BirthdateDataClassExtensions on Birthdate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Birthdate &&
          const DeepCollectionEquality().equals(other.day, day) &&
          const DeepCollectionEquality().equals(other.month, month) &&
          const DeepCollectionEquality().equals(other.year, year));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(day),
    const DeepCollectionEquality().hash(month),
    const DeepCollectionEquality().hash(year),
  ]);
}

extension CloseBirthdayUserDataClassExtensions on CloseBirthdayUser {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CloseBirthdayUser &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.birthdate, birthdate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(birthdate),
  ]);
}

extension BusinessAwayMessageScheduleDataClassExtensions
    on BusinessAwayMessageSchedule {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessAwayMessageSchedule);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BusinessAwayMessageScheduleAlwaysDataClassExtensions
    on BusinessAwayMessageScheduleAlways {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessAwayMessageScheduleAlways);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BusinessAwayMessageScheduleOutsideOfOpeningHoursDataClassExtensions
    on BusinessAwayMessageScheduleOutsideOfOpeningHours {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessAwayMessageScheduleOutsideOfOpeningHours);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BusinessAwayMessageScheduleCustomDataClassExtensions
    on BusinessAwayMessageScheduleCustom {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessAwayMessageScheduleCustom &&
          const DeepCollectionEquality().equals(other.startDate, startDate) &&
          const DeepCollectionEquality().equals(other.endDate, endDate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(startDate),
    const DeepCollectionEquality().hash(endDate),
  ]);
}

extension BusinessLocationDataClassExtensions on BusinessLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessLocation &&
          const DeepCollectionEquality().equals(other.location, location) &&
          const DeepCollectionEquality().equals(other.address, address));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(location),
    const DeepCollectionEquality().hash(address),
  ]);
}

extension BusinessRecipientsDataClassExtensions on BusinessRecipients {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessRecipients &&
          const DeepCollectionEquality().equals(other.chatIds, chatIds) &&
          const DeepCollectionEquality().equals(
            other.excludedChatIds,
            excludedChatIds,
          ) &&
          const DeepCollectionEquality().equals(
            other.selectExistingChats,
            selectExistingChats,
          ) &&
          const DeepCollectionEquality().equals(
            other.selectNewChats,
            selectNewChats,
          ) &&
          const DeepCollectionEquality().equals(
            other.selectContacts,
            selectContacts,
          ) &&
          const DeepCollectionEquality().equals(
            other.selectNonContacts,
            selectNonContacts,
          ) &&
          const DeepCollectionEquality().equals(
            other.excludeSelected,
            excludeSelected,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatIds),
    const DeepCollectionEquality().hash(excludedChatIds),
    const DeepCollectionEquality().hash(selectExistingChats),
    const DeepCollectionEquality().hash(selectNewChats),
    const DeepCollectionEquality().hash(selectContacts),
    const DeepCollectionEquality().hash(selectNonContacts),
    const DeepCollectionEquality().hash(excludeSelected),
  ]);
}

extension BusinessAwayMessageSettingsDataClassExtensions
    on BusinessAwayMessageSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessAwayMessageSettings &&
          const DeepCollectionEquality().equals(other.shortcutId, shortcutId) &&
          const DeepCollectionEquality().equals(other.recipients, recipients) &&
          const DeepCollectionEquality().equals(other.schedule, schedule) &&
          const DeepCollectionEquality().equals(
            other.offlineOnly,
            offlineOnly,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortcutId),
    const DeepCollectionEquality().hash(recipients),
    const DeepCollectionEquality().hash(schedule),
    const DeepCollectionEquality().hash(offlineOnly),
  ]);
}

extension BusinessGreetingMessageSettingsDataClassExtensions
    on BusinessGreetingMessageSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessGreetingMessageSettings &&
          const DeepCollectionEquality().equals(other.shortcutId, shortcutId) &&
          const DeepCollectionEquality().equals(other.recipients, recipients) &&
          const DeepCollectionEquality().equals(
            other.inactivityDays,
            inactivityDays,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortcutId),
    const DeepCollectionEquality().hash(recipients),
    const DeepCollectionEquality().hash(inactivityDays),
  ]);
}

extension BusinessBotRightsDataClassExtensions on BusinessBotRights {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessBotRights &&
          const DeepCollectionEquality().equals(other.canReply, canReply) &&
          const DeepCollectionEquality().equals(
            other.canReadMessages,
            canReadMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.canDeleteSentMessages,
            canDeleteSentMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.canDeleteAllMessages,
            canDeleteAllMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.canEditName,
            canEditName,
          ) &&
          const DeepCollectionEquality().equals(other.canEditBio, canEditBio) &&
          const DeepCollectionEquality().equals(
            other.canEditProfilePhoto,
            canEditProfilePhoto,
          ) &&
          const DeepCollectionEquality().equals(
            other.canEditUsername,
            canEditUsername,
          ) &&
          const DeepCollectionEquality().equals(
            other.canViewGiftsAndStars,
            canViewGiftsAndStars,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSellGifts,
            canSellGifts,
          ) &&
          const DeepCollectionEquality().equals(
            other.canChangeGiftSettings,
            canChangeGiftSettings,
          ) &&
          const DeepCollectionEquality().equals(
            other.canTransferAndUpgradeGifts,
            canTransferAndUpgradeGifts,
          ) &&
          const DeepCollectionEquality().equals(
            other.canTransferStars,
            canTransferStars,
          ) &&
          const DeepCollectionEquality().equals(
            other.canManageStories,
            canManageStories,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(canReply),
    const DeepCollectionEquality().hash(canReadMessages),
    const DeepCollectionEquality().hash(canDeleteSentMessages),
    const DeepCollectionEquality().hash(canDeleteAllMessages),
    const DeepCollectionEquality().hash(canEditName),
    const DeepCollectionEquality().hash(canEditBio),
    const DeepCollectionEquality().hash(canEditProfilePhoto),
    const DeepCollectionEquality().hash(canEditUsername),
    const DeepCollectionEquality().hash(canViewGiftsAndStars),
    const DeepCollectionEquality().hash(canSellGifts),
    const DeepCollectionEquality().hash(canChangeGiftSettings),
    const DeepCollectionEquality().hash(canTransferAndUpgradeGifts),
    const DeepCollectionEquality().hash(canTransferStars),
    const DeepCollectionEquality().hash(canManageStories),
  ]);
}

extension BusinessConnectedBotDataClassExtensions on BusinessConnectedBot {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessConnectedBot &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.recipients, recipients) &&
          const DeepCollectionEquality().equals(other.rights, rights));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(recipients),
    const DeepCollectionEquality().hash(rights),
  ]);
}

extension BusinessStartPageDataClassExtensions on BusinessStartPage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessStartPage &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.message, message) &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(message),
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension InputBusinessStartPageDataClassExtensions on InputBusinessStartPage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputBusinessStartPage &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.message, message) &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(message),
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension BusinessOpeningHoursIntervalDataClassExtensions
    on BusinessOpeningHoursInterval {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessOpeningHoursInterval &&
          const DeepCollectionEquality().equals(
            other.startMinute,
            startMinute,
          ) &&
          const DeepCollectionEquality().equals(other.endMinute, endMinute));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(startMinute),
    const DeepCollectionEquality().hash(endMinute),
  ]);
}

extension BusinessOpeningHoursDataClassExtensions on BusinessOpeningHours {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessOpeningHours &&
          const DeepCollectionEquality().equals(other.timeZoneId, timeZoneId) &&
          const DeepCollectionEquality().equals(
            other.openingHours,
            openingHours,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(timeZoneId),
    const DeepCollectionEquality().hash(openingHours),
  ]);
}

extension BusinessInfoDataClassExtensions on BusinessInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessInfo &&
          const DeepCollectionEquality().equals(other.location, location) &&
          const DeepCollectionEquality().equals(
            other.openingHours,
            openingHours,
          ) &&
          const DeepCollectionEquality().equals(
            other.localOpeningHours,
            localOpeningHours,
          ) &&
          const DeepCollectionEquality().equals(other.nextOpenIn, nextOpenIn) &&
          const DeepCollectionEquality().equals(
            other.nextCloseIn,
            nextCloseIn,
          ) &&
          const DeepCollectionEquality().equals(
            other.greetingMessageSettings,
            greetingMessageSettings,
          ) &&
          const DeepCollectionEquality().equals(
            other.awayMessageSettings,
            awayMessageSettings,
          ) &&
          const DeepCollectionEquality().equals(other.startPage, startPage));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(location),
    const DeepCollectionEquality().hash(openingHours),
    const DeepCollectionEquality().hash(localOpeningHours),
    const DeepCollectionEquality().hash(nextOpenIn),
    const DeepCollectionEquality().hash(nextCloseIn),
    const DeepCollectionEquality().hash(greetingMessageSettings),
    const DeepCollectionEquality().hash(awayMessageSettings),
    const DeepCollectionEquality().hash(startPage),
  ]);
}

extension BusinessChatLinkDataClassExtensions on BusinessChatLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessChatLink &&
          const DeepCollectionEquality().equals(other.link, link) &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.viewCount, viewCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(link),
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(viewCount),
  ]);
}

extension BusinessChatLinksDataClassExtensions on BusinessChatLinks {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessChatLinks &&
          const DeepCollectionEquality().equals(other.links, links));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(links)]);
}

extension InputBusinessChatLinkDataClassExtensions on InputBusinessChatLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputBusinessChatLink &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.title, title));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(title),
  ]);
}

extension BusinessChatLinkInfoDataClassExtensions on BusinessChatLinkInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessChatLinkInfo &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(text),
  ]);
}

extension ChatPhotoStickerTypeDataClassExtensions on ChatPhotoStickerType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatPhotoStickerType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatPhotoStickerTypeRegularOrMaskDataClassExtensions
    on ChatPhotoStickerTypeRegularOrMask {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatPhotoStickerTypeRegularOrMask &&
          const DeepCollectionEquality().equals(
            other.stickerSetId,
            stickerSetId,
          ) &&
          const DeepCollectionEquality().equals(other.stickerId, stickerId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerSetId),
    const DeepCollectionEquality().hash(stickerId),
  ]);
}

extension ChatPhotoStickerTypeCustomEmojiDataClassExtensions
    on ChatPhotoStickerTypeCustomEmoji {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatPhotoStickerTypeCustomEmoji &&
          const DeepCollectionEquality().equals(
            other.customEmojiId,
            customEmojiId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(customEmojiId),
  ]);
}

extension ChatPhotoStickerDataClassExtensions on ChatPhotoSticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatPhotoSticker &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(
            other.backgroundFill,
            backgroundFill,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(backgroundFill),
  ]);
}

extension AnimatedChatPhotoDataClassExtensions on AnimatedChatPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AnimatedChatPhoto &&
          const DeepCollectionEquality().equals(other.length, length) &&
          const DeepCollectionEquality().equals(other.file, file) &&
          const DeepCollectionEquality().equals(
            other.mainFrameTimestamp,
            mainFrameTimestamp,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(length),
    const DeepCollectionEquality().hash(file),
    const DeepCollectionEquality().hash(mainFrameTimestamp),
  ]);
}

extension ChatPhotoDataClassExtensions on ChatPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatPhoto &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.addedDate, addedDate) &&
          const DeepCollectionEquality().equals(
            other.minithumbnail,
            minithumbnail,
          ) &&
          const DeepCollectionEquality().equals(other.sizes, sizes) &&
          const DeepCollectionEquality().equals(other.animation, animation) &&
          const DeepCollectionEquality().equals(
            other.smallAnimation,
            smallAnimation,
          ) &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(addedDate),
    const DeepCollectionEquality().hash(minithumbnail),
    const DeepCollectionEquality().hash(sizes),
    const DeepCollectionEquality().hash(animation),
    const DeepCollectionEquality().hash(smallAnimation),
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension ChatPhotosDataClassExtensions on ChatPhotos {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatPhotos &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.photos, photos));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(photos),
  ]);
}

extension InputChatPhotoDataClassExtensions on InputChatPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InputChatPhoto);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InputChatPhotoPreviousDataClassExtensions on InputChatPhotoPrevious {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputChatPhotoPrevious &&
          const DeepCollectionEquality().equals(
            other.chatPhotoId,
            chatPhotoId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatPhotoId),
  ]);
}

extension InputChatPhotoStaticDataClassExtensions on InputChatPhotoStatic {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputChatPhotoStatic &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(photo)]);
}

extension InputChatPhotoAnimationDataClassExtensions
    on InputChatPhotoAnimation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputChatPhotoAnimation &&
          const DeepCollectionEquality().equals(other.animation, animation) &&
          const DeepCollectionEquality().equals(
            other.mainFrameTimestamp,
            mainFrameTimestamp,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(animation),
    const DeepCollectionEquality().hash(mainFrameTimestamp),
  ]);
}

extension InputChatPhotoStickerDataClassExtensions on InputChatPhotoSticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputChatPhotoSticker &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension ChatPermissionsDataClassExtensions on ChatPermissions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatPermissions &&
          const DeepCollectionEquality().equals(
            other.canSendBasicMessages,
            canSendBasicMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSendAudios,
            canSendAudios,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSendDocuments,
            canSendDocuments,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSendPhotos,
            canSendPhotos,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSendVideos,
            canSendVideos,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSendVideoNotes,
            canSendVideoNotes,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSendVoiceNotes,
            canSendVoiceNotes,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSendPolls,
            canSendPolls,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSendOtherMessages,
            canSendOtherMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.canAddLinkPreviews,
            canAddLinkPreviews,
          ) &&
          const DeepCollectionEquality().equals(
            other.canChangeInfo,
            canChangeInfo,
          ) &&
          const DeepCollectionEquality().equals(
            other.canInviteUsers,
            canInviteUsers,
          ) &&
          const DeepCollectionEquality().equals(
            other.canPinMessages,
            canPinMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.canCreateTopics,
            canCreateTopics,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(canSendBasicMessages),
    const DeepCollectionEquality().hash(canSendAudios),
    const DeepCollectionEquality().hash(canSendDocuments),
    const DeepCollectionEquality().hash(canSendPhotos),
    const DeepCollectionEquality().hash(canSendVideos),
    const DeepCollectionEquality().hash(canSendVideoNotes),
    const DeepCollectionEquality().hash(canSendVoiceNotes),
    const DeepCollectionEquality().hash(canSendPolls),
    const DeepCollectionEquality().hash(canSendOtherMessages),
    const DeepCollectionEquality().hash(canAddLinkPreviews),
    const DeepCollectionEquality().hash(canChangeInfo),
    const DeepCollectionEquality().hash(canInviteUsers),
    const DeepCollectionEquality().hash(canPinMessages),
    const DeepCollectionEquality().hash(canCreateTopics),
  ]);
}

extension ChatAdministratorRightsDataClassExtensions
    on ChatAdministratorRights {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatAdministratorRights &&
          const DeepCollectionEquality().equals(
            other.canManageChat,
            canManageChat,
          ) &&
          const DeepCollectionEquality().equals(
            other.canChangeInfo,
            canChangeInfo,
          ) &&
          const DeepCollectionEquality().equals(
            other.canPostMessages,
            canPostMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.canEditMessages,
            canEditMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.canDeleteMessages,
            canDeleteMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.canInviteUsers,
            canInviteUsers,
          ) &&
          const DeepCollectionEquality().equals(
            other.canRestrictMembers,
            canRestrictMembers,
          ) &&
          const DeepCollectionEquality().equals(
            other.canPinMessages,
            canPinMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.canManageTopics,
            canManageTopics,
          ) &&
          const DeepCollectionEquality().equals(
            other.canPromoteMembers,
            canPromoteMembers,
          ) &&
          const DeepCollectionEquality().equals(
            other.canManageVideoChats,
            canManageVideoChats,
          ) &&
          const DeepCollectionEquality().equals(
            other.canPostStories,
            canPostStories,
          ) &&
          const DeepCollectionEquality().equals(
            other.canEditStories,
            canEditStories,
          ) &&
          const DeepCollectionEquality().equals(
            other.canDeleteStories,
            canDeleteStories,
          ) &&
          const DeepCollectionEquality().equals(
            other.isAnonymous,
            isAnonymous,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(canManageChat),
    const DeepCollectionEquality().hash(canChangeInfo),
    const DeepCollectionEquality().hash(canPostMessages),
    const DeepCollectionEquality().hash(canEditMessages),
    const DeepCollectionEquality().hash(canDeleteMessages),
    const DeepCollectionEquality().hash(canInviteUsers),
    const DeepCollectionEquality().hash(canRestrictMembers),
    const DeepCollectionEquality().hash(canPinMessages),
    const DeepCollectionEquality().hash(canManageTopics),
    const DeepCollectionEquality().hash(canPromoteMembers),
    const DeepCollectionEquality().hash(canManageVideoChats),
    const DeepCollectionEquality().hash(canPostStories),
    const DeepCollectionEquality().hash(canEditStories),
    const DeepCollectionEquality().hash(canDeleteStories),
    const DeepCollectionEquality().hash(isAnonymous),
  ]);
}

extension StarAmountDataClassExtensions on StarAmount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarAmount &&
          const DeepCollectionEquality().equals(other.starCount, starCount) &&
          const DeepCollectionEquality().equals(
            other.nanostarCount,
            nanostarCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(starCount),
    const DeepCollectionEquality().hash(nanostarCount),
  ]);
}

extension StarSubscriptionTypeDataClassExtensions on StarSubscriptionType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StarSubscriptionType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StarSubscriptionTypeChannelDataClassExtensions
    on StarSubscriptionTypeChannel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarSubscriptionTypeChannel &&
          const DeepCollectionEquality().equals(other.canReuse, canReuse) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(canReuse),
    const DeepCollectionEquality().hash(inviteLink),
  ]);
}

extension StarSubscriptionTypeBotDataClassExtensions
    on StarSubscriptionTypeBot {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarSubscriptionTypeBot &&
          const DeepCollectionEquality().equals(
            other.isCanceledByBot,
            isCanceledByBot,
          ) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(
            other.invoiceLink,
            invoiceLink,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isCanceledByBot),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(invoiceLink),
  ]);
}

extension StarSubscriptionPricingDataClassExtensions
    on StarSubscriptionPricing {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarSubscriptionPricing &&
          const DeepCollectionEquality().equals(other.period, period) &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(period),
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension StarSubscriptionDataClassExtensions on StarSubscription {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarSubscription &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.expirationDate,
            expirationDate,
          ) &&
          const DeepCollectionEquality().equals(other.isCanceled, isCanceled) &&
          const DeepCollectionEquality().equals(other.isExpiring, isExpiring) &&
          const DeepCollectionEquality().equals(other.pricing, pricing) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(expirationDate),
    const DeepCollectionEquality().hash(isCanceled),
    const DeepCollectionEquality().hash(isExpiring),
    const DeepCollectionEquality().hash(pricing),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension StarSubscriptionsDataClassExtensions on StarSubscriptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarSubscriptions &&
          const DeepCollectionEquality().equals(other.starAmount, starAmount) &&
          const DeepCollectionEquality().equals(
            other.subscriptions,
            subscriptions,
          ) &&
          const DeepCollectionEquality().equals(
            other.requiredStarCount,
            requiredStarCount,
          ) &&
          const DeepCollectionEquality().equals(other.nextOffset, nextOffset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(starAmount),
    const DeepCollectionEquality().hash(subscriptions),
    const DeepCollectionEquality().hash(requiredStarCount),
    const DeepCollectionEquality().hash(nextOffset),
  ]);
}

extension AffiliateTypeDataClassExtensions on AffiliateType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is AffiliateType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AffiliateTypeCurrentUserDataClassExtensions
    on AffiliateTypeCurrentUser {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is AffiliateTypeCurrentUser);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AffiliateTypeBotDataClassExtensions on AffiliateTypeBot {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AffiliateTypeBot &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension AffiliateTypeChannelDataClassExtensions on AffiliateTypeChannel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AffiliateTypeChannel &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension AffiliateProgramSortOrderDataClassExtensions
    on AffiliateProgramSortOrder {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is AffiliateProgramSortOrder);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AffiliateProgramSortOrderProfitabilityDataClassExtensions
    on AffiliateProgramSortOrderProfitability {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AffiliateProgramSortOrderProfitability);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AffiliateProgramSortOrderCreationDateDataClassExtensions
    on AffiliateProgramSortOrderCreationDate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AffiliateProgramSortOrderCreationDate);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AffiliateProgramSortOrderRevenueDataClassExtensions
    on AffiliateProgramSortOrderRevenue {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AffiliateProgramSortOrderRevenue);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AffiliateProgramParametersDataClassExtensions
    on AffiliateProgramParameters {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AffiliateProgramParameters &&
          const DeepCollectionEquality().equals(
            other.commissionPerMille,
            commissionPerMille,
          ) &&
          const DeepCollectionEquality().equals(other.monthCount, monthCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(commissionPerMille),
    const DeepCollectionEquality().hash(monthCount),
  ]);
}

extension AffiliateProgramInfoDataClassExtensions on AffiliateProgramInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AffiliateProgramInfo &&
          const DeepCollectionEquality().equals(other.parameters, parameters) &&
          const DeepCollectionEquality().equals(other.endDate, endDate) &&
          const DeepCollectionEquality().equals(
            other.dailyRevenuePerUserAmount,
            dailyRevenuePerUserAmount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(parameters),
    const DeepCollectionEquality().hash(endDate),
    const DeepCollectionEquality().hash(dailyRevenuePerUserAmount),
  ]);
}

extension AffiliateInfoDataClassExtensions on AffiliateInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AffiliateInfo &&
          const DeepCollectionEquality().equals(
            other.commissionPerMille,
            commissionPerMille,
          ) &&
          const DeepCollectionEquality().equals(
            other.affiliateChatId,
            affiliateChatId,
          ) &&
          const DeepCollectionEquality().equals(other.starAmount, starAmount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(commissionPerMille),
    const DeepCollectionEquality().hash(affiliateChatId),
    const DeepCollectionEquality().hash(starAmount),
  ]);
}

extension FoundAffiliateProgramDataClassExtensions on FoundAffiliateProgram {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FoundAffiliateProgram &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.info, info));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(info),
  ]);
}

extension FoundAffiliateProgramsDataClassExtensions on FoundAffiliatePrograms {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FoundAffiliatePrograms &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.programs, programs) &&
          const DeepCollectionEquality().equals(other.nextOffset, nextOffset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(programs),
    const DeepCollectionEquality().hash(nextOffset),
  ]);
}

extension ConnectedAffiliateProgramDataClassExtensions
    on ConnectedAffiliateProgram {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ConnectedAffiliateProgram &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.parameters, parameters) &&
          const DeepCollectionEquality().equals(
            other.connectionDate,
            connectionDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.isDisconnected,
            isDisconnected,
          ) &&
          const DeepCollectionEquality().equals(other.userCount, userCount) &&
          const DeepCollectionEquality().equals(
            other.revenueStarCount,
            revenueStarCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(parameters),
    const DeepCollectionEquality().hash(connectionDate),
    const DeepCollectionEquality().hash(isDisconnected),
    const DeepCollectionEquality().hash(userCount),
    const DeepCollectionEquality().hash(revenueStarCount),
  ]);
}

extension ConnectedAffiliateProgramsDataClassExtensions
    on ConnectedAffiliatePrograms {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ConnectedAffiliatePrograms &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.programs, programs) &&
          const DeepCollectionEquality().equals(other.nextOffset, nextOffset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(programs),
    const DeepCollectionEquality().hash(nextOffset),
  ]);
}

extension ProductInfoDataClassExtensions on ProductInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ProductInfo &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ) &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(description),
    const DeepCollectionEquality().hash(photo),
  ]);
}

extension PremiumPaymentOptionDataClassExtensions on PremiumPaymentOption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumPaymentOption &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(
            other.discountPercentage,
            discountPercentage,
          ) &&
          const DeepCollectionEquality().equals(other.monthCount, monthCount) &&
          const DeepCollectionEquality().equals(
            other.storeProductId,
            storeProductId,
          ) &&
          const DeepCollectionEquality().equals(
            other.paymentLink,
            paymentLink,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(discountPercentage),
    const DeepCollectionEquality().hash(monthCount),
    const DeepCollectionEquality().hash(storeProductId),
    const DeepCollectionEquality().hash(paymentLink),
  ]);
}

extension PremiumStatePaymentOptionDataClassExtensions
    on PremiumStatePaymentOption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumStatePaymentOption &&
          const DeepCollectionEquality().equals(
            other.paymentOption,
            paymentOption,
          ) &&
          const DeepCollectionEquality().equals(other.isCurrent, isCurrent) &&
          const DeepCollectionEquality().equals(other.isUpgrade, isUpgrade) &&
          const DeepCollectionEquality().equals(
            other.lastTransactionId,
            lastTransactionId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(paymentOption),
    const DeepCollectionEquality().hash(isCurrent),
    const DeepCollectionEquality().hash(isUpgrade),
    const DeepCollectionEquality().hash(lastTransactionId),
  ]);
}

extension PremiumGiftPaymentOptionDataClassExtensions
    on PremiumGiftPaymentOption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumGiftPaymentOption &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(other.starCount, starCount) &&
          const DeepCollectionEquality().equals(
            other.discountPercentage,
            discountPercentage,
          ) &&
          const DeepCollectionEquality().equals(other.monthCount, monthCount) &&
          const DeepCollectionEquality().equals(
            other.storeProductId,
            storeProductId,
          ) &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(starCount),
    const DeepCollectionEquality().hash(discountPercentage),
    const DeepCollectionEquality().hash(monthCount),
    const DeepCollectionEquality().hash(storeProductId),
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension PremiumGiftPaymentOptionsDataClassExtensions
    on PremiumGiftPaymentOptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumGiftPaymentOptions &&
          const DeepCollectionEquality().equals(other.options, options));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(options),
  ]);
}

extension PremiumGiveawayPaymentOptionDataClassExtensions
    on PremiumGiveawayPaymentOption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumGiveawayPaymentOption &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(
            other.winnerCount,
            winnerCount,
          ) &&
          const DeepCollectionEquality().equals(other.monthCount, monthCount) &&
          const DeepCollectionEquality().equals(
            other.storeProductId,
            storeProductId,
          ) &&
          const DeepCollectionEquality().equals(
            other.storeProductQuantity,
            storeProductQuantity,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(winnerCount),
    const DeepCollectionEquality().hash(monthCount),
    const DeepCollectionEquality().hash(storeProductId),
    const DeepCollectionEquality().hash(storeProductQuantity),
  ]);
}

extension PremiumGiveawayPaymentOptionsDataClassExtensions
    on PremiumGiveawayPaymentOptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumGiveawayPaymentOptions &&
          const DeepCollectionEquality().equals(other.options, options));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(options),
  ]);
}

extension PremiumGiftCodeInfoDataClassExtensions on PremiumGiftCodeInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumGiftCodeInfo &&
          const DeepCollectionEquality().equals(other.creatorId, creatorId) &&
          const DeepCollectionEquality().equals(
            other.creationDate,
            creationDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.isFromGiveaway,
            isFromGiveaway,
          ) &&
          const DeepCollectionEquality().equals(
            other.giveawayMessageId,
            giveawayMessageId,
          ) &&
          const DeepCollectionEquality().equals(other.monthCount, monthCount) &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.useDate, useDate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(creatorId),
    const DeepCollectionEquality().hash(creationDate),
    const DeepCollectionEquality().hash(isFromGiveaway),
    const DeepCollectionEquality().hash(giveawayMessageId),
    const DeepCollectionEquality().hash(monthCount),
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(useDate),
  ]);
}

extension StarPaymentOptionDataClassExtensions on StarPaymentOption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarPaymentOption &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(other.starCount, starCount) &&
          const DeepCollectionEquality().equals(
            other.storeProductId,
            storeProductId,
          ) &&
          const DeepCollectionEquality().equals(
            other.isAdditional,
            isAdditional,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(starCount),
    const DeepCollectionEquality().hash(storeProductId),
    const DeepCollectionEquality().hash(isAdditional),
  ]);
}

extension StarPaymentOptionsDataClassExtensions on StarPaymentOptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarPaymentOptions &&
          const DeepCollectionEquality().equals(other.options, options));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(options),
  ]);
}

extension StarGiveawayWinnerOptionDataClassExtensions
    on StarGiveawayWinnerOption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarGiveawayWinnerOption &&
          const DeepCollectionEquality().equals(
            other.winnerCount,
            winnerCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.wonStarCount,
            wonStarCount,
          ) &&
          const DeepCollectionEquality().equals(other.isDefault, isDefault));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(winnerCount),
    const DeepCollectionEquality().hash(wonStarCount),
    const DeepCollectionEquality().hash(isDefault),
  ]);
}

extension StarGiveawayPaymentOptionDataClassExtensions
    on StarGiveawayPaymentOption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarGiveawayPaymentOption &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(other.starCount, starCount) &&
          const DeepCollectionEquality().equals(
            other.storeProductId,
            storeProductId,
          ) &&
          const DeepCollectionEquality().equals(
            other.yearlyBoostCount,
            yearlyBoostCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.winnerOptions,
            winnerOptions,
          ) &&
          const DeepCollectionEquality().equals(other.isDefault, isDefault) &&
          const DeepCollectionEquality().equals(
            other.isAdditional,
            isAdditional,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(starCount),
    const DeepCollectionEquality().hash(storeProductId),
    const DeepCollectionEquality().hash(yearlyBoostCount),
    const DeepCollectionEquality().hash(winnerOptions),
    const DeepCollectionEquality().hash(isDefault),
    const DeepCollectionEquality().hash(isAdditional),
  ]);
}

extension StarGiveawayPaymentOptionsDataClassExtensions
    on StarGiveawayPaymentOptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarGiveawayPaymentOptions &&
          const DeepCollectionEquality().equals(other.options, options));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(options),
  ]);
}

extension AcceptedGiftTypesDataClassExtensions on AcceptedGiftTypes {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AcceptedGiftTypes &&
          const DeepCollectionEquality().equals(
            other.unlimitedGifts,
            unlimitedGifts,
          ) &&
          const DeepCollectionEquality().equals(
            other.limitedGifts,
            limitedGifts,
          ) &&
          const DeepCollectionEquality().equals(
            other.upgradedGifts,
            upgradedGifts,
          ) &&
          const DeepCollectionEquality().equals(
            other.premiumSubscription,
            premiumSubscription,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(unlimitedGifts),
    const DeepCollectionEquality().hash(limitedGifts),
    const DeepCollectionEquality().hash(upgradedGifts),
    const DeepCollectionEquality().hash(premiumSubscription),
  ]);
}

extension GiftSettingsDataClassExtensions on GiftSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GiftSettings &&
          const DeepCollectionEquality().equals(
            other.showGiftButton,
            showGiftButton,
          ) &&
          const DeepCollectionEquality().equals(
            other.acceptedGiftTypes,
            acceptedGiftTypes,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(showGiftButton),
    const DeepCollectionEquality().hash(acceptedGiftTypes),
  ]);
}

extension UpgradedGiftModelDataClassExtensions on UpgradedGiftModel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpgradedGiftModel &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.sticker, sticker) &&
          const DeepCollectionEquality().equals(
            other.rarityPerMille,
            rarityPerMille,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(sticker),
    const DeepCollectionEquality().hash(rarityPerMille),
  ]);
}

extension UpgradedGiftSymbolDataClassExtensions on UpgradedGiftSymbol {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpgradedGiftSymbol &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.sticker, sticker) &&
          const DeepCollectionEquality().equals(
            other.rarityPerMille,
            rarityPerMille,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(sticker),
    const DeepCollectionEquality().hash(rarityPerMille),
  ]);
}

extension UpgradedGiftBackdropColorsDataClassExtensions
    on UpgradedGiftBackdropColors {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpgradedGiftBackdropColors &&
          const DeepCollectionEquality().equals(
            other.centerColor,
            centerColor,
          ) &&
          const DeepCollectionEquality().equals(other.edgeColor, edgeColor) &&
          const DeepCollectionEquality().equals(
            other.symbolColor,
            symbolColor,
          ) &&
          const DeepCollectionEquality().equals(other.textColor, textColor));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(centerColor),
    const DeepCollectionEquality().hash(edgeColor),
    const DeepCollectionEquality().hash(symbolColor),
    const DeepCollectionEquality().hash(textColor),
  ]);
}

extension UpgradedGiftBackdropDataClassExtensions on UpgradedGiftBackdrop {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpgradedGiftBackdrop &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.colors, colors) &&
          const DeepCollectionEquality().equals(
            other.rarityPerMille,
            rarityPerMille,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(colors),
    const DeepCollectionEquality().hash(rarityPerMille),
  ]);
}

extension UpgradedGiftOriginalDetailsDataClassExtensions
    on UpgradedGiftOriginalDetails {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpgradedGiftOriginalDetails &&
          const DeepCollectionEquality().equals(other.senderId, senderId) &&
          const DeepCollectionEquality().equals(other.receiverId, receiverId) &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.date, date));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(senderId),
    const DeepCollectionEquality().hash(receiverId),
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(date),
  ]);
}

extension GiftDataClassExtensions on Gift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Gift &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.sticker, sticker) &&
          const DeepCollectionEquality().equals(other.starCount, starCount) &&
          const DeepCollectionEquality().equals(
            other.defaultSellStarCount,
            defaultSellStarCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.upgradeStarCount,
            upgradeStarCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.isForBirthday,
            isForBirthday,
          ) &&
          const DeepCollectionEquality().equals(
            other.remainingCount,
            remainingCount,
          ) &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(
            other.firstSendDate,
            firstSendDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.lastSendDate,
            lastSendDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(sticker),
    const DeepCollectionEquality().hash(starCount),
    const DeepCollectionEquality().hash(defaultSellStarCount),
    const DeepCollectionEquality().hash(upgradeStarCount),
    const DeepCollectionEquality().hash(isForBirthday),
    const DeepCollectionEquality().hash(remainingCount),
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(firstSendDate),
    const DeepCollectionEquality().hash(lastSendDate),
  ]);
}

extension UpgradedGiftDataClassExtensions on UpgradedGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpgradedGift &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.number, number) &&
          const DeepCollectionEquality().equals(
            other.totalUpgradedCount,
            totalUpgradedCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.maxUpgradedCount,
            maxUpgradedCount,
          ) &&
          const DeepCollectionEquality().equals(other.ownerId, ownerId) &&
          const DeepCollectionEquality().equals(
            other.ownerAddress,
            ownerAddress,
          ) &&
          const DeepCollectionEquality().equals(other.ownerName, ownerName) &&
          const DeepCollectionEquality().equals(
            other.giftAddress,
            giftAddress,
          ) &&
          const DeepCollectionEquality().equals(other.model, model) &&
          const DeepCollectionEquality().equals(other.symbol, symbol) &&
          const DeepCollectionEquality().equals(other.backdrop, backdrop) &&
          const DeepCollectionEquality().equals(
            other.originalDetails,
            originalDetails,
          ) &&
          const DeepCollectionEquality().equals(
            other.resaleStarCount,
            resaleStarCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(number),
    const DeepCollectionEquality().hash(totalUpgradedCount),
    const DeepCollectionEquality().hash(maxUpgradedCount),
    const DeepCollectionEquality().hash(ownerId),
    const DeepCollectionEquality().hash(ownerAddress),
    const DeepCollectionEquality().hash(ownerName),
    const DeepCollectionEquality().hash(giftAddress),
    const DeepCollectionEquality().hash(model),
    const DeepCollectionEquality().hash(symbol),
    const DeepCollectionEquality().hash(backdrop),
    const DeepCollectionEquality().hash(originalDetails),
    const DeepCollectionEquality().hash(resaleStarCount),
  ]);
}

extension UpgradeGiftResultDataClassExtensions on UpgradeGiftResult {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpgradeGiftResult &&
          const DeepCollectionEquality().equals(other.gift, gift) &&
          const DeepCollectionEquality().equals(
            other.receivedGiftId,
            receivedGiftId,
          ) &&
          const DeepCollectionEquality().equals(other.isSaved, isSaved) &&
          const DeepCollectionEquality().equals(
            other.canBeTransferred,
            canBeTransferred,
          ) &&
          const DeepCollectionEquality().equals(
            other.transferStarCount,
            transferStarCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.nextTransferDate,
            nextTransferDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.nextResaleDate,
            nextResaleDate,
          ) &&
          const DeepCollectionEquality().equals(other.exportDate, exportDate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(gift),
    const DeepCollectionEquality().hash(receivedGiftId),
    const DeepCollectionEquality().hash(isSaved),
    const DeepCollectionEquality().hash(canBeTransferred),
    const DeepCollectionEquality().hash(transferStarCount),
    const DeepCollectionEquality().hash(nextTransferDate),
    const DeepCollectionEquality().hash(nextResaleDate),
    const DeepCollectionEquality().hash(exportDate),
  ]);
}

extension AvailableGiftDataClassExtensions on AvailableGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AvailableGift &&
          const DeepCollectionEquality().equals(other.gift, gift) &&
          const DeepCollectionEquality().equals(
            other.resaleCount,
            resaleCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.minResaleStarCount,
            minResaleStarCount,
          ) &&
          const DeepCollectionEquality().equals(other.title, title));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(gift),
    const DeepCollectionEquality().hash(resaleCount),
    const DeepCollectionEquality().hash(minResaleStarCount),
    const DeepCollectionEquality().hash(title),
  ]);
}

extension AvailableGiftsDataClassExtensions on AvailableGifts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AvailableGifts &&
          const DeepCollectionEquality().equals(other.gifts, gifts));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(gifts)]);
}

extension UpgradedGiftAttributeIdDataClassExtensions
    on UpgradedGiftAttributeId {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is UpgradedGiftAttributeId);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UpgradedGiftAttributeIdModelDataClassExtensions
    on UpgradedGiftAttributeIdModel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpgradedGiftAttributeIdModel &&
          const DeepCollectionEquality().equals(other.stickerId, stickerId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerId),
  ]);
}

extension UpgradedGiftAttributeIdSymbolDataClassExtensions
    on UpgradedGiftAttributeIdSymbol {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpgradedGiftAttributeIdSymbol &&
          const DeepCollectionEquality().equals(other.stickerId, stickerId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerId),
  ]);
}

extension UpgradedGiftAttributeIdBackdropDataClassExtensions
    on UpgradedGiftAttributeIdBackdrop {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpgradedGiftAttributeIdBackdrop &&
          const DeepCollectionEquality().equals(other.backdropId, backdropId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(backdropId),
  ]);
}

extension UpgradedGiftModelCountDataClassExtensions on UpgradedGiftModelCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpgradedGiftModelCount &&
          const DeepCollectionEquality().equals(other.model, model) &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(model),
    const DeepCollectionEquality().hash(totalCount),
  ]);
}

extension UpgradedGiftSymbolCountDataClassExtensions
    on UpgradedGiftSymbolCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpgradedGiftSymbolCount &&
          const DeepCollectionEquality().equals(other.symbol, symbol) &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(symbol),
    const DeepCollectionEquality().hash(totalCount),
  ]);
}

extension UpgradedGiftBackdropCountDataClassExtensions
    on UpgradedGiftBackdropCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpgradedGiftBackdropCount &&
          const DeepCollectionEquality().equals(other.backdrop, backdrop) &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(backdrop),
    const DeepCollectionEquality().hash(totalCount),
  ]);
}

extension GiftForResaleOrderDataClassExtensions on GiftForResaleOrder {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GiftForResaleOrder);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GiftForResaleOrderPriceDataClassExtensions
    on GiftForResaleOrderPrice {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GiftForResaleOrderPrice);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GiftForResaleOrderPriceChangeDateDataClassExtensions
    on GiftForResaleOrderPriceChangeDate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GiftForResaleOrderPriceChangeDate);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GiftForResaleOrderNumberDataClassExtensions
    on GiftForResaleOrderNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GiftForResaleOrderNumber);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GiftForResaleDataClassExtensions on GiftForResale {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GiftForResale &&
          const DeepCollectionEquality().equals(other.gift, gift) &&
          const DeepCollectionEquality().equals(
            other.receivedGiftId,
            receivedGiftId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(gift),
    const DeepCollectionEquality().hash(receivedGiftId),
  ]);
}

extension GiftsForResaleDataClassExtensions on GiftsForResale {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GiftsForResale &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.gifts, gifts) &&
          const DeepCollectionEquality().equals(other.models, models) &&
          const DeepCollectionEquality().equals(other.symbols, symbols) &&
          const DeepCollectionEquality().equals(other.backdrops, backdrops) &&
          const DeepCollectionEquality().equals(other.nextOffset, nextOffset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(gifts),
    const DeepCollectionEquality().hash(models),
    const DeepCollectionEquality().hash(symbols),
    const DeepCollectionEquality().hash(backdrops),
    const DeepCollectionEquality().hash(nextOffset),
  ]);
}

extension SentGiftDataClassExtensions on SentGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SentGift);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SentGiftRegularDataClassExtensions on SentGiftRegular {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SentGiftRegular &&
          const DeepCollectionEquality().equals(other.gift, gift));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(gift)]);
}

extension SentGiftUpgradedDataClassExtensions on SentGiftUpgraded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SentGiftUpgraded &&
          const DeepCollectionEquality().equals(other.gift, gift));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(gift)]);
}

extension ReceivedGiftDataClassExtensions on ReceivedGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReceivedGift &&
          const DeepCollectionEquality().equals(
            other.receivedGiftId,
            receivedGiftId,
          ) &&
          const DeepCollectionEquality().equals(other.senderId, senderId) &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.isPrivate, isPrivate) &&
          const DeepCollectionEquality().equals(other.isSaved, isSaved) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned) &&
          const DeepCollectionEquality().equals(
            other.canBeUpgraded,
            canBeUpgraded,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeTransferred,
            canBeTransferred,
          ) &&
          const DeepCollectionEquality().equals(
            other.wasRefunded,
            wasRefunded,
          ) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(other.gift, gift) &&
          const DeepCollectionEquality().equals(
            other.sellStarCount,
            sellStarCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.prepaidUpgradeStarCount,
            prepaidUpgradeStarCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.transferStarCount,
            transferStarCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.nextTransferDate,
            nextTransferDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.nextResaleDate,
            nextResaleDate,
          ) &&
          const DeepCollectionEquality().equals(other.exportDate, exportDate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(receivedGiftId),
    const DeepCollectionEquality().hash(senderId),
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(isPrivate),
    const DeepCollectionEquality().hash(isSaved),
    const DeepCollectionEquality().hash(isPinned),
    const DeepCollectionEquality().hash(canBeUpgraded),
    const DeepCollectionEquality().hash(canBeTransferred),
    const DeepCollectionEquality().hash(wasRefunded),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(gift),
    const DeepCollectionEquality().hash(sellStarCount),
    const DeepCollectionEquality().hash(prepaidUpgradeStarCount),
    const DeepCollectionEquality().hash(transferStarCount),
    const DeepCollectionEquality().hash(nextTransferDate),
    const DeepCollectionEquality().hash(nextResaleDate),
    const DeepCollectionEquality().hash(exportDate),
  ]);
}

extension ReceivedGiftsDataClassExtensions on ReceivedGifts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReceivedGifts &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.gifts, gifts) &&
          const DeepCollectionEquality().equals(
            other.areNotificationsEnabled,
            areNotificationsEnabled,
          ) &&
          const DeepCollectionEquality().equals(other.nextOffset, nextOffset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(gifts),
    const DeepCollectionEquality().hash(areNotificationsEnabled),
    const DeepCollectionEquality().hash(nextOffset),
  ]);
}

extension GiftUpgradePreviewDataClassExtensions on GiftUpgradePreview {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GiftUpgradePreview &&
          const DeepCollectionEquality().equals(other.models, models) &&
          const DeepCollectionEquality().equals(other.symbols, symbols) &&
          const DeepCollectionEquality().equals(other.backdrops, backdrops));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(models),
    const DeepCollectionEquality().hash(symbols),
    const DeepCollectionEquality().hash(backdrops),
  ]);
}

extension StarTransactionDirectionDataClassExtensions
    on StarTransactionDirection {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StarTransactionDirection);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StarTransactionDirectionIncomingDataClassExtensions
    on StarTransactionDirectionIncoming {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionDirectionIncoming);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StarTransactionDirectionOutgoingDataClassExtensions
    on StarTransactionDirectionOutgoing {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionDirectionOutgoing);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StarTransactionTypeDataClassExtensions on StarTransactionType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StarTransactionType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StarTransactionTypePremiumBotDepositDataClassExtensions
    on StarTransactionTypePremiumBotDeposit {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypePremiumBotDeposit);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StarTransactionTypeAppStoreDepositDataClassExtensions
    on StarTransactionTypeAppStoreDeposit {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeAppStoreDeposit);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StarTransactionTypeGooglePlayDepositDataClassExtensions
    on StarTransactionTypeGooglePlayDeposit {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeGooglePlayDeposit);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StarTransactionTypeFragmentDepositDataClassExtensions
    on StarTransactionTypeFragmentDeposit {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeFragmentDeposit);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StarTransactionTypeUserDepositDataClassExtensions
    on StarTransactionTypeUserDeposit {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeUserDeposit &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension StarTransactionTypeGiveawayDepositDataClassExtensions
    on StarTransactionTypeGiveawayDeposit {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeGiveawayDeposit &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.giveawayMessageId,
            giveawayMessageId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(giveawayMessageId),
  ]);
}

extension StarTransactionTypeFragmentWithdrawalDataClassExtensions
    on StarTransactionTypeFragmentWithdrawal {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeFragmentWithdrawal &&
          const DeepCollectionEquality().equals(
            other.withdrawalState,
            withdrawalState,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(withdrawalState),
  ]);
}

extension StarTransactionTypeTelegramAdsWithdrawalDataClassExtensions
    on StarTransactionTypeTelegramAdsWithdrawal {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeTelegramAdsWithdrawal);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StarTransactionTypeTelegramApiUsageDataClassExtensions
    on StarTransactionTypeTelegramApiUsage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeTelegramApiUsage &&
          const DeepCollectionEquality().equals(
            other.requestCount,
            requestCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(requestCount),
  ]);
}

extension StarTransactionTypeBotPaidMediaPurchaseDataClassExtensions
    on StarTransactionTypeBotPaidMediaPurchase {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeBotPaidMediaPurchase &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.media, media));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(media),
  ]);
}

extension StarTransactionTypeBotPaidMediaSaleDataClassExtensions
    on StarTransactionTypeBotPaidMediaSale {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeBotPaidMediaSale &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.media, media) &&
          const DeepCollectionEquality().equals(other.payload, payload) &&
          const DeepCollectionEquality().equals(other.affiliate, affiliate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(media),
    const DeepCollectionEquality().hash(payload),
    const DeepCollectionEquality().hash(affiliate),
  ]);
}

extension StarTransactionTypeChannelPaidMediaPurchaseDataClassExtensions
    on StarTransactionTypeChannelPaidMediaPurchase {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeChannelPaidMediaPurchase &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.media, media));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(media),
  ]);
}

extension StarTransactionTypeChannelPaidMediaSaleDataClassExtensions
    on StarTransactionTypeChannelPaidMediaSale {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeChannelPaidMediaSale &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.media, media));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(media),
  ]);
}

extension StarTransactionTypeBotInvoicePurchaseDataClassExtensions
    on StarTransactionTypeBotInvoicePurchase {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeBotInvoicePurchase &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.productInfo,
            productInfo,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(productInfo),
  ]);
}

extension StarTransactionTypeBotInvoiceSaleDataClassExtensions
    on StarTransactionTypeBotInvoiceSale {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeBotInvoiceSale &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.productInfo,
            productInfo,
          ) &&
          const DeepCollectionEquality().equals(
            other.invoicePayload,
            invoicePayload,
          ) &&
          const DeepCollectionEquality().equals(other.affiliate, affiliate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(productInfo),
    const DeepCollectionEquality().hash(invoicePayload),
    const DeepCollectionEquality().hash(affiliate),
  ]);
}

extension StarTransactionTypeBotSubscriptionPurchaseDataClassExtensions
    on StarTransactionTypeBotSubscriptionPurchase {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeBotSubscriptionPurchase &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.subscriptionPeriod,
            subscriptionPeriod,
          ) &&
          const DeepCollectionEquality().equals(
            other.productInfo,
            productInfo,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(subscriptionPeriod),
    const DeepCollectionEquality().hash(productInfo),
  ]);
}

extension StarTransactionTypeBotSubscriptionSaleDataClassExtensions
    on StarTransactionTypeBotSubscriptionSale {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeBotSubscriptionSale &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.subscriptionPeriod,
            subscriptionPeriod,
          ) &&
          const DeepCollectionEquality().equals(
            other.productInfo,
            productInfo,
          ) &&
          const DeepCollectionEquality().equals(
            other.invoicePayload,
            invoicePayload,
          ) &&
          const DeepCollectionEquality().equals(other.affiliate, affiliate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(subscriptionPeriod),
    const DeepCollectionEquality().hash(productInfo),
    const DeepCollectionEquality().hash(invoicePayload),
    const DeepCollectionEquality().hash(affiliate),
  ]);
}

extension StarTransactionTypeChannelSubscriptionPurchaseDataClassExtensions
    on StarTransactionTypeChannelSubscriptionPurchase {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeChannelSubscriptionPurchase &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.subscriptionPeriod,
            subscriptionPeriod,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(subscriptionPeriod),
  ]);
}

extension StarTransactionTypeChannelSubscriptionSaleDataClassExtensions
    on StarTransactionTypeChannelSubscriptionSale {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeChannelSubscriptionSale &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.subscriptionPeriod,
            subscriptionPeriod,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(subscriptionPeriod),
  ]);
}

extension StarTransactionTypeGiftPurchaseDataClassExtensions
    on StarTransactionTypeGiftPurchase {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeGiftPurchase &&
          const DeepCollectionEquality().equals(other.ownerId, ownerId) &&
          const DeepCollectionEquality().equals(other.gift, gift));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(ownerId),
    const DeepCollectionEquality().hash(gift),
  ]);
}

extension StarTransactionTypeGiftTransferDataClassExtensions
    on StarTransactionTypeGiftTransfer {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeGiftTransfer &&
          const DeepCollectionEquality().equals(other.ownerId, ownerId) &&
          const DeepCollectionEquality().equals(other.gift, gift));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(ownerId),
    const DeepCollectionEquality().hash(gift),
  ]);
}

extension StarTransactionTypeGiftSaleDataClassExtensions
    on StarTransactionTypeGiftSale {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeGiftSale &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.gift, gift));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(gift),
  ]);
}

extension StarTransactionTypeGiftUpgradeDataClassExtensions
    on StarTransactionTypeGiftUpgrade {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeGiftUpgrade &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.gift, gift));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(gift),
  ]);
}

extension StarTransactionTypeUpgradedGiftPurchaseDataClassExtensions
    on StarTransactionTypeUpgradedGiftPurchase {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeUpgradedGiftPurchase &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.gift, gift));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(gift),
  ]);
}

extension StarTransactionTypeUpgradedGiftSaleDataClassExtensions
    on StarTransactionTypeUpgradedGiftSale {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeUpgradedGiftSale &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.gift, gift) &&
          const DeepCollectionEquality().equals(other.affiliate, affiliate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(gift),
    const DeepCollectionEquality().hash(affiliate),
  ]);
}

extension StarTransactionTypeChannelPaidReactionSendDataClassExtensions
    on StarTransactionTypeChannelPaidReactionSend {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeChannelPaidReactionSend &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension StarTransactionTypeChannelPaidReactionReceiveDataClassExtensions
    on StarTransactionTypeChannelPaidReactionReceive {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeChannelPaidReactionReceive &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension StarTransactionTypeAffiliateProgramCommissionDataClassExtensions
    on StarTransactionTypeAffiliateProgramCommission {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeAffiliateProgramCommission &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.commissionPerMille,
            commissionPerMille,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(commissionPerMille),
  ]);
}

extension StarTransactionTypePaidMessageSendDataClassExtensions
    on StarTransactionTypePaidMessageSend {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypePaidMessageSend &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageCount,
            messageCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageCount),
  ]);
}

extension StarTransactionTypePaidMessageReceiveDataClassExtensions
    on StarTransactionTypePaidMessageReceive {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypePaidMessageReceive &&
          const DeepCollectionEquality().equals(other.senderId, senderId) &&
          const DeepCollectionEquality().equals(
            other.messageCount,
            messageCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.commissionPerMille,
            commissionPerMille,
          ) &&
          const DeepCollectionEquality().equals(
            other.commissionStarAmount,
            commissionStarAmount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(senderId),
    const DeepCollectionEquality().hash(messageCount),
    const DeepCollectionEquality().hash(commissionPerMille),
    const DeepCollectionEquality().hash(commissionStarAmount),
  ]);
}

extension StarTransactionTypePremiumPurchaseDataClassExtensions
    on StarTransactionTypePremiumPurchase {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypePremiumPurchase &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.monthCount, monthCount) &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(monthCount),
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension StarTransactionTypeBusinessBotTransferSendDataClassExtensions
    on StarTransactionTypeBusinessBotTransferSend {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeBusinessBotTransferSend &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension StarTransactionTypeBusinessBotTransferReceiveDataClassExtensions
    on StarTransactionTypeBusinessBotTransferReceive {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeBusinessBotTransferReceive &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension StarTransactionTypeUnsupportedDataClassExtensions
    on StarTransactionTypeUnsupported {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactionTypeUnsupported);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StarTransactionDataClassExtensions on StarTransaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransaction &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.starAmount, starAmount) &&
          const DeepCollectionEquality().equals(other.isRefund, isRefund) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(starAmount),
    const DeepCollectionEquality().hash(isRefund),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension StarTransactionsDataClassExtensions on StarTransactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarTransactions &&
          const DeepCollectionEquality().equals(other.starAmount, starAmount) &&
          const DeepCollectionEquality().equals(
            other.transactions,
            transactions,
          ) &&
          const DeepCollectionEquality().equals(other.nextOffset, nextOffset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(starAmount),
    const DeepCollectionEquality().hash(transactions),
    const DeepCollectionEquality().hash(nextOffset),
  ]);
}

extension GiveawayParticipantStatusDataClassExtensions
    on GiveawayParticipantStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GiveawayParticipantStatus);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GiveawayParticipantStatusEligibleDataClassExtensions
    on GiveawayParticipantStatusEligible {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GiveawayParticipantStatusEligible);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GiveawayParticipantStatusParticipatingDataClassExtensions
    on GiveawayParticipantStatusParticipating {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GiveawayParticipantStatusParticipating);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GiveawayParticipantStatusAlreadyWasMemberDataClassExtensions
    on GiveawayParticipantStatusAlreadyWasMember {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GiveawayParticipantStatusAlreadyWasMember &&
          const DeepCollectionEquality().equals(
            other.joinedChatDate,
            joinedChatDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(joinedChatDate),
  ]);
}

extension GiveawayParticipantStatusAdministratorDataClassExtensions
    on GiveawayParticipantStatusAdministrator {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GiveawayParticipantStatusAdministrator &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension GiveawayParticipantStatusDisallowedCountryDataClassExtensions
    on GiveawayParticipantStatusDisallowedCountry {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GiveawayParticipantStatusDisallowedCountry &&
          const DeepCollectionEquality().equals(
            other.userCountryCode,
            userCountryCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userCountryCode),
  ]);
}

extension GiveawayInfoDataClassExtensions on GiveawayInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GiveawayInfo);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GiveawayInfoOngoingDataClassExtensions on GiveawayInfoOngoing {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GiveawayInfoOngoing &&
          const DeepCollectionEquality().equals(
            other.creationDate,
            creationDate,
          ) &&
          const DeepCollectionEquality().equals(other.status, status) &&
          const DeepCollectionEquality().equals(other.isEnded, isEnded));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(creationDate),
    const DeepCollectionEquality().hash(status),
    const DeepCollectionEquality().hash(isEnded),
  ]);
}

extension GiveawayInfoCompletedDataClassExtensions on GiveawayInfoCompleted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GiveawayInfoCompleted &&
          const DeepCollectionEquality().equals(
            other.creationDate,
            creationDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.actualWinnersSelectionDate,
            actualWinnersSelectionDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.wasRefunded,
            wasRefunded,
          ) &&
          const DeepCollectionEquality().equals(other.isWinner, isWinner) &&
          const DeepCollectionEquality().equals(
            other.winnerCount,
            winnerCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.activationCount,
            activationCount,
          ) &&
          const DeepCollectionEquality().equals(other.giftCode, giftCode) &&
          const DeepCollectionEquality().equals(
            other.wonStarCount,
            wonStarCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(creationDate),
    const DeepCollectionEquality().hash(actualWinnersSelectionDate),
    const DeepCollectionEquality().hash(wasRefunded),
    const DeepCollectionEquality().hash(isWinner),
    const DeepCollectionEquality().hash(winnerCount),
    const DeepCollectionEquality().hash(activationCount),
    const DeepCollectionEquality().hash(giftCode),
    const DeepCollectionEquality().hash(wonStarCount),
  ]);
}

extension GiveawayPrizeDataClassExtensions on GiveawayPrize {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GiveawayPrize);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GiveawayPrizePremiumDataClassExtensions on GiveawayPrizePremium {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GiveawayPrizePremium &&
          const DeepCollectionEquality().equals(other.monthCount, monthCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(monthCount),
  ]);
}

extension GiveawayPrizeStarsDataClassExtensions on GiveawayPrizeStars {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GiveawayPrizeStars &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension AccentColorDataClassExtensions on AccentColor {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AccentColor &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.builtInAccentColorId,
            builtInAccentColorId,
          ) &&
          const DeepCollectionEquality().equals(
            other.lightThemeColors,
            lightThemeColors,
          ) &&
          const DeepCollectionEquality().equals(
            other.darkThemeColors,
            darkThemeColors,
          ) &&
          const DeepCollectionEquality().equals(
            other.minChannelChatBoostLevel,
            minChannelChatBoostLevel,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(builtInAccentColorId),
    const DeepCollectionEquality().hash(lightThemeColors),
    const DeepCollectionEquality().hash(darkThemeColors),
    const DeepCollectionEquality().hash(minChannelChatBoostLevel),
  ]);
}

extension ProfileAccentColorsDataClassExtensions on ProfileAccentColors {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ProfileAccentColors &&
          const DeepCollectionEquality().equals(
            other.paletteColors,
            paletteColors,
          ) &&
          const DeepCollectionEquality().equals(
            other.backgroundColors,
            backgroundColors,
          ) &&
          const DeepCollectionEquality().equals(
            other.storyColors,
            storyColors,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(paletteColors),
    const DeepCollectionEquality().hash(backgroundColors),
    const DeepCollectionEquality().hash(storyColors),
  ]);
}

extension ProfileAccentColorDataClassExtensions on ProfileAccentColor {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ProfileAccentColor &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.lightThemeColors,
            lightThemeColors,
          ) &&
          const DeepCollectionEquality().equals(
            other.darkThemeColors,
            darkThemeColors,
          ) &&
          const DeepCollectionEquality().equals(
            other.minSupergroupChatBoostLevel,
            minSupergroupChatBoostLevel,
          ) &&
          const DeepCollectionEquality().equals(
            other.minChannelChatBoostLevel,
            minChannelChatBoostLevel,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(lightThemeColors),
    const DeepCollectionEquality().hash(darkThemeColors),
    const DeepCollectionEquality().hash(minSupergroupChatBoostLevel),
    const DeepCollectionEquality().hash(minChannelChatBoostLevel),
  ]);
}

extension EmojiStatusTypeDataClassExtensions on EmojiStatusType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is EmojiStatusType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension EmojiStatusTypeCustomEmojiDataClassExtensions
    on EmojiStatusTypeCustomEmoji {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmojiStatusTypeCustomEmoji &&
          const DeepCollectionEquality().equals(
            other.customEmojiId,
            customEmojiId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(customEmojiId),
  ]);
}

extension EmojiStatusTypeUpgradedGiftDataClassExtensions
    on EmojiStatusTypeUpgradedGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmojiStatusTypeUpgradedGift &&
          const DeepCollectionEquality().equals(
            other.upgradedGiftId,
            upgradedGiftId,
          ) &&
          const DeepCollectionEquality().equals(other.giftTitle, giftTitle) &&
          const DeepCollectionEquality().equals(other.giftName, giftName) &&
          const DeepCollectionEquality().equals(
            other.modelCustomEmojiId,
            modelCustomEmojiId,
          ) &&
          const DeepCollectionEquality().equals(
            other.symbolCustomEmojiId,
            symbolCustomEmojiId,
          ) &&
          const DeepCollectionEquality().equals(
            other.backdropColors,
            backdropColors,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(upgradedGiftId),
    const DeepCollectionEquality().hash(giftTitle),
    const DeepCollectionEquality().hash(giftName),
    const DeepCollectionEquality().hash(modelCustomEmojiId),
    const DeepCollectionEquality().hash(symbolCustomEmojiId),
    const DeepCollectionEquality().hash(backdropColors),
  ]);
}

extension EmojiStatusDataClassExtensions on EmojiStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmojiStatus &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(
            other.expirationDate,
            expirationDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(expirationDate),
  ]);
}

extension EmojiStatusesDataClassExtensions on EmojiStatuses {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmojiStatuses &&
          const DeepCollectionEquality().equals(
            other.emojiStatuses,
            emojiStatuses,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(emojiStatuses),
  ]);
}

extension EmojiStatusCustomEmojisDataClassExtensions
    on EmojiStatusCustomEmojis {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmojiStatusCustomEmojis &&
          const DeepCollectionEquality().equals(
            other.customEmojiIds,
            customEmojiIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(customEmojiIds),
  ]);
}

extension UsernamesDataClassExtensions on Usernames {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Usernames &&
          const DeepCollectionEquality().equals(
            other.activeUsernames,
            activeUsernames,
          ) &&
          const DeepCollectionEquality().equals(
            other.disabledUsernames,
            disabledUsernames,
          ) &&
          const DeepCollectionEquality().equals(
            other.editableUsername,
            editableUsername,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(activeUsernames),
    const DeepCollectionEquality().hash(disabledUsernames),
    const DeepCollectionEquality().hash(editableUsername),
  ]);
}

extension UserDataClassExtensions on User {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is User &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.firstName, firstName) &&
          const DeepCollectionEquality().equals(other.lastName, lastName) &&
          const DeepCollectionEquality().equals(other.usernames, usernames) &&
          const DeepCollectionEquality().equals(
            other.phoneNumber,
            phoneNumber,
          ) &&
          const DeepCollectionEquality().equals(other.status, status) &&
          const DeepCollectionEquality().equals(
            other.profilePhoto,
            profilePhoto,
          ) &&
          const DeepCollectionEquality().equals(
            other.accentColorId,
            accentColorId,
          ) &&
          const DeepCollectionEquality().equals(
            other.backgroundCustomEmojiId,
            backgroundCustomEmojiId,
          ) &&
          const DeepCollectionEquality().equals(
            other.profileAccentColorId,
            profileAccentColorId,
          ) &&
          const DeepCollectionEquality().equals(
            other.profileBackgroundCustomEmojiId,
            profileBackgroundCustomEmojiId,
          ) &&
          const DeepCollectionEquality().equals(
            other.emojiStatus,
            emojiStatus,
          ) &&
          const DeepCollectionEquality().equals(other.isContact, isContact) &&
          const DeepCollectionEquality().equals(
            other.isMutualContact,
            isMutualContact,
          ) &&
          const DeepCollectionEquality().equals(
            other.isCloseFriend,
            isCloseFriend,
          ) &&
          const DeepCollectionEquality().equals(
            other.verificationStatus,
            verificationStatus,
          ) &&
          const DeepCollectionEquality().equals(other.isPremium, isPremium) &&
          const DeepCollectionEquality().equals(other.isSupport, isSupport) &&
          const DeepCollectionEquality().equals(
            other.restrictionReason,
            restrictionReason,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasActiveStories,
            hasActiveStories,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasUnreadActiveStories,
            hasUnreadActiveStories,
          ) &&
          const DeepCollectionEquality().equals(
            other.restrictsNewChats,
            restrictsNewChats,
          ) &&
          const DeepCollectionEquality().equals(
            other.paidMessageStarCount,
            paidMessageStarCount,
          ) &&
          const DeepCollectionEquality().equals(other.haveAccess, haveAccess) &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(
            other.languageCode,
            languageCode,
          ) &&
          const DeepCollectionEquality().equals(
            other.addedToAttachmentMenu,
            addedToAttachmentMenu,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(firstName),
    const DeepCollectionEquality().hash(lastName),
    const DeepCollectionEquality().hash(usernames),
    const DeepCollectionEquality().hash(phoneNumber),
    const DeepCollectionEquality().hash(status),
    const DeepCollectionEquality().hash(profilePhoto),
    const DeepCollectionEquality().hash(accentColorId),
    const DeepCollectionEquality().hash(backgroundCustomEmojiId),
    const DeepCollectionEquality().hash(profileAccentColorId),
    const DeepCollectionEquality().hash(profileBackgroundCustomEmojiId),
    const DeepCollectionEquality().hash(emojiStatus),
    const DeepCollectionEquality().hash(isContact),
    const DeepCollectionEquality().hash(isMutualContact),
    const DeepCollectionEquality().hash(isCloseFriend),
    const DeepCollectionEquality().hash(verificationStatus),
    const DeepCollectionEquality().hash(isPremium),
    const DeepCollectionEquality().hash(isSupport),
    const DeepCollectionEquality().hash(restrictionReason),
    const DeepCollectionEquality().hash(hasActiveStories),
    const DeepCollectionEquality().hash(hasUnreadActiveStories),
    const DeepCollectionEquality().hash(restrictsNewChats),
    const DeepCollectionEquality().hash(paidMessageStarCount),
    const DeepCollectionEquality().hash(haveAccess),
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(languageCode),
    const DeepCollectionEquality().hash(addedToAttachmentMenu),
  ]);
}

extension BotInfoDataClassExtensions on BotInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotInfo &&
          const DeepCollectionEquality().equals(
            other.shortDescription,
            shortDescription,
          ) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ) &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(other.animation, animation) &&
          const DeepCollectionEquality().equals(other.menuButton, menuButton) &&
          const DeepCollectionEquality().equals(other.commands, commands) &&
          const DeepCollectionEquality().equals(
            other.privacyPolicyUrl,
            privacyPolicyUrl,
          ) &&
          const DeepCollectionEquality().equals(
            other.defaultGroupAdministratorRights,
            defaultGroupAdministratorRights,
          ) &&
          const DeepCollectionEquality().equals(
            other.defaultChannelAdministratorRights,
            defaultChannelAdministratorRights,
          ) &&
          const DeepCollectionEquality().equals(
            other.affiliateProgram,
            affiliateProgram,
          ) &&
          const DeepCollectionEquality().equals(
            other.webAppBackgroundLightColor,
            webAppBackgroundLightColor,
          ) &&
          const DeepCollectionEquality().equals(
            other.webAppBackgroundDarkColor,
            webAppBackgroundDarkColor,
          ) &&
          const DeepCollectionEquality().equals(
            other.webAppHeaderLightColor,
            webAppHeaderLightColor,
          ) &&
          const DeepCollectionEquality().equals(
            other.webAppHeaderDarkColor,
            webAppHeaderDarkColor,
          ) &&
          const DeepCollectionEquality().equals(
            other.verificationParameters,
            verificationParameters,
          ) &&
          const DeepCollectionEquality().equals(
            other.canGetRevenueStatistics,
            canGetRevenueStatistics,
          ) &&
          const DeepCollectionEquality().equals(
            other.canManageEmojiStatus,
            canManageEmojiStatus,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasMediaPreviews,
            hasMediaPreviews,
          ) &&
          const DeepCollectionEquality().equals(
            other.editCommandsLink,
            editCommandsLink,
          ) &&
          const DeepCollectionEquality().equals(
            other.editDescriptionLink,
            editDescriptionLink,
          ) &&
          const DeepCollectionEquality().equals(
            other.editDescriptionMediaLink,
            editDescriptionMediaLink,
          ) &&
          const DeepCollectionEquality().equals(
            other.editSettingsLink,
            editSettingsLink,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortDescription),
    const DeepCollectionEquality().hash(description),
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(animation),
    const DeepCollectionEquality().hash(menuButton),
    const DeepCollectionEquality().hash(commands),
    const DeepCollectionEquality().hash(privacyPolicyUrl),
    const DeepCollectionEquality().hash(defaultGroupAdministratorRights),
    const DeepCollectionEquality().hash(defaultChannelAdministratorRights),
    const DeepCollectionEquality().hash(affiliateProgram),
    const DeepCollectionEquality().hash(webAppBackgroundLightColor),
    const DeepCollectionEquality().hash(webAppBackgroundDarkColor),
    const DeepCollectionEquality().hash(webAppHeaderLightColor),
    const DeepCollectionEquality().hash(webAppHeaderDarkColor),
    const DeepCollectionEquality().hash(verificationParameters),
    const DeepCollectionEquality().hash(canGetRevenueStatistics),
    const DeepCollectionEquality().hash(canManageEmojiStatus),
    const DeepCollectionEquality().hash(hasMediaPreviews),
    const DeepCollectionEquality().hash(editCommandsLink),
    const DeepCollectionEquality().hash(editDescriptionLink),
    const DeepCollectionEquality().hash(editDescriptionMediaLink),
    const DeepCollectionEquality().hash(editSettingsLink),
  ]);
}

extension UserFullInfoDataClassExtensions on UserFullInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserFullInfo &&
          const DeepCollectionEquality().equals(
            other.personalPhoto,
            personalPhoto,
          ) &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(
            other.publicPhoto,
            publicPhoto,
          ) &&
          const DeepCollectionEquality().equals(other.blockList, blockList) &&
          const DeepCollectionEquality().equals(
            other.canBeCalled,
            canBeCalled,
          ) &&
          const DeepCollectionEquality().equals(
            other.supportsVideoCalls,
            supportsVideoCalls,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasPrivateCalls,
            hasPrivateCalls,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasPrivateForwards,
            hasPrivateForwards,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasRestrictedVoiceAndVideoNoteMessages,
            hasRestrictedVoiceAndVideoNoteMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasPostedToProfileStories,
            hasPostedToProfileStories,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasSponsoredMessagesEnabled,
            hasSponsoredMessagesEnabled,
          ) &&
          const DeepCollectionEquality().equals(
            other.needPhoneNumberPrivacyException,
            needPhoneNumberPrivacyException,
          ) &&
          const DeepCollectionEquality().equals(
            other.setChatBackground,
            setChatBackground,
          ) &&
          const DeepCollectionEquality().equals(other.bio, bio) &&
          const DeepCollectionEquality().equals(other.birthdate, birthdate) &&
          const DeepCollectionEquality().equals(
            other.personalChatId,
            personalChatId,
          ) &&
          const DeepCollectionEquality().equals(other.giftCount, giftCount) &&
          const DeepCollectionEquality().equals(
            other.groupInCommonCount,
            groupInCommonCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.incomingPaidMessageStarCount,
            incomingPaidMessageStarCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.outgoingPaidMessageStarCount,
            outgoingPaidMessageStarCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.giftSettings,
            giftSettings,
          ) &&
          const DeepCollectionEquality().equals(
            other.botVerification,
            botVerification,
          ) &&
          const DeepCollectionEquality().equals(
            other.businessInfo,
            businessInfo,
          ) &&
          const DeepCollectionEquality().equals(other.botInfo, botInfo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(personalPhoto),
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(publicPhoto),
    const DeepCollectionEquality().hash(blockList),
    const DeepCollectionEquality().hash(canBeCalled),
    const DeepCollectionEquality().hash(supportsVideoCalls),
    const DeepCollectionEquality().hash(hasPrivateCalls),
    const DeepCollectionEquality().hash(hasPrivateForwards),
    const DeepCollectionEquality().hash(hasRestrictedVoiceAndVideoNoteMessages),
    const DeepCollectionEquality().hash(hasPostedToProfileStories),
    const DeepCollectionEquality().hash(hasSponsoredMessagesEnabled),
    const DeepCollectionEquality().hash(needPhoneNumberPrivacyException),
    const DeepCollectionEquality().hash(setChatBackground),
    const DeepCollectionEquality().hash(bio),
    const DeepCollectionEquality().hash(birthdate),
    const DeepCollectionEquality().hash(personalChatId),
    const DeepCollectionEquality().hash(giftCount),
    const DeepCollectionEquality().hash(groupInCommonCount),
    const DeepCollectionEquality().hash(incomingPaidMessageStarCount),
    const DeepCollectionEquality().hash(outgoingPaidMessageStarCount),
    const DeepCollectionEquality().hash(giftSettings),
    const DeepCollectionEquality().hash(botVerification),
    const DeepCollectionEquality().hash(businessInfo),
    const DeepCollectionEquality().hash(botInfo),
  ]);
}

extension UsersDataClassExtensions on Users {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Users &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.userIds, userIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(userIds),
  ]);
}

extension FoundUsersDataClassExtensions on FoundUsers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FoundUsers &&
          const DeepCollectionEquality().equals(other.userIds, userIds) &&
          const DeepCollectionEquality().equals(other.nextOffset, nextOffset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userIds),
    const DeepCollectionEquality().hash(nextOffset),
  ]);
}

extension ChatAdministratorDataClassExtensions on ChatAdministrator {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatAdministrator &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.customTitle,
            customTitle,
          ) &&
          const DeepCollectionEquality().equals(other.isOwner, isOwner));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(customTitle),
    const DeepCollectionEquality().hash(isOwner),
  ]);
}

extension ChatAdministratorsDataClassExtensions on ChatAdministrators {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatAdministrators &&
          const DeepCollectionEquality().equals(
            other.administrators,
            administrators,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(administrators),
  ]);
}

extension ChatMemberStatusDataClassExtensions on ChatMemberStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatMemberStatus);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatMemberStatusCreatorDataClassExtensions
    on ChatMemberStatusCreator {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatMemberStatusCreator &&
          const DeepCollectionEquality().equals(
            other.customTitle,
            customTitle,
          ) &&
          const DeepCollectionEquality().equals(
            other.isAnonymous,
            isAnonymous,
          ) &&
          const DeepCollectionEquality().equals(other.isMember, isMember));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(customTitle),
    const DeepCollectionEquality().hash(isAnonymous),
    const DeepCollectionEquality().hash(isMember),
  ]);
}

extension ChatMemberStatusAdministratorDataClassExtensions
    on ChatMemberStatusAdministrator {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatMemberStatusAdministrator &&
          const DeepCollectionEquality().equals(
            other.customTitle,
            customTitle,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeEdited,
            canBeEdited,
          ) &&
          const DeepCollectionEquality().equals(other.rights, rights));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(customTitle),
    const DeepCollectionEquality().hash(canBeEdited),
    const DeepCollectionEquality().hash(rights),
  ]);
}

extension ChatMemberStatusMemberDataClassExtensions on ChatMemberStatusMember {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatMemberStatusMember &&
          const DeepCollectionEquality().equals(
            other.memberUntilDate,
            memberUntilDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(memberUntilDate),
  ]);
}

extension ChatMemberStatusRestrictedDataClassExtensions
    on ChatMemberStatusRestricted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatMemberStatusRestricted &&
          const DeepCollectionEquality().equals(other.isMember, isMember) &&
          const DeepCollectionEquality().equals(
            other.restrictedUntilDate,
            restrictedUntilDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.permissions,
            permissions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isMember),
    const DeepCollectionEquality().hash(restrictedUntilDate),
    const DeepCollectionEquality().hash(permissions),
  ]);
}

extension ChatMemberStatusLeftDataClassExtensions on ChatMemberStatusLeft {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatMemberStatusLeft);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatMemberStatusBannedDataClassExtensions on ChatMemberStatusBanned {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatMemberStatusBanned &&
          const DeepCollectionEquality().equals(
            other.bannedUntilDate,
            bannedUntilDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(bannedUntilDate),
  ]);
}

extension ChatMemberDataClassExtensions on ChatMember {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatMember &&
          const DeepCollectionEquality().equals(other.memberId, memberId) &&
          const DeepCollectionEquality().equals(
            other.inviterUserId,
            inviterUserId,
          ) &&
          const DeepCollectionEquality().equals(
            other.joinedChatDate,
            joinedChatDate,
          ) &&
          const DeepCollectionEquality().equals(other.status, status));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(memberId),
    const DeepCollectionEquality().hash(inviterUserId),
    const DeepCollectionEquality().hash(joinedChatDate),
    const DeepCollectionEquality().hash(status),
  ]);
}

extension ChatMembersDataClassExtensions on ChatMembers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatMembers &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.members, members));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(members),
  ]);
}

extension ChatMembersFilterDataClassExtensions on ChatMembersFilter {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatMembersFilter);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatMembersFilterContactsDataClassExtensions
    on ChatMembersFilterContacts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatMembersFilterContacts);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatMembersFilterAdministratorsDataClassExtensions
    on ChatMembersFilterAdministrators {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatMembersFilterAdministrators);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatMembersFilterMembersDataClassExtensions
    on ChatMembersFilterMembers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatMembersFilterMembers);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatMembersFilterMentionDataClassExtensions
    on ChatMembersFilterMention {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatMembersFilterMention &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messageThreadId),
  ]);
}

extension ChatMembersFilterRestrictedDataClassExtensions
    on ChatMembersFilterRestricted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatMembersFilterRestricted);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatMembersFilterBannedDataClassExtensions
    on ChatMembersFilterBanned {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatMembersFilterBanned);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatMembersFilterBotsDataClassExtensions on ChatMembersFilterBots {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatMembersFilterBots);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SupergroupMembersFilterDataClassExtensions
    on SupergroupMembersFilter {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SupergroupMembersFilter);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SupergroupMembersFilterRecentDataClassExtensions
    on SupergroupMembersFilterRecent {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SupergroupMembersFilterRecent);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SupergroupMembersFilterContactsDataClassExtensions
    on SupergroupMembersFilterContacts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SupergroupMembersFilterContacts &&
          const DeepCollectionEquality().equals(other.query, query));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(query)]);
}

extension SupergroupMembersFilterAdministratorsDataClassExtensions
    on SupergroupMembersFilterAdministrators {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SupergroupMembersFilterAdministrators);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SupergroupMembersFilterSearchDataClassExtensions
    on SupergroupMembersFilterSearch {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SupergroupMembersFilterSearch &&
          const DeepCollectionEquality().equals(other.query, query));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(query)]);
}

extension SupergroupMembersFilterRestrictedDataClassExtensions
    on SupergroupMembersFilterRestricted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SupergroupMembersFilterRestricted &&
          const DeepCollectionEquality().equals(other.query, query));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(query)]);
}

extension SupergroupMembersFilterBannedDataClassExtensions
    on SupergroupMembersFilterBanned {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SupergroupMembersFilterBanned &&
          const DeepCollectionEquality().equals(other.query, query));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(query)]);
}

extension SupergroupMembersFilterMentionDataClassExtensions
    on SupergroupMembersFilterMention {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SupergroupMembersFilterMention &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(messageThreadId),
  ]);
}

extension SupergroupMembersFilterBotsDataClassExtensions
    on SupergroupMembersFilterBots {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SupergroupMembersFilterBots);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatInviteLinkDataClassExtensions on ChatInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatInviteLink &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(
            other.creatorUserId,
            creatorUserId,
          ) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(other.editDate, editDate) &&
          const DeepCollectionEquality().equals(
            other.expirationDate,
            expirationDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.subscriptionPricing,
            subscriptionPricing,
          ) &&
          const DeepCollectionEquality().equals(
            other.memberLimit,
            memberLimit,
          ) &&
          const DeepCollectionEquality().equals(
            other.memberCount,
            memberCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.expiredMemberCount,
            expiredMemberCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.pendingJoinRequestCount,
            pendingJoinRequestCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.createsJoinRequest,
            createsJoinRequest,
          ) &&
          const DeepCollectionEquality().equals(other.isPrimary, isPrimary) &&
          const DeepCollectionEquality().equals(other.isRevoked, isRevoked));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inviteLink),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(creatorUserId),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(editDate),
    const DeepCollectionEquality().hash(expirationDate),
    const DeepCollectionEquality().hash(subscriptionPricing),
    const DeepCollectionEquality().hash(memberLimit),
    const DeepCollectionEquality().hash(memberCount),
    const DeepCollectionEquality().hash(expiredMemberCount),
    const DeepCollectionEquality().hash(pendingJoinRequestCount),
    const DeepCollectionEquality().hash(createsJoinRequest),
    const DeepCollectionEquality().hash(isPrimary),
    const DeepCollectionEquality().hash(isRevoked),
  ]);
}

extension ChatInviteLinksDataClassExtensions on ChatInviteLinks {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatInviteLinks &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(
            other.inviteLinks,
            inviteLinks,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(inviteLinks),
  ]);
}

extension ChatInviteLinkCountDataClassExtensions on ChatInviteLinkCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatInviteLinkCount &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.inviteLinkCount,
            inviteLinkCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.revokedInviteLinkCount,
            revokedInviteLinkCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(inviteLinkCount),
    const DeepCollectionEquality().hash(revokedInviteLinkCount),
  ]);
}

extension ChatInviteLinkCountsDataClassExtensions on ChatInviteLinkCounts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatInviteLinkCounts &&
          const DeepCollectionEquality().equals(
            other.inviteLinkCounts,
            inviteLinkCounts,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inviteLinkCounts),
  ]);
}

extension ChatInviteLinkMemberDataClassExtensions on ChatInviteLinkMember {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatInviteLinkMember &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.joinedChatDate,
            joinedChatDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.viaChatFolderInviteLink,
            viaChatFolderInviteLink,
          ) &&
          const DeepCollectionEquality().equals(
            other.approverUserId,
            approverUserId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(joinedChatDate),
    const DeepCollectionEquality().hash(viaChatFolderInviteLink),
    const DeepCollectionEquality().hash(approverUserId),
  ]);
}

extension ChatInviteLinkMembersDataClassExtensions on ChatInviteLinkMembers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatInviteLinkMembers &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.members, members));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(members),
  ]);
}

extension InviteLinkChatTypeDataClassExtensions on InviteLinkChatType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InviteLinkChatType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InviteLinkChatTypeBasicGroupDataClassExtensions
    on InviteLinkChatTypeBasicGroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InviteLinkChatTypeBasicGroup);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InviteLinkChatTypeSupergroupDataClassExtensions
    on InviteLinkChatTypeSupergroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InviteLinkChatTypeSupergroup);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InviteLinkChatTypeChannelDataClassExtensions
    on InviteLinkChatTypeChannel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InviteLinkChatTypeChannel);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatInviteLinkSubscriptionInfoDataClassExtensions
    on ChatInviteLinkSubscriptionInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatInviteLinkSubscriptionInfo &&
          const DeepCollectionEquality().equals(other.pricing, pricing) &&
          const DeepCollectionEquality().equals(other.canReuse, canReuse) &&
          const DeepCollectionEquality().equals(other.formId, formId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(pricing),
    const DeepCollectionEquality().hash(canReuse),
    const DeepCollectionEquality().hash(formId),
  ]);
}

extension ChatInviteLinkInfoDataClassExtensions on ChatInviteLinkInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatInviteLinkInfo &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.accessibleFor,
            accessibleFor,
          ) &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(
            other.accentColorId,
            accentColorId,
          ) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ) &&
          const DeepCollectionEquality().equals(
            other.memberCount,
            memberCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.memberUserIds,
            memberUserIds,
          ) &&
          const DeepCollectionEquality().equals(
            other.subscriptionInfo,
            subscriptionInfo,
          ) &&
          const DeepCollectionEquality().equals(
            other.createsJoinRequest,
            createsJoinRequest,
          ) &&
          const DeepCollectionEquality().equals(other.isPublic, isPublic) &&
          const DeepCollectionEquality().equals(
            other.verificationStatus,
            verificationStatus,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(accessibleFor),
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(accentColorId),
    const DeepCollectionEquality().hash(description),
    const DeepCollectionEquality().hash(memberCount),
    const DeepCollectionEquality().hash(memberUserIds),
    const DeepCollectionEquality().hash(subscriptionInfo),
    const DeepCollectionEquality().hash(createsJoinRequest),
    const DeepCollectionEquality().hash(isPublic),
    const DeepCollectionEquality().hash(verificationStatus),
  ]);
}

extension ChatJoinRequestDataClassExtensions on ChatJoinRequest {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatJoinRequest &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(other.bio, bio));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(bio),
  ]);
}

extension ChatJoinRequestsDataClassExtensions on ChatJoinRequests {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatJoinRequests &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.requests, requests));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(requests),
  ]);
}

extension ChatJoinRequestsInfoDataClassExtensions on ChatJoinRequestsInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatJoinRequestsInfo &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.userIds, userIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(userIds),
  ]);
}

extension BasicGroupDataClassExtensions on BasicGroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BasicGroup &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.memberCount,
            memberCount,
          ) &&
          const DeepCollectionEquality().equals(other.status, status) &&
          const DeepCollectionEquality().equals(other.isActive, isActive) &&
          const DeepCollectionEquality().equals(
            other.upgradedToSupergroupId,
            upgradedToSupergroupId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(memberCount),
    const DeepCollectionEquality().hash(status),
    const DeepCollectionEquality().hash(isActive),
    const DeepCollectionEquality().hash(upgradedToSupergroupId),
  ]);
}

extension BasicGroupFullInfoDataClassExtensions on BasicGroupFullInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BasicGroupFullInfo &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ) &&
          const DeepCollectionEquality().equals(
            other.creatorUserId,
            creatorUserId,
          ) &&
          const DeepCollectionEquality().equals(other.members, members) &&
          const DeepCollectionEquality().equals(
            other.canHideMembers,
            canHideMembers,
          ) &&
          const DeepCollectionEquality().equals(
            other.canToggleAggressiveAntiSpam,
            canToggleAggressiveAntiSpam,
          ) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink) &&
          const DeepCollectionEquality().equals(
            other.botCommands,
            botCommands,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(description),
    const DeepCollectionEquality().hash(creatorUserId),
    const DeepCollectionEquality().hash(members),
    const DeepCollectionEquality().hash(canHideMembers),
    const DeepCollectionEquality().hash(canToggleAggressiveAntiSpam),
    const DeepCollectionEquality().hash(inviteLink),
    const DeepCollectionEquality().hash(botCommands),
  ]);
}

extension SupergroupDataClassExtensions on Supergroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Supergroup &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.usernames, usernames) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(other.status, status) &&
          const DeepCollectionEquality().equals(
            other.memberCount,
            memberCount,
          ) &&
          const DeepCollectionEquality().equals(other.boostLevel, boostLevel) &&
          const DeepCollectionEquality().equals(
            other.hasAutomaticTranslation,
            hasAutomaticTranslation,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasLinkedChat,
            hasLinkedChat,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasLocation,
            hasLocation,
          ) &&
          const DeepCollectionEquality().equals(
            other.signMessages,
            signMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.showMessageSender,
            showMessageSender,
          ) &&
          const DeepCollectionEquality().equals(
            other.joinToSendMessages,
            joinToSendMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.joinByRequest,
            joinByRequest,
          ) &&
          const DeepCollectionEquality().equals(
            other.isSlowModeEnabled,
            isSlowModeEnabled,
          ) &&
          const DeepCollectionEquality().equals(other.isChannel, isChannel) &&
          const DeepCollectionEquality().equals(
            other.isBroadcastGroup,
            isBroadcastGroup,
          ) &&
          const DeepCollectionEquality().equals(other.isForum, isForum) &&
          const DeepCollectionEquality().equals(
            other.isDirectMessagesGroup,
            isDirectMessagesGroup,
          ) &&
          const DeepCollectionEquality().equals(
            other.isAdministeredDirectMessagesGroup,
            isAdministeredDirectMessagesGroup,
          ) &&
          const DeepCollectionEquality().equals(
            other.verificationStatus,
            verificationStatus,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasDirectMessagesGroup,
            hasDirectMessagesGroup,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasForumTabs,
            hasForumTabs,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasSensitiveContent,
            hasSensitiveContent,
          ) &&
          const DeepCollectionEquality().equals(
            other.restrictionReason,
            restrictionReason,
          ) &&
          const DeepCollectionEquality().equals(
            other.paidMessageStarCount,
            paidMessageStarCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasActiveStories,
            hasActiveStories,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasUnreadActiveStories,
            hasUnreadActiveStories,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(usernames),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(status),
    const DeepCollectionEquality().hash(memberCount),
    const DeepCollectionEquality().hash(boostLevel),
    const DeepCollectionEquality().hash(hasAutomaticTranslation),
    const DeepCollectionEquality().hash(hasLinkedChat),
    const DeepCollectionEquality().hash(hasLocation),
    const DeepCollectionEquality().hash(signMessages),
    const DeepCollectionEquality().hash(showMessageSender),
    const DeepCollectionEquality().hash(joinToSendMessages),
    const DeepCollectionEquality().hash(joinByRequest),
    const DeepCollectionEquality().hash(isSlowModeEnabled),
    const DeepCollectionEquality().hash(isChannel),
    const DeepCollectionEquality().hash(isBroadcastGroup),
    const DeepCollectionEquality().hash(isForum),
    const DeepCollectionEquality().hash(isDirectMessagesGroup),
    const DeepCollectionEquality().hash(isAdministeredDirectMessagesGroup),
    const DeepCollectionEquality().hash(verificationStatus),
    const DeepCollectionEquality().hash(hasDirectMessagesGroup),
    const DeepCollectionEquality().hash(hasForumTabs),
    const DeepCollectionEquality().hash(hasSensitiveContent),
    const DeepCollectionEquality().hash(restrictionReason),
    const DeepCollectionEquality().hash(paidMessageStarCount),
    const DeepCollectionEquality().hash(hasActiveStories),
    const DeepCollectionEquality().hash(hasUnreadActiveStories),
  ]);
}

extension SupergroupFullInfoDataClassExtensions on SupergroupFullInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SupergroupFullInfo &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ) &&
          const DeepCollectionEquality().equals(
            other.memberCount,
            memberCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.administratorCount,
            administratorCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.restrictedCount,
            restrictedCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.bannedCount,
            bannedCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.linkedChatId,
            linkedChatId,
          ) &&
          const DeepCollectionEquality().equals(
            other.directMessagesChatId,
            directMessagesChatId,
          ) &&
          const DeepCollectionEquality().equals(
            other.slowModeDelay,
            slowModeDelay,
          ) &&
          const DeepCollectionEquality().equals(
            other.slowModeDelayExpiresIn,
            slowModeDelayExpiresIn,
          ) &&
          const DeepCollectionEquality().equals(
            other.canEnablePaidMessages,
            canEnablePaidMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.canEnablePaidReaction,
            canEnablePaidReaction,
          ) &&
          const DeepCollectionEquality().equals(
            other.canGetMembers,
            canGetMembers,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasHiddenMembers,
            hasHiddenMembers,
          ) &&
          const DeepCollectionEquality().equals(
            other.canHideMembers,
            canHideMembers,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSetStickerSet,
            canSetStickerSet,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSetLocation,
            canSetLocation,
          ) &&
          const DeepCollectionEquality().equals(
            other.canGetStatistics,
            canGetStatistics,
          ) &&
          const DeepCollectionEquality().equals(
            other.canGetRevenueStatistics,
            canGetRevenueStatistics,
          ) &&
          const DeepCollectionEquality().equals(
            other.canGetStarRevenueStatistics,
            canGetStarRevenueStatistics,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSendGift,
            canSendGift,
          ) &&
          const DeepCollectionEquality().equals(
            other.canToggleAggressiveAntiSpam,
            canToggleAggressiveAntiSpam,
          ) &&
          const DeepCollectionEquality().equals(
            other.isAllHistoryAvailable,
            isAllHistoryAvailable,
          ) &&
          const DeepCollectionEquality().equals(
            other.canHaveSponsoredMessages,
            canHaveSponsoredMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasAggressiveAntiSpamEnabled,
            hasAggressiveAntiSpamEnabled,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasPaidMediaAllowed,
            hasPaidMediaAllowed,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasPinnedStories,
            hasPinnedStories,
          ) &&
          const DeepCollectionEquality().equals(other.giftCount, giftCount) &&
          const DeepCollectionEquality().equals(
            other.myBoostCount,
            myBoostCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.unrestrictBoostCount,
            unrestrictBoostCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.outgoingPaidMessageStarCount,
            outgoingPaidMessageStarCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.stickerSetId,
            stickerSetId,
          ) &&
          const DeepCollectionEquality().equals(
            other.customEmojiStickerSetId,
            customEmojiStickerSetId,
          ) &&
          const DeepCollectionEquality().equals(other.location, location) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink) &&
          const DeepCollectionEquality().equals(
            other.botCommands,
            botCommands,
          ) &&
          const DeepCollectionEquality().equals(
            other.botVerification,
            botVerification,
          ) &&
          const DeepCollectionEquality().equals(
            other.upgradedFromBasicGroupId,
            upgradedFromBasicGroupId,
          ) &&
          const DeepCollectionEquality().equals(
            other.upgradedFromMaxMessageId,
            upgradedFromMaxMessageId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(description),
    const DeepCollectionEquality().hash(memberCount),
    const DeepCollectionEquality().hash(administratorCount),
    const DeepCollectionEquality().hash(restrictedCount),
    const DeepCollectionEquality().hash(bannedCount),
    const DeepCollectionEquality().hash(linkedChatId),
    const DeepCollectionEquality().hash(directMessagesChatId),
    const DeepCollectionEquality().hash(slowModeDelay),
    const DeepCollectionEquality().hash(slowModeDelayExpiresIn),
    const DeepCollectionEquality().hash(canEnablePaidMessages),
    const DeepCollectionEquality().hash(canEnablePaidReaction),
    const DeepCollectionEquality().hash(canGetMembers),
    const DeepCollectionEquality().hash(hasHiddenMembers),
    const DeepCollectionEquality().hash(canHideMembers),
    const DeepCollectionEquality().hash(canSetStickerSet),
    const DeepCollectionEquality().hash(canSetLocation),
    const DeepCollectionEquality().hash(canGetStatistics),
    const DeepCollectionEquality().hash(canGetRevenueStatistics),
    const DeepCollectionEquality().hash(canGetStarRevenueStatistics),
    const DeepCollectionEquality().hash(canSendGift),
    const DeepCollectionEquality().hash(canToggleAggressiveAntiSpam),
    const DeepCollectionEquality().hash(isAllHistoryAvailable),
    const DeepCollectionEquality().hash(canHaveSponsoredMessages),
    const DeepCollectionEquality().hash(hasAggressiveAntiSpamEnabled),
    const DeepCollectionEquality().hash(hasPaidMediaAllowed),
    const DeepCollectionEquality().hash(hasPinnedStories),
    const DeepCollectionEquality().hash(giftCount),
    const DeepCollectionEquality().hash(myBoostCount),
    const DeepCollectionEquality().hash(unrestrictBoostCount),
    const DeepCollectionEquality().hash(outgoingPaidMessageStarCount),
    const DeepCollectionEquality().hash(stickerSetId),
    const DeepCollectionEquality().hash(customEmojiStickerSetId),
    const DeepCollectionEquality().hash(location),
    const DeepCollectionEquality().hash(inviteLink),
    const DeepCollectionEquality().hash(botCommands),
    const DeepCollectionEquality().hash(botVerification),
    const DeepCollectionEquality().hash(upgradedFromBasicGroupId),
    const DeepCollectionEquality().hash(upgradedFromMaxMessageId),
  ]);
}

extension SecretChatStateDataClassExtensions on SecretChatState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SecretChatState);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SecretChatStatePendingDataClassExtensions on SecretChatStatePending {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SecretChatStatePending);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SecretChatStateReadyDataClassExtensions on SecretChatStateReady {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SecretChatStateReady);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SecretChatStateClosedDataClassExtensions on SecretChatStateClosed {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SecretChatStateClosed);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SecretChatDataClassExtensions on SecretChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SecretChat &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.state, state) &&
          const DeepCollectionEquality().equals(other.isOutbound, isOutbound) &&
          const DeepCollectionEquality().equals(other.keyHash, keyHash) &&
          const DeepCollectionEquality().equals(other.layer, layer));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(state),
    const DeepCollectionEquality().hash(isOutbound),
    const DeepCollectionEquality().hash(keyHash),
    const DeepCollectionEquality().hash(layer),
  ]);
}

extension MessageSenderDataClassExtensions on MessageSender {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageSender);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageSenderUserDataClassExtensions on MessageSenderUser {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSenderUser &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension MessageSenderChatDataClassExtensions on MessageSenderChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSenderChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension MessageSendersDataClassExtensions on MessageSenders {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSenders &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.senders, senders));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(senders),
  ]);
}

extension ChatMessageSenderDataClassExtensions on ChatMessageSender {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatMessageSender &&
          const DeepCollectionEquality().equals(other.sender, sender) &&
          const DeepCollectionEquality().equals(
            other.needsPremium,
            needsPremium,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sender),
    const DeepCollectionEquality().hash(needsPremium),
  ]);
}

extension ChatMessageSendersDataClassExtensions on ChatMessageSenders {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatMessageSenders &&
          const DeepCollectionEquality().equals(other.senders, senders));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(senders),
  ]);
}

extension MessageReadDateDataClassExtensions on MessageReadDate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageReadDate);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageReadDateReadDataClassExtensions on MessageReadDateRead {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageReadDateRead &&
          const DeepCollectionEquality().equals(other.readDate, readDate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(readDate),
  ]);
}

extension MessageReadDateUnreadDataClassExtensions on MessageReadDateUnread {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageReadDateUnread);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageReadDateTooOldDataClassExtensions on MessageReadDateTooOld {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageReadDateTooOld);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageReadDateUserPrivacyRestrictedDataClassExtensions
    on MessageReadDateUserPrivacyRestricted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageReadDateUserPrivacyRestricted);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageReadDateMyPrivacyRestrictedDataClassExtensions
    on MessageReadDateMyPrivacyRestricted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageReadDateMyPrivacyRestricted);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageViewerDataClassExtensions on MessageViewer {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageViewer &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.viewDate, viewDate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(viewDate),
  ]);
}

extension MessageViewersDataClassExtensions on MessageViewers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageViewers &&
          const DeepCollectionEquality().equals(other.viewers, viewers));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(viewers),
  ]);
}

extension MessageOriginDataClassExtensions on MessageOrigin {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageOrigin);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageOriginUserDataClassExtensions on MessageOriginUser {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageOriginUser &&
          const DeepCollectionEquality().equals(
            other.senderUserId,
            senderUserId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(senderUserId),
  ]);
}

extension MessageOriginHiddenUserDataClassExtensions
    on MessageOriginHiddenUser {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageOriginHiddenUser &&
          const DeepCollectionEquality().equals(other.senderName, senderName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(senderName),
  ]);
}

extension MessageOriginChatDataClassExtensions on MessageOriginChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageOriginChat &&
          const DeepCollectionEquality().equals(
            other.senderChatId,
            senderChatId,
          ) &&
          const DeepCollectionEquality().equals(
            other.authorSignature,
            authorSignature,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(senderChatId),
    const DeepCollectionEquality().hash(authorSignature),
  ]);
}

extension MessageOriginChannelDataClassExtensions on MessageOriginChannel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageOriginChannel &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.authorSignature,
            authorSignature,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(authorSignature),
  ]);
}

extension ForwardSourceDataClassExtensions on ForwardSource {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ForwardSource &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.senderId, senderId) &&
          const DeepCollectionEquality().equals(other.senderName, senderName) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(other.isOutgoing, isOutgoing));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(senderId),
    const DeepCollectionEquality().hash(senderName),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(isOutgoing),
  ]);
}

extension ReactionTypeDataClassExtensions on ReactionType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReactionType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReactionTypeEmojiDataClassExtensions on ReactionTypeEmoji {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReactionTypeEmoji &&
          const DeepCollectionEquality().equals(other.emoji, emoji));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(emoji)]);
}

extension ReactionTypeCustomEmojiDataClassExtensions
    on ReactionTypeCustomEmoji {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReactionTypeCustomEmoji &&
          const DeepCollectionEquality().equals(
            other.customEmojiId,
            customEmojiId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(customEmojiId),
  ]);
}

extension ReactionTypePaidDataClassExtensions on ReactionTypePaid {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReactionTypePaid);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PaidReactionTypeDataClassExtensions on PaidReactionType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PaidReactionType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PaidReactionTypeRegularDataClassExtensions
    on PaidReactionTypeRegular {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PaidReactionTypeRegular);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PaidReactionTypeAnonymousDataClassExtensions
    on PaidReactionTypeAnonymous {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PaidReactionTypeAnonymous);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PaidReactionTypeChatDataClassExtensions on PaidReactionTypeChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PaidReactionTypeChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension PaidReactorDataClassExtensions on PaidReactor {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PaidReactor &&
          const DeepCollectionEquality().equals(other.senderId, senderId) &&
          const DeepCollectionEquality().equals(other.starCount, starCount) &&
          const DeepCollectionEquality().equals(other.isTop, isTop) &&
          const DeepCollectionEquality().equals(other.isMe, isMe) &&
          const DeepCollectionEquality().equals(
            other.isAnonymous,
            isAnonymous,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(senderId),
    const DeepCollectionEquality().hash(starCount),
    const DeepCollectionEquality().hash(isTop),
    const DeepCollectionEquality().hash(isMe),
    const DeepCollectionEquality().hash(isAnonymous),
  ]);
}

extension MessageForwardInfoDataClassExtensions on MessageForwardInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageForwardInfo &&
          const DeepCollectionEquality().equals(other.origin, origin) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(other.source, source) &&
          const DeepCollectionEquality().equals(
            other.publicServiceAnnouncementType,
            publicServiceAnnouncementType,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(origin),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(source),
    const DeepCollectionEquality().hash(publicServiceAnnouncementType),
  ]);
}

extension MessageImportInfoDataClassExtensions on MessageImportInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageImportInfo &&
          const DeepCollectionEquality().equals(other.senderName, senderName) &&
          const DeepCollectionEquality().equals(other.date, date));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(senderName),
    const DeepCollectionEquality().hash(date),
  ]);
}

extension MessageReplyInfoDataClassExtensions on MessageReplyInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageReplyInfo &&
          const DeepCollectionEquality().equals(other.replyCount, replyCount) &&
          const DeepCollectionEquality().equals(
            other.recentReplierIds,
            recentReplierIds,
          ) &&
          const DeepCollectionEquality().equals(
            other.lastReadInboxMessageId,
            lastReadInboxMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.lastReadOutboxMessageId,
            lastReadOutboxMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.lastMessageId,
            lastMessageId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(replyCount),
    const DeepCollectionEquality().hash(recentReplierIds),
    const DeepCollectionEquality().hash(lastReadInboxMessageId),
    const DeepCollectionEquality().hash(lastReadOutboxMessageId),
    const DeepCollectionEquality().hash(lastMessageId),
  ]);
}

extension MessageReactionDataClassExtensions on MessageReaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageReaction &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.isChosen, isChosen) &&
          const DeepCollectionEquality().equals(
            other.usedSenderId,
            usedSenderId,
          ) &&
          const DeepCollectionEquality().equals(
            other.recentSenderIds,
            recentSenderIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(isChosen),
    const DeepCollectionEquality().hash(usedSenderId),
    const DeepCollectionEquality().hash(recentSenderIds),
  ]);
}

extension MessageReactionsDataClassExtensions on MessageReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageReactions &&
          const DeepCollectionEquality().equals(other.reactions, reactions) &&
          const DeepCollectionEquality().equals(other.areTags, areTags) &&
          const DeepCollectionEquality().equals(
            other.paidReactors,
            paidReactors,
          ) &&
          const DeepCollectionEquality().equals(
            other.canGetAddedReactions,
            canGetAddedReactions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(reactions),
    const DeepCollectionEquality().hash(areTags),
    const DeepCollectionEquality().hash(paidReactors),
    const DeepCollectionEquality().hash(canGetAddedReactions),
  ]);
}

extension MessageInteractionInfoDataClassExtensions on MessageInteractionInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageInteractionInfo &&
          const DeepCollectionEquality().equals(other.viewCount, viewCount) &&
          const DeepCollectionEquality().equals(
            other.forwardCount,
            forwardCount,
          ) &&
          const DeepCollectionEquality().equals(other.replyInfo, replyInfo) &&
          const DeepCollectionEquality().equals(other.reactions, reactions));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(viewCount),
    const DeepCollectionEquality().hash(forwardCount),
    const DeepCollectionEquality().hash(replyInfo),
    const DeepCollectionEquality().hash(reactions),
  ]);
}

extension UnreadReactionDataClassExtensions on UnreadReaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UnreadReaction &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.senderId, senderId) &&
          const DeepCollectionEquality().equals(other.isBig, isBig));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(senderId),
    const DeepCollectionEquality().hash(isBig),
  ]);
}

extension MessageTopicDataClassExtensions on MessageTopic {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageTopic);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageTopicForumDataClassExtensions on MessageTopicForum {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageTopicForum &&
          const DeepCollectionEquality().equals(
            other.forumTopicId,
            forumTopicId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(forumTopicId),
  ]);
}

extension MessageTopicDirectMessagesDataClassExtensions
    on MessageTopicDirectMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageTopicDirectMessages &&
          const DeepCollectionEquality().equals(
            other.directMessagesChatTopicId,
            directMessagesChatTopicId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(directMessagesChatTopicId),
  ]);
}

extension MessageTopicSavedMessagesDataClassExtensions
    on MessageTopicSavedMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageTopicSavedMessages &&
          const DeepCollectionEquality().equals(
            other.savedMessagesTopicId,
            savedMessagesTopicId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(savedMessagesTopicId),
  ]);
}

extension MessageEffectTypeDataClassExtensions on MessageEffectType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageEffectType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageEffectTypeEmojiReactionDataClassExtensions
    on MessageEffectTypeEmojiReaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageEffectTypeEmojiReaction &&
          const DeepCollectionEquality().equals(
            other.selectAnimation,
            selectAnimation,
          ) &&
          const DeepCollectionEquality().equals(
            other.effectAnimation,
            effectAnimation,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(selectAnimation),
    const DeepCollectionEquality().hash(effectAnimation),
  ]);
}

extension MessageEffectTypePremiumStickerDataClassExtensions
    on MessageEffectTypePremiumSticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageEffectTypePremiumSticker &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension MessageEffectDataClassExtensions on MessageEffect {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageEffect &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.staticIcon, staticIcon) &&
          const DeepCollectionEquality().equals(other.emoji, emoji) &&
          const DeepCollectionEquality().equals(other.isPremium, isPremium) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(staticIcon),
    const DeepCollectionEquality().hash(emoji),
    const DeepCollectionEquality().hash(isPremium),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension MessageSendingStateDataClassExtensions on MessageSendingState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageSendingState);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageSendingStatePendingDataClassExtensions
    on MessageSendingStatePending {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSendingStatePending &&
          const DeepCollectionEquality().equals(other.sendingId, sendingId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sendingId),
  ]);
}

extension MessageSendingStateFailedDataClassExtensions
    on MessageSendingStateFailed {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSendingStateFailed &&
          const DeepCollectionEquality().equals(other.error, error) &&
          const DeepCollectionEquality().equals(other.canRetry, canRetry) &&
          const DeepCollectionEquality().equals(
            other.needAnotherSender,
            needAnotherSender,
          ) &&
          const DeepCollectionEquality().equals(
            other.needAnotherReplyQuote,
            needAnotherReplyQuote,
          ) &&
          const DeepCollectionEquality().equals(
            other.needDropReply,
            needDropReply,
          ) &&
          const DeepCollectionEquality().equals(
            other.requiredPaidMessageStarCount,
            requiredPaidMessageStarCount,
          ) &&
          const DeepCollectionEquality().equals(other.retryAfter, retryAfter));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(error),
    const DeepCollectionEquality().hash(canRetry),
    const DeepCollectionEquality().hash(needAnotherSender),
    const DeepCollectionEquality().hash(needAnotherReplyQuote),
    const DeepCollectionEquality().hash(needDropReply),
    const DeepCollectionEquality().hash(requiredPaidMessageStarCount),
    const DeepCollectionEquality().hash(retryAfter),
  ]);
}

extension TextQuoteDataClassExtensions on TextQuote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TextQuote &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.position, position) &&
          const DeepCollectionEquality().equals(other.isManual, isManual));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(position),
    const DeepCollectionEquality().hash(isManual),
  ]);
}

extension InputTextQuoteDataClassExtensions on InputTextQuote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputTextQuote &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.position, position));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(position),
  ]);
}

extension MessageReplyToDataClassExtensions on MessageReplyTo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageReplyTo);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageReplyToMessageDataClassExtensions on MessageReplyToMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageReplyToMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.quote, quote) &&
          const DeepCollectionEquality().equals(other.origin, origin) &&
          const DeepCollectionEquality().equals(
            other.originSendDate,
            originSendDate,
          ) &&
          const DeepCollectionEquality().equals(other.content, content));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(quote),
    const DeepCollectionEquality().hash(origin),
    const DeepCollectionEquality().hash(originSendDate),
    const DeepCollectionEquality().hash(content),
  ]);
}

extension MessageReplyToStoryDataClassExtensions on MessageReplyToStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageReplyToStory &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
  ]);
}

extension InputMessageReplyToDataClassExtensions on InputMessageReplyTo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InputMessageReplyTo);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InputMessageReplyToMessageDataClassExtensions
    on InputMessageReplyToMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageReplyToMessage &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.quote, quote));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(quote),
  ]);
}

extension InputMessageReplyToExternalMessageDataClassExtensions
    on InputMessageReplyToExternalMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageReplyToExternalMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.quote, quote));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(quote),
  ]);
}

extension InputMessageReplyToStoryDataClassExtensions
    on InputMessageReplyToStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageReplyToStory &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
  ]);
}

extension FactCheckDataClassExtensions on FactCheck {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FactCheck &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(
            other.countryCode,
            countryCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(countryCode),
  ]);
}

extension MessageDataClassExtensions on Message {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Message &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.senderId, senderId) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.sendingState,
            sendingState,
          ) &&
          const DeepCollectionEquality().equals(
            other.schedulingState,
            schedulingState,
          ) &&
          const DeepCollectionEquality().equals(other.isOutgoing, isOutgoing) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned) &&
          const DeepCollectionEquality().equals(
            other.isFromOffline,
            isFromOffline,
          ) &&
          const DeepCollectionEquality().equals(other.canBeSaved, canBeSaved) &&
          const DeepCollectionEquality().equals(
            other.hasTimestampedMedia,
            hasTimestampedMedia,
          ) &&
          const DeepCollectionEquality().equals(
            other.isChannelPost,
            isChannelPost,
          ) &&
          const DeepCollectionEquality().equals(
            other.containsUnreadMention,
            containsUnreadMention,
          ) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(other.editDate, editDate) &&
          const DeepCollectionEquality().equals(
            other.forwardInfo,
            forwardInfo,
          ) &&
          const DeepCollectionEquality().equals(other.importInfo, importInfo) &&
          const DeepCollectionEquality().equals(
            other.interactionInfo,
            interactionInfo,
          ) &&
          const DeepCollectionEquality().equals(
            other.unreadReactions,
            unreadReactions,
          ) &&
          const DeepCollectionEquality().equals(other.factCheck, factCheck) &&
          const DeepCollectionEquality().equals(other.replyTo, replyTo) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ) &&
          const DeepCollectionEquality().equals(other.topicId, topicId) &&
          const DeepCollectionEquality().equals(
            other.selfDestructType,
            selfDestructType,
          ) &&
          const DeepCollectionEquality().equals(
            other.selfDestructIn,
            selfDestructIn,
          ) &&
          const DeepCollectionEquality().equals(
            other.autoDeleteIn,
            autoDeleteIn,
          ) &&
          const DeepCollectionEquality().equals(
            other.viaBotUserId,
            viaBotUserId,
          ) &&
          const DeepCollectionEquality().equals(
            other.senderBusinessBotUserId,
            senderBusinessBotUserId,
          ) &&
          const DeepCollectionEquality().equals(
            other.senderBoostCount,
            senderBoostCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.paidMessageStarCount,
            paidMessageStarCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.authorSignature,
            authorSignature,
          ) &&
          const DeepCollectionEquality().equals(
            other.mediaAlbumId,
            mediaAlbumId,
          ) &&
          const DeepCollectionEquality().equals(other.effectId, effectId) &&
          const DeepCollectionEquality().equals(
            other.hasSensitiveContent,
            hasSensitiveContent,
          ) &&
          const DeepCollectionEquality().equals(
            other.restrictionReason,
            restrictionReason,
          ) &&
          const DeepCollectionEquality().equals(other.content, content) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(senderId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(sendingState),
    const DeepCollectionEquality().hash(schedulingState),
    const DeepCollectionEquality().hash(isOutgoing),
    const DeepCollectionEquality().hash(isPinned),
    const DeepCollectionEquality().hash(isFromOffline),
    const DeepCollectionEquality().hash(canBeSaved),
    const DeepCollectionEquality().hash(hasTimestampedMedia),
    const DeepCollectionEquality().hash(isChannelPost),
    const DeepCollectionEquality().hash(containsUnreadMention),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(editDate),
    const DeepCollectionEquality().hash(forwardInfo),
    const DeepCollectionEquality().hash(importInfo),
    const DeepCollectionEquality().hash(interactionInfo),
    const DeepCollectionEquality().hash(unreadReactions),
    const DeepCollectionEquality().hash(factCheck),
    const DeepCollectionEquality().hash(replyTo),
    const DeepCollectionEquality().hash(messageThreadId),
    const DeepCollectionEquality().hash(topicId),
    const DeepCollectionEquality().hash(selfDestructType),
    const DeepCollectionEquality().hash(selfDestructIn),
    const DeepCollectionEquality().hash(autoDeleteIn),
    const DeepCollectionEquality().hash(viaBotUserId),
    const DeepCollectionEquality().hash(senderBusinessBotUserId),
    const DeepCollectionEquality().hash(senderBoostCount),
    const DeepCollectionEquality().hash(paidMessageStarCount),
    const DeepCollectionEquality().hash(authorSignature),
    const DeepCollectionEquality().hash(mediaAlbumId),
    const DeepCollectionEquality().hash(effectId),
    const DeepCollectionEquality().hash(hasSensitiveContent),
    const DeepCollectionEquality().hash(restrictionReason),
    const DeepCollectionEquality().hash(content),
    const DeepCollectionEquality().hash(replyMarkup),
  ]);
}

extension MessagesDataClassExtensions on Messages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Messages &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.messages, messages));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(messages),
  ]);
}

extension FoundMessagesDataClassExtensions on FoundMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FoundMessages &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.messages, messages) &&
          const DeepCollectionEquality().equals(other.nextOffset, nextOffset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(messages),
    const DeepCollectionEquality().hash(nextOffset),
  ]);
}

extension FoundChatMessagesDataClassExtensions on FoundChatMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FoundChatMessages &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.messages, messages) &&
          const DeepCollectionEquality().equals(
            other.nextFromMessageId,
            nextFromMessageId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(messages),
    const DeepCollectionEquality().hash(nextFromMessageId),
  ]);
}

extension MessagePositionDataClassExtensions on MessagePosition {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessagePosition &&
          const DeepCollectionEquality().equals(other.position, position) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.date, date));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(position),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(date),
  ]);
}

extension MessagePositionsDataClassExtensions on MessagePositions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessagePositions &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.positions, positions));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(positions),
  ]);
}

extension MessageCalendarDayDataClassExtensions on MessageCalendarDay {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageCalendarDay &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.message, message));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(message),
  ]);
}

extension MessageCalendarDataClassExtensions on MessageCalendar {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageCalendar &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.days, days));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(days),
  ]);
}

extension BusinessMessageDataClassExtensions on BusinessMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessMessage &&
          const DeepCollectionEquality().equals(other.message, message) &&
          const DeepCollectionEquality().equals(
            other.replyToMessage,
            replyToMessage,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(message),
    const DeepCollectionEquality().hash(replyToMessage),
  ]);
}

extension BusinessMessagesDataClassExtensions on BusinessMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessMessages &&
          const DeepCollectionEquality().equals(other.messages, messages));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messages),
  ]);
}

extension MessageSourceDataClassExtensions on MessageSource {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageSource);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageSourceChatHistoryDataClassExtensions
    on MessageSourceChatHistory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageSourceChatHistory);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageSourceMessageThreadHistoryDataClassExtensions
    on MessageSourceMessageThreadHistory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSourceMessageThreadHistory);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageSourceForumTopicHistoryDataClassExtensions
    on MessageSourceForumTopicHistory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSourceForumTopicHistory);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageSourceDirectMessagesChatTopicHistoryDataClassExtensions
    on MessageSourceDirectMessagesChatTopicHistory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSourceDirectMessagesChatTopicHistory);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageSourceHistoryPreviewDataClassExtensions
    on MessageSourceHistoryPreview {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSourceHistoryPreview);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageSourceChatListDataClassExtensions on MessageSourceChatList {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageSourceChatList);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageSourceSearchDataClassExtensions on MessageSourceSearch {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageSourceSearch);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageSourceChatEventLogDataClassExtensions
    on MessageSourceChatEventLog {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageSourceChatEventLog);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageSourceNotificationDataClassExtensions
    on MessageSourceNotification {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageSourceNotification);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageSourceScreenshotDataClassExtensions
    on MessageSourceScreenshot {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageSourceScreenshot);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageSourceOtherDataClassExtensions on MessageSourceOther {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageSourceOther);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AdvertisementSponsorDataClassExtensions on AdvertisementSponsor {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AdvertisementSponsor &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(other.info, info));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(info),
  ]);
}

extension SponsoredMessageDataClassExtensions on SponsoredMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SponsoredMessage &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.isRecommended,
            isRecommended,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeReported,
            canBeReported,
          ) &&
          const DeepCollectionEquality().equals(other.content, content) &&
          const DeepCollectionEquality().equals(other.sponsor, sponsor) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.buttonText, buttonText) &&
          const DeepCollectionEquality().equals(
            other.accentColorId,
            accentColorId,
          ) &&
          const DeepCollectionEquality().equals(
            other.backgroundCustomEmojiId,
            backgroundCustomEmojiId,
          ) &&
          const DeepCollectionEquality().equals(
            other.additionalInfo,
            additionalInfo,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(isRecommended),
    const DeepCollectionEquality().hash(canBeReported),
    const DeepCollectionEquality().hash(content),
    const DeepCollectionEquality().hash(sponsor),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(buttonText),
    const DeepCollectionEquality().hash(accentColorId),
    const DeepCollectionEquality().hash(backgroundCustomEmojiId),
    const DeepCollectionEquality().hash(additionalInfo),
  ]);
}

extension SponsoredMessagesDataClassExtensions on SponsoredMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SponsoredMessages &&
          const DeepCollectionEquality().equals(other.messages, messages) &&
          const DeepCollectionEquality().equals(
            other.messagesBetween,
            messagesBetween,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messages),
    const DeepCollectionEquality().hash(messagesBetween),
  ]);
}

extension SponsoredChatDataClassExtensions on SponsoredChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SponsoredChat &&
          const DeepCollectionEquality().equals(other.uniqueId, uniqueId) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.sponsorInfo,
            sponsorInfo,
          ) &&
          const DeepCollectionEquality().equals(
            other.additionalInfo,
            additionalInfo,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(uniqueId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(sponsorInfo),
    const DeepCollectionEquality().hash(additionalInfo),
  ]);
}

extension SponsoredChatsDataClassExtensions on SponsoredChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SponsoredChats &&
          const DeepCollectionEquality().equals(other.chats, chats));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(chats)]);
}

extension VideoMessageAdvertisementDataClassExtensions
    on VideoMessageAdvertisement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is VideoMessageAdvertisement &&
          const DeepCollectionEquality().equals(other.uniqueId, uniqueId) &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(
            other.minDisplayDuration,
            minDisplayDuration,
          ) &&
          const DeepCollectionEquality().equals(
            other.maxDisplayDuration,
            maxDisplayDuration,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeReported,
            canBeReported,
          ) &&
          const DeepCollectionEquality().equals(other.sponsor, sponsor) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.additionalInfo,
            additionalInfo,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(uniqueId),
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(minDisplayDuration),
    const DeepCollectionEquality().hash(maxDisplayDuration),
    const DeepCollectionEquality().hash(canBeReported),
    const DeepCollectionEquality().hash(sponsor),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(additionalInfo),
  ]);
}

extension VideoMessageAdvertisementsDataClassExtensions
    on VideoMessageAdvertisements {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is VideoMessageAdvertisements &&
          const DeepCollectionEquality().equals(
            other.advertisements,
            advertisements,
          ) &&
          const DeepCollectionEquality().equals(other.startDelay, startDelay) &&
          const DeepCollectionEquality().equals(
            other.betweenDelay,
            betweenDelay,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(advertisements),
    const DeepCollectionEquality().hash(startDelay),
    const DeepCollectionEquality().hash(betweenDelay),
  ]);
}

extension ReportOptionDataClassExtensions on ReportOption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportOption &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(text),
  ]);
}

extension ReportSponsoredResultDataClassExtensions on ReportSponsoredResult {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReportSponsoredResult);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportSponsoredResultOkDataClassExtensions
    on ReportSponsoredResultOk {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReportSponsoredResultOk);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportSponsoredResultFailedDataClassExtensions
    on ReportSponsoredResultFailed {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportSponsoredResultFailed);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportSponsoredResultOptionRequiredDataClassExtensions
    on ReportSponsoredResultOptionRequired {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportSponsoredResultOptionRequired &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.options, options));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(options),
  ]);
}

extension ReportSponsoredResultAdsHiddenDataClassExtensions
    on ReportSponsoredResultAdsHidden {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportSponsoredResultAdsHidden);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportSponsoredResultPremiumRequiredDataClassExtensions
    on ReportSponsoredResultPremiumRequired {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportSponsoredResultPremiumRequired);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileDownloadDataClassExtensions on FileDownload {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FileDownload &&
          const DeepCollectionEquality().equals(other.fileId, fileId) &&
          const DeepCollectionEquality().equals(other.message, message) &&
          const DeepCollectionEquality().equals(other.addDate, addDate) &&
          const DeepCollectionEquality().equals(
            other.completeDate,
            completeDate,
          ) &&
          const DeepCollectionEquality().equals(other.isPaused, isPaused));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileId),
    const DeepCollectionEquality().hash(message),
    const DeepCollectionEquality().hash(addDate),
    const DeepCollectionEquality().hash(completeDate),
    const DeepCollectionEquality().hash(isPaused),
  ]);
}

extension DownloadedFileCountsDataClassExtensions on DownloadedFileCounts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DownloadedFileCounts &&
          const DeepCollectionEquality().equals(
            other.activeCount,
            activeCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.pausedCount,
            pausedCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.completedCount,
            completedCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(activeCount),
    const DeepCollectionEquality().hash(pausedCount),
    const DeepCollectionEquality().hash(completedCount),
  ]);
}

extension FoundFileDownloadsDataClassExtensions on FoundFileDownloads {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FoundFileDownloads &&
          const DeepCollectionEquality().equals(
            other.totalCounts,
            totalCounts,
          ) &&
          const DeepCollectionEquality().equals(other.files, files) &&
          const DeepCollectionEquality().equals(other.nextOffset, nextOffset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCounts),
    const DeepCollectionEquality().hash(files),
    const DeepCollectionEquality().hash(nextOffset),
  ]);
}

extension NotificationSettingsScopeDataClassExtensions
    on NotificationSettingsScope {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is NotificationSettingsScope);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension NotificationSettingsScopePrivateChatsDataClassExtensions
    on NotificationSettingsScopePrivateChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is NotificationSettingsScopePrivateChats);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension NotificationSettingsScopeGroupChatsDataClassExtensions
    on NotificationSettingsScopeGroupChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is NotificationSettingsScopeGroupChats);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension NotificationSettingsScopeChannelChatsDataClassExtensions
    on NotificationSettingsScopeChannelChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is NotificationSettingsScopeChannelChats);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatNotificationSettingsDataClassExtensions
    on ChatNotificationSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatNotificationSettings &&
          const DeepCollectionEquality().equals(
            other.useDefaultMuteFor,
            useDefaultMuteFor,
          ) &&
          const DeepCollectionEquality().equals(other.muteFor, muteFor) &&
          const DeepCollectionEquality().equals(
            other.useDefaultSound,
            useDefaultSound,
          ) &&
          const DeepCollectionEquality().equals(other.soundId, soundId) &&
          const DeepCollectionEquality().equals(
            other.useDefaultShowPreview,
            useDefaultShowPreview,
          ) &&
          const DeepCollectionEquality().equals(
            other.showPreview,
            showPreview,
          ) &&
          const DeepCollectionEquality().equals(
            other.useDefaultMuteStories,
            useDefaultMuteStories,
          ) &&
          const DeepCollectionEquality().equals(
            other.muteStories,
            muteStories,
          ) &&
          const DeepCollectionEquality().equals(
            other.useDefaultStorySound,
            useDefaultStorySound,
          ) &&
          const DeepCollectionEquality().equals(
            other.storySoundId,
            storySoundId,
          ) &&
          const DeepCollectionEquality().equals(
            other.useDefaultShowStoryPoster,
            useDefaultShowStoryPoster,
          ) &&
          const DeepCollectionEquality().equals(
            other.showStoryPoster,
            showStoryPoster,
          ) &&
          const DeepCollectionEquality().equals(
            other.useDefaultDisablePinnedMessageNotifications,
            useDefaultDisablePinnedMessageNotifications,
          ) &&
          const DeepCollectionEquality().equals(
            other.disablePinnedMessageNotifications,
            disablePinnedMessageNotifications,
          ) &&
          const DeepCollectionEquality().equals(
            other.useDefaultDisableMentionNotifications,
            useDefaultDisableMentionNotifications,
          ) &&
          const DeepCollectionEquality().equals(
            other.disableMentionNotifications,
            disableMentionNotifications,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(useDefaultMuteFor),
    const DeepCollectionEquality().hash(muteFor),
    const DeepCollectionEquality().hash(useDefaultSound),
    const DeepCollectionEquality().hash(soundId),
    const DeepCollectionEquality().hash(useDefaultShowPreview),
    const DeepCollectionEquality().hash(showPreview),
    const DeepCollectionEquality().hash(useDefaultMuteStories),
    const DeepCollectionEquality().hash(muteStories),
    const DeepCollectionEquality().hash(useDefaultStorySound),
    const DeepCollectionEquality().hash(storySoundId),
    const DeepCollectionEquality().hash(useDefaultShowStoryPoster),
    const DeepCollectionEquality().hash(showStoryPoster),
    const DeepCollectionEquality().hash(
      useDefaultDisablePinnedMessageNotifications,
    ),
    const DeepCollectionEquality().hash(disablePinnedMessageNotifications),
    const DeepCollectionEquality().hash(useDefaultDisableMentionNotifications),
    const DeepCollectionEquality().hash(disableMentionNotifications),
  ]);
}

extension ScopeNotificationSettingsDataClassExtensions
    on ScopeNotificationSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ScopeNotificationSettings &&
          const DeepCollectionEquality().equals(other.muteFor, muteFor) &&
          const DeepCollectionEquality().equals(other.soundId, soundId) &&
          const DeepCollectionEquality().equals(
            other.showPreview,
            showPreview,
          ) &&
          const DeepCollectionEquality().equals(
            other.useDefaultMuteStories,
            useDefaultMuteStories,
          ) &&
          const DeepCollectionEquality().equals(
            other.muteStories,
            muteStories,
          ) &&
          const DeepCollectionEquality().equals(
            other.storySoundId,
            storySoundId,
          ) &&
          const DeepCollectionEquality().equals(
            other.showStoryPoster,
            showStoryPoster,
          ) &&
          const DeepCollectionEquality().equals(
            other.disablePinnedMessageNotifications,
            disablePinnedMessageNotifications,
          ) &&
          const DeepCollectionEquality().equals(
            other.disableMentionNotifications,
            disableMentionNotifications,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(muteFor),
    const DeepCollectionEquality().hash(soundId),
    const DeepCollectionEquality().hash(showPreview),
    const DeepCollectionEquality().hash(useDefaultMuteStories),
    const DeepCollectionEquality().hash(muteStories),
    const DeepCollectionEquality().hash(storySoundId),
    const DeepCollectionEquality().hash(showStoryPoster),
    const DeepCollectionEquality().hash(disablePinnedMessageNotifications),
    const DeepCollectionEquality().hash(disableMentionNotifications),
  ]);
}

extension ReactionNotificationSourceDataClassExtensions
    on ReactionNotificationSource {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReactionNotificationSource);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReactionNotificationSourceNoneDataClassExtensions
    on ReactionNotificationSourceNone {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReactionNotificationSourceNone);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReactionNotificationSourceContactsDataClassExtensions
    on ReactionNotificationSourceContacts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReactionNotificationSourceContacts);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReactionNotificationSourceAllDataClassExtensions
    on ReactionNotificationSourceAll {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReactionNotificationSourceAll);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReactionNotificationSettingsDataClassExtensions
    on ReactionNotificationSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReactionNotificationSettings &&
          const DeepCollectionEquality().equals(
            other.messageReactionSource,
            messageReactionSource,
          ) &&
          const DeepCollectionEquality().equals(
            other.storyReactionSource,
            storyReactionSource,
          ) &&
          const DeepCollectionEquality().equals(other.soundId, soundId) &&
          const DeepCollectionEquality().equals(
            other.showPreview,
            showPreview,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messageReactionSource),
    const DeepCollectionEquality().hash(storyReactionSource),
    const DeepCollectionEquality().hash(soundId),
    const DeepCollectionEquality().hash(showPreview),
  ]);
}

extension DraftMessageDataClassExtensions on DraftMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DraftMessage &&
          const DeepCollectionEquality().equals(other.replyTo, replyTo) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(
            other.inputMessageText,
            inputMessageText,
          ) &&
          const DeepCollectionEquality().equals(other.effectId, effectId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(replyTo),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(inputMessageText),
    const DeepCollectionEquality().hash(effectId),
  ]);
}

extension ChatTypeDataClassExtensions on ChatType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatTypePrivateDataClassExtensions on ChatTypePrivate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatTypePrivate &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension ChatTypeBasicGroupDataClassExtensions on ChatTypeBasicGroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatTypeBasicGroup &&
          const DeepCollectionEquality().equals(
            other.basicGroupId,
            basicGroupId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(basicGroupId),
  ]);
}

extension ChatTypeSupergroupDataClassExtensions on ChatTypeSupergroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatTypeSupergroup &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(other.isChannel, isChannel));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(isChannel),
  ]);
}

extension ChatTypeSecretDataClassExtensions on ChatTypeSecret {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatTypeSecret &&
          const DeepCollectionEquality().equals(
            other.secretChatId,
            secretChatId,
          ) &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(secretChatId),
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension ChatFolderIconDataClassExtensions on ChatFolderIcon {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatFolderIcon &&
          const DeepCollectionEquality().equals(other.name, name));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(name)]);
}

extension ChatFolderNameDataClassExtensions on ChatFolderName {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatFolderName &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(
            other.animateCustomEmoji,
            animateCustomEmoji,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(animateCustomEmoji),
  ]);
}

extension ChatFolderDataClassExtensions on ChatFolder {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatFolder &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.icon, icon) &&
          const DeepCollectionEquality().equals(other.colorId, colorId) &&
          const DeepCollectionEquality().equals(
            other.isShareable,
            isShareable,
          ) &&
          const DeepCollectionEquality().equals(
            other.pinnedChatIds,
            pinnedChatIds,
          ) &&
          const DeepCollectionEquality().equals(
            other.includedChatIds,
            includedChatIds,
          ) &&
          const DeepCollectionEquality().equals(
            other.excludedChatIds,
            excludedChatIds,
          ) &&
          const DeepCollectionEquality().equals(
            other.excludeMuted,
            excludeMuted,
          ) &&
          const DeepCollectionEquality().equals(
            other.excludeRead,
            excludeRead,
          ) &&
          const DeepCollectionEquality().equals(
            other.excludeArchived,
            excludeArchived,
          ) &&
          const DeepCollectionEquality().equals(
            other.includeContacts,
            includeContacts,
          ) &&
          const DeepCollectionEquality().equals(
            other.includeNonContacts,
            includeNonContacts,
          ) &&
          const DeepCollectionEquality().equals(
            other.includeBots,
            includeBots,
          ) &&
          const DeepCollectionEquality().equals(
            other.includeGroups,
            includeGroups,
          ) &&
          const DeepCollectionEquality().equals(
            other.includeChannels,
            includeChannels,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(icon),
    const DeepCollectionEquality().hash(colorId),
    const DeepCollectionEquality().hash(isShareable),
    const DeepCollectionEquality().hash(pinnedChatIds),
    const DeepCollectionEquality().hash(includedChatIds),
    const DeepCollectionEquality().hash(excludedChatIds),
    const DeepCollectionEquality().hash(excludeMuted),
    const DeepCollectionEquality().hash(excludeRead),
    const DeepCollectionEquality().hash(excludeArchived),
    const DeepCollectionEquality().hash(includeContacts),
    const DeepCollectionEquality().hash(includeNonContacts),
    const DeepCollectionEquality().hash(includeBots),
    const DeepCollectionEquality().hash(includeGroups),
    const DeepCollectionEquality().hash(includeChannels),
  ]);
}

extension ChatFolderInfoDataClassExtensions on ChatFolderInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatFolderInfo &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.icon, icon) &&
          const DeepCollectionEquality().equals(other.colorId, colorId) &&
          const DeepCollectionEquality().equals(
            other.isShareable,
            isShareable,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasMyInviteLinks,
            hasMyInviteLinks,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(icon),
    const DeepCollectionEquality().hash(colorId),
    const DeepCollectionEquality().hash(isShareable),
    const DeepCollectionEquality().hash(hasMyInviteLinks),
  ]);
}

extension ChatFolderInviteLinkDataClassExtensions on ChatFolderInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatFolderInviteLink &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.chatIds, chatIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inviteLink),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(chatIds),
  ]);
}

extension ChatFolderInviteLinksDataClassExtensions on ChatFolderInviteLinks {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatFolderInviteLinks &&
          const DeepCollectionEquality().equals(
            other.inviteLinks,
            inviteLinks,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inviteLinks),
  ]);
}

extension ChatFolderInviteLinkInfoDataClassExtensions
    on ChatFolderInviteLinkInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatFolderInviteLinkInfo &&
          const DeepCollectionEquality().equals(
            other.chatFolderInfo,
            chatFolderInfo,
          ) &&
          const DeepCollectionEquality().equals(
            other.missingChatIds,
            missingChatIds,
          ) &&
          const DeepCollectionEquality().equals(
            other.addedChatIds,
            addedChatIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatFolderInfo),
    const DeepCollectionEquality().hash(missingChatIds),
    const DeepCollectionEquality().hash(addedChatIds),
  ]);
}

extension RecommendedChatFolderDataClassExtensions on RecommendedChatFolder {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RecommendedChatFolder &&
          const DeepCollectionEquality().equals(other.folder, folder) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(folder),
    const DeepCollectionEquality().hash(description),
  ]);
}

extension RecommendedChatFoldersDataClassExtensions on RecommendedChatFolders {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RecommendedChatFolders &&
          const DeepCollectionEquality().equals(
            other.chatFolders,
            chatFolders,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatFolders),
  ]);
}

extension ArchiveChatListSettingsDataClassExtensions
    on ArchiveChatListSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ArchiveChatListSettings &&
          const DeepCollectionEquality().equals(
            other.archiveAndMuteNewChatsFromUnknownUsers,
            archiveAndMuteNewChatsFromUnknownUsers,
          ) &&
          const DeepCollectionEquality().equals(
            other.keepUnmutedChatsArchived,
            keepUnmutedChatsArchived,
          ) &&
          const DeepCollectionEquality().equals(
            other.keepChatsFromFoldersArchived,
            keepChatsFromFoldersArchived,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(archiveAndMuteNewChatsFromUnknownUsers),
    const DeepCollectionEquality().hash(keepUnmutedChatsArchived),
    const DeepCollectionEquality().hash(keepChatsFromFoldersArchived),
  ]);
}

extension ChatListDataClassExtensions on ChatList {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatList);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatListMainDataClassExtensions on ChatListMain {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatListMain);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatListArchiveDataClassExtensions on ChatListArchive {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatListArchive);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatListFolderDataClassExtensions on ChatListFolder {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatListFolder &&
          const DeepCollectionEquality().equals(
            other.chatFolderId,
            chatFolderId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatFolderId),
  ]);
}

extension ChatListsDataClassExtensions on ChatLists {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatLists &&
          const DeepCollectionEquality().equals(other.chatLists, chatLists));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatLists),
  ]);
}

extension ChatSourceDataClassExtensions on ChatSource {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatSource);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatSourceMtprotoProxyDataClassExtensions on ChatSourceMtprotoProxy {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatSourceMtprotoProxy);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatSourcePublicServiceAnnouncementDataClassExtensions
    on ChatSourcePublicServiceAnnouncement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatSourcePublicServiceAnnouncement &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(text),
  ]);
}

extension ChatPositionDataClassExtensions on ChatPosition {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatPosition &&
          const DeepCollectionEquality().equals(other.list, list) &&
          const DeepCollectionEquality().equals(other.order, order) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned) &&
          const DeepCollectionEquality().equals(other.source, source));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(list),
    const DeepCollectionEquality().hash(order),
    const DeepCollectionEquality().hash(isPinned),
    const DeepCollectionEquality().hash(source),
  ]);
}

extension ChatAvailableReactionsDataClassExtensions on ChatAvailableReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatAvailableReactions);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatAvailableReactionsAllDataClassExtensions
    on ChatAvailableReactionsAll {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatAvailableReactionsAll &&
          const DeepCollectionEquality().equals(
            other.maxReactionCount,
            maxReactionCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(maxReactionCount),
  ]);
}

extension ChatAvailableReactionsSomeDataClassExtensions
    on ChatAvailableReactionsSome {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatAvailableReactionsSome &&
          const DeepCollectionEquality().equals(other.reactions, reactions) &&
          const DeepCollectionEquality().equals(
            other.maxReactionCount,
            maxReactionCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(reactions),
    const DeepCollectionEquality().hash(maxReactionCount),
  ]);
}

extension SavedMessagesTagDataClassExtensions on SavedMessagesTag {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SavedMessagesTag &&
          const DeepCollectionEquality().equals(other.tag, tag) &&
          const DeepCollectionEquality().equals(other.label, label) &&
          const DeepCollectionEquality().equals(other.count, count));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(tag),
    const DeepCollectionEquality().hash(label),
    const DeepCollectionEquality().hash(count),
  ]);
}

extension SavedMessagesTagsDataClassExtensions on SavedMessagesTags {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SavedMessagesTags &&
          const DeepCollectionEquality().equals(other.tags, tags));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(tags)]);
}

extension BusinessBotManageBarDataClassExtensions on BusinessBotManageBar {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessBotManageBar &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.manageUrl, manageUrl) &&
          const DeepCollectionEquality().equals(
            other.isBotPaused,
            isBotPaused,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBotReply,
            canBotReply,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(manageUrl),
    const DeepCollectionEquality().hash(isBotPaused),
    const DeepCollectionEquality().hash(canBotReply),
  ]);
}

extension VideoChatDataClassExtensions on VideoChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is VideoChat &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasParticipants,
            hasParticipants,
          ) &&
          const DeepCollectionEquality().equals(
            other.defaultParticipantId,
            defaultParticipantId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(hasParticipants),
    const DeepCollectionEquality().hash(defaultParticipantId),
  ]);
}

extension ChatDataClassExtensions on Chat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Chat &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(
            other.accentColorId,
            accentColorId,
          ) &&
          const DeepCollectionEquality().equals(
            other.backgroundCustomEmojiId,
            backgroundCustomEmojiId,
          ) &&
          const DeepCollectionEquality().equals(
            other.profileAccentColorId,
            profileAccentColorId,
          ) &&
          const DeepCollectionEquality().equals(
            other.profileBackgroundCustomEmojiId,
            profileBackgroundCustomEmojiId,
          ) &&
          const DeepCollectionEquality().equals(
            other.permissions,
            permissions,
          ) &&
          const DeepCollectionEquality().equals(
            other.lastMessage,
            lastMessage,
          ) &&
          const DeepCollectionEquality().equals(other.positions, positions) &&
          const DeepCollectionEquality().equals(other.chatLists, chatLists) &&
          const DeepCollectionEquality().equals(
            other.messageSenderId,
            messageSenderId,
          ) &&
          const DeepCollectionEquality().equals(other.blockList, blockList) &&
          const DeepCollectionEquality().equals(
            other.hasProtectedContent,
            hasProtectedContent,
          ) &&
          const DeepCollectionEquality().equals(
            other.isTranslatable,
            isTranslatable,
          ) &&
          const DeepCollectionEquality().equals(
            other.isMarkedAsUnread,
            isMarkedAsUnread,
          ) &&
          const DeepCollectionEquality().equals(
            other.viewAsTopics,
            viewAsTopics,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasScheduledMessages,
            hasScheduledMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeDeletedOnlyForSelf,
            canBeDeletedOnlyForSelf,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeDeletedForAllUsers,
            canBeDeletedForAllUsers,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeReported,
            canBeReported,
          ) &&
          const DeepCollectionEquality().equals(
            other.defaultDisableNotification,
            defaultDisableNotification,
          ) &&
          const DeepCollectionEquality().equals(
            other.unreadCount,
            unreadCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.lastReadInboxMessageId,
            lastReadInboxMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.lastReadOutboxMessageId,
            lastReadOutboxMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.unreadMentionCount,
            unreadMentionCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.unreadReactionCount,
            unreadReactionCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.notificationSettings,
            notificationSettings,
          ) &&
          const DeepCollectionEquality().equals(
            other.availableReactions,
            availableReactions,
          ) &&
          const DeepCollectionEquality().equals(
            other.messageAutoDeleteTime,
            messageAutoDeleteTime,
          ) &&
          const DeepCollectionEquality().equals(
            other.emojiStatus,
            emojiStatus,
          ) &&
          const DeepCollectionEquality().equals(other.background, background) &&
          const DeepCollectionEquality().equals(other.themeName, themeName) &&
          const DeepCollectionEquality().equals(other.actionBar, actionBar) &&
          const DeepCollectionEquality().equals(
            other.businessBotManageBar,
            businessBotManageBar,
          ) &&
          const DeepCollectionEquality().equals(other.videoChat, videoChat) &&
          const DeepCollectionEquality().equals(
            other.pendingJoinRequests,
            pendingJoinRequests,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkupMessageId,
            replyMarkupMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.draftMessage,
            draftMessage,
          ) &&
          const DeepCollectionEquality().equals(other.clientData, clientData));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(accentColorId),
    const DeepCollectionEquality().hash(backgroundCustomEmojiId),
    const DeepCollectionEquality().hash(profileAccentColorId),
    const DeepCollectionEquality().hash(profileBackgroundCustomEmojiId),
    const DeepCollectionEquality().hash(permissions),
    const DeepCollectionEquality().hash(lastMessage),
    const DeepCollectionEquality().hash(positions),
    const DeepCollectionEquality().hash(chatLists),
    const DeepCollectionEquality().hash(messageSenderId),
    const DeepCollectionEquality().hash(blockList),
    const DeepCollectionEquality().hash(hasProtectedContent),
    const DeepCollectionEquality().hash(isTranslatable),
    const DeepCollectionEquality().hash(isMarkedAsUnread),
    const DeepCollectionEquality().hash(viewAsTopics),
    const DeepCollectionEquality().hash(hasScheduledMessages),
    const DeepCollectionEquality().hash(canBeDeletedOnlyForSelf),
    const DeepCollectionEquality().hash(canBeDeletedForAllUsers),
    const DeepCollectionEquality().hash(canBeReported),
    const DeepCollectionEquality().hash(defaultDisableNotification),
    const DeepCollectionEquality().hash(unreadCount),
    const DeepCollectionEquality().hash(lastReadInboxMessageId),
    const DeepCollectionEquality().hash(lastReadOutboxMessageId),
    const DeepCollectionEquality().hash(unreadMentionCount),
    const DeepCollectionEquality().hash(unreadReactionCount),
    const DeepCollectionEquality().hash(notificationSettings),
    const DeepCollectionEquality().hash(availableReactions),
    const DeepCollectionEquality().hash(messageAutoDeleteTime),
    const DeepCollectionEquality().hash(emojiStatus),
    const DeepCollectionEquality().hash(background),
    const DeepCollectionEquality().hash(themeName),
    const DeepCollectionEquality().hash(actionBar),
    const DeepCollectionEquality().hash(businessBotManageBar),
    const DeepCollectionEquality().hash(videoChat),
    const DeepCollectionEquality().hash(pendingJoinRequests),
    const DeepCollectionEquality().hash(replyMarkupMessageId),
    const DeepCollectionEquality().hash(draftMessage),
    const DeepCollectionEquality().hash(clientData),
  ]);
}

extension ChatsDataClassExtensions on Chats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Chats &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.chatIds, chatIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(chatIds),
  ]);
}

extension FailedToAddMemberDataClassExtensions on FailedToAddMember {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FailedToAddMember &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.premiumWouldAllowInvite,
            premiumWouldAllowInvite,
          ) &&
          const DeepCollectionEquality().equals(
            other.premiumRequiredToSendMessages,
            premiumRequiredToSendMessages,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(premiumWouldAllowInvite),
    const DeepCollectionEquality().hash(premiumRequiredToSendMessages),
  ]);
}

extension FailedToAddMembersDataClassExtensions on FailedToAddMembers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FailedToAddMembers &&
          const DeepCollectionEquality().equals(
            other.failedToAddMembers,
            failedToAddMembers,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(failedToAddMembers),
  ]);
}

extension CreatedBasicGroupChatDataClassExtensions on CreatedBasicGroupChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreatedBasicGroupChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.failedToAddMembers,
            failedToAddMembers,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(failedToAddMembers),
  ]);
}

extension PublicChatTypeDataClassExtensions on PublicChatType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PublicChatType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PublicChatTypeHasUsernameDataClassExtensions
    on PublicChatTypeHasUsername {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PublicChatTypeHasUsername);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PublicChatTypeIsLocationBasedDataClassExtensions
    on PublicChatTypeIsLocationBased {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PublicChatTypeIsLocationBased);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AccountInfoDataClassExtensions on AccountInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AccountInfo &&
          const DeepCollectionEquality().equals(
            other.registrationMonth,
            registrationMonth,
          ) &&
          const DeepCollectionEquality().equals(
            other.registrationYear,
            registrationYear,
          ) &&
          const DeepCollectionEquality().equals(
            other.phoneNumberCountryCode,
            phoneNumberCountryCode,
          ) &&
          const DeepCollectionEquality().equals(
            other.lastNameChangeDate,
            lastNameChangeDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.lastPhotoChangeDate,
            lastPhotoChangeDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(registrationMonth),
    const DeepCollectionEquality().hash(registrationYear),
    const DeepCollectionEquality().hash(phoneNumberCountryCode),
    const DeepCollectionEquality().hash(lastNameChangeDate),
    const DeepCollectionEquality().hash(lastPhotoChangeDate),
  ]);
}

extension ChatActionBarDataClassExtensions on ChatActionBar {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatActionBar);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatActionBarReportSpamDataClassExtensions
    on ChatActionBarReportSpam {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatActionBarReportSpam &&
          const DeepCollectionEquality().equals(
            other.canUnarchive,
            canUnarchive,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(canUnarchive),
  ]);
}

extension ChatActionBarInviteMembersDataClassExtensions
    on ChatActionBarInviteMembers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatActionBarInviteMembers);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatActionBarReportAddBlockDataClassExtensions
    on ChatActionBarReportAddBlock {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatActionBarReportAddBlock &&
          const DeepCollectionEquality().equals(
            other.canUnarchive,
            canUnarchive,
          ) &&
          const DeepCollectionEquality().equals(
            other.accountInfo,
            accountInfo,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(canUnarchive),
    const DeepCollectionEquality().hash(accountInfo),
  ]);
}

extension ChatActionBarAddContactDataClassExtensions
    on ChatActionBarAddContact {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatActionBarAddContact);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatActionBarSharePhoneNumberDataClassExtensions
    on ChatActionBarSharePhoneNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatActionBarSharePhoneNumber);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatActionBarJoinRequestDataClassExtensions
    on ChatActionBarJoinRequest {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatActionBarJoinRequest &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.isChannel, isChannel) &&
          const DeepCollectionEquality().equals(
            other.requestDate,
            requestDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(isChannel),
    const DeepCollectionEquality().hash(requestDate),
  ]);
}

extension KeyboardButtonTypeDataClassExtensions on KeyboardButtonType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is KeyboardButtonType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension KeyboardButtonTypeTextDataClassExtensions on KeyboardButtonTypeText {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is KeyboardButtonTypeText);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension KeyboardButtonTypeRequestPhoneNumberDataClassExtensions
    on KeyboardButtonTypeRequestPhoneNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is KeyboardButtonTypeRequestPhoneNumber);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension KeyboardButtonTypeRequestLocationDataClassExtensions
    on KeyboardButtonTypeRequestLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is KeyboardButtonTypeRequestLocation);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension KeyboardButtonTypeRequestPollDataClassExtensions
    on KeyboardButtonTypeRequestPoll {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is KeyboardButtonTypeRequestPoll &&
          const DeepCollectionEquality().equals(
            other.forceRegular,
            forceRegular,
          ) &&
          const DeepCollectionEquality().equals(other.forceQuiz, forceQuiz));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(forceRegular),
    const DeepCollectionEquality().hash(forceQuiz),
  ]);
}

extension KeyboardButtonTypeRequestUsersDataClassExtensions
    on KeyboardButtonTypeRequestUsers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is KeyboardButtonTypeRequestUsers &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.restrictUserIsBot,
            restrictUserIsBot,
          ) &&
          const DeepCollectionEquality().equals(other.userIsBot, userIsBot) &&
          const DeepCollectionEquality().equals(
            other.restrictUserIsPremium,
            restrictUserIsPremium,
          ) &&
          const DeepCollectionEquality().equals(
            other.userIsPremium,
            userIsPremium,
          ) &&
          const DeepCollectionEquality().equals(
            other.maxQuantity,
            maxQuantity,
          ) &&
          const DeepCollectionEquality().equals(
            other.requestName,
            requestName,
          ) &&
          const DeepCollectionEquality().equals(
            other.requestUsername,
            requestUsername,
          ) &&
          const DeepCollectionEquality().equals(
            other.requestPhoto,
            requestPhoto,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(restrictUserIsBot),
    const DeepCollectionEquality().hash(userIsBot),
    const DeepCollectionEquality().hash(restrictUserIsPremium),
    const DeepCollectionEquality().hash(userIsPremium),
    const DeepCollectionEquality().hash(maxQuantity),
    const DeepCollectionEquality().hash(requestName),
    const DeepCollectionEquality().hash(requestUsername),
    const DeepCollectionEquality().hash(requestPhoto),
  ]);
}

extension KeyboardButtonTypeRequestChatDataClassExtensions
    on KeyboardButtonTypeRequestChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is KeyboardButtonTypeRequestChat &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.chatIsChannel,
            chatIsChannel,
          ) &&
          const DeepCollectionEquality().equals(
            other.restrictChatIsForum,
            restrictChatIsForum,
          ) &&
          const DeepCollectionEquality().equals(
            other.chatIsForum,
            chatIsForum,
          ) &&
          const DeepCollectionEquality().equals(
            other.restrictChatHasUsername,
            restrictChatHasUsername,
          ) &&
          const DeepCollectionEquality().equals(
            other.chatHasUsername,
            chatHasUsername,
          ) &&
          const DeepCollectionEquality().equals(
            other.chatIsCreated,
            chatIsCreated,
          ) &&
          const DeepCollectionEquality().equals(
            other.userAdministratorRights,
            userAdministratorRights,
          ) &&
          const DeepCollectionEquality().equals(
            other.botAdministratorRights,
            botAdministratorRights,
          ) &&
          const DeepCollectionEquality().equals(
            other.botIsMember,
            botIsMember,
          ) &&
          const DeepCollectionEquality().equals(
            other.requestTitle,
            requestTitle,
          ) &&
          const DeepCollectionEquality().equals(
            other.requestUsername,
            requestUsername,
          ) &&
          const DeepCollectionEquality().equals(
            other.requestPhoto,
            requestPhoto,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(chatIsChannel),
    const DeepCollectionEquality().hash(restrictChatIsForum),
    const DeepCollectionEquality().hash(chatIsForum),
    const DeepCollectionEquality().hash(restrictChatHasUsername),
    const DeepCollectionEquality().hash(chatHasUsername),
    const DeepCollectionEquality().hash(chatIsCreated),
    const DeepCollectionEquality().hash(userAdministratorRights),
    const DeepCollectionEquality().hash(botAdministratorRights),
    const DeepCollectionEquality().hash(botIsMember),
    const DeepCollectionEquality().hash(requestTitle),
    const DeepCollectionEquality().hash(requestUsername),
    const DeepCollectionEquality().hash(requestPhoto),
  ]);
}

extension KeyboardButtonTypeWebAppDataClassExtensions
    on KeyboardButtonTypeWebApp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is KeyboardButtonTypeWebApp &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(url)]);
}

extension KeyboardButtonDataClassExtensions on KeyboardButton {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is KeyboardButton &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension InlineKeyboardButtonTypeDataClassExtensions
    on InlineKeyboardButtonType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InlineKeyboardButtonType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InlineKeyboardButtonTypeUrlDataClassExtensions
    on InlineKeyboardButtonTypeUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineKeyboardButtonTypeUrl &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(url)]);
}

extension InlineKeyboardButtonTypeLoginUrlDataClassExtensions
    on InlineKeyboardButtonTypeLoginUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineKeyboardButtonTypeLoginUrl &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.forwardText,
            forwardText,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(forwardText),
  ]);
}

extension InlineKeyboardButtonTypeWebAppDataClassExtensions
    on InlineKeyboardButtonTypeWebApp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineKeyboardButtonTypeWebApp &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(url)]);
}

extension InlineKeyboardButtonTypeCallbackDataClassExtensions
    on InlineKeyboardButtonTypeCallback {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineKeyboardButtonTypeCallback &&
          const DeepCollectionEquality().equals(other.data, data));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(data)]);
}

extension InlineKeyboardButtonTypeCallbackWithPasswordDataClassExtensions
    on InlineKeyboardButtonTypeCallbackWithPassword {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineKeyboardButtonTypeCallbackWithPassword &&
          const DeepCollectionEquality().equals(other.data, data));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(data)]);
}

extension InlineKeyboardButtonTypeCallbackGameDataClassExtensions
    on InlineKeyboardButtonTypeCallbackGame {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineKeyboardButtonTypeCallbackGame);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InlineKeyboardButtonTypeSwitchInlineDataClassExtensions
    on InlineKeyboardButtonTypeSwitchInline {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineKeyboardButtonTypeSwitchInline &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.targetChat, targetChat));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(targetChat),
  ]);
}

extension InlineKeyboardButtonTypeBuyDataClassExtensions
    on InlineKeyboardButtonTypeBuy {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineKeyboardButtonTypeBuy);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InlineKeyboardButtonTypeUserDataClassExtensions
    on InlineKeyboardButtonTypeUser {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineKeyboardButtonTypeUser &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension InlineKeyboardButtonTypeCopyTextDataClassExtensions
    on InlineKeyboardButtonTypeCopyText {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineKeyboardButtonTypeCopyText &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(text)]);
}

extension InlineKeyboardButtonDataClassExtensions on InlineKeyboardButton {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineKeyboardButton &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension ReplyMarkupDataClassExtensions on ReplyMarkup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReplyMarkup);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReplyMarkupRemoveKeyboardDataClassExtensions
    on ReplyMarkupRemoveKeyboard {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReplyMarkupRemoveKeyboard &&
          const DeepCollectionEquality().equals(other.isPersonal, isPersonal));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isPersonal),
  ]);
}

extension ReplyMarkupForceReplyDataClassExtensions on ReplyMarkupForceReply {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReplyMarkupForceReply &&
          const DeepCollectionEquality().equals(other.isPersonal, isPersonal) &&
          const DeepCollectionEquality().equals(
            other.inputFieldPlaceholder,
            inputFieldPlaceholder,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isPersonal),
    const DeepCollectionEquality().hash(inputFieldPlaceholder),
  ]);
}

extension ReplyMarkupShowKeyboardDataClassExtensions
    on ReplyMarkupShowKeyboard {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReplyMarkupShowKeyboard &&
          const DeepCollectionEquality().equals(other.rows, rows) &&
          const DeepCollectionEquality().equals(
            other.isPersistent,
            isPersistent,
          ) &&
          const DeepCollectionEquality().equals(
            other.resizeKeyboard,
            resizeKeyboard,
          ) &&
          const DeepCollectionEquality().equals(other.oneTime, oneTime) &&
          const DeepCollectionEquality().equals(other.isPersonal, isPersonal) &&
          const DeepCollectionEquality().equals(
            other.inputFieldPlaceholder,
            inputFieldPlaceholder,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(rows),
    const DeepCollectionEquality().hash(isPersistent),
    const DeepCollectionEquality().hash(resizeKeyboard),
    const DeepCollectionEquality().hash(oneTime),
    const DeepCollectionEquality().hash(isPersonal),
    const DeepCollectionEquality().hash(inputFieldPlaceholder),
  ]);
}

extension ReplyMarkupInlineKeyboardDataClassExtensions
    on ReplyMarkupInlineKeyboard {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReplyMarkupInlineKeyboard &&
          const DeepCollectionEquality().equals(other.rows, rows));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(rows)]);
}

extension LoginUrlInfoDataClassExtensions on LoginUrlInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is LoginUrlInfo);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension LoginUrlInfoOpenDataClassExtensions on LoginUrlInfoOpen {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LoginUrlInfoOpen &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(
            other.skipConfirmation,
            skipConfirmation,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(skipConfirmation),
  ]);
}

extension LoginUrlInfoRequestConfirmationDataClassExtensions
    on LoginUrlInfoRequestConfirmation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LoginUrlInfoRequestConfirmation &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.domain, domain) &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.requestWriteAccess,
            requestWriteAccess,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(domain),
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(requestWriteAccess),
  ]);
}

extension ThemeParametersDataClassExtensions on ThemeParameters {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ThemeParameters &&
          const DeepCollectionEquality().equals(
            other.backgroundColor,
            backgroundColor,
          ) &&
          const DeepCollectionEquality().equals(
            other.secondaryBackgroundColor,
            secondaryBackgroundColor,
          ) &&
          const DeepCollectionEquality().equals(
            other.headerBackgroundColor,
            headerBackgroundColor,
          ) &&
          const DeepCollectionEquality().equals(
            other.bottomBarBackgroundColor,
            bottomBarBackgroundColor,
          ) &&
          const DeepCollectionEquality().equals(
            other.sectionBackgroundColor,
            sectionBackgroundColor,
          ) &&
          const DeepCollectionEquality().equals(
            other.sectionSeparatorColor,
            sectionSeparatorColor,
          ) &&
          const DeepCollectionEquality().equals(other.textColor, textColor) &&
          const DeepCollectionEquality().equals(
            other.accentTextColor,
            accentTextColor,
          ) &&
          const DeepCollectionEquality().equals(
            other.sectionHeaderTextColor,
            sectionHeaderTextColor,
          ) &&
          const DeepCollectionEquality().equals(
            other.subtitleTextColor,
            subtitleTextColor,
          ) &&
          const DeepCollectionEquality().equals(
            other.destructiveTextColor,
            destructiveTextColor,
          ) &&
          const DeepCollectionEquality().equals(other.hintColor, hintColor) &&
          const DeepCollectionEquality().equals(other.linkColor, linkColor) &&
          const DeepCollectionEquality().equals(
            other.buttonColor,
            buttonColor,
          ) &&
          const DeepCollectionEquality().equals(
            other.buttonTextColor,
            buttonTextColor,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(backgroundColor),
    const DeepCollectionEquality().hash(secondaryBackgroundColor),
    const DeepCollectionEquality().hash(headerBackgroundColor),
    const DeepCollectionEquality().hash(bottomBarBackgroundColor),
    const DeepCollectionEquality().hash(sectionBackgroundColor),
    const DeepCollectionEquality().hash(sectionSeparatorColor),
    const DeepCollectionEquality().hash(textColor),
    const DeepCollectionEquality().hash(accentTextColor),
    const DeepCollectionEquality().hash(sectionHeaderTextColor),
    const DeepCollectionEquality().hash(subtitleTextColor),
    const DeepCollectionEquality().hash(destructiveTextColor),
    const DeepCollectionEquality().hash(hintColor),
    const DeepCollectionEquality().hash(linkColor),
    const DeepCollectionEquality().hash(buttonColor),
    const DeepCollectionEquality().hash(buttonTextColor),
  ]);
}

extension WebAppOpenModeDataClassExtensions on WebAppOpenMode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is WebAppOpenMode);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension WebAppOpenModeCompactDataClassExtensions on WebAppOpenModeCompact {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is WebAppOpenModeCompact);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension WebAppOpenModeFullSizeDataClassExtensions on WebAppOpenModeFullSize {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is WebAppOpenModeFullSize);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension WebAppOpenModeFullScreenDataClassExtensions
    on WebAppOpenModeFullScreen {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is WebAppOpenModeFullScreen);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FoundWebAppDataClassExtensions on FoundWebApp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FoundWebApp &&
          const DeepCollectionEquality().equals(other.webApp, webApp) &&
          const DeepCollectionEquality().equals(
            other.requestWriteAccess,
            requestWriteAccess,
          ) &&
          const DeepCollectionEquality().equals(
            other.skipConfirmation,
            skipConfirmation,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(webApp),
    const DeepCollectionEquality().hash(requestWriteAccess),
    const DeepCollectionEquality().hash(skipConfirmation),
  ]);
}

extension WebAppInfoDataClassExtensions on WebAppInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is WebAppInfo &&
          const DeepCollectionEquality().equals(other.launchId, launchId) &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(launchId),
    const DeepCollectionEquality().hash(url),
  ]);
}

extension MainWebAppDataClassExtensions on MainWebApp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MainWebApp &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.mode, mode));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(mode),
  ]);
}

extension WebAppOpenParametersDataClassExtensions on WebAppOpenParameters {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is WebAppOpenParameters &&
          const DeepCollectionEquality().equals(other.theme, theme) &&
          const DeepCollectionEquality().equals(
            other.applicationName,
            applicationName,
          ) &&
          const DeepCollectionEquality().equals(other.mode, mode));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(theme),
    const DeepCollectionEquality().hash(applicationName),
    const DeepCollectionEquality().hash(mode),
  ]);
}

extension MessageThreadInfoDataClassExtensions on MessageThreadInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageThreadInfo &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ) &&
          const DeepCollectionEquality().equals(other.replyInfo, replyInfo) &&
          const DeepCollectionEquality().equals(
            other.unreadMessageCount,
            unreadMessageCount,
          ) &&
          const DeepCollectionEquality().equals(other.messages, messages) &&
          const DeepCollectionEquality().equals(
            other.draftMessage,
            draftMessage,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
    const DeepCollectionEquality().hash(replyInfo),
    const DeepCollectionEquality().hash(unreadMessageCount),
    const DeepCollectionEquality().hash(messages),
    const DeepCollectionEquality().hash(draftMessage),
  ]);
}

extension SavedMessagesTopicTypeDataClassExtensions on SavedMessagesTopicType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SavedMessagesTopicType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SavedMessagesTopicTypeMyNotesDataClassExtensions
    on SavedMessagesTopicTypeMyNotes {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SavedMessagesTopicTypeMyNotes);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SavedMessagesTopicTypeAuthorHiddenDataClassExtensions
    on SavedMessagesTopicTypeAuthorHidden {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SavedMessagesTopicTypeAuthorHidden);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SavedMessagesTopicTypeSavedFromChatDataClassExtensions
    on SavedMessagesTopicTypeSavedFromChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SavedMessagesTopicTypeSavedFromChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension SavedMessagesTopicDataClassExtensions on SavedMessagesTopic {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SavedMessagesTopic &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned) &&
          const DeepCollectionEquality().equals(other.order, order) &&
          const DeepCollectionEquality().equals(
            other.lastMessage,
            lastMessage,
          ) &&
          const DeepCollectionEquality().equals(
            other.draftMessage,
            draftMessage,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(isPinned),
    const DeepCollectionEquality().hash(order),
    const DeepCollectionEquality().hash(lastMessage),
    const DeepCollectionEquality().hash(draftMessage),
  ]);
}

extension DirectMessagesChatTopicDataClassExtensions
    on DirectMessagesChatTopic {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DirectMessagesChatTopic &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.senderId, senderId) &&
          const DeepCollectionEquality().equals(other.order, order) &&
          const DeepCollectionEquality().equals(
            other.canSendUnpaidMessages,
            canSendUnpaidMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.isMarkedAsUnread,
            isMarkedAsUnread,
          ) &&
          const DeepCollectionEquality().equals(
            other.unreadCount,
            unreadCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.lastReadInboxMessageId,
            lastReadInboxMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.lastReadOutboxMessageId,
            lastReadOutboxMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.unreadReactionCount,
            unreadReactionCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.lastMessage,
            lastMessage,
          ) &&
          const DeepCollectionEquality().equals(
            other.draftMessage,
            draftMessage,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(senderId),
    const DeepCollectionEquality().hash(order),
    const DeepCollectionEquality().hash(canSendUnpaidMessages),
    const DeepCollectionEquality().hash(isMarkedAsUnread),
    const DeepCollectionEquality().hash(unreadCount),
    const DeepCollectionEquality().hash(lastReadInboxMessageId),
    const DeepCollectionEquality().hash(lastReadOutboxMessageId),
    const DeepCollectionEquality().hash(unreadReactionCount),
    const DeepCollectionEquality().hash(lastMessage),
    const DeepCollectionEquality().hash(draftMessage),
  ]);
}

extension ForumTopicIconDataClassExtensions on ForumTopicIcon {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ForumTopicIcon &&
          const DeepCollectionEquality().equals(other.color, color) &&
          const DeepCollectionEquality().equals(
            other.customEmojiId,
            customEmojiId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(color),
    const DeepCollectionEquality().hash(customEmojiId),
  ]);
}

extension ForumTopicInfoDataClassExtensions on ForumTopicInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ForumTopicInfo &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.forumTopicId,
            forumTopicId,
          ) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.icon, icon) &&
          const DeepCollectionEquality().equals(
            other.creationDate,
            creationDate,
          ) &&
          const DeepCollectionEquality().equals(other.creatorId, creatorId) &&
          const DeepCollectionEquality().equals(other.isGeneral, isGeneral) &&
          const DeepCollectionEquality().equals(other.isOutgoing, isOutgoing) &&
          const DeepCollectionEquality().equals(other.isClosed, isClosed) &&
          const DeepCollectionEquality().equals(other.isHidden, isHidden));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(forumTopicId),
    const DeepCollectionEquality().hash(messageThreadId),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(icon),
    const DeepCollectionEquality().hash(creationDate),
    const DeepCollectionEquality().hash(creatorId),
    const DeepCollectionEquality().hash(isGeneral),
    const DeepCollectionEquality().hash(isOutgoing),
    const DeepCollectionEquality().hash(isClosed),
    const DeepCollectionEquality().hash(isHidden),
  ]);
}

extension ForumTopicDataClassExtensions on ForumTopic {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ForumTopic &&
          const DeepCollectionEquality().equals(other.info, info) &&
          const DeepCollectionEquality().equals(
            other.lastMessage,
            lastMessage,
          ) &&
          const DeepCollectionEquality().equals(other.order, order) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned) &&
          const DeepCollectionEquality().equals(
            other.unreadCount,
            unreadCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.lastReadInboxMessageId,
            lastReadInboxMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.lastReadOutboxMessageId,
            lastReadOutboxMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.unreadMentionCount,
            unreadMentionCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.unreadReactionCount,
            unreadReactionCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.notificationSettings,
            notificationSettings,
          ) &&
          const DeepCollectionEquality().equals(
            other.draftMessage,
            draftMessage,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(info),
    const DeepCollectionEquality().hash(lastMessage),
    const DeepCollectionEquality().hash(order),
    const DeepCollectionEquality().hash(isPinned),
    const DeepCollectionEquality().hash(unreadCount),
    const DeepCollectionEquality().hash(lastReadInboxMessageId),
    const DeepCollectionEquality().hash(lastReadOutboxMessageId),
    const DeepCollectionEquality().hash(unreadMentionCount),
    const DeepCollectionEquality().hash(unreadReactionCount),
    const DeepCollectionEquality().hash(notificationSettings),
    const DeepCollectionEquality().hash(draftMessage),
  ]);
}

extension ForumTopicsDataClassExtensions on ForumTopics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ForumTopics &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.topics, topics) &&
          const DeepCollectionEquality().equals(
            other.nextOffsetDate,
            nextOffsetDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.nextOffsetMessageId,
            nextOffsetMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.nextOffsetMessageThreadId,
            nextOffsetMessageThreadId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(topics),
    const DeepCollectionEquality().hash(nextOffsetDate),
    const DeepCollectionEquality().hash(nextOffsetMessageId),
    const DeepCollectionEquality().hash(nextOffsetMessageThreadId),
  ]);
}

extension LinkPreviewOptionsDataClassExtensions on LinkPreviewOptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewOptions &&
          const DeepCollectionEquality().equals(other.isDisabled, isDisabled) &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(
            other.forceSmallMedia,
            forceSmallMedia,
          ) &&
          const DeepCollectionEquality().equals(
            other.forceLargeMedia,
            forceLargeMedia,
          ) &&
          const DeepCollectionEquality().equals(
            other.showAboveText,
            showAboveText,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isDisabled),
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(forceSmallMedia),
    const DeepCollectionEquality().hash(forceLargeMedia),
    const DeepCollectionEquality().hash(showAboveText),
  ]);
}

extension SharedUserDataClassExtensions on SharedUser {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SharedUser &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.firstName, firstName) &&
          const DeepCollectionEquality().equals(other.lastName, lastName) &&
          const DeepCollectionEquality().equals(other.username, username) &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(firstName),
    const DeepCollectionEquality().hash(lastName),
    const DeepCollectionEquality().hash(username),
    const DeepCollectionEquality().hash(photo),
  ]);
}

extension SharedChatDataClassExtensions on SharedChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SharedChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.username, username) &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(username),
    const DeepCollectionEquality().hash(photo),
  ]);
}

extension ThemeSettingsDataClassExtensions on ThemeSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ThemeSettings &&
          const DeepCollectionEquality().equals(
            other.accentColor,
            accentColor,
          ) &&
          const DeepCollectionEquality().equals(other.background, background) &&
          const DeepCollectionEquality().equals(
            other.outgoingMessageFill,
            outgoingMessageFill,
          ) &&
          const DeepCollectionEquality().equals(
            other.animateOutgoingMessageFill,
            animateOutgoingMessageFill,
          ) &&
          const DeepCollectionEquality().equals(
            other.outgoingMessageAccentColor,
            outgoingMessageAccentColor,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(accentColor),
    const DeepCollectionEquality().hash(background),
    const DeepCollectionEquality().hash(outgoingMessageFill),
    const DeepCollectionEquality().hash(animateOutgoingMessageFill),
    const DeepCollectionEquality().hash(outgoingMessageAccentColor),
  ]);
}

extension RichTextDataClassExtensions on RichText {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is RichText);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension RichTextPlainDataClassExtensions on RichTextPlain {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RichTextPlain &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(text)]);
}

extension RichTextBoldDataClassExtensions on RichTextBold {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RichTextBold &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(text)]);
}

extension RichTextItalicDataClassExtensions on RichTextItalic {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RichTextItalic &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(text)]);
}

extension RichTextUnderlineDataClassExtensions on RichTextUnderline {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RichTextUnderline &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(text)]);
}

extension RichTextStrikethroughDataClassExtensions on RichTextStrikethrough {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RichTextStrikethrough &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(text)]);
}

extension RichTextFixedDataClassExtensions on RichTextFixed {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RichTextFixed &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(text)]);
}

extension RichTextUrlDataClassExtensions on RichTextUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RichTextUrl &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.isCached, isCached));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(isCached),
  ]);
}

extension RichTextEmailAddressDataClassExtensions on RichTextEmailAddress {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RichTextEmailAddress &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(
            other.emailAddress,
            emailAddress,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(emailAddress),
  ]);
}

extension RichTextSubscriptDataClassExtensions on RichTextSubscript {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RichTextSubscript &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(text)]);
}

extension RichTextSuperscriptDataClassExtensions on RichTextSuperscript {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RichTextSuperscript &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(text)]);
}

extension RichTextMarkedDataClassExtensions on RichTextMarked {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RichTextMarked &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(text)]);
}

extension RichTextPhoneNumberDataClassExtensions on RichTextPhoneNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RichTextPhoneNumber &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(
            other.phoneNumber,
            phoneNumber,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(phoneNumber),
  ]);
}

extension RichTextIconDataClassExtensions on RichTextIcon {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RichTextIcon &&
          const DeepCollectionEquality().equals(other.document, document) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(document),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
  ]);
}

extension RichTextReferenceDataClassExtensions on RichTextReference {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RichTextReference &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.anchorName, anchorName) &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(anchorName),
    const DeepCollectionEquality().hash(url),
  ]);
}

extension RichTextAnchorDataClassExtensions on RichTextAnchor {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RichTextAnchor &&
          const DeepCollectionEquality().equals(other.name, name));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(name)]);
}

extension RichTextAnchorLinkDataClassExtensions on RichTextAnchorLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RichTextAnchorLink &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.anchorName, anchorName) &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(anchorName),
    const DeepCollectionEquality().hash(url),
  ]);
}

extension RichTextsDataClassExtensions on RichTexts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RichTexts &&
          const DeepCollectionEquality().equals(other.texts, texts));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(texts)]);
}

extension PageBlockCaptionDataClassExtensions on PageBlockCaption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockCaption &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.credit, credit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(credit),
  ]);
}

extension PageBlockListItemDataClassExtensions on PageBlockListItem {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockListItem &&
          const DeepCollectionEquality().equals(other.label, label) &&
          const DeepCollectionEquality().equals(other.pageBlocks, pageBlocks));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(label),
    const DeepCollectionEquality().hash(pageBlocks),
  ]);
}

extension PageBlockHorizontalAlignmentDataClassExtensions
    on PageBlockHorizontalAlignment {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockHorizontalAlignment);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PageBlockHorizontalAlignmentLeftDataClassExtensions
    on PageBlockHorizontalAlignmentLeft {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockHorizontalAlignmentLeft);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PageBlockHorizontalAlignmentCenterDataClassExtensions
    on PageBlockHorizontalAlignmentCenter {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockHorizontalAlignmentCenter);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PageBlockHorizontalAlignmentRightDataClassExtensions
    on PageBlockHorizontalAlignmentRight {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockHorizontalAlignmentRight);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PageBlockVerticalAlignmentDataClassExtensions
    on PageBlockVerticalAlignment {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PageBlockVerticalAlignment);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PageBlockVerticalAlignmentTopDataClassExtensions
    on PageBlockVerticalAlignmentTop {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockVerticalAlignmentTop);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PageBlockVerticalAlignmentMiddleDataClassExtensions
    on PageBlockVerticalAlignmentMiddle {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockVerticalAlignmentMiddle);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PageBlockVerticalAlignmentBottomDataClassExtensions
    on PageBlockVerticalAlignmentBottom {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockVerticalAlignmentBottom);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PageBlockTableCellDataClassExtensions on PageBlockTableCell {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockTableCell &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.isHeader, isHeader) &&
          const DeepCollectionEquality().equals(other.colspan, colspan) &&
          const DeepCollectionEquality().equals(other.rowspan, rowspan) &&
          const DeepCollectionEquality().equals(other.align, align) &&
          const DeepCollectionEquality().equals(other.valign, valign));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(isHeader),
    const DeepCollectionEquality().hash(colspan),
    const DeepCollectionEquality().hash(rowspan),
    const DeepCollectionEquality().hash(align),
    const DeepCollectionEquality().hash(valign),
  ]);
}

extension PageBlockRelatedArticleDataClassExtensions
    on PageBlockRelatedArticle {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockRelatedArticle &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ) &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(other.author, author) &&
          const DeepCollectionEquality().equals(
            other.publishDate,
            publishDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(description),
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(author),
    const DeepCollectionEquality().hash(publishDate),
  ]);
}

extension PageBlockDataClassExtensions on PageBlock {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PageBlock);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PageBlockTitleDataClassExtensions on PageBlockTitle {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockTitle &&
          const DeepCollectionEquality().equals(other.title, title));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(title)]);
}

extension PageBlockSubtitleDataClassExtensions on PageBlockSubtitle {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockSubtitle &&
          const DeepCollectionEquality().equals(other.subtitle, subtitle));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(subtitle),
  ]);
}

extension PageBlockAuthorDateDataClassExtensions on PageBlockAuthorDate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockAuthorDate &&
          const DeepCollectionEquality().equals(other.author, author) &&
          const DeepCollectionEquality().equals(
            other.publishDate,
            publishDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(author),
    const DeepCollectionEquality().hash(publishDate),
  ]);
}

extension PageBlockHeaderDataClassExtensions on PageBlockHeader {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockHeader &&
          const DeepCollectionEquality().equals(other.header, header));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(header),
  ]);
}

extension PageBlockSubheaderDataClassExtensions on PageBlockSubheader {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockSubheader &&
          const DeepCollectionEquality().equals(other.subheader, subheader));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(subheader),
  ]);
}

extension PageBlockKickerDataClassExtensions on PageBlockKicker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockKicker &&
          const DeepCollectionEquality().equals(other.kicker, kicker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(kicker),
  ]);
}

extension PageBlockParagraphDataClassExtensions on PageBlockParagraph {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockParagraph &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(text)]);
}

extension PageBlockPreformattedDataClassExtensions on PageBlockPreformatted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockPreformatted &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.language, language));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(language),
  ]);
}

extension PageBlockFooterDataClassExtensions on PageBlockFooter {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockFooter &&
          const DeepCollectionEquality().equals(other.footer, footer));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(footer),
  ]);
}

extension PageBlockDividerDataClassExtensions on PageBlockDivider {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PageBlockDivider);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PageBlockAnchorDataClassExtensions on PageBlockAnchor {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockAnchor &&
          const DeepCollectionEquality().equals(other.name, name));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(name)]);
}

extension PageBlockListDataClassExtensions on PageBlockList {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockList &&
          const DeepCollectionEquality().equals(other.items, items));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(items)]);
}

extension PageBlockBlockQuoteDataClassExtensions on PageBlockBlockQuote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockBlockQuote &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.credit, credit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(credit),
  ]);
}

extension PageBlockPullQuoteDataClassExtensions on PageBlockPullQuote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockPullQuote &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.credit, credit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(credit),
  ]);
}

extension PageBlockAnimationDataClassExtensions on PageBlockAnimation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockAnimation &&
          const DeepCollectionEquality().equals(other.animation, animation) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(
            other.needAutoplay,
            needAutoplay,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(animation),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(needAutoplay),
  ]);
}

extension PageBlockAudioDataClassExtensions on PageBlockAudio {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockAudio &&
          const DeepCollectionEquality().equals(other.audio, audio) &&
          const DeepCollectionEquality().equals(other.caption, caption));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(audio),
    const DeepCollectionEquality().hash(caption),
  ]);
}

extension PageBlockPhotoDataClassExtensions on PageBlockPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockPhoto &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(url),
  ]);
}

extension PageBlockVideoDataClassExtensions on PageBlockVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockVideo &&
          const DeepCollectionEquality().equals(other.video, video) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(
            other.needAutoplay,
            needAutoplay,
          ) &&
          const DeepCollectionEquality().equals(other.isLooped, isLooped));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(video),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(needAutoplay),
    const DeepCollectionEquality().hash(isLooped),
  ]);
}

extension PageBlockVoiceNoteDataClassExtensions on PageBlockVoiceNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockVoiceNote &&
          const DeepCollectionEquality().equals(other.voiceNote, voiceNote) &&
          const DeepCollectionEquality().equals(other.caption, caption));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(voiceNote),
    const DeepCollectionEquality().hash(caption),
  ]);
}

extension PageBlockCoverDataClassExtensions on PageBlockCover {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockCover &&
          const DeepCollectionEquality().equals(other.cover, cover));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(cover)]);
}

extension PageBlockEmbeddedDataClassExtensions on PageBlockEmbedded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockEmbedded &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.html, html) &&
          const DeepCollectionEquality().equals(
            other.posterPhoto,
            posterPhoto,
          ) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(
            other.isFullWidth,
            isFullWidth,
          ) &&
          const DeepCollectionEquality().equals(
            other.allowScrolling,
            allowScrolling,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(html),
    const DeepCollectionEquality().hash(posterPhoto),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(isFullWidth),
    const DeepCollectionEquality().hash(allowScrolling),
  ]);
}

extension PageBlockEmbeddedPostDataClassExtensions on PageBlockEmbeddedPost {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockEmbeddedPost &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.author, author) &&
          const DeepCollectionEquality().equals(
            other.authorPhoto,
            authorPhoto,
          ) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(other.pageBlocks, pageBlocks) &&
          const DeepCollectionEquality().equals(other.caption, caption));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(author),
    const DeepCollectionEquality().hash(authorPhoto),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(pageBlocks),
    const DeepCollectionEquality().hash(caption),
  ]);
}

extension PageBlockCollageDataClassExtensions on PageBlockCollage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockCollage &&
          const DeepCollectionEquality().equals(other.pageBlocks, pageBlocks) &&
          const DeepCollectionEquality().equals(other.caption, caption));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(pageBlocks),
    const DeepCollectionEquality().hash(caption),
  ]);
}

extension PageBlockSlideshowDataClassExtensions on PageBlockSlideshow {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockSlideshow &&
          const DeepCollectionEquality().equals(other.pageBlocks, pageBlocks) &&
          const DeepCollectionEquality().equals(other.caption, caption));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(pageBlocks),
    const DeepCollectionEquality().hash(caption),
  ]);
}

extension PageBlockChatLinkDataClassExtensions on PageBlockChatLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockChatLink &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(
            other.accentColorId,
            accentColorId,
          ) &&
          const DeepCollectionEquality().equals(other.username, username));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(accentColorId),
    const DeepCollectionEquality().hash(username),
  ]);
}

extension PageBlockTableDataClassExtensions on PageBlockTable {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockTable &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(other.cells, cells) &&
          const DeepCollectionEquality().equals(other.isBordered, isBordered) &&
          const DeepCollectionEquality().equals(other.isStriped, isStriped));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(cells),
    const DeepCollectionEquality().hash(isBordered),
    const DeepCollectionEquality().hash(isStriped),
  ]);
}

extension PageBlockDetailsDataClassExtensions on PageBlockDetails {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockDetails &&
          const DeepCollectionEquality().equals(other.header, header) &&
          const DeepCollectionEquality().equals(other.pageBlocks, pageBlocks) &&
          const DeepCollectionEquality().equals(other.isOpen, isOpen));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(header),
    const DeepCollectionEquality().hash(pageBlocks),
    const DeepCollectionEquality().hash(isOpen),
  ]);
}

extension PageBlockRelatedArticlesDataClassExtensions
    on PageBlockRelatedArticles {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockRelatedArticles &&
          const DeepCollectionEquality().equals(other.header, header) &&
          const DeepCollectionEquality().equals(other.articles, articles));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(header),
    const DeepCollectionEquality().hash(articles),
  ]);
}

extension PageBlockMapDataClassExtensions on PageBlockMap {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PageBlockMap &&
          const DeepCollectionEquality().equals(other.location, location) &&
          const DeepCollectionEquality().equals(other.zoom, zoom) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(other.caption, caption));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(location),
    const DeepCollectionEquality().hash(zoom),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(caption),
  ]);
}

extension WebPageInstantViewDataClassExtensions on WebPageInstantView {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is WebPageInstantView &&
          const DeepCollectionEquality().equals(other.pageBlocks, pageBlocks) &&
          const DeepCollectionEquality().equals(other.viewCount, viewCount) &&
          const DeepCollectionEquality().equals(other.version, version) &&
          const DeepCollectionEquality().equals(other.isRtl, isRtl) &&
          const DeepCollectionEquality().equals(other.isFull, isFull) &&
          const DeepCollectionEquality().equals(
            other.feedbackLink,
            feedbackLink,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(pageBlocks),
    const DeepCollectionEquality().hash(viewCount),
    const DeepCollectionEquality().hash(version),
    const DeepCollectionEquality().hash(isRtl),
    const DeepCollectionEquality().hash(isFull),
    const DeepCollectionEquality().hash(feedbackLink),
  ]);
}

extension LinkPreviewAlbumMediaDataClassExtensions on LinkPreviewAlbumMedia {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is LinkPreviewAlbumMedia);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension LinkPreviewAlbumMediaPhotoDataClassExtensions
    on LinkPreviewAlbumMediaPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewAlbumMediaPhoto &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(photo)]);
}

extension LinkPreviewAlbumMediaVideoDataClassExtensions
    on LinkPreviewAlbumMediaVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewAlbumMediaVideo &&
          const DeepCollectionEquality().equals(other.video, video));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(video)]);
}

extension LinkPreviewTypeDataClassExtensions on LinkPreviewType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is LinkPreviewType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension LinkPreviewTypeAlbumDataClassExtensions on LinkPreviewTypeAlbum {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeAlbum &&
          const DeepCollectionEquality().equals(other.media, media) &&
          const DeepCollectionEquality().equals(other.caption, caption));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(media),
    const DeepCollectionEquality().hash(caption),
  ]);
}

extension LinkPreviewTypeAnimationDataClassExtensions
    on LinkPreviewTypeAnimation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeAnimation &&
          const DeepCollectionEquality().equals(other.animation, animation));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(animation),
  ]);
}

extension LinkPreviewTypeAppDataClassExtensions on LinkPreviewTypeApp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeApp &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(photo)]);
}

extension LinkPreviewTypeArticleDataClassExtensions on LinkPreviewTypeArticle {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeArticle &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(photo)]);
}

extension LinkPreviewTypeAudioDataClassExtensions on LinkPreviewTypeAudio {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeAudio &&
          const DeepCollectionEquality().equals(other.audio, audio));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(audio)]);
}

extension LinkPreviewTypeBackgroundDataClassExtensions
    on LinkPreviewTypeBackground {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeBackground &&
          const DeepCollectionEquality().equals(other.document, document) &&
          const DeepCollectionEquality().equals(
            other.backgroundType,
            backgroundType,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(document),
    const DeepCollectionEquality().hash(backgroundType),
  ]);
}

extension LinkPreviewTypeChannelBoostDataClassExtensions
    on LinkPreviewTypeChannelBoost {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeChannelBoost &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(photo)]);
}

extension LinkPreviewTypeChatDataClassExtensions on LinkPreviewTypeChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeChat &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(
            other.createsJoinRequest,
            createsJoinRequest,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(createsJoinRequest),
  ]);
}

extension LinkPreviewTypeDocumentDataClassExtensions
    on LinkPreviewTypeDocument {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeDocument &&
          const DeepCollectionEquality().equals(other.document, document));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(document),
  ]);
}

extension LinkPreviewTypeEmbeddedAnimationPlayerDataClassExtensions
    on LinkPreviewTypeEmbeddedAnimationPlayer {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeEmbeddedAnimationPlayer &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
  ]);
}

extension LinkPreviewTypeEmbeddedAudioPlayerDataClassExtensions
    on LinkPreviewTypeEmbeddedAudioPlayer {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeEmbeddedAudioPlayer &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
  ]);
}

extension LinkPreviewTypeEmbeddedVideoPlayerDataClassExtensions
    on LinkPreviewTypeEmbeddedVideoPlayer {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeEmbeddedVideoPlayer &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
  ]);
}

extension LinkPreviewTypeExternalAudioDataClassExtensions
    on LinkPreviewTypeExternalAudio {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeExternalAudio &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.mimeType, mimeType) &&
          const DeepCollectionEquality().equals(other.duration, duration));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(mimeType),
    const DeepCollectionEquality().hash(duration),
  ]);
}

extension LinkPreviewTypeExternalVideoDataClassExtensions
    on LinkPreviewTypeExternalVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeExternalVideo &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.mimeType, mimeType) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(other.duration, duration));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(mimeType),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(duration),
  ]);
}

extension LinkPreviewTypeGroupCallDataClassExtensions
    on LinkPreviewTypeGroupCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is LinkPreviewTypeGroupCall);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension LinkPreviewTypeInvoiceDataClassExtensions on LinkPreviewTypeInvoice {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is LinkPreviewTypeInvoice);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension LinkPreviewTypeMessageDataClassExtensions on LinkPreviewTypeMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is LinkPreviewTypeMessage);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension LinkPreviewTypePhotoDataClassExtensions on LinkPreviewTypePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypePhoto &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(photo)]);
}

extension LinkPreviewTypePremiumGiftCodeDataClassExtensions
    on LinkPreviewTypePremiumGiftCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypePremiumGiftCode);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension LinkPreviewTypeShareableChatFolderDataClassExtensions
    on LinkPreviewTypeShareableChatFolder {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeShareableChatFolder);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension LinkPreviewTypeStickerDataClassExtensions on LinkPreviewTypeSticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeSticker &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension LinkPreviewTypeStickerSetDataClassExtensions
    on LinkPreviewTypeStickerSet {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeStickerSet &&
          const DeepCollectionEquality().equals(other.stickers, stickers));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickers),
  ]);
}

extension LinkPreviewTypeStoryDataClassExtensions on LinkPreviewTypeStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeStory &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
  ]);
}

extension LinkPreviewTypeSupergroupBoostDataClassExtensions
    on LinkPreviewTypeSupergroupBoost {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeSupergroupBoost &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(photo)]);
}

extension LinkPreviewTypeThemeDataClassExtensions on LinkPreviewTypeTheme {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeTheme &&
          const DeepCollectionEquality().equals(other.documents, documents) &&
          const DeepCollectionEquality().equals(other.settings, settings));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(documents),
    const DeepCollectionEquality().hash(settings),
  ]);
}

extension LinkPreviewTypeUnsupportedDataClassExtensions
    on LinkPreviewTypeUnsupported {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is LinkPreviewTypeUnsupported);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension LinkPreviewTypeUpgradedGiftDataClassExtensions
    on LinkPreviewTypeUpgradedGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeUpgradedGift &&
          const DeepCollectionEquality().equals(other.gift, gift));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(gift)]);
}

extension LinkPreviewTypeUserDataClassExtensions on LinkPreviewTypeUser {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeUser &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(other.isBot, isBot));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(isBot),
  ]);
}

extension LinkPreviewTypeVideoDataClassExtensions on LinkPreviewTypeVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeVideo &&
          const DeepCollectionEquality().equals(other.video, video) &&
          const DeepCollectionEquality().equals(other.cover, cover) &&
          const DeepCollectionEquality().equals(
            other.startTimestamp,
            startTimestamp,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(video),
    const DeepCollectionEquality().hash(cover),
    const DeepCollectionEquality().hash(startTimestamp),
  ]);
}

extension LinkPreviewTypeVideoChatDataClassExtensions
    on LinkPreviewTypeVideoChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeVideoChat &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(
            other.isLiveStream,
            isLiveStream,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(isLiveStream),
  ]);
}

extension LinkPreviewTypeVideoNoteDataClassExtensions
    on LinkPreviewTypeVideoNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeVideoNote &&
          const DeepCollectionEquality().equals(other.videoNote, videoNote));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(videoNote),
  ]);
}

extension LinkPreviewTypeVoiceNoteDataClassExtensions
    on LinkPreviewTypeVoiceNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeVoiceNote &&
          const DeepCollectionEquality().equals(other.voiceNote, voiceNote));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(voiceNote),
  ]);
}

extension LinkPreviewTypeWebAppDataClassExtensions on LinkPreviewTypeWebApp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreviewTypeWebApp &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(photo)]);
}

extension LinkPreviewDataClassExtensions on LinkPreview {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LinkPreview &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.displayUrl, displayUrl) &&
          const DeepCollectionEquality().equals(other.siteName, siteName) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ) &&
          const DeepCollectionEquality().equals(other.author, author) &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(
            other.hasLargeMedia,
            hasLargeMedia,
          ) &&
          const DeepCollectionEquality().equals(
            other.showLargeMedia,
            showLargeMedia,
          ) &&
          const DeepCollectionEquality().equals(
            other.showMediaAboveDescription,
            showMediaAboveDescription,
          ) &&
          const DeepCollectionEquality().equals(
            other.skipConfirmation,
            skipConfirmation,
          ) &&
          const DeepCollectionEquality().equals(
            other.showAboveText,
            showAboveText,
          ) &&
          const DeepCollectionEquality().equals(
            other.instantViewVersion,
            instantViewVersion,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(displayUrl),
    const DeepCollectionEquality().hash(siteName),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(description),
    const DeepCollectionEquality().hash(author),
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(hasLargeMedia),
    const DeepCollectionEquality().hash(showLargeMedia),
    const DeepCollectionEquality().hash(showMediaAboveDescription),
    const DeepCollectionEquality().hash(skipConfirmation),
    const DeepCollectionEquality().hash(showAboveText),
    const DeepCollectionEquality().hash(instantViewVersion),
  ]);
}

extension CountryInfoDataClassExtensions on CountryInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CountryInfo &&
          const DeepCollectionEquality().equals(
            other.countryCode,
            countryCode,
          ) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(
            other.englishName,
            englishName,
          ) &&
          const DeepCollectionEquality().equals(other.isHidden, isHidden) &&
          const DeepCollectionEquality().equals(
            other.callingCodes,
            callingCodes,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(countryCode),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(englishName),
    const DeepCollectionEquality().hash(isHidden),
    const DeepCollectionEquality().hash(callingCodes),
  ]);
}

extension CountriesDataClassExtensions on Countries {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Countries &&
          const DeepCollectionEquality().equals(other.countries, countries));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(countries),
  ]);
}

extension PhoneNumberInfoDataClassExtensions on PhoneNumberInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PhoneNumberInfo &&
          const DeepCollectionEquality().equals(other.country, country) &&
          const DeepCollectionEquality().equals(
            other.countryCallingCode,
            countryCallingCode,
          ) &&
          const DeepCollectionEquality().equals(
            other.formattedPhoneNumber,
            formattedPhoneNumber,
          ) &&
          const DeepCollectionEquality().equals(
            other.isAnonymous,
            isAnonymous,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(country),
    const DeepCollectionEquality().hash(countryCallingCode),
    const DeepCollectionEquality().hash(formattedPhoneNumber),
    const DeepCollectionEquality().hash(isAnonymous),
  ]);
}

extension CollectibleItemTypeDataClassExtensions on CollectibleItemType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CollectibleItemType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CollectibleItemTypeUsernameDataClassExtensions
    on CollectibleItemTypeUsername {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CollectibleItemTypeUsername &&
          const DeepCollectionEquality().equals(other.username, username));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(username),
  ]);
}

extension CollectibleItemTypePhoneNumberDataClassExtensions
    on CollectibleItemTypePhoneNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CollectibleItemTypePhoneNumber &&
          const DeepCollectionEquality().equals(
            other.phoneNumber,
            phoneNumber,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(phoneNumber),
  ]);
}

extension CollectibleItemInfoDataClassExtensions on CollectibleItemInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CollectibleItemInfo &&
          const DeepCollectionEquality().equals(
            other.purchaseDate,
            purchaseDate,
          ) &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(
            other.cryptocurrency,
            cryptocurrency,
          ) &&
          const DeepCollectionEquality().equals(
            other.cryptocurrencyAmount,
            cryptocurrencyAmount,
          ) &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(purchaseDate),
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(cryptocurrency),
    const DeepCollectionEquality().hash(cryptocurrencyAmount),
    const DeepCollectionEquality().hash(url),
  ]);
}

extension BankCardActionOpenUrlDataClassExtensions on BankCardActionOpenUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BankCardActionOpenUrl &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(url),
  ]);
}

extension BankCardInfoDataClassExtensions on BankCardInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BankCardInfo &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.actions, actions));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(actions),
  ]);
}

extension AddressDataClassExtensions on Address {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Address &&
          const DeepCollectionEquality().equals(
            other.countryCode,
            countryCode,
          ) &&
          const DeepCollectionEquality().equals(other.state, state) &&
          const DeepCollectionEquality().equals(other.city, city) &&
          const DeepCollectionEquality().equals(
            other.streetLine1,
            streetLine1,
          ) &&
          const DeepCollectionEquality().equals(
            other.streetLine2,
            streetLine2,
          ) &&
          const DeepCollectionEquality().equals(other.postalCode, postalCode));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(countryCode),
    const DeepCollectionEquality().hash(state),
    const DeepCollectionEquality().hash(city),
    const DeepCollectionEquality().hash(streetLine1),
    const DeepCollectionEquality().hash(streetLine2),
    const DeepCollectionEquality().hash(postalCode),
  ]);
}

extension LocationAddressDataClassExtensions on LocationAddress {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LocationAddress &&
          const DeepCollectionEquality().equals(
            other.countryCode,
            countryCode,
          ) &&
          const DeepCollectionEquality().equals(other.state, state) &&
          const DeepCollectionEquality().equals(other.city, city) &&
          const DeepCollectionEquality().equals(other.street, street));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(countryCode),
    const DeepCollectionEquality().hash(state),
    const DeepCollectionEquality().hash(city),
    const DeepCollectionEquality().hash(street),
  ]);
}

extension LabeledPricePartDataClassExtensions on LabeledPricePart {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LabeledPricePart &&
          const DeepCollectionEquality().equals(other.label, label) &&
          const DeepCollectionEquality().equals(other.amount, amount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(label),
    const DeepCollectionEquality().hash(amount),
  ]);
}

extension InvoiceDataClassExtensions on Invoice {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Invoice &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.priceParts, priceParts) &&
          const DeepCollectionEquality().equals(
            other.subscriptionPeriod,
            subscriptionPeriod,
          ) &&
          const DeepCollectionEquality().equals(
            other.maxTipAmount,
            maxTipAmount,
          ) &&
          const DeepCollectionEquality().equals(
            other.suggestedTipAmounts,
            suggestedTipAmounts,
          ) &&
          const DeepCollectionEquality().equals(
            other.recurringPaymentTermsOfServiceUrl,
            recurringPaymentTermsOfServiceUrl,
          ) &&
          const DeepCollectionEquality().equals(
            other.termsOfServiceUrl,
            termsOfServiceUrl,
          ) &&
          const DeepCollectionEquality().equals(other.isTest, isTest) &&
          const DeepCollectionEquality().equals(other.needName, needName) &&
          const DeepCollectionEquality().equals(
            other.needPhoneNumber,
            needPhoneNumber,
          ) &&
          const DeepCollectionEquality().equals(
            other.needEmailAddress,
            needEmailAddress,
          ) &&
          const DeepCollectionEquality().equals(
            other.needShippingAddress,
            needShippingAddress,
          ) &&
          const DeepCollectionEquality().equals(
            other.sendPhoneNumberToProvider,
            sendPhoneNumberToProvider,
          ) &&
          const DeepCollectionEquality().equals(
            other.sendEmailAddressToProvider,
            sendEmailAddressToProvider,
          ) &&
          const DeepCollectionEquality().equals(other.isFlexible, isFlexible));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(priceParts),
    const DeepCollectionEquality().hash(subscriptionPeriod),
    const DeepCollectionEquality().hash(maxTipAmount),
    const DeepCollectionEquality().hash(suggestedTipAmounts),
    const DeepCollectionEquality().hash(recurringPaymentTermsOfServiceUrl),
    const DeepCollectionEquality().hash(termsOfServiceUrl),
    const DeepCollectionEquality().hash(isTest),
    const DeepCollectionEquality().hash(needName),
    const DeepCollectionEquality().hash(needPhoneNumber),
    const DeepCollectionEquality().hash(needEmailAddress),
    const DeepCollectionEquality().hash(needShippingAddress),
    const DeepCollectionEquality().hash(sendPhoneNumberToProvider),
    const DeepCollectionEquality().hash(sendEmailAddressToProvider),
    const DeepCollectionEquality().hash(isFlexible),
  ]);
}

extension OrderInfoDataClassExtensions on OrderInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is OrderInfo &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(
            other.phoneNumber,
            phoneNumber,
          ) &&
          const DeepCollectionEquality().equals(
            other.emailAddress,
            emailAddress,
          ) &&
          const DeepCollectionEquality().equals(
            other.shippingAddress,
            shippingAddress,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(phoneNumber),
    const DeepCollectionEquality().hash(emailAddress),
    const DeepCollectionEquality().hash(shippingAddress),
  ]);
}

extension ShippingOptionDataClassExtensions on ShippingOption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ShippingOption &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.priceParts, priceParts));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(priceParts),
  ]);
}

extension SavedCredentialsDataClassExtensions on SavedCredentials {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SavedCredentials &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.title, title));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(title),
  ]);
}

extension InputCredentialsDataClassExtensions on InputCredentials {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InputCredentials);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InputCredentialsSavedDataClassExtensions on InputCredentialsSaved {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputCredentialsSaved &&
          const DeepCollectionEquality().equals(
            other.savedCredentialsId,
            savedCredentialsId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(savedCredentialsId),
  ]);
}

extension InputCredentialsNewDataClassExtensions on InputCredentialsNew {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputCredentialsNew &&
          const DeepCollectionEquality().equals(other.data, data) &&
          const DeepCollectionEquality().equals(other.allowSave, allowSave));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(data),
    const DeepCollectionEquality().hash(allowSave),
  ]);
}

extension InputCredentialsApplePayDataClassExtensions
    on InputCredentialsApplePay {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputCredentialsApplePay &&
          const DeepCollectionEquality().equals(other.data, data));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(data)]);
}

extension InputCredentialsGooglePayDataClassExtensions
    on InputCredentialsGooglePay {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputCredentialsGooglePay &&
          const DeepCollectionEquality().equals(other.data, data));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(data)]);
}

extension PaymentProviderDataClassExtensions on PaymentProvider {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PaymentProvider);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PaymentProviderSmartGlocalDataClassExtensions
    on PaymentProviderSmartGlocal {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PaymentProviderSmartGlocal &&
          const DeepCollectionEquality().equals(
            other.publicToken,
            publicToken,
          ) &&
          const DeepCollectionEquality().equals(
            other.tokenizeUrl,
            tokenizeUrl,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(publicToken),
    const DeepCollectionEquality().hash(tokenizeUrl),
  ]);
}

extension PaymentProviderStripeDataClassExtensions on PaymentProviderStripe {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PaymentProviderStripe &&
          const DeepCollectionEquality().equals(
            other.publishableKey,
            publishableKey,
          ) &&
          const DeepCollectionEquality().equals(
            other.needCountry,
            needCountry,
          ) &&
          const DeepCollectionEquality().equals(
            other.needPostalCode,
            needPostalCode,
          ) &&
          const DeepCollectionEquality().equals(
            other.needCardholderName,
            needCardholderName,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(publishableKey),
    const DeepCollectionEquality().hash(needCountry),
    const DeepCollectionEquality().hash(needPostalCode),
    const DeepCollectionEquality().hash(needCardholderName),
  ]);
}

extension PaymentProviderOtherDataClassExtensions on PaymentProviderOther {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PaymentProviderOther &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(url)]);
}

extension PaymentOptionDataClassExtensions on PaymentOption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PaymentOption &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(url),
  ]);
}

extension PaymentFormTypeDataClassExtensions on PaymentFormType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PaymentFormType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PaymentFormTypeRegularDataClassExtensions on PaymentFormTypeRegular {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PaymentFormTypeRegular &&
          const DeepCollectionEquality().equals(other.invoice, invoice) &&
          const DeepCollectionEquality().equals(
            other.paymentProviderUserId,
            paymentProviderUserId,
          ) &&
          const DeepCollectionEquality().equals(
            other.paymentProvider,
            paymentProvider,
          ) &&
          const DeepCollectionEquality().equals(
            other.additionalPaymentOptions,
            additionalPaymentOptions,
          ) &&
          const DeepCollectionEquality().equals(
            other.savedOrderInfo,
            savedOrderInfo,
          ) &&
          const DeepCollectionEquality().equals(
            other.savedCredentials,
            savedCredentials,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSaveCredentials,
            canSaveCredentials,
          ) &&
          const DeepCollectionEquality().equals(
            other.needPassword,
            needPassword,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(invoice),
    const DeepCollectionEquality().hash(paymentProviderUserId),
    const DeepCollectionEquality().hash(paymentProvider),
    const DeepCollectionEquality().hash(additionalPaymentOptions),
    const DeepCollectionEquality().hash(savedOrderInfo),
    const DeepCollectionEquality().hash(savedCredentials),
    const DeepCollectionEquality().hash(canSaveCredentials),
    const DeepCollectionEquality().hash(needPassword),
  ]);
}

extension PaymentFormTypeStarsDataClassExtensions on PaymentFormTypeStars {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PaymentFormTypeStars &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension PaymentFormTypeStarSubscriptionDataClassExtensions
    on PaymentFormTypeStarSubscription {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PaymentFormTypeStarSubscription &&
          const DeepCollectionEquality().equals(other.pricing, pricing));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(pricing),
  ]);
}

extension PaymentFormDataClassExtensions on PaymentForm {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PaymentForm &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(
            other.sellerBotUserId,
            sellerBotUserId,
          ) &&
          const DeepCollectionEquality().equals(
            other.productInfo,
            productInfo,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(sellerBotUserId),
    const DeepCollectionEquality().hash(productInfo),
  ]);
}

extension ValidatedOrderInfoDataClassExtensions on ValidatedOrderInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ValidatedOrderInfo &&
          const DeepCollectionEquality().equals(
            other.orderInfoId,
            orderInfoId,
          ) &&
          const DeepCollectionEquality().equals(
            other.shippingOptions,
            shippingOptions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(orderInfoId),
    const DeepCollectionEquality().hash(shippingOptions),
  ]);
}

extension PaymentResultDataClassExtensions on PaymentResult {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PaymentResult &&
          const DeepCollectionEquality().equals(other.success, success) &&
          const DeepCollectionEquality().equals(
            other.verificationUrl,
            verificationUrl,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(success),
    const DeepCollectionEquality().hash(verificationUrl),
  ]);
}

extension PaymentReceiptTypeDataClassExtensions on PaymentReceiptType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PaymentReceiptType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PaymentReceiptTypeRegularDataClassExtensions
    on PaymentReceiptTypeRegular {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PaymentReceiptTypeRegular &&
          const DeepCollectionEquality().equals(
            other.paymentProviderUserId,
            paymentProviderUserId,
          ) &&
          const DeepCollectionEquality().equals(other.invoice, invoice) &&
          const DeepCollectionEquality().equals(other.orderInfo, orderInfo) &&
          const DeepCollectionEquality().equals(
            other.shippingOption,
            shippingOption,
          ) &&
          const DeepCollectionEquality().equals(
            other.credentialsTitle,
            credentialsTitle,
          ) &&
          const DeepCollectionEquality().equals(other.tipAmount, tipAmount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(paymentProviderUserId),
    const DeepCollectionEquality().hash(invoice),
    const DeepCollectionEquality().hash(orderInfo),
    const DeepCollectionEquality().hash(shippingOption),
    const DeepCollectionEquality().hash(credentialsTitle),
    const DeepCollectionEquality().hash(tipAmount),
  ]);
}

extension PaymentReceiptTypeStarsDataClassExtensions
    on PaymentReceiptTypeStars {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PaymentReceiptTypeStars &&
          const DeepCollectionEquality().equals(other.starCount, starCount) &&
          const DeepCollectionEquality().equals(
            other.transactionId,
            transactionId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(starCount),
    const DeepCollectionEquality().hash(transactionId),
  ]);
}

extension PaymentReceiptDataClassExtensions on PaymentReceipt {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PaymentReceipt &&
          const DeepCollectionEquality().equals(
            other.productInfo,
            productInfo,
          ) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(
            other.sellerBotUserId,
            sellerBotUserId,
          ) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(productInfo),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(sellerBotUserId),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension InputInvoiceDataClassExtensions on InputInvoice {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InputInvoice);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InputInvoiceMessageDataClassExtensions on InputInvoiceMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputInvoiceMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension InputInvoiceNameDataClassExtensions on InputInvoiceName {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputInvoiceName &&
          const DeepCollectionEquality().equals(other.name, name));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(name)]);
}

extension InputInvoiceTelegramDataClassExtensions on InputInvoiceTelegram {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputInvoiceTelegram &&
          const DeepCollectionEquality().equals(other.purpose, purpose));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(purpose),
  ]);
}

extension PaidMediaDataClassExtensions on PaidMedia {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PaidMedia);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PaidMediaPreviewDataClassExtensions on PaidMediaPreview {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PaidMediaPreview &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(
            other.minithumbnail,
            minithumbnail,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(minithumbnail),
  ]);
}

extension PaidMediaPhotoDataClassExtensions on PaidMediaPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PaidMediaPhoto &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(photo)]);
}

extension PaidMediaVideoDataClassExtensions on PaidMediaVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PaidMediaVideo &&
          const DeepCollectionEquality().equals(other.video, video) &&
          const DeepCollectionEquality().equals(other.cover, cover) &&
          const DeepCollectionEquality().equals(
            other.startTimestamp,
            startTimestamp,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(video),
    const DeepCollectionEquality().hash(cover),
    const DeepCollectionEquality().hash(startTimestamp),
  ]);
}

extension PaidMediaUnsupportedDataClassExtensions on PaidMediaUnsupported {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PaidMediaUnsupported);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GiveawayParametersDataClassExtensions on GiveawayParameters {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GiveawayParameters &&
          const DeepCollectionEquality().equals(
            other.boostedChatId,
            boostedChatId,
          ) &&
          const DeepCollectionEquality().equals(
            other.additionalChatIds,
            additionalChatIds,
          ) &&
          const DeepCollectionEquality().equals(
            other.winnersSelectionDate,
            winnersSelectionDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.onlyNewMembers,
            onlyNewMembers,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasPublicWinners,
            hasPublicWinners,
          ) &&
          const DeepCollectionEquality().equals(
            other.countryCodes,
            countryCodes,
          ) &&
          const DeepCollectionEquality().equals(
            other.prizeDescription,
            prizeDescription,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(boostedChatId),
    const DeepCollectionEquality().hash(additionalChatIds),
    const DeepCollectionEquality().hash(winnersSelectionDate),
    const DeepCollectionEquality().hash(onlyNewMembers),
    const DeepCollectionEquality().hash(hasPublicWinners),
    const DeepCollectionEquality().hash(countryCodes),
    const DeepCollectionEquality().hash(prizeDescription),
  ]);
}

extension DatedFileDataClassExtensions on DatedFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DatedFile &&
          const DeepCollectionEquality().equals(other.file, file) &&
          const DeepCollectionEquality().equals(other.date, date));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(file),
    const DeepCollectionEquality().hash(date),
  ]);
}

extension PassportElementTypeDataClassExtensions on PassportElementType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PassportElementType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementTypePersonalDetailsDataClassExtensions
    on PassportElementTypePersonalDetails {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementTypePersonalDetails);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementTypePassportDataClassExtensions
    on PassportElementTypePassport {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementTypePassport);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementTypeDriverLicenseDataClassExtensions
    on PassportElementTypeDriverLicense {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementTypeDriverLicense);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementTypeIdentityCardDataClassExtensions
    on PassportElementTypeIdentityCard {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementTypeIdentityCard);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementTypeInternalPassportDataClassExtensions
    on PassportElementTypeInternalPassport {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementTypeInternalPassport);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementTypeAddressDataClassExtensions
    on PassportElementTypeAddress {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PassportElementTypeAddress);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementTypeUtilityBillDataClassExtensions
    on PassportElementTypeUtilityBill {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementTypeUtilityBill);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementTypeBankStatementDataClassExtensions
    on PassportElementTypeBankStatement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementTypeBankStatement);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementTypeRentalAgreementDataClassExtensions
    on PassportElementTypeRentalAgreement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementTypeRentalAgreement);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementTypePassportRegistrationDataClassExtensions
    on PassportElementTypePassportRegistration {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementTypePassportRegistration);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementTypeTemporaryRegistrationDataClassExtensions
    on PassportElementTypeTemporaryRegistration {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementTypeTemporaryRegistration);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementTypePhoneNumberDataClassExtensions
    on PassportElementTypePhoneNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementTypePhoneNumber);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementTypeEmailAddressDataClassExtensions
    on PassportElementTypeEmailAddress {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementTypeEmailAddress);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension DateDataClassExtensions on Date {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Date &&
          const DeepCollectionEquality().equals(other.day, day) &&
          const DeepCollectionEquality().equals(other.month, month) &&
          const DeepCollectionEquality().equals(other.year, year));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(day),
    const DeepCollectionEquality().hash(month),
    const DeepCollectionEquality().hash(year),
  ]);
}

extension PersonalDetailsDataClassExtensions on PersonalDetails {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PersonalDetails &&
          const DeepCollectionEquality().equals(other.firstName, firstName) &&
          const DeepCollectionEquality().equals(other.middleName, middleName) &&
          const DeepCollectionEquality().equals(other.lastName, lastName) &&
          const DeepCollectionEquality().equals(
            other.nativeFirstName,
            nativeFirstName,
          ) &&
          const DeepCollectionEquality().equals(
            other.nativeMiddleName,
            nativeMiddleName,
          ) &&
          const DeepCollectionEquality().equals(
            other.nativeLastName,
            nativeLastName,
          ) &&
          const DeepCollectionEquality().equals(other.birthdate, birthdate) &&
          const DeepCollectionEquality().equals(other.gender, gender) &&
          const DeepCollectionEquality().equals(
            other.countryCode,
            countryCode,
          ) &&
          const DeepCollectionEquality().equals(
            other.residenceCountryCode,
            residenceCountryCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(firstName),
    const DeepCollectionEquality().hash(middleName),
    const DeepCollectionEquality().hash(lastName),
    const DeepCollectionEquality().hash(nativeFirstName),
    const DeepCollectionEquality().hash(nativeMiddleName),
    const DeepCollectionEquality().hash(nativeLastName),
    const DeepCollectionEquality().hash(birthdate),
    const DeepCollectionEquality().hash(gender),
    const DeepCollectionEquality().hash(countryCode),
    const DeepCollectionEquality().hash(residenceCountryCode),
  ]);
}

extension IdentityDocumentDataClassExtensions on IdentityDocument {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is IdentityDocument &&
          const DeepCollectionEquality().equals(other.number, number) &&
          const DeepCollectionEquality().equals(
            other.expirationDate,
            expirationDate,
          ) &&
          const DeepCollectionEquality().equals(other.frontSide, frontSide) &&
          const DeepCollectionEquality().equals(
            other.reverseSide,
            reverseSide,
          ) &&
          const DeepCollectionEquality().equals(other.selfie, selfie) &&
          const DeepCollectionEquality().equals(
            other.translation,
            translation,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(number),
    const DeepCollectionEquality().hash(expirationDate),
    const DeepCollectionEquality().hash(frontSide),
    const DeepCollectionEquality().hash(reverseSide),
    const DeepCollectionEquality().hash(selfie),
    const DeepCollectionEquality().hash(translation),
  ]);
}

extension InputIdentityDocumentDataClassExtensions on InputIdentityDocument {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputIdentityDocument &&
          const DeepCollectionEquality().equals(other.number, number) &&
          const DeepCollectionEquality().equals(
            other.expirationDate,
            expirationDate,
          ) &&
          const DeepCollectionEquality().equals(other.frontSide, frontSide) &&
          const DeepCollectionEquality().equals(
            other.reverseSide,
            reverseSide,
          ) &&
          const DeepCollectionEquality().equals(other.selfie, selfie) &&
          const DeepCollectionEquality().equals(
            other.translation,
            translation,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(number),
    const DeepCollectionEquality().hash(expirationDate),
    const DeepCollectionEquality().hash(frontSide),
    const DeepCollectionEquality().hash(reverseSide),
    const DeepCollectionEquality().hash(selfie),
    const DeepCollectionEquality().hash(translation),
  ]);
}

extension PersonalDocumentDataClassExtensions on PersonalDocument {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PersonalDocument &&
          const DeepCollectionEquality().equals(other.files, files) &&
          const DeepCollectionEquality().equals(
            other.translation,
            translation,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(files),
    const DeepCollectionEquality().hash(translation),
  ]);
}

extension InputPersonalDocumentDataClassExtensions on InputPersonalDocument {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPersonalDocument &&
          const DeepCollectionEquality().equals(other.files, files) &&
          const DeepCollectionEquality().equals(
            other.translation,
            translation,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(files),
    const DeepCollectionEquality().hash(translation),
  ]);
}

extension PassportElementDataClassExtensions on PassportElement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PassportElement);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementPersonalDetailsDataClassExtensions
    on PassportElementPersonalDetails {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementPersonalDetails &&
          const DeepCollectionEquality().equals(
            other.personalDetails,
            personalDetails,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(personalDetails),
  ]);
}

extension PassportElementPassportDataClassExtensions
    on PassportElementPassport {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementPassport &&
          const DeepCollectionEquality().equals(other.passport, passport));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(passport),
  ]);
}

extension PassportElementDriverLicenseDataClassExtensions
    on PassportElementDriverLicense {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementDriverLicense &&
          const DeepCollectionEquality().equals(
            other.driverLicense,
            driverLicense,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(driverLicense),
  ]);
}

extension PassportElementIdentityCardDataClassExtensions
    on PassportElementIdentityCard {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementIdentityCard &&
          const DeepCollectionEquality().equals(
            other.identityCard,
            identityCard,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(identityCard),
  ]);
}

extension PassportElementInternalPassportDataClassExtensions
    on PassportElementInternalPassport {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementInternalPassport &&
          const DeepCollectionEquality().equals(
            other.internalPassport,
            internalPassport,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(internalPassport),
  ]);
}

extension PassportElementAddressDataClassExtensions on PassportElementAddress {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementAddress &&
          const DeepCollectionEquality().equals(other.address, address));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(address),
  ]);
}

extension PassportElementUtilityBillDataClassExtensions
    on PassportElementUtilityBill {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementUtilityBill &&
          const DeepCollectionEquality().equals(
            other.utilityBill,
            utilityBill,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(utilityBill),
  ]);
}

extension PassportElementBankStatementDataClassExtensions
    on PassportElementBankStatement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementBankStatement &&
          const DeepCollectionEquality().equals(
            other.bankStatement,
            bankStatement,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(bankStatement),
  ]);
}

extension PassportElementRentalAgreementDataClassExtensions
    on PassportElementRentalAgreement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementRentalAgreement &&
          const DeepCollectionEquality().equals(
            other.rentalAgreement,
            rentalAgreement,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(rentalAgreement),
  ]);
}

extension PassportElementPassportRegistrationDataClassExtensions
    on PassportElementPassportRegistration {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementPassportRegistration &&
          const DeepCollectionEquality().equals(
            other.passportRegistration,
            passportRegistration,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(passportRegistration),
  ]);
}

extension PassportElementTemporaryRegistrationDataClassExtensions
    on PassportElementTemporaryRegistration {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementTemporaryRegistration &&
          const DeepCollectionEquality().equals(
            other.temporaryRegistration,
            temporaryRegistration,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(temporaryRegistration),
  ]);
}

extension PassportElementPhoneNumberDataClassExtensions
    on PassportElementPhoneNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementPhoneNumber &&
          const DeepCollectionEquality().equals(
            other.phoneNumber,
            phoneNumber,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(phoneNumber),
  ]);
}

extension PassportElementEmailAddressDataClassExtensions
    on PassportElementEmailAddress {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementEmailAddress &&
          const DeepCollectionEquality().equals(
            other.emailAddress,
            emailAddress,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(emailAddress),
  ]);
}

extension InputPassportElementDataClassExtensions on InputPassportElement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InputPassportElement);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InputPassportElementPersonalDetailsDataClassExtensions
    on InputPassportElementPersonalDetails {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementPersonalDetails &&
          const DeepCollectionEquality().equals(
            other.personalDetails,
            personalDetails,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(personalDetails),
  ]);
}

extension InputPassportElementPassportDataClassExtensions
    on InputPassportElementPassport {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementPassport &&
          const DeepCollectionEquality().equals(other.passport, passport));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(passport),
  ]);
}

extension InputPassportElementDriverLicenseDataClassExtensions
    on InputPassportElementDriverLicense {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementDriverLicense &&
          const DeepCollectionEquality().equals(
            other.driverLicense,
            driverLicense,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(driverLicense),
  ]);
}

extension InputPassportElementIdentityCardDataClassExtensions
    on InputPassportElementIdentityCard {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementIdentityCard &&
          const DeepCollectionEquality().equals(
            other.identityCard,
            identityCard,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(identityCard),
  ]);
}

extension InputPassportElementInternalPassportDataClassExtensions
    on InputPassportElementInternalPassport {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementInternalPassport &&
          const DeepCollectionEquality().equals(
            other.internalPassport,
            internalPassport,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(internalPassport),
  ]);
}

extension InputPassportElementAddressDataClassExtensions
    on InputPassportElementAddress {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementAddress &&
          const DeepCollectionEquality().equals(other.address, address));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(address),
  ]);
}

extension InputPassportElementUtilityBillDataClassExtensions
    on InputPassportElementUtilityBill {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementUtilityBill &&
          const DeepCollectionEquality().equals(
            other.utilityBill,
            utilityBill,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(utilityBill),
  ]);
}

extension InputPassportElementBankStatementDataClassExtensions
    on InputPassportElementBankStatement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementBankStatement &&
          const DeepCollectionEquality().equals(
            other.bankStatement,
            bankStatement,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(bankStatement),
  ]);
}

extension InputPassportElementRentalAgreementDataClassExtensions
    on InputPassportElementRentalAgreement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementRentalAgreement &&
          const DeepCollectionEquality().equals(
            other.rentalAgreement,
            rentalAgreement,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(rentalAgreement),
  ]);
}

extension InputPassportElementPassportRegistrationDataClassExtensions
    on InputPassportElementPassportRegistration {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementPassportRegistration &&
          const DeepCollectionEquality().equals(
            other.passportRegistration,
            passportRegistration,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(passportRegistration),
  ]);
}

extension InputPassportElementTemporaryRegistrationDataClassExtensions
    on InputPassportElementTemporaryRegistration {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementTemporaryRegistration &&
          const DeepCollectionEquality().equals(
            other.temporaryRegistration,
            temporaryRegistration,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(temporaryRegistration),
  ]);
}

extension InputPassportElementPhoneNumberDataClassExtensions
    on InputPassportElementPhoneNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementPhoneNumber &&
          const DeepCollectionEquality().equals(
            other.phoneNumber,
            phoneNumber,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(phoneNumber),
  ]);
}

extension InputPassportElementEmailAddressDataClassExtensions
    on InputPassportElementEmailAddress {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementEmailAddress &&
          const DeepCollectionEquality().equals(
            other.emailAddress,
            emailAddress,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(emailAddress),
  ]);
}

extension PassportElementsDataClassExtensions on PassportElements {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElements &&
          const DeepCollectionEquality().equals(other.elements, elements));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(elements),
  ]);
}

extension PassportElementErrorSourceDataClassExtensions
    on PassportElementErrorSource {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PassportElementErrorSource);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementErrorSourceUnspecifiedDataClassExtensions
    on PassportElementErrorSourceUnspecified {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementErrorSourceUnspecified);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementErrorSourceDataFieldDataClassExtensions
    on PassportElementErrorSourceDataField {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementErrorSourceDataField &&
          const DeepCollectionEquality().equals(other.fieldName, fieldName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fieldName),
  ]);
}

extension PassportElementErrorSourceFrontSideDataClassExtensions
    on PassportElementErrorSourceFrontSide {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementErrorSourceFrontSide);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementErrorSourceReverseSideDataClassExtensions
    on PassportElementErrorSourceReverseSide {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementErrorSourceReverseSide);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementErrorSourceSelfieDataClassExtensions
    on PassportElementErrorSourceSelfie {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementErrorSourceSelfie);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementErrorSourceTranslationFileDataClassExtensions
    on PassportElementErrorSourceTranslationFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementErrorSourceTranslationFile &&
          const DeepCollectionEquality().equals(other.fileIndex, fileIndex));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileIndex),
  ]);
}

extension PassportElementErrorSourceTranslationFilesDataClassExtensions
    on PassportElementErrorSourceTranslationFiles {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementErrorSourceTranslationFiles);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementErrorSourceFileDataClassExtensions
    on PassportElementErrorSourceFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementErrorSourceFile &&
          const DeepCollectionEquality().equals(other.fileIndex, fileIndex));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileIndex),
  ]);
}

extension PassportElementErrorSourceFilesDataClassExtensions
    on PassportElementErrorSourceFiles {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementErrorSourceFiles);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PassportElementErrorDataClassExtensions on PassportElementError {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementError &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.message, message) &&
          const DeepCollectionEquality().equals(other.source, source));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(message),
    const DeepCollectionEquality().hash(source),
  ]);
}

extension PassportSuitableElementDataClassExtensions
    on PassportSuitableElement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportSuitableElement &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(
            other.isSelfieRequired,
            isSelfieRequired,
          ) &&
          const DeepCollectionEquality().equals(
            other.isTranslationRequired,
            isTranslationRequired,
          ) &&
          const DeepCollectionEquality().equals(
            other.isNativeNameRequired,
            isNativeNameRequired,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(isSelfieRequired),
    const DeepCollectionEquality().hash(isTranslationRequired),
    const DeepCollectionEquality().hash(isNativeNameRequired),
  ]);
}

extension PassportRequiredElementDataClassExtensions
    on PassportRequiredElement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportRequiredElement &&
          const DeepCollectionEquality().equals(
            other.suitableElements,
            suitableElements,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(suitableElements),
  ]);
}

extension PassportAuthorizationFormDataClassExtensions
    on PassportAuthorizationForm {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportAuthorizationForm &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.requiredElements,
            requiredElements,
          ) &&
          const DeepCollectionEquality().equals(
            other.privacyPolicyUrl,
            privacyPolicyUrl,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(requiredElements),
    const DeepCollectionEquality().hash(privacyPolicyUrl),
  ]);
}

extension PassportElementsWithErrorsDataClassExtensions
    on PassportElementsWithErrors {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PassportElementsWithErrors &&
          const DeepCollectionEquality().equals(other.elements, elements) &&
          const DeepCollectionEquality().equals(other.errors, errors));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(elements),
    const DeepCollectionEquality().hash(errors),
  ]);
}

extension EncryptedCredentialsDataClassExtensions on EncryptedCredentials {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EncryptedCredentials &&
          const DeepCollectionEquality().equals(other.data, data) &&
          const DeepCollectionEquality().equals(other.hash, hash) &&
          const DeepCollectionEquality().equals(other.secret, secret));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(data),
    const DeepCollectionEquality().hash(hash),
    const DeepCollectionEquality().hash(secret),
  ]);
}

extension EncryptedPassportElementDataClassExtensions
    on EncryptedPassportElement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EncryptedPassportElement &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.data, data) &&
          const DeepCollectionEquality().equals(other.frontSide, frontSide) &&
          const DeepCollectionEquality().equals(
            other.reverseSide,
            reverseSide,
          ) &&
          const DeepCollectionEquality().equals(other.selfie, selfie) &&
          const DeepCollectionEquality().equals(
            other.translation,
            translation,
          ) &&
          const DeepCollectionEquality().equals(other.files, files) &&
          const DeepCollectionEquality().equals(other.value, value) &&
          const DeepCollectionEquality().equals(other.hash, hash));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(data),
    const DeepCollectionEquality().hash(frontSide),
    const DeepCollectionEquality().hash(reverseSide),
    const DeepCollectionEquality().hash(selfie),
    const DeepCollectionEquality().hash(translation),
    const DeepCollectionEquality().hash(files),
    const DeepCollectionEquality().hash(value),
    const DeepCollectionEquality().hash(hash),
  ]);
}

extension InputPassportElementErrorSourceDataClassExtensions
    on InputPassportElementErrorSource {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementErrorSource);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InputPassportElementErrorSourceUnspecifiedDataClassExtensions
    on InputPassportElementErrorSourceUnspecified {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementErrorSourceUnspecified &&
          const DeepCollectionEquality().equals(
            other.elementHash,
            elementHash,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(elementHash),
  ]);
}

extension InputPassportElementErrorSourceDataFieldDataClassExtensions
    on InputPassportElementErrorSourceDataField {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementErrorSourceDataField &&
          const DeepCollectionEquality().equals(other.fieldName, fieldName) &&
          const DeepCollectionEquality().equals(other.dataHash, dataHash));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fieldName),
    const DeepCollectionEquality().hash(dataHash),
  ]);
}

extension InputPassportElementErrorSourceFrontSideDataClassExtensions
    on InputPassportElementErrorSourceFrontSide {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementErrorSourceFrontSide &&
          const DeepCollectionEquality().equals(other.fileHash, fileHash));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileHash),
  ]);
}

extension InputPassportElementErrorSourceReverseSideDataClassExtensions
    on InputPassportElementErrorSourceReverseSide {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementErrorSourceReverseSide &&
          const DeepCollectionEquality().equals(other.fileHash, fileHash));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileHash),
  ]);
}

extension InputPassportElementErrorSourceSelfieDataClassExtensions
    on InputPassportElementErrorSourceSelfie {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementErrorSourceSelfie &&
          const DeepCollectionEquality().equals(other.fileHash, fileHash));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileHash),
  ]);
}

extension InputPassportElementErrorSourceTranslationFileDataClassExtensions
    on InputPassportElementErrorSourceTranslationFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementErrorSourceTranslationFile &&
          const DeepCollectionEquality().equals(other.fileHash, fileHash));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileHash),
  ]);
}

extension InputPassportElementErrorSourceTranslationFilesDataClassExtensions
    on InputPassportElementErrorSourceTranslationFiles {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementErrorSourceTranslationFiles &&
          const DeepCollectionEquality().equals(other.fileHashes, fileHashes));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileHashes),
  ]);
}

extension InputPassportElementErrorSourceFileDataClassExtensions
    on InputPassportElementErrorSourceFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementErrorSourceFile &&
          const DeepCollectionEquality().equals(other.fileHash, fileHash));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileHash),
  ]);
}

extension InputPassportElementErrorSourceFilesDataClassExtensions
    on InputPassportElementErrorSourceFiles {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementErrorSourceFiles &&
          const DeepCollectionEquality().equals(other.fileHashes, fileHashes));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileHashes),
  ]);
}

extension InputPassportElementErrorDataClassExtensions
    on InputPassportElementError {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPassportElementError &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.message, message) &&
          const DeepCollectionEquality().equals(other.source, source));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(message),
    const DeepCollectionEquality().hash(source),
  ]);
}

extension MessageContentDataClassExtensions on MessageContent {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageContent);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageTextDataClassExtensions on MessageText {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageText &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(
            other.linkPreview,
            linkPreview,
          ) &&
          const DeepCollectionEquality().equals(
            other.linkPreviewOptions,
            linkPreviewOptions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(linkPreview),
    const DeepCollectionEquality().hash(linkPreviewOptions),
  ]);
}

extension MessageAnimationDataClassExtensions on MessageAnimation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageAnimation &&
          const DeepCollectionEquality().equals(other.animation, animation) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(
            other.showCaptionAboveMedia,
            showCaptionAboveMedia,
          ) &&
          const DeepCollectionEquality().equals(other.hasSpoiler, hasSpoiler) &&
          const DeepCollectionEquality().equals(other.isSecret, isSecret));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(animation),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(showCaptionAboveMedia),
    const DeepCollectionEquality().hash(hasSpoiler),
    const DeepCollectionEquality().hash(isSecret),
  ]);
}

extension MessageAudioDataClassExtensions on MessageAudio {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageAudio &&
          const DeepCollectionEquality().equals(other.audio, audio) &&
          const DeepCollectionEquality().equals(other.caption, caption));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(audio),
    const DeepCollectionEquality().hash(caption),
  ]);
}

extension MessageDocumentDataClassExtensions on MessageDocument {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageDocument &&
          const DeepCollectionEquality().equals(other.document, document) &&
          const DeepCollectionEquality().equals(other.caption, caption));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(document),
    const DeepCollectionEquality().hash(caption),
  ]);
}

extension MessagePaidMediaDataClassExtensions on MessagePaidMedia {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessagePaidMedia &&
          const DeepCollectionEquality().equals(other.starCount, starCount) &&
          const DeepCollectionEquality().equals(other.media, media) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(
            other.showCaptionAboveMedia,
            showCaptionAboveMedia,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(starCount),
    const DeepCollectionEquality().hash(media),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(showCaptionAboveMedia),
  ]);
}

extension MessagePhotoDataClassExtensions on MessagePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessagePhoto &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(
            other.showCaptionAboveMedia,
            showCaptionAboveMedia,
          ) &&
          const DeepCollectionEquality().equals(other.hasSpoiler, hasSpoiler) &&
          const DeepCollectionEquality().equals(other.isSecret, isSecret));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(showCaptionAboveMedia),
    const DeepCollectionEquality().hash(hasSpoiler),
    const DeepCollectionEquality().hash(isSecret),
  ]);
}

extension MessageStickerDataClassExtensions on MessageSticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSticker &&
          const DeepCollectionEquality().equals(other.sticker, sticker) &&
          const DeepCollectionEquality().equals(other.isPremium, isPremium));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sticker),
    const DeepCollectionEquality().hash(isPremium),
  ]);
}

extension MessageVideoDataClassExtensions on MessageVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageVideo &&
          const DeepCollectionEquality().equals(other.video, video) &&
          const DeepCollectionEquality().equals(
            other.alternativeVideos,
            alternativeVideos,
          ) &&
          const DeepCollectionEquality().equals(
            other.storyboards,
            storyboards,
          ) &&
          const DeepCollectionEquality().equals(other.cover, cover) &&
          const DeepCollectionEquality().equals(
            other.startTimestamp,
            startTimestamp,
          ) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(
            other.showCaptionAboveMedia,
            showCaptionAboveMedia,
          ) &&
          const DeepCollectionEquality().equals(other.hasSpoiler, hasSpoiler) &&
          const DeepCollectionEquality().equals(other.isSecret, isSecret));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(video),
    const DeepCollectionEquality().hash(alternativeVideos),
    const DeepCollectionEquality().hash(storyboards),
    const DeepCollectionEquality().hash(cover),
    const DeepCollectionEquality().hash(startTimestamp),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(showCaptionAboveMedia),
    const DeepCollectionEquality().hash(hasSpoiler),
    const DeepCollectionEquality().hash(isSecret),
  ]);
}

extension MessageVideoNoteDataClassExtensions on MessageVideoNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageVideoNote &&
          const DeepCollectionEquality().equals(other.videoNote, videoNote) &&
          const DeepCollectionEquality().equals(other.isViewed, isViewed) &&
          const DeepCollectionEquality().equals(other.isSecret, isSecret));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(videoNote),
    const DeepCollectionEquality().hash(isViewed),
    const DeepCollectionEquality().hash(isSecret),
  ]);
}

extension MessageVoiceNoteDataClassExtensions on MessageVoiceNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageVoiceNote &&
          const DeepCollectionEquality().equals(other.voiceNote, voiceNote) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(other.isListened, isListened));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(voiceNote),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(isListened),
  ]);
}

extension MessageExpiredPhotoDataClassExtensions on MessageExpiredPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageExpiredPhoto);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageExpiredVideoDataClassExtensions on MessageExpiredVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageExpiredVideo);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageExpiredVideoNoteDataClassExtensions
    on MessageExpiredVideoNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageExpiredVideoNote);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageExpiredVoiceNoteDataClassExtensions
    on MessageExpiredVoiceNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageExpiredVoiceNote);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageLocationDataClassExtensions on MessageLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageLocation &&
          const DeepCollectionEquality().equals(other.location, location) &&
          const DeepCollectionEquality().equals(other.livePeriod, livePeriod) &&
          const DeepCollectionEquality().equals(other.expiresIn, expiresIn) &&
          const DeepCollectionEquality().equals(other.heading, heading) &&
          const DeepCollectionEquality().equals(
            other.proximityAlertRadius,
            proximityAlertRadius,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(location),
    const DeepCollectionEquality().hash(livePeriod),
    const DeepCollectionEquality().hash(expiresIn),
    const DeepCollectionEquality().hash(heading),
    const DeepCollectionEquality().hash(proximityAlertRadius),
  ]);
}

extension MessageVenueDataClassExtensions on MessageVenue {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageVenue &&
          const DeepCollectionEquality().equals(other.venue, venue));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(venue)]);
}

extension MessageContactDataClassExtensions on MessageContact {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageContact &&
          const DeepCollectionEquality().equals(other.contact, contact));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(contact),
  ]);
}

extension MessageAnimatedEmojiDataClassExtensions on MessageAnimatedEmoji {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageAnimatedEmoji &&
          const DeepCollectionEquality().equals(
            other.animatedEmoji,
            animatedEmoji,
          ) &&
          const DeepCollectionEquality().equals(other.emoji, emoji));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(animatedEmoji),
    const DeepCollectionEquality().hash(emoji),
  ]);
}

extension MessageDiceDataClassExtensions on MessageDice {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageDice &&
          const DeepCollectionEquality().equals(
            other.initialState,
            initialState,
          ) &&
          const DeepCollectionEquality().equals(other.finalState, finalState) &&
          const DeepCollectionEquality().equals(other.emoji, emoji) &&
          const DeepCollectionEquality().equals(other.value, value) &&
          const DeepCollectionEquality().equals(
            other.successAnimationFrameNumber,
            successAnimationFrameNumber,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(initialState),
    const DeepCollectionEquality().hash(finalState),
    const DeepCollectionEquality().hash(emoji),
    const DeepCollectionEquality().hash(value),
    const DeepCollectionEquality().hash(successAnimationFrameNumber),
  ]);
}

extension MessageGameDataClassExtensions on MessageGame {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageGame &&
          const DeepCollectionEquality().equals(other.game, game));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(game)]);
}

extension MessagePollDataClassExtensions on MessagePoll {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessagePoll &&
          const DeepCollectionEquality().equals(other.poll, poll));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(poll)]);
}

extension MessageStoryDataClassExtensions on MessageStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageStory &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId) &&
          const DeepCollectionEquality().equals(other.viaMention, viaMention));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
    const DeepCollectionEquality().hash(viaMention),
  ]);
}

extension MessageChecklistDataClassExtensions on MessageChecklist {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageChecklist &&
          const DeepCollectionEquality().equals(other.list, list));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(list)]);
}

extension MessageInvoiceDataClassExtensions on MessageInvoice {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageInvoice &&
          const DeepCollectionEquality().equals(
            other.productInfo,
            productInfo,
          ) &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(
            other.totalAmount,
            totalAmount,
          ) &&
          const DeepCollectionEquality().equals(
            other.startParameter,
            startParameter,
          ) &&
          const DeepCollectionEquality().equals(other.isTest, isTest) &&
          const DeepCollectionEquality().equals(
            other.needShippingAddress,
            needShippingAddress,
          ) &&
          const DeepCollectionEquality().equals(
            other.receiptMessageId,
            receiptMessageId,
          ) &&
          const DeepCollectionEquality().equals(other.paidMedia, paidMedia) &&
          const DeepCollectionEquality().equals(
            other.paidMediaCaption,
            paidMediaCaption,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(productInfo),
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(totalAmount),
    const DeepCollectionEquality().hash(startParameter),
    const DeepCollectionEquality().hash(isTest),
    const DeepCollectionEquality().hash(needShippingAddress),
    const DeepCollectionEquality().hash(receiptMessageId),
    const DeepCollectionEquality().hash(paidMedia),
    const DeepCollectionEquality().hash(paidMediaCaption),
  ]);
}

extension MessageCallDataClassExtensions on MessageCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageCall &&
          const DeepCollectionEquality().equals(other.isVideo, isVideo) &&
          const DeepCollectionEquality().equals(
            other.discardReason,
            discardReason,
          ) &&
          const DeepCollectionEquality().equals(other.duration, duration));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isVideo),
    const DeepCollectionEquality().hash(discardReason),
    const DeepCollectionEquality().hash(duration),
  ]);
}

extension MessageGroupCallDataClassExtensions on MessageGroupCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageGroupCall &&
          const DeepCollectionEquality().equals(other.isActive, isActive) &&
          const DeepCollectionEquality().equals(other.wasMissed, wasMissed) &&
          const DeepCollectionEquality().equals(other.isVideo, isVideo) &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(
            other.otherParticipantIds,
            otherParticipantIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isActive),
    const DeepCollectionEquality().hash(wasMissed),
    const DeepCollectionEquality().hash(isVideo),
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(otherParticipantIds),
  ]);
}

extension MessageVideoChatScheduledDataClassExtensions
    on MessageVideoChatScheduled {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageVideoChatScheduled &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(other.startDate, startDate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(startDate),
  ]);
}

extension MessageVideoChatStartedDataClassExtensions
    on MessageVideoChatStarted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageVideoChatStarted &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
  ]);
}

extension MessageVideoChatEndedDataClassExtensions on MessageVideoChatEnded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageVideoChatEnded &&
          const DeepCollectionEquality().equals(other.duration, duration));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(duration),
  ]);
}

extension MessageInviteVideoChatParticipantsDataClassExtensions
    on MessageInviteVideoChatParticipants {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageInviteVideoChatParticipants &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(other.userIds, userIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(userIds),
  ]);
}

extension MessageBasicGroupChatCreateDataClassExtensions
    on MessageBasicGroupChatCreate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageBasicGroupChatCreate &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.memberUserIds,
            memberUserIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(memberUserIds),
  ]);
}

extension MessageSupergroupChatCreateDataClassExtensions
    on MessageSupergroupChatCreate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSupergroupChatCreate &&
          const DeepCollectionEquality().equals(other.title, title));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(title)]);
}

extension MessageChatChangeTitleDataClassExtensions on MessageChatChangeTitle {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageChatChangeTitle &&
          const DeepCollectionEquality().equals(other.title, title));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(title)]);
}

extension MessageChatChangePhotoDataClassExtensions on MessageChatChangePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageChatChangePhoto &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(photo)]);
}

extension MessageChatDeletePhotoDataClassExtensions on MessageChatDeletePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageChatDeletePhoto);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageChatAddMembersDataClassExtensions on MessageChatAddMembers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageChatAddMembers &&
          const DeepCollectionEquality().equals(
            other.memberUserIds,
            memberUserIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(memberUserIds),
  ]);
}

extension MessageChatJoinByLinkDataClassExtensions on MessageChatJoinByLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageChatJoinByLink);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageChatJoinByRequestDataClassExtensions
    on MessageChatJoinByRequest {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageChatJoinByRequest);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageChatDeleteMemberDataClassExtensions
    on MessageChatDeleteMember {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageChatDeleteMember &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension MessageChatUpgradeToDataClassExtensions on MessageChatUpgradeTo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageChatUpgradeTo &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
  ]);
}

extension MessageChatUpgradeFromDataClassExtensions on MessageChatUpgradeFrom {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageChatUpgradeFrom &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.basicGroupId,
            basicGroupId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(basicGroupId),
  ]);
}

extension MessagePinMessageDataClassExtensions on MessagePinMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessagePinMessage &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension MessageScreenshotTakenDataClassExtensions on MessageScreenshotTaken {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageScreenshotTaken);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageChatSetBackgroundDataClassExtensions
    on MessageChatSetBackground {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageChatSetBackground &&
          const DeepCollectionEquality().equals(
            other.oldBackgroundMessageId,
            oldBackgroundMessageId,
          ) &&
          const DeepCollectionEquality().equals(other.background, background) &&
          const DeepCollectionEquality().equals(
            other.onlyForSelf,
            onlyForSelf,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldBackgroundMessageId),
    const DeepCollectionEquality().hash(background),
    const DeepCollectionEquality().hash(onlyForSelf),
  ]);
}

extension MessageChatSetThemeDataClassExtensions on MessageChatSetTheme {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageChatSetTheme &&
          const DeepCollectionEquality().equals(other.themeName, themeName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(themeName),
  ]);
}

extension MessageChatSetMessageAutoDeleteTimeDataClassExtensions
    on MessageChatSetMessageAutoDeleteTime {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageChatSetMessageAutoDeleteTime &&
          const DeepCollectionEquality().equals(
            other.messageAutoDeleteTime,
            messageAutoDeleteTime,
          ) &&
          const DeepCollectionEquality().equals(other.fromUserId, fromUserId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messageAutoDeleteTime),
    const DeepCollectionEquality().hash(fromUserId),
  ]);
}

extension MessageChatBoostDataClassExtensions on MessageChatBoost {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageChatBoost &&
          const DeepCollectionEquality().equals(other.boostCount, boostCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(boostCount),
  ]);
}

extension MessageForumTopicCreatedDataClassExtensions
    on MessageForumTopicCreated {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageForumTopicCreated &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.icon, icon));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(icon),
  ]);
}

extension MessageForumTopicEditedDataClassExtensions
    on MessageForumTopicEdited {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageForumTopicEdited &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(
            other.editIconCustomEmojiId,
            editIconCustomEmojiId,
          ) &&
          const DeepCollectionEquality().equals(
            other.iconCustomEmojiId,
            iconCustomEmojiId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(editIconCustomEmojiId),
    const DeepCollectionEquality().hash(iconCustomEmojiId),
  ]);
}

extension MessageForumTopicIsClosedToggledDataClassExtensions
    on MessageForumTopicIsClosedToggled {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageForumTopicIsClosedToggled &&
          const DeepCollectionEquality().equals(other.isClosed, isClosed));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isClosed),
  ]);
}

extension MessageForumTopicIsHiddenToggledDataClassExtensions
    on MessageForumTopicIsHiddenToggled {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageForumTopicIsHiddenToggled &&
          const DeepCollectionEquality().equals(other.isHidden, isHidden));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isHidden),
  ]);
}

extension MessageSuggestProfilePhotoDataClassExtensions
    on MessageSuggestProfilePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSuggestProfilePhoto &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(photo)]);
}

extension MessageCustomServiceActionDataClassExtensions
    on MessageCustomServiceAction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageCustomServiceAction &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(text)]);
}

extension MessageGameScoreDataClassExtensions on MessageGameScore {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageGameScore &&
          const DeepCollectionEquality().equals(
            other.gameMessageId,
            gameMessageId,
          ) &&
          const DeepCollectionEquality().equals(other.gameId, gameId) &&
          const DeepCollectionEquality().equals(other.score, score));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(gameMessageId),
    const DeepCollectionEquality().hash(gameId),
    const DeepCollectionEquality().hash(score),
  ]);
}

extension MessagePaymentSuccessfulDataClassExtensions
    on MessagePaymentSuccessful {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessagePaymentSuccessful &&
          const DeepCollectionEquality().equals(
            other.invoiceChatId,
            invoiceChatId,
          ) &&
          const DeepCollectionEquality().equals(
            other.invoiceMessageId,
            invoiceMessageId,
          ) &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(
            other.totalAmount,
            totalAmount,
          ) &&
          const DeepCollectionEquality().equals(
            other.subscriptionUntilDate,
            subscriptionUntilDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.isRecurring,
            isRecurring,
          ) &&
          const DeepCollectionEquality().equals(
            other.isFirstRecurring,
            isFirstRecurring,
          ) &&
          const DeepCollectionEquality().equals(
            other.invoiceName,
            invoiceName,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(invoiceChatId),
    const DeepCollectionEquality().hash(invoiceMessageId),
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(totalAmount),
    const DeepCollectionEquality().hash(subscriptionUntilDate),
    const DeepCollectionEquality().hash(isRecurring),
    const DeepCollectionEquality().hash(isFirstRecurring),
    const DeepCollectionEquality().hash(invoiceName),
  ]);
}

extension MessagePaymentSuccessfulBotDataClassExtensions
    on MessagePaymentSuccessfulBot {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessagePaymentSuccessfulBot &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(
            other.totalAmount,
            totalAmount,
          ) &&
          const DeepCollectionEquality().equals(
            other.subscriptionUntilDate,
            subscriptionUntilDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.isRecurring,
            isRecurring,
          ) &&
          const DeepCollectionEquality().equals(
            other.isFirstRecurring,
            isFirstRecurring,
          ) &&
          const DeepCollectionEquality().equals(
            other.invoicePayload,
            invoicePayload,
          ) &&
          const DeepCollectionEquality().equals(
            other.shippingOptionId,
            shippingOptionId,
          ) &&
          const DeepCollectionEquality().equals(other.orderInfo, orderInfo) &&
          const DeepCollectionEquality().equals(
            other.telegramPaymentChargeId,
            telegramPaymentChargeId,
          ) &&
          const DeepCollectionEquality().equals(
            other.providerPaymentChargeId,
            providerPaymentChargeId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(totalAmount),
    const DeepCollectionEquality().hash(subscriptionUntilDate),
    const DeepCollectionEquality().hash(isRecurring),
    const DeepCollectionEquality().hash(isFirstRecurring),
    const DeepCollectionEquality().hash(invoicePayload),
    const DeepCollectionEquality().hash(shippingOptionId),
    const DeepCollectionEquality().hash(orderInfo),
    const DeepCollectionEquality().hash(telegramPaymentChargeId),
    const DeepCollectionEquality().hash(providerPaymentChargeId),
  ]);
}

extension MessagePaymentRefundedDataClassExtensions on MessagePaymentRefunded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessagePaymentRefunded &&
          const DeepCollectionEquality().equals(other.ownerId, ownerId) &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(
            other.totalAmount,
            totalAmount,
          ) &&
          const DeepCollectionEquality().equals(
            other.invoicePayload,
            invoicePayload,
          ) &&
          const DeepCollectionEquality().equals(
            other.telegramPaymentChargeId,
            telegramPaymentChargeId,
          ) &&
          const DeepCollectionEquality().equals(
            other.providerPaymentChargeId,
            providerPaymentChargeId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(ownerId),
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(totalAmount),
    const DeepCollectionEquality().hash(invoicePayload),
    const DeepCollectionEquality().hash(telegramPaymentChargeId),
    const DeepCollectionEquality().hash(providerPaymentChargeId),
  ]);
}

extension MessageGiftedPremiumDataClassExtensions on MessageGiftedPremium {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageGiftedPremium &&
          const DeepCollectionEquality().equals(
            other.gifterUserId,
            gifterUserId,
          ) &&
          const DeepCollectionEquality().equals(
            other.receiverUserId,
            receiverUserId,
          ) &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(
            other.cryptocurrency,
            cryptocurrency,
          ) &&
          const DeepCollectionEquality().equals(
            other.cryptocurrencyAmount,
            cryptocurrencyAmount,
          ) &&
          const DeepCollectionEquality().equals(other.monthCount, monthCount) &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(gifterUserId),
    const DeepCollectionEquality().hash(receiverUserId),
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(cryptocurrency),
    const DeepCollectionEquality().hash(cryptocurrencyAmount),
    const DeepCollectionEquality().hash(monthCount),
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension MessagePremiumGiftCodeDataClassExtensions on MessagePremiumGiftCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessagePremiumGiftCode &&
          const DeepCollectionEquality().equals(other.creatorId, creatorId) &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(
            other.isFromGiveaway,
            isFromGiveaway,
          ) &&
          const DeepCollectionEquality().equals(
            other.isUnclaimed,
            isUnclaimed,
          ) &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(
            other.cryptocurrency,
            cryptocurrency,
          ) &&
          const DeepCollectionEquality().equals(
            other.cryptocurrencyAmount,
            cryptocurrencyAmount,
          ) &&
          const DeepCollectionEquality().equals(other.monthCount, monthCount) &&
          const DeepCollectionEquality().equals(other.sticker, sticker) &&
          const DeepCollectionEquality().equals(other.code, code));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(creatorId),
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(isFromGiveaway),
    const DeepCollectionEquality().hash(isUnclaimed),
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(cryptocurrency),
    const DeepCollectionEquality().hash(cryptocurrencyAmount),
    const DeepCollectionEquality().hash(monthCount),
    const DeepCollectionEquality().hash(sticker),
    const DeepCollectionEquality().hash(code),
  ]);
}

extension MessageGiveawayCreatedDataClassExtensions on MessageGiveawayCreated {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageGiveawayCreated &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension MessageGiveawayDataClassExtensions on MessageGiveaway {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageGiveaway &&
          const DeepCollectionEquality().equals(other.parameters, parameters) &&
          const DeepCollectionEquality().equals(
            other.winnerCount,
            winnerCount,
          ) &&
          const DeepCollectionEquality().equals(other.prize, prize) &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(parameters),
    const DeepCollectionEquality().hash(winnerCount),
    const DeepCollectionEquality().hash(prize),
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension MessageGiveawayCompletedDataClassExtensions
    on MessageGiveawayCompleted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageGiveawayCompleted &&
          const DeepCollectionEquality().equals(
            other.giveawayMessageId,
            giveawayMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.winnerCount,
            winnerCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.isStarGiveaway,
            isStarGiveaway,
          ) &&
          const DeepCollectionEquality().equals(
            other.unclaimedPrizeCount,
            unclaimedPrizeCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(giveawayMessageId),
    const DeepCollectionEquality().hash(winnerCount),
    const DeepCollectionEquality().hash(isStarGiveaway),
    const DeepCollectionEquality().hash(unclaimedPrizeCount),
  ]);
}

extension MessageGiveawayWinnersDataClassExtensions on MessageGiveawayWinners {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageGiveawayWinners &&
          const DeepCollectionEquality().equals(
            other.boostedChatId,
            boostedChatId,
          ) &&
          const DeepCollectionEquality().equals(
            other.giveawayMessageId,
            giveawayMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.additionalChatCount,
            additionalChatCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.actualWinnersSelectionDate,
            actualWinnersSelectionDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.onlyNewMembers,
            onlyNewMembers,
          ) &&
          const DeepCollectionEquality().equals(
            other.wasRefunded,
            wasRefunded,
          ) &&
          const DeepCollectionEquality().equals(other.prize, prize) &&
          const DeepCollectionEquality().equals(
            other.prizeDescription,
            prizeDescription,
          ) &&
          const DeepCollectionEquality().equals(
            other.winnerCount,
            winnerCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.winnerUserIds,
            winnerUserIds,
          ) &&
          const DeepCollectionEquality().equals(
            other.unclaimedPrizeCount,
            unclaimedPrizeCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(boostedChatId),
    const DeepCollectionEquality().hash(giveawayMessageId),
    const DeepCollectionEquality().hash(additionalChatCount),
    const DeepCollectionEquality().hash(actualWinnersSelectionDate),
    const DeepCollectionEquality().hash(onlyNewMembers),
    const DeepCollectionEquality().hash(wasRefunded),
    const DeepCollectionEquality().hash(prize),
    const DeepCollectionEquality().hash(prizeDescription),
    const DeepCollectionEquality().hash(winnerCount),
    const DeepCollectionEquality().hash(winnerUserIds),
    const DeepCollectionEquality().hash(unclaimedPrizeCount),
  ]);
}

extension MessageGiftedStarsDataClassExtensions on MessageGiftedStars {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageGiftedStars &&
          const DeepCollectionEquality().equals(
            other.gifterUserId,
            gifterUserId,
          ) &&
          const DeepCollectionEquality().equals(
            other.receiverUserId,
            receiverUserId,
          ) &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(
            other.cryptocurrency,
            cryptocurrency,
          ) &&
          const DeepCollectionEquality().equals(
            other.cryptocurrencyAmount,
            cryptocurrencyAmount,
          ) &&
          const DeepCollectionEquality().equals(other.starCount, starCount) &&
          const DeepCollectionEquality().equals(
            other.transactionId,
            transactionId,
          ) &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(gifterUserId),
    const DeepCollectionEquality().hash(receiverUserId),
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(cryptocurrency),
    const DeepCollectionEquality().hash(cryptocurrencyAmount),
    const DeepCollectionEquality().hash(starCount),
    const DeepCollectionEquality().hash(transactionId),
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension MessageGiveawayPrizeStarsDataClassExtensions
    on MessageGiveawayPrizeStars {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageGiveawayPrizeStars &&
          const DeepCollectionEquality().equals(other.starCount, starCount) &&
          const DeepCollectionEquality().equals(
            other.transactionId,
            transactionId,
          ) &&
          const DeepCollectionEquality().equals(
            other.boostedChatId,
            boostedChatId,
          ) &&
          const DeepCollectionEquality().equals(
            other.giveawayMessageId,
            giveawayMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.isUnclaimed,
            isUnclaimed,
          ) &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(starCount),
    const DeepCollectionEquality().hash(transactionId),
    const DeepCollectionEquality().hash(boostedChatId),
    const DeepCollectionEquality().hash(giveawayMessageId),
    const DeepCollectionEquality().hash(isUnclaimed),
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension MessageGiftDataClassExtensions on MessageGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageGift &&
          const DeepCollectionEquality().equals(other.gift, gift) &&
          const DeepCollectionEquality().equals(other.senderId, senderId) &&
          const DeepCollectionEquality().equals(other.receiverId, receiverId) &&
          const DeepCollectionEquality().equals(
            other.receivedGiftId,
            receivedGiftId,
          ) &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(
            other.sellStarCount,
            sellStarCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.prepaidUpgradeStarCount,
            prepaidUpgradeStarCount,
          ) &&
          const DeepCollectionEquality().equals(other.isPrivate, isPrivate) &&
          const DeepCollectionEquality().equals(other.isSaved, isSaved) &&
          const DeepCollectionEquality().equals(
            other.canBeUpgraded,
            canBeUpgraded,
          ) &&
          const DeepCollectionEquality().equals(
            other.wasConverted,
            wasConverted,
          ) &&
          const DeepCollectionEquality().equals(
            other.wasUpgraded,
            wasUpgraded,
          ) &&
          const DeepCollectionEquality().equals(
            other.wasRefunded,
            wasRefunded,
          ) &&
          const DeepCollectionEquality().equals(
            other.upgradedReceivedGiftId,
            upgradedReceivedGiftId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(gift),
    const DeepCollectionEquality().hash(senderId),
    const DeepCollectionEquality().hash(receiverId),
    const DeepCollectionEquality().hash(receivedGiftId),
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(sellStarCount),
    const DeepCollectionEquality().hash(prepaidUpgradeStarCount),
    const DeepCollectionEquality().hash(isPrivate),
    const DeepCollectionEquality().hash(isSaved),
    const DeepCollectionEquality().hash(canBeUpgraded),
    const DeepCollectionEquality().hash(wasConverted),
    const DeepCollectionEquality().hash(wasUpgraded),
    const DeepCollectionEquality().hash(wasRefunded),
    const DeepCollectionEquality().hash(upgradedReceivedGiftId),
  ]);
}

extension MessageUpgradedGiftDataClassExtensions on MessageUpgradedGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageUpgradedGift &&
          const DeepCollectionEquality().equals(other.gift, gift) &&
          const DeepCollectionEquality().equals(other.senderId, senderId) &&
          const DeepCollectionEquality().equals(other.receiverId, receiverId) &&
          const DeepCollectionEquality().equals(
            other.receivedGiftId,
            receivedGiftId,
          ) &&
          const DeepCollectionEquality().equals(other.isUpgrade, isUpgrade) &&
          const DeepCollectionEquality().equals(other.isSaved, isSaved) &&
          const DeepCollectionEquality().equals(
            other.canBeTransferred,
            canBeTransferred,
          ) &&
          const DeepCollectionEquality().equals(
            other.wasTransferred,
            wasTransferred,
          ) &&
          const DeepCollectionEquality().equals(
            other.lastResaleStarCount,
            lastResaleStarCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.transferStarCount,
            transferStarCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.nextTransferDate,
            nextTransferDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.nextResaleDate,
            nextResaleDate,
          ) &&
          const DeepCollectionEquality().equals(other.exportDate, exportDate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(gift),
    const DeepCollectionEquality().hash(senderId),
    const DeepCollectionEquality().hash(receiverId),
    const DeepCollectionEquality().hash(receivedGiftId),
    const DeepCollectionEquality().hash(isUpgrade),
    const DeepCollectionEquality().hash(isSaved),
    const DeepCollectionEquality().hash(canBeTransferred),
    const DeepCollectionEquality().hash(wasTransferred),
    const DeepCollectionEquality().hash(lastResaleStarCount),
    const DeepCollectionEquality().hash(transferStarCount),
    const DeepCollectionEquality().hash(nextTransferDate),
    const DeepCollectionEquality().hash(nextResaleDate),
    const DeepCollectionEquality().hash(exportDate),
  ]);
}

extension MessageRefundedUpgradedGiftDataClassExtensions
    on MessageRefundedUpgradedGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageRefundedUpgradedGift &&
          const DeepCollectionEquality().equals(other.gift, gift) &&
          const DeepCollectionEquality().equals(other.senderId, senderId) &&
          const DeepCollectionEquality().equals(other.receiverId, receiverId) &&
          const DeepCollectionEquality().equals(other.isUpgrade, isUpgrade));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(gift),
    const DeepCollectionEquality().hash(senderId),
    const DeepCollectionEquality().hash(receiverId),
    const DeepCollectionEquality().hash(isUpgrade),
  ]);
}

extension MessagePaidMessagesRefundedDataClassExtensions
    on MessagePaidMessagesRefunded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessagePaidMessagesRefunded &&
          const DeepCollectionEquality().equals(
            other.messageCount,
            messageCount,
          ) &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messageCount),
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension MessagePaidMessagePriceChangedDataClassExtensions
    on MessagePaidMessagePriceChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessagePaidMessagePriceChanged &&
          const DeepCollectionEquality().equals(
            other.paidMessageStarCount,
            paidMessageStarCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(paidMessageStarCount),
  ]);
}

extension MessageDirectMessagePriceChangedDataClassExtensions
    on MessageDirectMessagePriceChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageDirectMessagePriceChanged &&
          const DeepCollectionEquality().equals(other.isEnabled, isEnabled) &&
          const DeepCollectionEquality().equals(
            other.paidMessageStarCount,
            paidMessageStarCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isEnabled),
    const DeepCollectionEquality().hash(paidMessageStarCount),
  ]);
}

extension MessageChecklistTasksDoneDataClassExtensions
    on MessageChecklistTasksDone {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageChecklistTasksDone &&
          const DeepCollectionEquality().equals(
            other.checklistMessageId,
            checklistMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.markedAsDoneTaskIds,
            markedAsDoneTaskIds,
          ) &&
          const DeepCollectionEquality().equals(
            other.markedAsNotDoneTaskIds,
            markedAsNotDoneTaskIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(checklistMessageId),
    const DeepCollectionEquality().hash(markedAsDoneTaskIds),
    const DeepCollectionEquality().hash(markedAsNotDoneTaskIds),
  ]);
}

extension MessageChecklistTasksAddedDataClassExtensions
    on MessageChecklistTasksAdded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageChecklistTasksAdded &&
          const DeepCollectionEquality().equals(
            other.checklistMessageId,
            checklistMessageId,
          ) &&
          const DeepCollectionEquality().equals(other.tasks, tasks));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(checklistMessageId),
    const DeepCollectionEquality().hash(tasks),
  ]);
}

extension MessageContactRegisteredDataClassExtensions
    on MessageContactRegistered {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageContactRegistered);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageUsersSharedDataClassExtensions on MessageUsersShared {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageUsersShared &&
          const DeepCollectionEquality().equals(other.users, users) &&
          const DeepCollectionEquality().equals(other.buttonId, buttonId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(users),
    const DeepCollectionEquality().hash(buttonId),
  ]);
}

extension MessageChatSharedDataClassExtensions on MessageChatShared {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageChatShared &&
          const DeepCollectionEquality().equals(other.chat, chat) &&
          const DeepCollectionEquality().equals(other.buttonId, buttonId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chat),
    const DeepCollectionEquality().hash(buttonId),
  ]);
}

extension MessageBotWriteAccessAllowedDataClassExtensions
    on MessageBotWriteAccessAllowed {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageBotWriteAccessAllowed &&
          const DeepCollectionEquality().equals(other.reason, reason));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(reason),
  ]);
}

extension MessageWebAppDataSentDataClassExtensions on MessageWebAppDataSent {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageWebAppDataSent &&
          const DeepCollectionEquality().equals(other.buttonText, buttonText));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(buttonText),
  ]);
}

extension MessageWebAppDataReceivedDataClassExtensions
    on MessageWebAppDataReceived {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageWebAppDataReceived &&
          const DeepCollectionEquality().equals(other.buttonText, buttonText) &&
          const DeepCollectionEquality().equals(other.data, data));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(buttonText),
    const DeepCollectionEquality().hash(data),
  ]);
}

extension MessagePassportDataSentDataClassExtensions
    on MessagePassportDataSent {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessagePassportDataSent &&
          const DeepCollectionEquality().equals(other.types, types));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(types)]);
}

extension MessagePassportDataReceivedDataClassExtensions
    on MessagePassportDataReceived {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessagePassportDataReceived &&
          const DeepCollectionEquality().equals(other.elements, elements) &&
          const DeepCollectionEquality().equals(
            other.credentials,
            credentials,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(elements),
    const DeepCollectionEquality().hash(credentials),
  ]);
}

extension MessageProximityAlertTriggeredDataClassExtensions
    on MessageProximityAlertTriggered {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageProximityAlertTriggered &&
          const DeepCollectionEquality().equals(other.travelerId, travelerId) &&
          const DeepCollectionEquality().equals(other.watcherId, watcherId) &&
          const DeepCollectionEquality().equals(other.distance, distance));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(travelerId),
    const DeepCollectionEquality().hash(watcherId),
    const DeepCollectionEquality().hash(distance),
  ]);
}

extension MessageUnsupportedDataClassExtensions on MessageUnsupported {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageUnsupported);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypeDataClassExtensions on TextEntityType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TextEntityType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypeMentionDataClassExtensions on TextEntityTypeMention {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TextEntityTypeMention);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypeHashtagDataClassExtensions on TextEntityTypeHashtag {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TextEntityTypeHashtag);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypeCashtagDataClassExtensions on TextEntityTypeCashtag {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TextEntityTypeCashtag);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypeBotCommandDataClassExtensions
    on TextEntityTypeBotCommand {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TextEntityTypeBotCommand);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypeUrlDataClassExtensions on TextEntityTypeUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TextEntityTypeUrl);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypeEmailAddressDataClassExtensions
    on TextEntityTypeEmailAddress {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TextEntityTypeEmailAddress);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypePhoneNumberDataClassExtensions
    on TextEntityTypePhoneNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TextEntityTypePhoneNumber);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypeBankCardNumberDataClassExtensions
    on TextEntityTypeBankCardNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TextEntityTypeBankCardNumber);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypeBoldDataClassExtensions on TextEntityTypeBold {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TextEntityTypeBold);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypeItalicDataClassExtensions on TextEntityTypeItalic {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TextEntityTypeItalic);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypeUnderlineDataClassExtensions
    on TextEntityTypeUnderline {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TextEntityTypeUnderline);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypeStrikethroughDataClassExtensions
    on TextEntityTypeStrikethrough {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TextEntityTypeStrikethrough);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypeSpoilerDataClassExtensions on TextEntityTypeSpoiler {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TextEntityTypeSpoiler);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypeCodeDataClassExtensions on TextEntityTypeCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TextEntityTypeCode);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypePreDataClassExtensions on TextEntityTypePre {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TextEntityTypePre);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypePreCodeDataClassExtensions on TextEntityTypePreCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TextEntityTypePreCode &&
          const DeepCollectionEquality().equals(other.language, language));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(language),
  ]);
}

extension TextEntityTypeBlockQuoteDataClassExtensions
    on TextEntityTypeBlockQuote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TextEntityTypeBlockQuote);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypeExpandableBlockQuoteDataClassExtensions
    on TextEntityTypeExpandableBlockQuote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TextEntityTypeExpandableBlockQuote);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextEntityTypeTextUrlDataClassExtensions on TextEntityTypeTextUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TextEntityTypeTextUrl &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(url)]);
}

extension TextEntityTypeMentionNameDataClassExtensions
    on TextEntityTypeMentionName {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TextEntityTypeMentionName &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension TextEntityTypeCustomEmojiDataClassExtensions
    on TextEntityTypeCustomEmoji {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TextEntityTypeCustomEmoji &&
          const DeepCollectionEquality().equals(
            other.customEmojiId,
            customEmojiId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(customEmojiId),
  ]);
}

extension TextEntityTypeMediaTimestampDataClassExtensions
    on TextEntityTypeMediaTimestamp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TextEntityTypeMediaTimestamp &&
          const DeepCollectionEquality().equals(
            other.mediaTimestamp,
            mediaTimestamp,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(mediaTimestamp),
  ]);
}

extension InputThumbnailDataClassExtensions on InputThumbnail {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputThumbnail &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
  ]);
}

extension InputPaidMediaTypeDataClassExtensions on InputPaidMediaType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InputPaidMediaType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InputPaidMediaTypePhotoDataClassExtensions
    on InputPaidMediaTypePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InputPaidMediaTypePhoto);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InputPaidMediaTypeVideoDataClassExtensions
    on InputPaidMediaTypeVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPaidMediaTypeVideo &&
          const DeepCollectionEquality().equals(other.cover, cover) &&
          const DeepCollectionEquality().equals(
            other.startTimestamp,
            startTimestamp,
          ) &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(
            other.supportsStreaming,
            supportsStreaming,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(cover),
    const DeepCollectionEquality().hash(startTimestamp),
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(supportsStreaming),
  ]);
}

extension InputPaidMediaDataClassExtensions on InputPaidMedia {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputPaidMedia &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.media, media) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(
            other.addedStickerFileIds,
            addedStickerFileIds,
          ) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(media),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(addedStickerFileIds),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
  ]);
}

extension MessageSchedulingStateDataClassExtensions on MessageSchedulingState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageSchedulingState);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageSchedulingStateSendAtDateDataClassExtensions
    on MessageSchedulingStateSendAtDate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSchedulingStateSendAtDate &&
          const DeepCollectionEquality().equals(other.sendDate, sendDate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sendDate),
  ]);
}

extension MessageSchedulingStateSendWhenOnlineDataClassExtensions
    on MessageSchedulingStateSendWhenOnline {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSchedulingStateSendWhenOnline);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageSchedulingStateSendWhenVideoProcessedDataClassExtensions
    on MessageSchedulingStateSendWhenVideoProcessed {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSchedulingStateSendWhenVideoProcessed &&
          const DeepCollectionEquality().equals(other.sendDate, sendDate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sendDate),
  ]);
}

extension MessageSelfDestructTypeDataClassExtensions
    on MessageSelfDestructType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageSelfDestructType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageSelfDestructTypeTimerDataClassExtensions
    on MessageSelfDestructTypeTimer {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSelfDestructTypeTimer &&
          const DeepCollectionEquality().equals(
            other.selfDestructTime,
            selfDestructTime,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(selfDestructTime),
  ]);
}

extension MessageSelfDestructTypeImmediatelyDataClassExtensions
    on MessageSelfDestructTypeImmediately {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSelfDestructTypeImmediately);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageSendOptionsDataClassExtensions on MessageSendOptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageSendOptions &&
          const DeepCollectionEquality().equals(
            other.directMessagesChatTopicId,
            directMessagesChatTopicId,
          ) &&
          const DeepCollectionEquality().equals(
            other.disableNotification,
            disableNotification,
          ) &&
          const DeepCollectionEquality().equals(
            other.fromBackground,
            fromBackground,
          ) &&
          const DeepCollectionEquality().equals(
            other.protectContent,
            protectContent,
          ) &&
          const DeepCollectionEquality().equals(
            other.allowPaidBroadcast,
            allowPaidBroadcast,
          ) &&
          const DeepCollectionEquality().equals(
            other.paidMessageStarCount,
            paidMessageStarCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.updateOrderOfInstalledStickerSets,
            updateOrderOfInstalledStickerSets,
          ) &&
          const DeepCollectionEquality().equals(
            other.schedulingState,
            schedulingState,
          ) &&
          const DeepCollectionEquality().equals(other.effectId, effectId) &&
          const DeepCollectionEquality().equals(other.sendingId, sendingId) &&
          const DeepCollectionEquality().equals(
            other.onlyPreview,
            onlyPreview,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(directMessagesChatTopicId),
    const DeepCollectionEquality().hash(disableNotification),
    const DeepCollectionEquality().hash(fromBackground),
    const DeepCollectionEquality().hash(protectContent),
    const DeepCollectionEquality().hash(allowPaidBroadcast),
    const DeepCollectionEquality().hash(paidMessageStarCount),
    const DeepCollectionEquality().hash(updateOrderOfInstalledStickerSets),
    const DeepCollectionEquality().hash(schedulingState),
    const DeepCollectionEquality().hash(effectId),
    const DeepCollectionEquality().hash(sendingId),
    const DeepCollectionEquality().hash(onlyPreview),
  ]);
}

extension MessageCopyOptionsDataClassExtensions on MessageCopyOptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageCopyOptions &&
          const DeepCollectionEquality().equals(other.sendCopy, sendCopy) &&
          const DeepCollectionEquality().equals(
            other.replaceCaption,
            replaceCaption,
          ) &&
          const DeepCollectionEquality().equals(other.newCaption, newCaption) &&
          const DeepCollectionEquality().equals(
            other.newShowCaptionAboveMedia,
            newShowCaptionAboveMedia,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sendCopy),
    const DeepCollectionEquality().hash(replaceCaption),
    const DeepCollectionEquality().hash(newCaption),
    const DeepCollectionEquality().hash(newShowCaptionAboveMedia),
  ]);
}

extension InputMessageContentDataClassExtensions on InputMessageContent {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InputMessageContent);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InputMessageTextDataClassExtensions on InputMessageText {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageText &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(
            other.linkPreviewOptions,
            linkPreviewOptions,
          ) &&
          const DeepCollectionEquality().equals(other.clearDraft, clearDraft));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(linkPreviewOptions),
    const DeepCollectionEquality().hash(clearDraft),
  ]);
}

extension InputMessageAnimationDataClassExtensions on InputMessageAnimation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageAnimation &&
          const DeepCollectionEquality().equals(other.animation, animation) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(
            other.addedStickerFileIds,
            addedStickerFileIds,
          ) &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(
            other.showCaptionAboveMedia,
            showCaptionAboveMedia,
          ) &&
          const DeepCollectionEquality().equals(other.hasSpoiler, hasSpoiler));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(animation),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(addedStickerFileIds),
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(showCaptionAboveMedia),
    const DeepCollectionEquality().hash(hasSpoiler),
  ]);
}

extension InputMessageAudioDataClassExtensions on InputMessageAudio {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageAudio &&
          const DeepCollectionEquality().equals(other.audio, audio) &&
          const DeepCollectionEquality().equals(
            other.albumCoverThumbnail,
            albumCoverThumbnail,
          ) &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.performer, performer) &&
          const DeepCollectionEquality().equals(other.caption, caption));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(audio),
    const DeepCollectionEquality().hash(albumCoverThumbnail),
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(performer),
    const DeepCollectionEquality().hash(caption),
  ]);
}

extension InputMessageDocumentDataClassExtensions on InputMessageDocument {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageDocument &&
          const DeepCollectionEquality().equals(other.document, document) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(
            other.disableContentTypeDetection,
            disableContentTypeDetection,
          ) &&
          const DeepCollectionEquality().equals(other.caption, caption));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(document),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(disableContentTypeDetection),
    const DeepCollectionEquality().hash(caption),
  ]);
}

extension InputMessagePaidMediaDataClassExtensions on InputMessagePaidMedia {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessagePaidMedia &&
          const DeepCollectionEquality().equals(other.starCount, starCount) &&
          const DeepCollectionEquality().equals(other.paidMedia, paidMedia) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(
            other.showCaptionAboveMedia,
            showCaptionAboveMedia,
          ) &&
          const DeepCollectionEquality().equals(other.payload, payload));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(starCount),
    const DeepCollectionEquality().hash(paidMedia),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(showCaptionAboveMedia),
    const DeepCollectionEquality().hash(payload),
  ]);
}

extension InputMessagePhotoDataClassExtensions on InputMessagePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessagePhoto &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(
            other.addedStickerFileIds,
            addedStickerFileIds,
          ) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(
            other.showCaptionAboveMedia,
            showCaptionAboveMedia,
          ) &&
          const DeepCollectionEquality().equals(
            other.selfDestructType,
            selfDestructType,
          ) &&
          const DeepCollectionEquality().equals(other.hasSpoiler, hasSpoiler));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(addedStickerFileIds),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(showCaptionAboveMedia),
    const DeepCollectionEquality().hash(selfDestructType),
    const DeepCollectionEquality().hash(hasSpoiler),
  ]);
}

extension InputMessageStickerDataClassExtensions on InputMessageSticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageSticker &&
          const DeepCollectionEquality().equals(other.sticker, sticker) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(other.emoji, emoji));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sticker),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(emoji),
  ]);
}

extension InputMessageVideoDataClassExtensions on InputMessageVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageVideo &&
          const DeepCollectionEquality().equals(other.video, video) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(other.cover, cover) &&
          const DeepCollectionEquality().equals(
            other.startTimestamp,
            startTimestamp,
          ) &&
          const DeepCollectionEquality().equals(
            other.addedStickerFileIds,
            addedStickerFileIds,
          ) &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(
            other.supportsStreaming,
            supportsStreaming,
          ) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(
            other.showCaptionAboveMedia,
            showCaptionAboveMedia,
          ) &&
          const DeepCollectionEquality().equals(
            other.selfDestructType,
            selfDestructType,
          ) &&
          const DeepCollectionEquality().equals(other.hasSpoiler, hasSpoiler));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(video),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(cover),
    const DeepCollectionEquality().hash(startTimestamp),
    const DeepCollectionEquality().hash(addedStickerFileIds),
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(supportsStreaming),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(showCaptionAboveMedia),
    const DeepCollectionEquality().hash(selfDestructType),
    const DeepCollectionEquality().hash(hasSpoiler),
  ]);
}

extension InputMessageVideoNoteDataClassExtensions on InputMessageVideoNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageVideoNote &&
          const DeepCollectionEquality().equals(other.videoNote, videoNote) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(other.length, length) &&
          const DeepCollectionEquality().equals(
            other.selfDestructType,
            selfDestructType,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(videoNote),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(length),
    const DeepCollectionEquality().hash(selfDestructType),
  ]);
}

extension InputMessageVoiceNoteDataClassExtensions on InputMessageVoiceNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageVoiceNote &&
          const DeepCollectionEquality().equals(other.voiceNote, voiceNote) &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(other.waveform, waveform) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(
            other.selfDestructType,
            selfDestructType,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(voiceNote),
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(waveform),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(selfDestructType),
  ]);
}

extension InputMessageLocationDataClassExtensions on InputMessageLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageLocation &&
          const DeepCollectionEquality().equals(other.location, location) &&
          const DeepCollectionEquality().equals(other.livePeriod, livePeriod) &&
          const DeepCollectionEquality().equals(other.heading, heading) &&
          const DeepCollectionEquality().equals(
            other.proximityAlertRadius,
            proximityAlertRadius,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(location),
    const DeepCollectionEquality().hash(livePeriod),
    const DeepCollectionEquality().hash(heading),
    const DeepCollectionEquality().hash(proximityAlertRadius),
  ]);
}

extension InputMessageVenueDataClassExtensions on InputMessageVenue {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageVenue &&
          const DeepCollectionEquality().equals(other.venue, venue));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(venue)]);
}

extension InputMessageContactDataClassExtensions on InputMessageContact {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageContact &&
          const DeepCollectionEquality().equals(other.contact, contact));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(contact),
  ]);
}

extension InputMessageDiceDataClassExtensions on InputMessageDice {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageDice &&
          const DeepCollectionEquality().equals(other.emoji, emoji) &&
          const DeepCollectionEquality().equals(other.clearDraft, clearDraft));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(emoji),
    const DeepCollectionEquality().hash(clearDraft),
  ]);
}

extension InputMessageGameDataClassExtensions on InputMessageGame {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageGame &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.gameShortName,
            gameShortName,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(gameShortName),
  ]);
}

extension InputMessageInvoiceDataClassExtensions on InputMessageInvoice {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageInvoice &&
          const DeepCollectionEquality().equals(other.invoice, invoice) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ) &&
          const DeepCollectionEquality().equals(other.photoUrl, photoUrl) &&
          const DeepCollectionEquality().equals(other.photoSize, photoSize) &&
          const DeepCollectionEquality().equals(other.photoWidth, photoWidth) &&
          const DeepCollectionEquality().equals(
            other.photoHeight,
            photoHeight,
          ) &&
          const DeepCollectionEquality().equals(other.payload, payload) &&
          const DeepCollectionEquality().equals(
            other.providerToken,
            providerToken,
          ) &&
          const DeepCollectionEquality().equals(
            other.providerData,
            providerData,
          ) &&
          const DeepCollectionEquality().equals(
            other.startParameter,
            startParameter,
          ) &&
          const DeepCollectionEquality().equals(other.paidMedia, paidMedia) &&
          const DeepCollectionEquality().equals(
            other.paidMediaCaption,
            paidMediaCaption,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(invoice),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(description),
    const DeepCollectionEquality().hash(photoUrl),
    const DeepCollectionEquality().hash(photoSize),
    const DeepCollectionEquality().hash(photoWidth),
    const DeepCollectionEquality().hash(photoHeight),
    const DeepCollectionEquality().hash(payload),
    const DeepCollectionEquality().hash(providerToken),
    const DeepCollectionEquality().hash(providerData),
    const DeepCollectionEquality().hash(startParameter),
    const DeepCollectionEquality().hash(paidMedia),
    const DeepCollectionEquality().hash(paidMediaCaption),
  ]);
}

extension InputMessagePollDataClassExtensions on InputMessagePoll {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessagePoll &&
          const DeepCollectionEquality().equals(other.question, question) &&
          const DeepCollectionEquality().equals(other.options, options) &&
          const DeepCollectionEquality().equals(
            other.isAnonymous,
            isAnonymous,
          ) &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.openPeriod, openPeriod) &&
          const DeepCollectionEquality().equals(other.closeDate, closeDate) &&
          const DeepCollectionEquality().equals(other.isClosed, isClosed));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(question),
    const DeepCollectionEquality().hash(options),
    const DeepCollectionEquality().hash(isAnonymous),
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(openPeriod),
    const DeepCollectionEquality().hash(closeDate),
    const DeepCollectionEquality().hash(isClosed),
  ]);
}

extension InputMessageStoryDataClassExtensions on InputMessageStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageStory &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
  ]);
}

extension InputMessageChecklistDataClassExtensions on InputMessageChecklist {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageChecklist &&
          const DeepCollectionEquality().equals(other.checklist, checklist));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(checklist),
  ]);
}

extension InputMessageForwardedDataClassExtensions on InputMessageForwarded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputMessageForwarded &&
          const DeepCollectionEquality().equals(other.fromChatId, fromChatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.inGameShare,
            inGameShare,
          ) &&
          const DeepCollectionEquality().equals(
            other.replaceVideoStartTimestamp,
            replaceVideoStartTimestamp,
          ) &&
          const DeepCollectionEquality().equals(
            other.newVideoStartTimestamp,
            newVideoStartTimestamp,
          ) &&
          const DeepCollectionEquality().equals(
            other.copyOptions,
            copyOptions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fromChatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(inGameShare),
    const DeepCollectionEquality().hash(replaceVideoStartTimestamp),
    const DeepCollectionEquality().hash(newVideoStartTimestamp),
    const DeepCollectionEquality().hash(copyOptions),
  ]);
}

extension MessagePropertiesDataClassExtensions on MessageProperties {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageProperties &&
          const DeepCollectionEquality().equals(
            other.canAddTasks,
            canAddTasks,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeCopied,
            canBeCopied,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeCopiedToSecretChat,
            canBeCopiedToSecretChat,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeDeletedOnlyForSelf,
            canBeDeletedOnlyForSelf,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeDeletedForAllUsers,
            canBeDeletedForAllUsers,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeEdited,
            canBeEdited,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeForwarded,
            canBeForwarded,
          ) &&
          const DeepCollectionEquality().equals(other.canBePaid, canBePaid) &&
          const DeepCollectionEquality().equals(
            other.canBePinned,
            canBePinned,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeReplied,
            canBeReplied,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeRepliedInAnotherChat,
            canBeRepliedInAnotherChat,
          ) &&
          const DeepCollectionEquality().equals(other.canBeSaved, canBeSaved) &&
          const DeepCollectionEquality().equals(
            other.canBeSharedInStory,
            canBeSharedInStory,
          ) &&
          const DeepCollectionEquality().equals(
            other.canEditMedia,
            canEditMedia,
          ) &&
          const DeepCollectionEquality().equals(
            other.canEditSchedulingState,
            canEditSchedulingState,
          ) &&
          const DeepCollectionEquality().equals(
            other.canGetAuthor,
            canGetAuthor,
          ) &&
          const DeepCollectionEquality().equals(
            other.canGetEmbeddingCode,
            canGetEmbeddingCode,
          ) &&
          const DeepCollectionEquality().equals(other.canGetLink, canGetLink) &&
          const DeepCollectionEquality().equals(
            other.canGetMediaTimestampLinks,
            canGetMediaTimestampLinks,
          ) &&
          const DeepCollectionEquality().equals(
            other.canGetMessageThread,
            canGetMessageThread,
          ) &&
          const DeepCollectionEquality().equals(
            other.canGetReadDate,
            canGetReadDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.canGetStatistics,
            canGetStatistics,
          ) &&
          const DeepCollectionEquality().equals(
            other.canGetVideoAdvertisements,
            canGetVideoAdvertisements,
          ) &&
          const DeepCollectionEquality().equals(
            other.canGetViewers,
            canGetViewers,
          ) &&
          const DeepCollectionEquality().equals(
            other.canMarkTasksAsDone,
            canMarkTasksAsDone,
          ) &&
          const DeepCollectionEquality().equals(
            other.canRecognizeSpeech,
            canRecognizeSpeech,
          ) &&
          const DeepCollectionEquality().equals(
            other.canReportChat,
            canReportChat,
          ) &&
          const DeepCollectionEquality().equals(
            other.canReportReactions,
            canReportReactions,
          ) &&
          const DeepCollectionEquality().equals(
            other.canReportSupergroupSpam,
            canReportSupergroupSpam,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSetFactCheck,
            canSetFactCheck,
          ) &&
          const DeepCollectionEquality().equals(
            other.needShowStatistics,
            needShowStatistics,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(canAddTasks),
    const DeepCollectionEquality().hash(canBeCopied),
    const DeepCollectionEquality().hash(canBeCopiedToSecretChat),
    const DeepCollectionEquality().hash(canBeDeletedOnlyForSelf),
    const DeepCollectionEquality().hash(canBeDeletedForAllUsers),
    const DeepCollectionEquality().hash(canBeEdited),
    const DeepCollectionEquality().hash(canBeForwarded),
    const DeepCollectionEquality().hash(canBePaid),
    const DeepCollectionEquality().hash(canBePinned),
    const DeepCollectionEquality().hash(canBeReplied),
    const DeepCollectionEquality().hash(canBeRepliedInAnotherChat),
    const DeepCollectionEquality().hash(canBeSaved),
    const DeepCollectionEquality().hash(canBeSharedInStory),
    const DeepCollectionEquality().hash(canEditMedia),
    const DeepCollectionEquality().hash(canEditSchedulingState),
    const DeepCollectionEquality().hash(canGetAuthor),
    const DeepCollectionEquality().hash(canGetEmbeddingCode),
    const DeepCollectionEquality().hash(canGetLink),
    const DeepCollectionEquality().hash(canGetMediaTimestampLinks),
    const DeepCollectionEquality().hash(canGetMessageThread),
    const DeepCollectionEquality().hash(canGetReadDate),
    const DeepCollectionEquality().hash(canGetStatistics),
    const DeepCollectionEquality().hash(canGetVideoAdvertisements),
    const DeepCollectionEquality().hash(canGetViewers),
    const DeepCollectionEquality().hash(canMarkTasksAsDone),
    const DeepCollectionEquality().hash(canRecognizeSpeech),
    const DeepCollectionEquality().hash(canReportChat),
    const DeepCollectionEquality().hash(canReportReactions),
    const DeepCollectionEquality().hash(canReportSupergroupSpam),
    const DeepCollectionEquality().hash(canSetFactCheck),
    const DeepCollectionEquality().hash(needShowStatistics),
  ]);
}

extension SearchMessagesFilterDataClassExtensions on SearchMessagesFilter {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SearchMessagesFilter);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesFilterEmptyDataClassExtensions
    on SearchMessagesFilterEmpty {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SearchMessagesFilterEmpty);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesFilterAnimationDataClassExtensions
    on SearchMessagesFilterAnimation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchMessagesFilterAnimation);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesFilterAudioDataClassExtensions
    on SearchMessagesFilterAudio {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SearchMessagesFilterAudio);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesFilterDocumentDataClassExtensions
    on SearchMessagesFilterDocument {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchMessagesFilterDocument);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesFilterPhotoDataClassExtensions
    on SearchMessagesFilterPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SearchMessagesFilterPhoto);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesFilterVideoDataClassExtensions
    on SearchMessagesFilterVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SearchMessagesFilterVideo);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesFilterVoiceNoteDataClassExtensions
    on SearchMessagesFilterVoiceNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchMessagesFilterVoiceNote);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesFilterPhotoAndVideoDataClassExtensions
    on SearchMessagesFilterPhotoAndVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchMessagesFilterPhotoAndVideo);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesFilterUrlDataClassExtensions
    on SearchMessagesFilterUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SearchMessagesFilterUrl);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesFilterChatPhotoDataClassExtensions
    on SearchMessagesFilterChatPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchMessagesFilterChatPhoto);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesFilterVideoNoteDataClassExtensions
    on SearchMessagesFilterVideoNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchMessagesFilterVideoNote);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesFilterVoiceAndVideoNoteDataClassExtensions
    on SearchMessagesFilterVoiceAndVideoNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchMessagesFilterVoiceAndVideoNote);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesFilterMentionDataClassExtensions
    on SearchMessagesFilterMention {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchMessagesFilterMention);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesFilterUnreadMentionDataClassExtensions
    on SearchMessagesFilterUnreadMention {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchMessagesFilterUnreadMention);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesFilterUnreadReactionDataClassExtensions
    on SearchMessagesFilterUnreadReaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchMessagesFilterUnreadReaction);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesFilterFailedToSendDataClassExtensions
    on SearchMessagesFilterFailedToSend {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchMessagesFilterFailedToSend);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesFilterPinnedDataClassExtensions
    on SearchMessagesFilterPinned {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SearchMessagesFilterPinned);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesChatTypeFilterDataClassExtensions
    on SearchMessagesChatTypeFilter {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchMessagesChatTypeFilter);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesChatTypeFilterPrivateDataClassExtensions
    on SearchMessagesChatTypeFilterPrivate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchMessagesChatTypeFilterPrivate);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesChatTypeFilterGroupDataClassExtensions
    on SearchMessagesChatTypeFilterGroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchMessagesChatTypeFilterGroup);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchMessagesChatTypeFilterChannelDataClassExtensions
    on SearchMessagesChatTypeFilterChannel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchMessagesChatTypeFilterChannel);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatActionDataClassExtensions on ChatAction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatAction);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatActionTypingDataClassExtensions on ChatActionTyping {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatActionTyping);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatActionRecordingVideoDataClassExtensions
    on ChatActionRecordingVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatActionRecordingVideo);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatActionUploadingVideoDataClassExtensions
    on ChatActionUploadingVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatActionUploadingVideo &&
          const DeepCollectionEquality().equals(other.progress, progress));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(progress),
  ]);
}

extension ChatActionRecordingVoiceNoteDataClassExtensions
    on ChatActionRecordingVoiceNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatActionRecordingVoiceNote);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatActionUploadingVoiceNoteDataClassExtensions
    on ChatActionUploadingVoiceNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatActionUploadingVoiceNote &&
          const DeepCollectionEquality().equals(other.progress, progress));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(progress),
  ]);
}

extension ChatActionUploadingPhotoDataClassExtensions
    on ChatActionUploadingPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatActionUploadingPhoto &&
          const DeepCollectionEquality().equals(other.progress, progress));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(progress),
  ]);
}

extension ChatActionUploadingDocumentDataClassExtensions
    on ChatActionUploadingDocument {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatActionUploadingDocument &&
          const DeepCollectionEquality().equals(other.progress, progress));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(progress),
  ]);
}

extension ChatActionChoosingStickerDataClassExtensions
    on ChatActionChoosingSticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatActionChoosingSticker);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatActionChoosingLocationDataClassExtensions
    on ChatActionChoosingLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatActionChoosingLocation);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatActionChoosingContactDataClassExtensions
    on ChatActionChoosingContact {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatActionChoosingContact);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatActionStartPlayingGameDataClassExtensions
    on ChatActionStartPlayingGame {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatActionStartPlayingGame);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatActionRecordingVideoNoteDataClassExtensions
    on ChatActionRecordingVideoNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatActionRecordingVideoNote);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatActionUploadingVideoNoteDataClassExtensions
    on ChatActionUploadingVideoNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatActionUploadingVideoNote &&
          const DeepCollectionEquality().equals(other.progress, progress));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(progress),
  ]);
}

extension ChatActionWatchingAnimationsDataClassExtensions
    on ChatActionWatchingAnimations {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatActionWatchingAnimations &&
          const DeepCollectionEquality().equals(other.emoji, emoji));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(emoji)]);
}

extension ChatActionCancelDataClassExtensions on ChatActionCancel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatActionCancel);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserStatusDataClassExtensions on UserStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is UserStatus);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserStatusEmptyDataClassExtensions on UserStatusEmpty {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is UserStatusEmpty);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserStatusOnlineDataClassExtensions on UserStatusOnline {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserStatusOnline &&
          const DeepCollectionEquality().equals(other.expires, expires));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(expires),
  ]);
}

extension UserStatusOfflineDataClassExtensions on UserStatusOffline {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserStatusOffline &&
          const DeepCollectionEquality().equals(other.wasOnline, wasOnline));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(wasOnline),
  ]);
}

extension UserStatusRecentlyDataClassExtensions on UserStatusRecently {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserStatusRecently &&
          const DeepCollectionEquality().equals(
            other.byMyPrivacySettings,
            byMyPrivacySettings,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(byMyPrivacySettings),
  ]);
}

extension UserStatusLastWeekDataClassExtensions on UserStatusLastWeek {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserStatusLastWeek &&
          const DeepCollectionEquality().equals(
            other.byMyPrivacySettings,
            byMyPrivacySettings,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(byMyPrivacySettings),
  ]);
}

extension UserStatusLastMonthDataClassExtensions on UserStatusLastMonth {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserStatusLastMonth &&
          const DeepCollectionEquality().equals(
            other.byMyPrivacySettings,
            byMyPrivacySettings,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(byMyPrivacySettings),
  ]);
}

extension EmojiKeywordDataClassExtensions on EmojiKeyword {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmojiKeyword &&
          const DeepCollectionEquality().equals(other.emoji, emoji) &&
          const DeepCollectionEquality().equals(other.keyword, keyword));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(emoji),
    const DeepCollectionEquality().hash(keyword),
  ]);
}

extension EmojiKeywordsDataClassExtensions on EmojiKeywords {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmojiKeywords &&
          const DeepCollectionEquality().equals(
            other.emojiKeywords,
            emojiKeywords,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(emojiKeywords),
  ]);
}

extension StickersDataClassExtensions on Stickers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Stickers &&
          const DeepCollectionEquality().equals(other.stickers, stickers));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickers),
  ]);
}

extension EmojisDataClassExtensions on Emojis {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Emojis &&
          const DeepCollectionEquality().equals(other.emojis, emojis));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(emojis),
  ]);
}

extension StickerSetDataClassExtensions on StickerSet {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StickerSet &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(
            other.thumbnailOutline,
            thumbnailOutline,
          ) &&
          const DeepCollectionEquality().equals(other.isOwned, isOwned) &&
          const DeepCollectionEquality().equals(
            other.isInstalled,
            isInstalled,
          ) &&
          const DeepCollectionEquality().equals(other.isArchived, isArchived) &&
          const DeepCollectionEquality().equals(other.isOfficial, isOfficial) &&
          const DeepCollectionEquality().equals(
            other.stickerType,
            stickerType,
          ) &&
          const DeepCollectionEquality().equals(
            other.needsRepainting,
            needsRepainting,
          ) &&
          const DeepCollectionEquality().equals(
            other.isAllowedAsChatEmojiStatus,
            isAllowedAsChatEmojiStatus,
          ) &&
          const DeepCollectionEquality().equals(other.isViewed, isViewed) &&
          const DeepCollectionEquality().equals(other.stickers, stickers) &&
          const DeepCollectionEquality().equals(other.emojis, emojis));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(thumbnailOutline),
    const DeepCollectionEquality().hash(isOwned),
    const DeepCollectionEquality().hash(isInstalled),
    const DeepCollectionEquality().hash(isArchived),
    const DeepCollectionEquality().hash(isOfficial),
    const DeepCollectionEquality().hash(stickerType),
    const DeepCollectionEquality().hash(needsRepainting),
    const DeepCollectionEquality().hash(isAllowedAsChatEmojiStatus),
    const DeepCollectionEquality().hash(isViewed),
    const DeepCollectionEquality().hash(stickers),
    const DeepCollectionEquality().hash(emojis),
  ]);
}

extension StickerSetInfoDataClassExtensions on StickerSetInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StickerSetInfo &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(
            other.thumbnailOutline,
            thumbnailOutline,
          ) &&
          const DeepCollectionEquality().equals(other.isOwned, isOwned) &&
          const DeepCollectionEquality().equals(
            other.isInstalled,
            isInstalled,
          ) &&
          const DeepCollectionEquality().equals(other.isArchived, isArchived) &&
          const DeepCollectionEquality().equals(other.isOfficial, isOfficial) &&
          const DeepCollectionEquality().equals(
            other.stickerType,
            stickerType,
          ) &&
          const DeepCollectionEquality().equals(
            other.needsRepainting,
            needsRepainting,
          ) &&
          const DeepCollectionEquality().equals(
            other.isAllowedAsChatEmojiStatus,
            isAllowedAsChatEmojiStatus,
          ) &&
          const DeepCollectionEquality().equals(other.isViewed, isViewed) &&
          const DeepCollectionEquality().equals(other.size, size) &&
          const DeepCollectionEquality().equals(other.covers, covers));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(thumbnailOutline),
    const DeepCollectionEquality().hash(isOwned),
    const DeepCollectionEquality().hash(isInstalled),
    const DeepCollectionEquality().hash(isArchived),
    const DeepCollectionEquality().hash(isOfficial),
    const DeepCollectionEquality().hash(stickerType),
    const DeepCollectionEquality().hash(needsRepainting),
    const DeepCollectionEquality().hash(isAllowedAsChatEmojiStatus),
    const DeepCollectionEquality().hash(isViewed),
    const DeepCollectionEquality().hash(size),
    const DeepCollectionEquality().hash(covers),
  ]);
}

extension StickerSetsDataClassExtensions on StickerSets {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StickerSets &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.sets, sets));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(sets),
  ]);
}

extension TrendingStickerSetsDataClassExtensions on TrendingStickerSets {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TrendingStickerSets &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.sets, sets) &&
          const DeepCollectionEquality().equals(other.isPremium, isPremium));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(sets),
    const DeepCollectionEquality().hash(isPremium),
  ]);
}

extension EmojiCategorySourceDataClassExtensions on EmojiCategorySource {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is EmojiCategorySource);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension EmojiCategorySourceSearchDataClassExtensions
    on EmojiCategorySourceSearch {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmojiCategorySourceSearch &&
          const DeepCollectionEquality().equals(other.emojis, emojis));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(emojis),
  ]);
}

extension EmojiCategorySourcePremiumDataClassExtensions
    on EmojiCategorySourcePremium {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is EmojiCategorySourcePremium);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension EmojiCategoryDataClassExtensions on EmojiCategory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmojiCategory &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.icon, icon) &&
          const DeepCollectionEquality().equals(other.source, source) &&
          const DeepCollectionEquality().equals(other.isGreeting, isGreeting));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(icon),
    const DeepCollectionEquality().hash(source),
    const DeepCollectionEquality().hash(isGreeting),
  ]);
}

extension EmojiCategoriesDataClassExtensions on EmojiCategories {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmojiCategories &&
          const DeepCollectionEquality().equals(other.categories, categories));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(categories),
  ]);
}

extension EmojiCategoryTypeDataClassExtensions on EmojiCategoryType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is EmojiCategoryType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension EmojiCategoryTypeDefaultDataClassExtensions
    on EmojiCategoryTypeDefault {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is EmojiCategoryTypeDefault);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension EmojiCategoryTypeRegularStickersDataClassExtensions
    on EmojiCategoryTypeRegularStickers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmojiCategoryTypeRegularStickers);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension EmojiCategoryTypeEmojiStatusDataClassExtensions
    on EmojiCategoryTypeEmojiStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmojiCategoryTypeEmojiStatus);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension EmojiCategoryTypeChatPhotoDataClassExtensions
    on EmojiCategoryTypeChatPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is EmojiCategoryTypeChatPhoto);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CurrentWeatherDataClassExtensions on CurrentWeather {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CurrentWeather &&
          const DeepCollectionEquality().equals(
            other.temperature,
            temperature,
          ) &&
          const DeepCollectionEquality().equals(other.emoji, emoji));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(temperature),
    const DeepCollectionEquality().hash(emoji),
  ]);
}

extension StoryAreaPositionDataClassExtensions on StoryAreaPosition {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryAreaPosition &&
          const DeepCollectionEquality().equals(
            other.xPercentage,
            xPercentage,
          ) &&
          const DeepCollectionEquality().equals(
            other.yPercentage,
            yPercentage,
          ) &&
          const DeepCollectionEquality().equals(
            other.widthPercentage,
            widthPercentage,
          ) &&
          const DeepCollectionEquality().equals(
            other.heightPercentage,
            heightPercentage,
          ) &&
          const DeepCollectionEquality().equals(
            other.rotationAngle,
            rotationAngle,
          ) &&
          const DeepCollectionEquality().equals(
            other.cornerRadiusPercentage,
            cornerRadiusPercentage,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(xPercentage),
    const DeepCollectionEquality().hash(yPercentage),
    const DeepCollectionEquality().hash(widthPercentage),
    const DeepCollectionEquality().hash(heightPercentage),
    const DeepCollectionEquality().hash(rotationAngle),
    const DeepCollectionEquality().hash(cornerRadiusPercentage),
  ]);
}

extension StoryAreaTypeDataClassExtensions on StoryAreaType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StoryAreaType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StoryAreaTypeLocationDataClassExtensions on StoryAreaTypeLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryAreaTypeLocation &&
          const DeepCollectionEquality().equals(other.location, location) &&
          const DeepCollectionEquality().equals(other.address, address));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(location),
    const DeepCollectionEquality().hash(address),
  ]);
}

extension StoryAreaTypeVenueDataClassExtensions on StoryAreaTypeVenue {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryAreaTypeVenue &&
          const DeepCollectionEquality().equals(other.venue, venue));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(venue)]);
}

extension StoryAreaTypeSuggestedReactionDataClassExtensions
    on StoryAreaTypeSuggestedReaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryAreaTypeSuggestedReaction &&
          const DeepCollectionEquality().equals(
            other.reactionType,
            reactionType,
          ) &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.isDark, isDark) &&
          const DeepCollectionEquality().equals(other.isFlipped, isFlipped));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(reactionType),
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(isDark),
    const DeepCollectionEquality().hash(isFlipped),
  ]);
}

extension StoryAreaTypeMessageDataClassExtensions on StoryAreaTypeMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryAreaTypeMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension StoryAreaTypeLinkDataClassExtensions on StoryAreaTypeLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryAreaTypeLink &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(url)]);
}

extension StoryAreaTypeWeatherDataClassExtensions on StoryAreaTypeWeather {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryAreaTypeWeather &&
          const DeepCollectionEquality().equals(
            other.temperature,
            temperature,
          ) &&
          const DeepCollectionEquality().equals(other.emoji, emoji) &&
          const DeepCollectionEquality().equals(
            other.backgroundColor,
            backgroundColor,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(temperature),
    const DeepCollectionEquality().hash(emoji),
    const DeepCollectionEquality().hash(backgroundColor),
  ]);
}

extension StoryAreaTypeUpgradedGiftDataClassExtensions
    on StoryAreaTypeUpgradedGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryAreaTypeUpgradedGift &&
          const DeepCollectionEquality().equals(other.giftName, giftName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(giftName),
  ]);
}

extension StoryAreaDataClassExtensions on StoryArea {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryArea &&
          const DeepCollectionEquality().equals(other.position, position) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(position),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension InputStoryAreaTypeDataClassExtensions on InputStoryAreaType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InputStoryAreaType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InputStoryAreaTypeLocationDataClassExtensions
    on InputStoryAreaTypeLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputStoryAreaTypeLocation &&
          const DeepCollectionEquality().equals(other.location, location) &&
          const DeepCollectionEquality().equals(other.address, address));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(location),
    const DeepCollectionEquality().hash(address),
  ]);
}

extension InputStoryAreaTypeFoundVenueDataClassExtensions
    on InputStoryAreaTypeFoundVenue {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputStoryAreaTypeFoundVenue &&
          const DeepCollectionEquality().equals(other.queryId, queryId) &&
          const DeepCollectionEquality().equals(other.resultId, resultId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(queryId),
    const DeepCollectionEquality().hash(resultId),
  ]);
}

extension InputStoryAreaTypePreviousVenueDataClassExtensions
    on InputStoryAreaTypePreviousVenue {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputStoryAreaTypePreviousVenue &&
          const DeepCollectionEquality().equals(
            other.venueProvider,
            venueProvider,
          ) &&
          const DeepCollectionEquality().equals(other.venueId, venueId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(venueProvider),
    const DeepCollectionEquality().hash(venueId),
  ]);
}

extension InputStoryAreaTypeSuggestedReactionDataClassExtensions
    on InputStoryAreaTypeSuggestedReaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputStoryAreaTypeSuggestedReaction &&
          const DeepCollectionEquality().equals(
            other.reactionType,
            reactionType,
          ) &&
          const DeepCollectionEquality().equals(other.isDark, isDark) &&
          const DeepCollectionEquality().equals(other.isFlipped, isFlipped));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(reactionType),
    const DeepCollectionEquality().hash(isDark),
    const DeepCollectionEquality().hash(isFlipped),
  ]);
}

extension InputStoryAreaTypeMessageDataClassExtensions
    on InputStoryAreaTypeMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputStoryAreaTypeMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension InputStoryAreaTypeLinkDataClassExtensions on InputStoryAreaTypeLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputStoryAreaTypeLink &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(url)]);
}

extension InputStoryAreaTypeWeatherDataClassExtensions
    on InputStoryAreaTypeWeather {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputStoryAreaTypeWeather &&
          const DeepCollectionEquality().equals(
            other.temperature,
            temperature,
          ) &&
          const DeepCollectionEquality().equals(other.emoji, emoji) &&
          const DeepCollectionEquality().equals(
            other.backgroundColor,
            backgroundColor,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(temperature),
    const DeepCollectionEquality().hash(emoji),
    const DeepCollectionEquality().hash(backgroundColor),
  ]);
}

extension InputStoryAreaTypeUpgradedGiftDataClassExtensions
    on InputStoryAreaTypeUpgradedGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputStoryAreaTypeUpgradedGift &&
          const DeepCollectionEquality().equals(other.giftName, giftName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(giftName),
  ]);
}

extension InputStoryAreaDataClassExtensions on InputStoryArea {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputStoryArea &&
          const DeepCollectionEquality().equals(other.position, position) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(position),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension InputStoryAreasDataClassExtensions on InputStoryAreas {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputStoryAreas &&
          const DeepCollectionEquality().equals(other.areas, areas));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(areas)]);
}

extension StoryVideoDataClassExtensions on StoryVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryVideo &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(
            other.hasStickers,
            hasStickers,
          ) &&
          const DeepCollectionEquality().equals(
            other.isAnimation,
            isAnimation,
          ) &&
          const DeepCollectionEquality().equals(
            other.minithumbnail,
            minithumbnail,
          ) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(
            other.preloadPrefixSize,
            preloadPrefixSize,
          ) &&
          const DeepCollectionEquality().equals(
            other.coverFrameTimestamp,
            coverFrameTimestamp,
          ) &&
          const DeepCollectionEquality().equals(other.video, video));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(hasStickers),
    const DeepCollectionEquality().hash(isAnimation),
    const DeepCollectionEquality().hash(minithumbnail),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(preloadPrefixSize),
    const DeepCollectionEquality().hash(coverFrameTimestamp),
    const DeepCollectionEquality().hash(video),
  ]);
}

extension StoryContentDataClassExtensions on StoryContent {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StoryContent);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StoryContentPhotoDataClassExtensions on StoryContentPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryContentPhoto &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(photo)]);
}

extension StoryContentVideoDataClassExtensions on StoryContentVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryContentVideo &&
          const DeepCollectionEquality().equals(other.video, video) &&
          const DeepCollectionEquality().equals(
            other.alternativeVideo,
            alternativeVideo,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(video),
    const DeepCollectionEquality().hash(alternativeVideo),
  ]);
}

extension StoryContentUnsupportedDataClassExtensions
    on StoryContentUnsupported {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StoryContentUnsupported);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InputStoryContentDataClassExtensions on InputStoryContent {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InputStoryContent);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InputStoryContentPhotoDataClassExtensions on InputStoryContentPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputStoryContentPhoto &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(
            other.addedStickerFileIds,
            addedStickerFileIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(addedStickerFileIds),
  ]);
}

extension InputStoryContentVideoDataClassExtensions on InputStoryContentVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputStoryContentVideo &&
          const DeepCollectionEquality().equals(other.video, video) &&
          const DeepCollectionEquality().equals(
            other.addedStickerFileIds,
            addedStickerFileIds,
          ) &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(
            other.coverFrameTimestamp,
            coverFrameTimestamp,
          ) &&
          const DeepCollectionEquality().equals(
            other.isAnimation,
            isAnimation,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(video),
    const DeepCollectionEquality().hash(addedStickerFileIds),
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(coverFrameTimestamp),
    const DeepCollectionEquality().hash(isAnimation),
  ]);
}

extension StoryListDataClassExtensions on StoryList {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StoryList);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StoryListMainDataClassExtensions on StoryListMain {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StoryListMain);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StoryListArchiveDataClassExtensions on StoryListArchive {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StoryListArchive);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StoryOriginDataClassExtensions on StoryOrigin {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StoryOrigin);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StoryOriginPublicStoryDataClassExtensions on StoryOriginPublicStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryOriginPublicStory &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.storyId, storyId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(storyId),
  ]);
}

extension StoryOriginHiddenUserDataClassExtensions on StoryOriginHiddenUser {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryOriginHiddenUser &&
          const DeepCollectionEquality().equals(other.posterName, posterName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(posterName),
  ]);
}

extension StoryRepostInfoDataClassExtensions on StoryRepostInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryRepostInfo &&
          const DeepCollectionEquality().equals(other.origin, origin) &&
          const DeepCollectionEquality().equals(
            other.isContentModified,
            isContentModified,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(origin),
    const DeepCollectionEquality().hash(isContentModified),
  ]);
}

extension StoryInteractionInfoDataClassExtensions on StoryInteractionInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryInteractionInfo &&
          const DeepCollectionEquality().equals(other.viewCount, viewCount) &&
          const DeepCollectionEquality().equals(
            other.forwardCount,
            forwardCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.reactionCount,
            reactionCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.recentViewerUserIds,
            recentViewerUserIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(viewCount),
    const DeepCollectionEquality().hash(forwardCount),
    const DeepCollectionEquality().hash(reactionCount),
    const DeepCollectionEquality().hash(recentViewerUserIds),
  ]);
}

extension StoryDataClassExtensions on Story {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Story &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.posterChatId,
            posterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.posterId, posterId) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(
            other.isBeingPosted,
            isBeingPosted,
          ) &&
          const DeepCollectionEquality().equals(
            other.isBeingEdited,
            isBeingEdited,
          ) &&
          const DeepCollectionEquality().equals(other.isEdited, isEdited) &&
          const DeepCollectionEquality().equals(
            other.isPostedToChatPage,
            isPostedToChatPage,
          ) &&
          const DeepCollectionEquality().equals(
            other.isVisibleOnlyForSelf,
            isVisibleOnlyForSelf,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeDeleted,
            canBeDeleted,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeEdited,
            canBeEdited,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeForwarded,
            canBeForwarded,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeReplied,
            canBeReplied,
          ) &&
          const DeepCollectionEquality().equals(
            other.canToggleIsPostedToChatPage,
            canToggleIsPostedToChatPage,
          ) &&
          const DeepCollectionEquality().equals(
            other.canGetStatistics,
            canGetStatistics,
          ) &&
          const DeepCollectionEquality().equals(
            other.canGetInteractions,
            canGetInteractions,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasExpiredViewers,
            hasExpiredViewers,
          ) &&
          const DeepCollectionEquality().equals(other.repostInfo, repostInfo) &&
          const DeepCollectionEquality().equals(
            other.interactionInfo,
            interactionInfo,
          ) &&
          const DeepCollectionEquality().equals(
            other.chosenReactionType,
            chosenReactionType,
          ) &&
          const DeepCollectionEquality().equals(
            other.privacySettings,
            privacySettings,
          ) &&
          const DeepCollectionEquality().equals(other.content, content) &&
          const DeepCollectionEquality().equals(other.areas, areas) &&
          const DeepCollectionEquality().equals(other.caption, caption));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(posterChatId),
    const DeepCollectionEquality().hash(posterId),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(isBeingPosted),
    const DeepCollectionEquality().hash(isBeingEdited),
    const DeepCollectionEquality().hash(isEdited),
    const DeepCollectionEquality().hash(isPostedToChatPage),
    const DeepCollectionEquality().hash(isVisibleOnlyForSelf),
    const DeepCollectionEquality().hash(canBeDeleted),
    const DeepCollectionEquality().hash(canBeEdited),
    const DeepCollectionEquality().hash(canBeForwarded),
    const DeepCollectionEquality().hash(canBeReplied),
    const DeepCollectionEquality().hash(canToggleIsPostedToChatPage),
    const DeepCollectionEquality().hash(canGetStatistics),
    const DeepCollectionEquality().hash(canGetInteractions),
    const DeepCollectionEquality().hash(hasExpiredViewers),
    const DeepCollectionEquality().hash(repostInfo),
    const DeepCollectionEquality().hash(interactionInfo),
    const DeepCollectionEquality().hash(chosenReactionType),
    const DeepCollectionEquality().hash(privacySettings),
    const DeepCollectionEquality().hash(content),
    const DeepCollectionEquality().hash(areas),
    const DeepCollectionEquality().hash(caption),
  ]);
}

extension StoriesDataClassExtensions on Stories {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Stories &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.stories, stories) &&
          const DeepCollectionEquality().equals(
            other.pinnedStoryIds,
            pinnedStoryIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(stories),
    const DeepCollectionEquality().hash(pinnedStoryIds),
  ]);
}

extension FoundStoriesDataClassExtensions on FoundStories {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FoundStories &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.stories, stories) &&
          const DeepCollectionEquality().equals(other.nextOffset, nextOffset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(stories),
    const DeepCollectionEquality().hash(nextOffset),
  ]);
}

extension StoryFullIdDataClassExtensions on StoryFullId {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryFullId &&
          const DeepCollectionEquality().equals(
            other.posterChatId,
            posterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(posterChatId),
    const DeepCollectionEquality().hash(storyId),
  ]);
}

extension StoryInfoDataClassExtensions on StoryInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryInfo &&
          const DeepCollectionEquality().equals(other.storyId, storyId) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(
            other.isForCloseFriends,
            isForCloseFriends,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyId),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(isForCloseFriends),
  ]);
}

extension ChatActiveStoriesDataClassExtensions on ChatActiveStories {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatActiveStories &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.list, list) &&
          const DeepCollectionEquality().equals(other.order, order) &&
          const DeepCollectionEquality().equals(
            other.maxReadStoryId,
            maxReadStoryId,
          ) &&
          const DeepCollectionEquality().equals(other.stories, stories));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(list),
    const DeepCollectionEquality().hash(order),
    const DeepCollectionEquality().hash(maxReadStoryId),
    const DeepCollectionEquality().hash(stories),
  ]);
}

extension StoryInteractionTypeDataClassExtensions on StoryInteractionType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StoryInteractionType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StoryInteractionTypeViewDataClassExtensions
    on StoryInteractionTypeView {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryInteractionTypeView &&
          const DeepCollectionEquality().equals(
            other.chosenReactionType,
            chosenReactionType,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chosenReactionType),
  ]);
}

extension StoryInteractionTypeForwardDataClassExtensions
    on StoryInteractionTypeForward {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryInteractionTypeForward &&
          const DeepCollectionEquality().equals(other.message, message));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(message),
  ]);
}

extension StoryInteractionTypeRepostDataClassExtensions
    on StoryInteractionTypeRepost {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryInteractionTypeRepost &&
          const DeepCollectionEquality().equals(other.story, story));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(story)]);
}

extension StoryInteractionDataClassExtensions on StoryInteraction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryInteraction &&
          const DeepCollectionEquality().equals(other.actorId, actorId) &&
          const DeepCollectionEquality().equals(
            other.interactionDate,
            interactionDate,
          ) &&
          const DeepCollectionEquality().equals(other.blockList, blockList) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(actorId),
    const DeepCollectionEquality().hash(interactionDate),
    const DeepCollectionEquality().hash(blockList),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension StoryInteractionsDataClassExtensions on StoryInteractions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryInteractions &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(
            other.totalForwardCount,
            totalForwardCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.totalReactionCount,
            totalReactionCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.interactions,
            interactions,
          ) &&
          const DeepCollectionEquality().equals(other.nextOffset, nextOffset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(totalForwardCount),
    const DeepCollectionEquality().hash(totalReactionCount),
    const DeepCollectionEquality().hash(interactions),
    const DeepCollectionEquality().hash(nextOffset),
  ]);
}

extension QuickReplyMessageDataClassExtensions on QuickReplyMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is QuickReplyMessage &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.sendingState,
            sendingState,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeEdited,
            canBeEdited,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyToMessageId,
            replyToMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.viaBotUserId,
            viaBotUserId,
          ) &&
          const DeepCollectionEquality().equals(
            other.mediaAlbumId,
            mediaAlbumId,
          ) &&
          const DeepCollectionEquality().equals(other.content, content) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(sendingState),
    const DeepCollectionEquality().hash(canBeEdited),
    const DeepCollectionEquality().hash(replyToMessageId),
    const DeepCollectionEquality().hash(viaBotUserId),
    const DeepCollectionEquality().hash(mediaAlbumId),
    const DeepCollectionEquality().hash(content),
    const DeepCollectionEquality().hash(replyMarkup),
  ]);
}

extension QuickReplyMessagesDataClassExtensions on QuickReplyMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is QuickReplyMessages &&
          const DeepCollectionEquality().equals(other.messages, messages));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messages),
  ]);
}

extension QuickReplyShortcutDataClassExtensions on QuickReplyShortcut {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is QuickReplyShortcut &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(
            other.firstMessage,
            firstMessage,
          ) &&
          const DeepCollectionEquality().equals(
            other.messageCount,
            messageCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(firstMessage),
    const DeepCollectionEquality().hash(messageCount),
  ]);
}

extension PublicForwardDataClassExtensions on PublicForward {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PublicForward);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PublicForwardMessageDataClassExtensions on PublicForwardMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PublicForwardMessage &&
          const DeepCollectionEquality().equals(other.message, message));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(message),
  ]);
}

extension PublicForwardStoryDataClassExtensions on PublicForwardStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PublicForwardStory &&
          const DeepCollectionEquality().equals(other.story, story));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(story)]);
}

extension PublicForwardsDataClassExtensions on PublicForwards {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PublicForwards &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.forwards, forwards) &&
          const DeepCollectionEquality().equals(other.nextOffset, nextOffset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(forwards),
    const DeepCollectionEquality().hash(nextOffset),
  ]);
}

extension BotMediaPreviewDataClassExtensions on BotMediaPreview {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotMediaPreview &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(other.content, content));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(content),
  ]);
}

extension BotMediaPreviewsDataClassExtensions on BotMediaPreviews {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotMediaPreviews &&
          const DeepCollectionEquality().equals(other.previews, previews));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(previews),
  ]);
}

extension BotMediaPreviewInfoDataClassExtensions on BotMediaPreviewInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotMediaPreviewInfo &&
          const DeepCollectionEquality().equals(other.previews, previews) &&
          const DeepCollectionEquality().equals(
            other.languageCodes,
            languageCodes,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(previews),
    const DeepCollectionEquality().hash(languageCodes),
  ]);
}

extension ChatBoostLevelFeaturesDataClassExtensions on ChatBoostLevelFeatures {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatBoostLevelFeatures &&
          const DeepCollectionEquality().equals(other.level, level) &&
          const DeepCollectionEquality().equals(
            other.storyPerDayCount,
            storyPerDayCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.customEmojiReactionCount,
            customEmojiReactionCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.titleColorCount,
            titleColorCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.profileAccentColorCount,
            profileAccentColorCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSetProfileBackgroundCustomEmoji,
            canSetProfileBackgroundCustomEmoji,
          ) &&
          const DeepCollectionEquality().equals(
            other.accentColorCount,
            accentColorCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSetBackgroundCustomEmoji,
            canSetBackgroundCustomEmoji,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSetEmojiStatus,
            canSetEmojiStatus,
          ) &&
          const DeepCollectionEquality().equals(
            other.chatThemeBackgroundCount,
            chatThemeBackgroundCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSetCustomBackground,
            canSetCustomBackground,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSetCustomEmojiStickerSet,
            canSetCustomEmojiStickerSet,
          ) &&
          const DeepCollectionEquality().equals(
            other.canEnableAutomaticTranslation,
            canEnableAutomaticTranslation,
          ) &&
          const DeepCollectionEquality().equals(
            other.canRecognizeSpeech,
            canRecognizeSpeech,
          ) &&
          const DeepCollectionEquality().equals(
            other.canDisableSponsoredMessages,
            canDisableSponsoredMessages,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(level),
    const DeepCollectionEquality().hash(storyPerDayCount),
    const DeepCollectionEquality().hash(customEmojiReactionCount),
    const DeepCollectionEquality().hash(titleColorCount),
    const DeepCollectionEquality().hash(profileAccentColorCount),
    const DeepCollectionEquality().hash(canSetProfileBackgroundCustomEmoji),
    const DeepCollectionEquality().hash(accentColorCount),
    const DeepCollectionEquality().hash(canSetBackgroundCustomEmoji),
    const DeepCollectionEquality().hash(canSetEmojiStatus),
    const DeepCollectionEquality().hash(chatThemeBackgroundCount),
    const DeepCollectionEquality().hash(canSetCustomBackground),
    const DeepCollectionEquality().hash(canSetCustomEmojiStickerSet),
    const DeepCollectionEquality().hash(canEnableAutomaticTranslation),
    const DeepCollectionEquality().hash(canRecognizeSpeech),
    const DeepCollectionEquality().hash(canDisableSponsoredMessages),
  ]);
}

extension ChatBoostFeaturesDataClassExtensions on ChatBoostFeatures {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatBoostFeatures &&
          const DeepCollectionEquality().equals(other.features, features) &&
          const DeepCollectionEquality().equals(
            other.minProfileBackgroundCustomEmojiBoostLevel,
            minProfileBackgroundCustomEmojiBoostLevel,
          ) &&
          const DeepCollectionEquality().equals(
            other.minBackgroundCustomEmojiBoostLevel,
            minBackgroundCustomEmojiBoostLevel,
          ) &&
          const DeepCollectionEquality().equals(
            other.minEmojiStatusBoostLevel,
            minEmojiStatusBoostLevel,
          ) &&
          const DeepCollectionEquality().equals(
            other.minChatThemeBackgroundBoostLevel,
            minChatThemeBackgroundBoostLevel,
          ) &&
          const DeepCollectionEquality().equals(
            other.minCustomBackgroundBoostLevel,
            minCustomBackgroundBoostLevel,
          ) &&
          const DeepCollectionEquality().equals(
            other.minCustomEmojiStickerSetBoostLevel,
            minCustomEmojiStickerSetBoostLevel,
          ) &&
          const DeepCollectionEquality().equals(
            other.minAutomaticTranslationBoostLevel,
            minAutomaticTranslationBoostLevel,
          ) &&
          const DeepCollectionEquality().equals(
            other.minSpeechRecognitionBoostLevel,
            minSpeechRecognitionBoostLevel,
          ) &&
          const DeepCollectionEquality().equals(
            other.minSponsoredMessageDisableBoostLevel,
            minSponsoredMessageDisableBoostLevel,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(features),
    const DeepCollectionEquality().hash(
      minProfileBackgroundCustomEmojiBoostLevel,
    ),
    const DeepCollectionEquality().hash(minBackgroundCustomEmojiBoostLevel),
    const DeepCollectionEquality().hash(minEmojiStatusBoostLevel),
    const DeepCollectionEquality().hash(minChatThemeBackgroundBoostLevel),
    const DeepCollectionEquality().hash(minCustomBackgroundBoostLevel),
    const DeepCollectionEquality().hash(minCustomEmojiStickerSetBoostLevel),
    const DeepCollectionEquality().hash(minAutomaticTranslationBoostLevel),
    const DeepCollectionEquality().hash(minSpeechRecognitionBoostLevel),
    const DeepCollectionEquality().hash(minSponsoredMessageDisableBoostLevel),
  ]);
}

extension ChatBoostSourceDataClassExtensions on ChatBoostSource {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatBoostSource);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatBoostSourceGiftCodeDataClassExtensions
    on ChatBoostSourceGiftCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatBoostSourceGiftCode &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.giftCode, giftCode));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(giftCode),
  ]);
}

extension ChatBoostSourceGiveawayDataClassExtensions
    on ChatBoostSourceGiveaway {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatBoostSourceGiveaway &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.giftCode, giftCode) &&
          const DeepCollectionEquality().equals(other.starCount, starCount) &&
          const DeepCollectionEquality().equals(
            other.giveawayMessageId,
            giveawayMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.isUnclaimed,
            isUnclaimed,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(giftCode),
    const DeepCollectionEquality().hash(starCount),
    const DeepCollectionEquality().hash(giveawayMessageId),
    const DeepCollectionEquality().hash(isUnclaimed),
  ]);
}

extension ChatBoostSourcePremiumDataClassExtensions on ChatBoostSourcePremium {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatBoostSourcePremium &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension PrepaidGiveawayDataClassExtensions on PrepaidGiveaway {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PrepaidGiveaway &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.winnerCount,
            winnerCount,
          ) &&
          const DeepCollectionEquality().equals(other.prize, prize) &&
          const DeepCollectionEquality().equals(other.boostCount, boostCount) &&
          const DeepCollectionEquality().equals(
            other.paymentDate,
            paymentDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(winnerCount),
    const DeepCollectionEquality().hash(prize),
    const DeepCollectionEquality().hash(boostCount),
    const DeepCollectionEquality().hash(paymentDate),
  ]);
}

extension ChatBoostStatusDataClassExtensions on ChatBoostStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatBoostStatus &&
          const DeepCollectionEquality().equals(other.boostUrl, boostUrl) &&
          const DeepCollectionEquality().equals(
            other.appliedSlotIds,
            appliedSlotIds,
          ) &&
          const DeepCollectionEquality().equals(other.level, level) &&
          const DeepCollectionEquality().equals(
            other.giftCodeBoostCount,
            giftCodeBoostCount,
          ) &&
          const DeepCollectionEquality().equals(other.boostCount, boostCount) &&
          const DeepCollectionEquality().equals(
            other.currentLevelBoostCount,
            currentLevelBoostCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.nextLevelBoostCount,
            nextLevelBoostCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.premiumMemberCount,
            premiumMemberCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.premiumMemberPercentage,
            premiumMemberPercentage,
          ) &&
          const DeepCollectionEquality().equals(
            other.prepaidGiveaways,
            prepaidGiveaways,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(boostUrl),
    const DeepCollectionEquality().hash(appliedSlotIds),
    const DeepCollectionEquality().hash(level),
    const DeepCollectionEquality().hash(giftCodeBoostCount),
    const DeepCollectionEquality().hash(boostCount),
    const DeepCollectionEquality().hash(currentLevelBoostCount),
    const DeepCollectionEquality().hash(nextLevelBoostCount),
    const DeepCollectionEquality().hash(premiumMemberCount),
    const DeepCollectionEquality().hash(premiumMemberPercentage),
    const DeepCollectionEquality().hash(prepaidGiveaways),
  ]);
}

extension ChatBoostDataClassExtensions on ChatBoost {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatBoost &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.count, count) &&
          const DeepCollectionEquality().equals(other.source, source) &&
          const DeepCollectionEquality().equals(other.startDate, startDate) &&
          const DeepCollectionEquality().equals(
            other.expirationDate,
            expirationDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(count),
    const DeepCollectionEquality().hash(source),
    const DeepCollectionEquality().hash(startDate),
    const DeepCollectionEquality().hash(expirationDate),
  ]);
}

extension FoundChatBoostsDataClassExtensions on FoundChatBoosts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FoundChatBoosts &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.boosts, boosts) &&
          const DeepCollectionEquality().equals(other.nextOffset, nextOffset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(boosts),
    const DeepCollectionEquality().hash(nextOffset),
  ]);
}

extension ChatBoostSlotDataClassExtensions on ChatBoostSlot {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatBoostSlot &&
          const DeepCollectionEquality().equals(other.slotId, slotId) &&
          const DeepCollectionEquality().equals(
            other.currentlyBoostedChatId,
            currentlyBoostedChatId,
          ) &&
          const DeepCollectionEquality().equals(other.startDate, startDate) &&
          const DeepCollectionEquality().equals(
            other.expirationDate,
            expirationDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.cooldownUntilDate,
            cooldownUntilDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(slotId),
    const DeepCollectionEquality().hash(currentlyBoostedChatId),
    const DeepCollectionEquality().hash(startDate),
    const DeepCollectionEquality().hash(expirationDate),
    const DeepCollectionEquality().hash(cooldownUntilDate),
  ]);
}

extension ChatBoostSlotsDataClassExtensions on ChatBoostSlots {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatBoostSlots &&
          const DeepCollectionEquality().equals(other.slots, slots));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(slots)]);
}

extension ResendCodeReasonDataClassExtensions on ResendCodeReason {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ResendCodeReason);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ResendCodeReasonUserRequestDataClassExtensions
    on ResendCodeReasonUserRequest {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ResendCodeReasonUserRequest);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ResendCodeReasonVerificationFailedDataClassExtensions
    on ResendCodeReasonVerificationFailed {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ResendCodeReasonVerificationFailed &&
          const DeepCollectionEquality().equals(
            other.errorMessage,
            errorMessage,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(errorMessage),
  ]);
}

extension CallDiscardReasonDataClassExtensions on CallDiscardReason {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallDiscardReason);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallDiscardReasonEmptyDataClassExtensions on CallDiscardReasonEmpty {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallDiscardReasonEmpty);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallDiscardReasonMissedDataClassExtensions
    on CallDiscardReasonMissed {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallDiscardReasonMissed);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallDiscardReasonDeclinedDataClassExtensions
    on CallDiscardReasonDeclined {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallDiscardReasonDeclined);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallDiscardReasonDisconnectedDataClassExtensions
    on CallDiscardReasonDisconnected {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CallDiscardReasonDisconnected);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallDiscardReasonHungUpDataClassExtensions
    on CallDiscardReasonHungUp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallDiscardReasonHungUp);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallDiscardReasonUpgradeToGroupCallDataClassExtensions
    on CallDiscardReasonUpgradeToGroupCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CallDiscardReasonUpgradeToGroupCall &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inviteLink),
  ]);
}

extension CallProtocolDataClassExtensions on CallProtocol {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CallProtocol &&
          const DeepCollectionEquality().equals(other.udpP2p, udpP2p) &&
          const DeepCollectionEquality().equals(
            other.udpReflector,
            udpReflector,
          ) &&
          const DeepCollectionEquality().equals(other.minLayer, minLayer) &&
          const DeepCollectionEquality().equals(other.maxLayer, maxLayer) &&
          const DeepCollectionEquality().equals(
            other.libraryVersions,
            libraryVersions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(udpP2p),
    const DeepCollectionEquality().hash(udpReflector),
    const DeepCollectionEquality().hash(minLayer),
    const DeepCollectionEquality().hash(maxLayer),
    const DeepCollectionEquality().hash(libraryVersions),
  ]);
}

extension CallServerTypeDataClassExtensions on CallServerType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallServerType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallServerTypeTelegramReflectorDataClassExtensions
    on CallServerTypeTelegramReflector {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CallServerTypeTelegramReflector &&
          const DeepCollectionEquality().equals(other.peerTag, peerTag) &&
          const DeepCollectionEquality().equals(other.isTcp, isTcp));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(peerTag),
    const DeepCollectionEquality().hash(isTcp),
  ]);
}

extension CallServerTypeWebrtcDataClassExtensions on CallServerTypeWebrtc {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CallServerTypeWebrtc &&
          const DeepCollectionEquality().equals(other.username, username) &&
          const DeepCollectionEquality().equals(other.password, password) &&
          const DeepCollectionEquality().equals(
            other.supportsTurn,
            supportsTurn,
          ) &&
          const DeepCollectionEquality().equals(
            other.supportsStun,
            supportsStun,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(username),
    const DeepCollectionEquality().hash(password),
    const DeepCollectionEquality().hash(supportsTurn),
    const DeepCollectionEquality().hash(supportsStun),
  ]);
}

extension CallServerDataClassExtensions on CallServer {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CallServer &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.ipAddress, ipAddress) &&
          const DeepCollectionEquality().equals(
            other.ipv6Address,
            ipv6Address,
          ) &&
          const DeepCollectionEquality().equals(other.port, port) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(ipAddress),
    const DeepCollectionEquality().hash(ipv6Address),
    const DeepCollectionEquality().hash(port),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension CallIdDataClassExtensions on CallId {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CallId &&
          const DeepCollectionEquality().equals(other.id, id));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(id)]);
}

extension GroupCallIdDataClassExtensions on GroupCallId {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GroupCallId &&
          const DeepCollectionEquality().equals(other.id, id));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(id)]);
}

extension CallStateDataClassExtensions on CallState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallState);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallStatePendingDataClassExtensions on CallStatePending {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CallStatePending &&
          const DeepCollectionEquality().equals(other.isCreated, isCreated) &&
          const DeepCollectionEquality().equals(other.isReceived, isReceived));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isCreated),
    const DeepCollectionEquality().hash(isReceived),
  ]);
}

extension CallStateExchangingKeysDataClassExtensions
    on CallStateExchangingKeys {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallStateExchangingKeys);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallStateReadyDataClassExtensions on CallStateReady {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CallStateReady &&
          const DeepCollectionEquality().equals(other.protocol, protocol) &&
          const DeepCollectionEquality().equals(other.servers, servers) &&
          const DeepCollectionEquality().equals(other.config, config) &&
          const DeepCollectionEquality().equals(
            other.encryptionKey,
            encryptionKey,
          ) &&
          const DeepCollectionEquality().equals(other.emojis, emojis) &&
          const DeepCollectionEquality().equals(other.allowP2p, allowP2p) &&
          const DeepCollectionEquality().equals(
            other.isGroupCallSupported,
            isGroupCallSupported,
          ) &&
          const DeepCollectionEquality().equals(
            other.customParameters,
            customParameters,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(protocol),
    const DeepCollectionEquality().hash(servers),
    const DeepCollectionEquality().hash(config),
    const DeepCollectionEquality().hash(encryptionKey),
    const DeepCollectionEquality().hash(emojis),
    const DeepCollectionEquality().hash(allowP2p),
    const DeepCollectionEquality().hash(isGroupCallSupported),
    const DeepCollectionEquality().hash(customParameters),
  ]);
}

extension CallStateHangingUpDataClassExtensions on CallStateHangingUp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallStateHangingUp);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallStateDiscardedDataClassExtensions on CallStateDiscarded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CallStateDiscarded &&
          const DeepCollectionEquality().equals(other.reason, reason) &&
          const DeepCollectionEquality().equals(other.needRating, needRating) &&
          const DeepCollectionEquality().equals(
            other.needDebugInformation,
            needDebugInformation,
          ) &&
          const DeepCollectionEquality().equals(other.needLog, needLog));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(reason),
    const DeepCollectionEquality().hash(needRating),
    const DeepCollectionEquality().hash(needDebugInformation),
    const DeepCollectionEquality().hash(needLog),
  ]);
}

extension CallStateErrorDataClassExtensions on CallStateError {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CallStateError &&
          const DeepCollectionEquality().equals(other.error, error));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(error)]);
}

extension GroupCallJoinParametersDataClassExtensions
    on GroupCallJoinParameters {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GroupCallJoinParameters &&
          const DeepCollectionEquality().equals(
            other.audioSourceId,
            audioSourceId,
          ) &&
          const DeepCollectionEquality().equals(other.payload, payload) &&
          const DeepCollectionEquality().equals(other.isMuted, isMuted) &&
          const DeepCollectionEquality().equals(
            other.isMyVideoEnabled,
            isMyVideoEnabled,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(audioSourceId),
    const DeepCollectionEquality().hash(payload),
    const DeepCollectionEquality().hash(isMuted),
    const DeepCollectionEquality().hash(isMyVideoEnabled),
  ]);
}

extension GroupCallVideoQualityDataClassExtensions on GroupCallVideoQuality {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GroupCallVideoQuality);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GroupCallVideoQualityThumbnailDataClassExtensions
    on GroupCallVideoQualityThumbnail {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GroupCallVideoQualityThumbnail);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GroupCallVideoQualityMediumDataClassExtensions
    on GroupCallVideoQualityMedium {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GroupCallVideoQualityMedium);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GroupCallVideoQualityFullDataClassExtensions
    on GroupCallVideoQualityFull {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GroupCallVideoQualityFull);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension VideoChatStreamDataClassExtensions on VideoChatStream {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is VideoChatStream &&
          const DeepCollectionEquality().equals(other.channelId, channelId) &&
          const DeepCollectionEquality().equals(other.scale, scale) &&
          const DeepCollectionEquality().equals(other.timeOffset, timeOffset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(channelId),
    const DeepCollectionEquality().hash(scale),
    const DeepCollectionEquality().hash(timeOffset),
  ]);
}

extension VideoChatStreamsDataClassExtensions on VideoChatStreams {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is VideoChatStreams &&
          const DeepCollectionEquality().equals(other.streams, streams));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(streams),
  ]);
}

extension RtmpUrlDataClassExtensions on RtmpUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RtmpUrl &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.streamKey, streamKey));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(streamKey),
  ]);
}

extension GroupCallRecentSpeakerDataClassExtensions on GroupCallRecentSpeaker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GroupCallRecentSpeaker &&
          const DeepCollectionEquality().equals(
            other.participantId,
            participantId,
          ) &&
          const DeepCollectionEquality().equals(other.isSpeaking, isSpeaking));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(participantId),
    const DeepCollectionEquality().hash(isSpeaking),
  ]);
}

extension GroupCallDataClassExtensions on GroupCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GroupCall &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink) &&
          const DeepCollectionEquality().equals(
            other.scheduledStartDate,
            scheduledStartDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.enabledStartNotification,
            enabledStartNotification,
          ) &&
          const DeepCollectionEquality().equals(other.isActive, isActive) &&
          const DeepCollectionEquality().equals(
            other.isVideoChat,
            isVideoChat,
          ) &&
          const DeepCollectionEquality().equals(
            other.isRtmpStream,
            isRtmpStream,
          ) &&
          const DeepCollectionEquality().equals(other.isJoined, isJoined) &&
          const DeepCollectionEquality().equals(other.needRejoin, needRejoin) &&
          const DeepCollectionEquality().equals(other.isOwned, isOwned) &&
          const DeepCollectionEquality().equals(
            other.canBeManaged,
            canBeManaged,
          ) &&
          const DeepCollectionEquality().equals(
            other.participantCount,
            participantCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasHiddenListeners,
            hasHiddenListeners,
          ) &&
          const DeepCollectionEquality().equals(
            other.loadedAllParticipants,
            loadedAllParticipants,
          ) &&
          const DeepCollectionEquality().equals(
            other.recentSpeakers,
            recentSpeakers,
          ) &&
          const DeepCollectionEquality().equals(
            other.isMyVideoEnabled,
            isMyVideoEnabled,
          ) &&
          const DeepCollectionEquality().equals(
            other.isMyVideoPaused,
            isMyVideoPaused,
          ) &&
          const DeepCollectionEquality().equals(
            other.canEnableVideo,
            canEnableVideo,
          ) &&
          const DeepCollectionEquality().equals(
            other.muteNewParticipants,
            muteNewParticipants,
          ) &&
          const DeepCollectionEquality().equals(
            other.canToggleMuteNewParticipants,
            canToggleMuteNewParticipants,
          ) &&
          const DeepCollectionEquality().equals(
            other.recordDuration,
            recordDuration,
          ) &&
          const DeepCollectionEquality().equals(
            other.isVideoRecorded,
            isVideoRecorded,
          ) &&
          const DeepCollectionEquality().equals(other.duration, duration));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(inviteLink),
    const DeepCollectionEquality().hash(scheduledStartDate),
    const DeepCollectionEquality().hash(enabledStartNotification),
    const DeepCollectionEquality().hash(isActive),
    const DeepCollectionEquality().hash(isVideoChat),
    const DeepCollectionEquality().hash(isRtmpStream),
    const DeepCollectionEquality().hash(isJoined),
    const DeepCollectionEquality().hash(needRejoin),
    const DeepCollectionEquality().hash(isOwned),
    const DeepCollectionEquality().hash(canBeManaged),
    const DeepCollectionEquality().hash(participantCount),
    const DeepCollectionEquality().hash(hasHiddenListeners),
    const DeepCollectionEquality().hash(loadedAllParticipants),
    const DeepCollectionEquality().hash(recentSpeakers),
    const DeepCollectionEquality().hash(isMyVideoEnabled),
    const DeepCollectionEquality().hash(isMyVideoPaused),
    const DeepCollectionEquality().hash(canEnableVideo),
    const DeepCollectionEquality().hash(muteNewParticipants),
    const DeepCollectionEquality().hash(canToggleMuteNewParticipants),
    const DeepCollectionEquality().hash(recordDuration),
    const DeepCollectionEquality().hash(isVideoRecorded),
    const DeepCollectionEquality().hash(duration),
  ]);
}

extension GroupCallVideoSourceGroupDataClassExtensions
    on GroupCallVideoSourceGroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GroupCallVideoSourceGroup &&
          const DeepCollectionEquality().equals(other.semantics, semantics) &&
          const DeepCollectionEquality().equals(other.sourceIds, sourceIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(semantics),
    const DeepCollectionEquality().hash(sourceIds),
  ]);
}

extension GroupCallParticipantVideoInfoDataClassExtensions
    on GroupCallParticipantVideoInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GroupCallParticipantVideoInfo &&
          const DeepCollectionEquality().equals(
            other.sourceGroups,
            sourceGroups,
          ) &&
          const DeepCollectionEquality().equals(other.endpointId, endpointId) &&
          const DeepCollectionEquality().equals(other.isPaused, isPaused));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sourceGroups),
    const DeepCollectionEquality().hash(endpointId),
    const DeepCollectionEquality().hash(isPaused),
  ]);
}

extension GroupCallParticipantDataClassExtensions on GroupCallParticipant {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GroupCallParticipant &&
          const DeepCollectionEquality().equals(
            other.participantId,
            participantId,
          ) &&
          const DeepCollectionEquality().equals(
            other.audioSourceId,
            audioSourceId,
          ) &&
          const DeepCollectionEquality().equals(
            other.screenSharingAudioSourceId,
            screenSharingAudioSourceId,
          ) &&
          const DeepCollectionEquality().equals(other.videoInfo, videoInfo) &&
          const DeepCollectionEquality().equals(
            other.screenSharingVideoInfo,
            screenSharingVideoInfo,
          ) &&
          const DeepCollectionEquality().equals(other.bio, bio) &&
          const DeepCollectionEquality().equals(
            other.isCurrentUser,
            isCurrentUser,
          ) &&
          const DeepCollectionEquality().equals(other.isSpeaking, isSpeaking) &&
          const DeepCollectionEquality().equals(
            other.isHandRaised,
            isHandRaised,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeMutedForAllUsers,
            canBeMutedForAllUsers,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeUnmutedForAllUsers,
            canBeUnmutedForAllUsers,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeMutedForCurrentUser,
            canBeMutedForCurrentUser,
          ) &&
          const DeepCollectionEquality().equals(
            other.canBeUnmutedForCurrentUser,
            canBeUnmutedForCurrentUser,
          ) &&
          const DeepCollectionEquality().equals(
            other.isMutedForAllUsers,
            isMutedForAllUsers,
          ) &&
          const DeepCollectionEquality().equals(
            other.isMutedForCurrentUser,
            isMutedForCurrentUser,
          ) &&
          const DeepCollectionEquality().equals(
            other.canUnmuteSelf,
            canUnmuteSelf,
          ) &&
          const DeepCollectionEquality().equals(
            other.volumeLevel,
            volumeLevel,
          ) &&
          const DeepCollectionEquality().equals(other.order, order));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(participantId),
    const DeepCollectionEquality().hash(audioSourceId),
    const DeepCollectionEquality().hash(screenSharingAudioSourceId),
    const DeepCollectionEquality().hash(videoInfo),
    const DeepCollectionEquality().hash(screenSharingVideoInfo),
    const DeepCollectionEquality().hash(bio),
    const DeepCollectionEquality().hash(isCurrentUser),
    const DeepCollectionEquality().hash(isSpeaking),
    const DeepCollectionEquality().hash(isHandRaised),
    const DeepCollectionEquality().hash(canBeMutedForAllUsers),
    const DeepCollectionEquality().hash(canBeUnmutedForAllUsers),
    const DeepCollectionEquality().hash(canBeMutedForCurrentUser),
    const DeepCollectionEquality().hash(canBeUnmutedForCurrentUser),
    const DeepCollectionEquality().hash(isMutedForAllUsers),
    const DeepCollectionEquality().hash(isMutedForCurrentUser),
    const DeepCollectionEquality().hash(canUnmuteSelf),
    const DeepCollectionEquality().hash(volumeLevel),
    const DeepCollectionEquality().hash(order),
  ]);
}

extension GroupCallParticipantsDataClassExtensions on GroupCallParticipants {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GroupCallParticipants &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(
            other.participantIds,
            participantIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(participantIds),
  ]);
}

extension GroupCallInfoDataClassExtensions on GroupCallInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GroupCallInfo &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(
            other.joinPayload,
            joinPayload,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(joinPayload),
  ]);
}

extension InviteGroupCallParticipantResultDataClassExtensions
    on InviteGroupCallParticipantResult {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InviteGroupCallParticipantResult);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InviteGroupCallParticipantResultUserPrivacyRestrictedDataClassExtensions
    on InviteGroupCallParticipantResultUserPrivacyRestricted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InviteGroupCallParticipantResultUserPrivacyRestricted);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InviteGroupCallParticipantResultUserAlreadyParticipantDataClassExtensions
    on InviteGroupCallParticipantResultUserAlreadyParticipant {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InviteGroupCallParticipantResultUserAlreadyParticipant);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InviteGroupCallParticipantResultUserWasBannedDataClassExtensions
    on InviteGroupCallParticipantResultUserWasBanned {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InviteGroupCallParticipantResultUserWasBanned);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InviteGroupCallParticipantResultSuccessDataClassExtensions
    on InviteGroupCallParticipantResultSuccess {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InviteGroupCallParticipantResultSuccess &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension GroupCallDataChannelDataClassExtensions on GroupCallDataChannel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GroupCallDataChannel);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GroupCallDataChannelMainDataClassExtensions
    on GroupCallDataChannelMain {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GroupCallDataChannelMain);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GroupCallDataChannelScreenSharingDataClassExtensions
    on GroupCallDataChannelScreenSharing {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GroupCallDataChannelScreenSharing);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InputGroupCallDataClassExtensions on InputGroupCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InputGroupCall);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InputGroupCallLinkDataClassExtensions on InputGroupCallLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputGroupCallLink &&
          const DeepCollectionEquality().equals(other.link, link));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(link)]);
}

extension InputGroupCallMessageDataClassExtensions on InputGroupCallMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputGroupCallMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension CallProblemDataClassExtensions on CallProblem {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallProblem);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallProblemEchoDataClassExtensions on CallProblemEcho {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallProblemEcho);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallProblemNoiseDataClassExtensions on CallProblemNoise {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallProblemNoise);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallProblemInterruptionsDataClassExtensions
    on CallProblemInterruptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallProblemInterruptions);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallProblemDistortedSpeechDataClassExtensions
    on CallProblemDistortedSpeech {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallProblemDistortedSpeech);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallProblemSilentLocalDataClassExtensions on CallProblemSilentLocal {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallProblemSilentLocal);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallProblemSilentRemoteDataClassExtensions
    on CallProblemSilentRemote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallProblemSilentRemote);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallProblemDroppedDataClassExtensions on CallProblemDropped {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallProblemDropped);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallProblemDistortedVideoDataClassExtensions
    on CallProblemDistortedVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallProblemDistortedVideo);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallProblemPixelatedVideoDataClassExtensions
    on CallProblemPixelatedVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallProblemPixelatedVideo);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallDataClassExtensions on Call {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Call &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.isOutgoing, isOutgoing) &&
          const DeepCollectionEquality().equals(other.isVideo, isVideo) &&
          const DeepCollectionEquality().equals(other.state, state));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(isOutgoing),
    const DeepCollectionEquality().hash(isVideo),
    const DeepCollectionEquality().hash(state),
  ]);
}

extension FirebaseAuthenticationSettingsDataClassExtensions
    on FirebaseAuthenticationSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FirebaseAuthenticationSettings);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FirebaseAuthenticationSettingsAndroidDataClassExtensions
    on FirebaseAuthenticationSettingsAndroid {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FirebaseAuthenticationSettingsAndroid);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FirebaseAuthenticationSettingsIosDataClassExtensions
    on FirebaseAuthenticationSettingsIos {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FirebaseAuthenticationSettingsIos &&
          const DeepCollectionEquality().equals(
            other.deviceToken,
            deviceToken,
          ) &&
          const DeepCollectionEquality().equals(
            other.isAppSandbox,
            isAppSandbox,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(deviceToken),
    const DeepCollectionEquality().hash(isAppSandbox),
  ]);
}

extension PhoneNumberAuthenticationSettingsDataClassExtensions
    on PhoneNumberAuthenticationSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PhoneNumberAuthenticationSettings &&
          const DeepCollectionEquality().equals(
            other.allowFlashCall,
            allowFlashCall,
          ) &&
          const DeepCollectionEquality().equals(
            other.allowMissedCall,
            allowMissedCall,
          ) &&
          const DeepCollectionEquality().equals(
            other.isCurrentPhoneNumber,
            isCurrentPhoneNumber,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasUnknownPhoneNumber,
            hasUnknownPhoneNumber,
          ) &&
          const DeepCollectionEquality().equals(
            other.allowSmsRetrieverApi,
            allowSmsRetrieverApi,
          ) &&
          const DeepCollectionEquality().equals(
            other.firebaseAuthenticationSettings,
            firebaseAuthenticationSettings,
          ) &&
          const DeepCollectionEquality().equals(
            other.authenticationTokens,
            authenticationTokens,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(allowFlashCall),
    const DeepCollectionEquality().hash(allowMissedCall),
    const DeepCollectionEquality().hash(isCurrentPhoneNumber),
    const DeepCollectionEquality().hash(hasUnknownPhoneNumber),
    const DeepCollectionEquality().hash(allowSmsRetrieverApi),
    const DeepCollectionEquality().hash(firebaseAuthenticationSettings),
    const DeepCollectionEquality().hash(authenticationTokens),
  ]);
}

extension AddedReactionDataClassExtensions on AddedReaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddedReaction &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.senderId, senderId) &&
          const DeepCollectionEquality().equals(other.isOutgoing, isOutgoing) &&
          const DeepCollectionEquality().equals(other.date, date));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(senderId),
    const DeepCollectionEquality().hash(isOutgoing),
    const DeepCollectionEquality().hash(date),
  ]);
}

extension AddedReactionsDataClassExtensions on AddedReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddedReactions &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.reactions, reactions) &&
          const DeepCollectionEquality().equals(other.nextOffset, nextOffset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(reactions),
    const DeepCollectionEquality().hash(nextOffset),
  ]);
}

extension AvailableReactionDataClassExtensions on AvailableReaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AvailableReaction &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(
            other.needsPremium,
            needsPremium,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(needsPremium),
  ]);
}

extension AvailableReactionsDataClassExtensions on AvailableReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AvailableReactions &&
          const DeepCollectionEquality().equals(
            other.topReactions,
            topReactions,
          ) &&
          const DeepCollectionEquality().equals(
            other.recentReactions,
            recentReactions,
          ) &&
          const DeepCollectionEquality().equals(
            other.popularReactions,
            popularReactions,
          ) &&
          const DeepCollectionEquality().equals(
            other.allowCustomEmoji,
            allowCustomEmoji,
          ) &&
          const DeepCollectionEquality().equals(other.areTags, areTags) &&
          const DeepCollectionEquality().equals(
            other.unavailabilityReason,
            unavailabilityReason,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(topReactions),
    const DeepCollectionEquality().hash(recentReactions),
    const DeepCollectionEquality().hash(popularReactions),
    const DeepCollectionEquality().hash(allowCustomEmoji),
    const DeepCollectionEquality().hash(areTags),
    const DeepCollectionEquality().hash(unavailabilityReason),
  ]);
}

extension EmojiReactionDataClassExtensions on EmojiReaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EmojiReaction &&
          const DeepCollectionEquality().equals(other.emoji, emoji) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.isActive, isActive) &&
          const DeepCollectionEquality().equals(other.staticIcon, staticIcon) &&
          const DeepCollectionEquality().equals(
            other.appearAnimation,
            appearAnimation,
          ) &&
          const DeepCollectionEquality().equals(
            other.selectAnimation,
            selectAnimation,
          ) &&
          const DeepCollectionEquality().equals(
            other.activateAnimation,
            activateAnimation,
          ) &&
          const DeepCollectionEquality().equals(
            other.effectAnimation,
            effectAnimation,
          ) &&
          const DeepCollectionEquality().equals(
            other.aroundAnimation,
            aroundAnimation,
          ) &&
          const DeepCollectionEquality().equals(
            other.centerAnimation,
            centerAnimation,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(emoji),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(isActive),
    const DeepCollectionEquality().hash(staticIcon),
    const DeepCollectionEquality().hash(appearAnimation),
    const DeepCollectionEquality().hash(selectAnimation),
    const DeepCollectionEquality().hash(activateAnimation),
    const DeepCollectionEquality().hash(effectAnimation),
    const DeepCollectionEquality().hash(aroundAnimation),
    const DeepCollectionEquality().hash(centerAnimation),
  ]);
}

extension ReactionUnavailabilityReasonDataClassExtensions
    on ReactionUnavailabilityReason {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReactionUnavailabilityReason);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReactionUnavailabilityReasonAnonymousAdministratorDataClassExtensions
    on ReactionUnavailabilityReasonAnonymousAdministrator {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReactionUnavailabilityReasonAnonymousAdministrator);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReactionUnavailabilityReasonGuestDataClassExtensions
    on ReactionUnavailabilityReasonGuest {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReactionUnavailabilityReasonGuest);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AnimationsDataClassExtensions on Animations {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Animations &&
          const DeepCollectionEquality().equals(other.animations, animations));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(animations),
  ]);
}

extension DiceStickersDataClassExtensions on DiceStickers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is DiceStickers);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension DiceStickersRegularDataClassExtensions on DiceStickersRegular {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DiceStickersRegular &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension DiceStickersSlotMachineDataClassExtensions
    on DiceStickersSlotMachine {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DiceStickersSlotMachine &&
          const DeepCollectionEquality().equals(other.background, background) &&
          const DeepCollectionEquality().equals(other.lever, lever) &&
          const DeepCollectionEquality().equals(other.leftReel, leftReel) &&
          const DeepCollectionEquality().equals(other.centerReel, centerReel) &&
          const DeepCollectionEquality().equals(other.rightReel, rightReel));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(background),
    const DeepCollectionEquality().hash(lever),
    const DeepCollectionEquality().hash(leftReel),
    const DeepCollectionEquality().hash(centerReel),
    const DeepCollectionEquality().hash(rightReel),
  ]);
}

extension ImportedContactsDataClassExtensions on ImportedContacts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ImportedContacts &&
          const DeepCollectionEquality().equals(other.userIds, userIds) &&
          const DeepCollectionEquality().equals(
            other.importerCount,
            importerCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userIds),
    const DeepCollectionEquality().hash(importerCount),
  ]);
}

extension SpeechRecognitionResultDataClassExtensions
    on SpeechRecognitionResult {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SpeechRecognitionResult);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SpeechRecognitionResultPendingDataClassExtensions
    on SpeechRecognitionResultPending {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SpeechRecognitionResultPending &&
          const DeepCollectionEquality().equals(
            other.partialText,
            partialText,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(partialText),
  ]);
}

extension SpeechRecognitionResultTextDataClassExtensions
    on SpeechRecognitionResultText {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SpeechRecognitionResultText &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(text)]);
}

extension SpeechRecognitionResultErrorDataClassExtensions
    on SpeechRecognitionResultError {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SpeechRecognitionResultError &&
          const DeepCollectionEquality().equals(other.error, error));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(error)]);
}

extension BusinessConnectionDataClassExtensions on BusinessConnection {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessConnection &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.userChatId, userChatId) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(other.rights, rights) &&
          const DeepCollectionEquality().equals(other.isEnabled, isEnabled));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(userChatId),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(rights),
    const DeepCollectionEquality().hash(isEnabled),
  ]);
}

extension AttachmentMenuBotColorDataClassExtensions on AttachmentMenuBotColor {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AttachmentMenuBotColor &&
          const DeepCollectionEquality().equals(other.lightColor, lightColor) &&
          const DeepCollectionEquality().equals(other.darkColor, darkColor));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(lightColor),
    const DeepCollectionEquality().hash(darkColor),
  ]);
}

extension AttachmentMenuBotDataClassExtensions on AttachmentMenuBot {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AttachmentMenuBot &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.supportsSelfChat,
            supportsSelfChat,
          ) &&
          const DeepCollectionEquality().equals(
            other.supportsUserChats,
            supportsUserChats,
          ) &&
          const DeepCollectionEquality().equals(
            other.supportsBotChats,
            supportsBotChats,
          ) &&
          const DeepCollectionEquality().equals(
            other.supportsGroupChats,
            supportsGroupChats,
          ) &&
          const DeepCollectionEquality().equals(
            other.supportsChannelChats,
            supportsChannelChats,
          ) &&
          const DeepCollectionEquality().equals(
            other.requestWriteAccess,
            requestWriteAccess,
          ) &&
          const DeepCollectionEquality().equals(other.isAdded, isAdded) &&
          const DeepCollectionEquality().equals(
            other.showInAttachmentMenu,
            showInAttachmentMenu,
          ) &&
          const DeepCollectionEquality().equals(
            other.showInSideMenu,
            showInSideMenu,
          ) &&
          const DeepCollectionEquality().equals(
            other.showDisclaimerInSideMenu,
            showDisclaimerInSideMenu,
          ) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.nameColor, nameColor) &&
          const DeepCollectionEquality().equals(
            other.defaultIcon,
            defaultIcon,
          ) &&
          const DeepCollectionEquality().equals(
            other.iosStaticIcon,
            iosStaticIcon,
          ) &&
          const DeepCollectionEquality().equals(
            other.iosAnimatedIcon,
            iosAnimatedIcon,
          ) &&
          const DeepCollectionEquality().equals(
            other.iosSideMenuIcon,
            iosSideMenuIcon,
          ) &&
          const DeepCollectionEquality().equals(
            other.androidIcon,
            androidIcon,
          ) &&
          const DeepCollectionEquality().equals(
            other.androidSideMenuIcon,
            androidSideMenuIcon,
          ) &&
          const DeepCollectionEquality().equals(other.macosIcon, macosIcon) &&
          const DeepCollectionEquality().equals(
            other.macosSideMenuIcon,
            macosSideMenuIcon,
          ) &&
          const DeepCollectionEquality().equals(other.iconColor, iconColor) &&
          const DeepCollectionEquality().equals(
            other.webAppPlaceholder,
            webAppPlaceholder,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(supportsSelfChat),
    const DeepCollectionEquality().hash(supportsUserChats),
    const DeepCollectionEquality().hash(supportsBotChats),
    const DeepCollectionEquality().hash(supportsGroupChats),
    const DeepCollectionEquality().hash(supportsChannelChats),
    const DeepCollectionEquality().hash(requestWriteAccess),
    const DeepCollectionEquality().hash(isAdded),
    const DeepCollectionEquality().hash(showInAttachmentMenu),
    const DeepCollectionEquality().hash(showInSideMenu),
    const DeepCollectionEquality().hash(showDisclaimerInSideMenu),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(nameColor),
    const DeepCollectionEquality().hash(defaultIcon),
    const DeepCollectionEquality().hash(iosStaticIcon),
    const DeepCollectionEquality().hash(iosAnimatedIcon),
    const DeepCollectionEquality().hash(iosSideMenuIcon),
    const DeepCollectionEquality().hash(androidIcon),
    const DeepCollectionEquality().hash(androidSideMenuIcon),
    const DeepCollectionEquality().hash(macosIcon),
    const DeepCollectionEquality().hash(macosSideMenuIcon),
    const DeepCollectionEquality().hash(iconColor),
    const DeepCollectionEquality().hash(webAppPlaceholder),
  ]);
}

extension SentWebAppMessageDataClassExtensions on SentWebAppMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SentWebAppMessage &&
          const DeepCollectionEquality().equals(
            other.inlineMessageId,
            inlineMessageId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inlineMessageId),
  ]);
}

extension BotWriteAccessAllowReasonDataClassExtensions
    on BotWriteAccessAllowReason {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is BotWriteAccessAllowReason);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BotWriteAccessAllowReasonConnectedWebsiteDataClassExtensions
    on BotWriteAccessAllowReasonConnectedWebsite {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotWriteAccessAllowReasonConnectedWebsite &&
          const DeepCollectionEquality().equals(other.domainName, domainName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(domainName),
  ]);
}

extension BotWriteAccessAllowReasonAddedToAttachmentMenuDataClassExtensions
    on BotWriteAccessAllowReasonAddedToAttachmentMenu {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotWriteAccessAllowReasonAddedToAttachmentMenu);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BotWriteAccessAllowReasonLaunchedWebAppDataClassExtensions
    on BotWriteAccessAllowReasonLaunchedWebApp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotWriteAccessAllowReasonLaunchedWebApp &&
          const DeepCollectionEquality().equals(other.webApp, webApp));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(webApp),
  ]);
}

extension BotWriteAccessAllowReasonAcceptedRequestDataClassExtensions
    on BotWriteAccessAllowReasonAcceptedRequest {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotWriteAccessAllowReasonAcceptedRequest);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension HttpUrlDataClassExtensions on HttpUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is HttpUrl &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(url)]);
}

extension UserLinkDataClassExtensions on UserLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserLink &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.expiresIn, expiresIn));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(expiresIn),
  ]);
}

extension TargetChatTypesDataClassExtensions on TargetChatTypes {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TargetChatTypes &&
          const DeepCollectionEquality().equals(
            other.allowUserChats,
            allowUserChats,
          ) &&
          const DeepCollectionEquality().equals(
            other.allowBotChats,
            allowBotChats,
          ) &&
          const DeepCollectionEquality().equals(
            other.allowGroupChats,
            allowGroupChats,
          ) &&
          const DeepCollectionEquality().equals(
            other.allowChannelChats,
            allowChannelChats,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(allowUserChats),
    const DeepCollectionEquality().hash(allowBotChats),
    const DeepCollectionEquality().hash(allowGroupChats),
    const DeepCollectionEquality().hash(allowChannelChats),
  ]);
}

extension TargetChatDataClassExtensions on TargetChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TargetChat);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TargetChatCurrentDataClassExtensions on TargetChatCurrent {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TargetChatCurrent);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TargetChatChosenDataClassExtensions on TargetChatChosen {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TargetChatChosen &&
          const DeepCollectionEquality().equals(other.types, types));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(types)]);
}

extension TargetChatInternalLinkDataClassExtensions on TargetChatInternalLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TargetChatInternalLink &&
          const DeepCollectionEquality().equals(other.link, link));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(link)]);
}

extension InputInlineQueryResultDataClassExtensions on InputInlineQueryResult {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InputInlineQueryResult);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InputInlineQueryResultAnimationDataClassExtensions
    on InputInlineQueryResultAnimation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputInlineQueryResultAnimation &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.thumbnailUrl,
            thumbnailUrl,
          ) &&
          const DeepCollectionEquality().equals(
            other.thumbnailMimeType,
            thumbnailMimeType,
          ) &&
          const DeepCollectionEquality().equals(other.videoUrl, videoUrl) &&
          const DeepCollectionEquality().equals(
            other.videoMimeType,
            videoMimeType,
          ) &&
          const DeepCollectionEquality().equals(
            other.videoDuration,
            videoDuration,
          ) &&
          const DeepCollectionEquality().equals(other.videoWidth, videoWidth) &&
          const DeepCollectionEquality().equals(
            other.videoHeight,
            videoHeight,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(thumbnailUrl),
    const DeepCollectionEquality().hash(thumbnailMimeType),
    const DeepCollectionEquality().hash(videoUrl),
    const DeepCollectionEquality().hash(videoMimeType),
    const DeepCollectionEquality().hash(videoDuration),
    const DeepCollectionEquality().hash(videoWidth),
    const DeepCollectionEquality().hash(videoHeight),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension InputInlineQueryResultArticleDataClassExtensions
    on InputInlineQueryResultArticle {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputInlineQueryResultArticle &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ) &&
          const DeepCollectionEquality().equals(
            other.thumbnailUrl,
            thumbnailUrl,
          ) &&
          const DeepCollectionEquality().equals(
            other.thumbnailWidth,
            thumbnailWidth,
          ) &&
          const DeepCollectionEquality().equals(
            other.thumbnailHeight,
            thumbnailHeight,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(description),
    const DeepCollectionEquality().hash(thumbnailUrl),
    const DeepCollectionEquality().hash(thumbnailWidth),
    const DeepCollectionEquality().hash(thumbnailHeight),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension InputInlineQueryResultAudioDataClassExtensions
    on InputInlineQueryResultAudio {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputInlineQueryResultAudio &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.performer, performer) &&
          const DeepCollectionEquality().equals(other.audioUrl, audioUrl) &&
          const DeepCollectionEquality().equals(
            other.audioDuration,
            audioDuration,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(performer),
    const DeepCollectionEquality().hash(audioUrl),
    const DeepCollectionEquality().hash(audioDuration),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension InputInlineQueryResultContactDataClassExtensions
    on InputInlineQueryResultContact {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputInlineQueryResultContact &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.contact, contact) &&
          const DeepCollectionEquality().equals(
            other.thumbnailUrl,
            thumbnailUrl,
          ) &&
          const DeepCollectionEquality().equals(
            other.thumbnailWidth,
            thumbnailWidth,
          ) &&
          const DeepCollectionEquality().equals(
            other.thumbnailHeight,
            thumbnailHeight,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(contact),
    const DeepCollectionEquality().hash(thumbnailUrl),
    const DeepCollectionEquality().hash(thumbnailWidth),
    const DeepCollectionEquality().hash(thumbnailHeight),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension InputInlineQueryResultDocumentDataClassExtensions
    on InputInlineQueryResultDocument {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputInlineQueryResultDocument &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ) &&
          const DeepCollectionEquality().equals(
            other.documentUrl,
            documentUrl,
          ) &&
          const DeepCollectionEquality().equals(other.mimeType, mimeType) &&
          const DeepCollectionEquality().equals(
            other.thumbnailUrl,
            thumbnailUrl,
          ) &&
          const DeepCollectionEquality().equals(
            other.thumbnailWidth,
            thumbnailWidth,
          ) &&
          const DeepCollectionEquality().equals(
            other.thumbnailHeight,
            thumbnailHeight,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(description),
    const DeepCollectionEquality().hash(documentUrl),
    const DeepCollectionEquality().hash(mimeType),
    const DeepCollectionEquality().hash(thumbnailUrl),
    const DeepCollectionEquality().hash(thumbnailWidth),
    const DeepCollectionEquality().hash(thumbnailHeight),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension InputInlineQueryResultGameDataClassExtensions
    on InputInlineQueryResultGame {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputInlineQueryResultGame &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.gameShortName,
            gameShortName,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(gameShortName),
    const DeepCollectionEquality().hash(replyMarkup),
  ]);
}

extension InputInlineQueryResultLocationDataClassExtensions
    on InputInlineQueryResultLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputInlineQueryResultLocation &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.location, location) &&
          const DeepCollectionEquality().equals(other.livePeriod, livePeriod) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.thumbnailUrl,
            thumbnailUrl,
          ) &&
          const DeepCollectionEquality().equals(
            other.thumbnailWidth,
            thumbnailWidth,
          ) &&
          const DeepCollectionEquality().equals(
            other.thumbnailHeight,
            thumbnailHeight,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(location),
    const DeepCollectionEquality().hash(livePeriod),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(thumbnailUrl),
    const DeepCollectionEquality().hash(thumbnailWidth),
    const DeepCollectionEquality().hash(thumbnailHeight),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension InputInlineQueryResultPhotoDataClassExtensions
    on InputInlineQueryResultPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputInlineQueryResultPhoto &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ) &&
          const DeepCollectionEquality().equals(
            other.thumbnailUrl,
            thumbnailUrl,
          ) &&
          const DeepCollectionEquality().equals(other.photoUrl, photoUrl) &&
          const DeepCollectionEquality().equals(other.photoWidth, photoWidth) &&
          const DeepCollectionEquality().equals(
            other.photoHeight,
            photoHeight,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(description),
    const DeepCollectionEquality().hash(thumbnailUrl),
    const DeepCollectionEquality().hash(photoUrl),
    const DeepCollectionEquality().hash(photoWidth),
    const DeepCollectionEquality().hash(photoHeight),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension InputInlineQueryResultStickerDataClassExtensions
    on InputInlineQueryResultSticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputInlineQueryResultSticker &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.thumbnailUrl,
            thumbnailUrl,
          ) &&
          const DeepCollectionEquality().equals(other.stickerUrl, stickerUrl) &&
          const DeepCollectionEquality().equals(
            other.stickerWidth,
            stickerWidth,
          ) &&
          const DeepCollectionEquality().equals(
            other.stickerHeight,
            stickerHeight,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(thumbnailUrl),
    const DeepCollectionEquality().hash(stickerUrl),
    const DeepCollectionEquality().hash(stickerWidth),
    const DeepCollectionEquality().hash(stickerHeight),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension InputInlineQueryResultVenueDataClassExtensions
    on InputInlineQueryResultVenue {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputInlineQueryResultVenue &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.venue, venue) &&
          const DeepCollectionEquality().equals(
            other.thumbnailUrl,
            thumbnailUrl,
          ) &&
          const DeepCollectionEquality().equals(
            other.thumbnailWidth,
            thumbnailWidth,
          ) &&
          const DeepCollectionEquality().equals(
            other.thumbnailHeight,
            thumbnailHeight,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(venue),
    const DeepCollectionEquality().hash(thumbnailUrl),
    const DeepCollectionEquality().hash(thumbnailWidth),
    const DeepCollectionEquality().hash(thumbnailHeight),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension InputInlineQueryResultVideoDataClassExtensions
    on InputInlineQueryResultVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputInlineQueryResultVideo &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ) &&
          const DeepCollectionEquality().equals(
            other.thumbnailUrl,
            thumbnailUrl,
          ) &&
          const DeepCollectionEquality().equals(other.videoUrl, videoUrl) &&
          const DeepCollectionEquality().equals(other.mimeType, mimeType) &&
          const DeepCollectionEquality().equals(other.videoWidth, videoWidth) &&
          const DeepCollectionEquality().equals(
            other.videoHeight,
            videoHeight,
          ) &&
          const DeepCollectionEquality().equals(
            other.videoDuration,
            videoDuration,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(description),
    const DeepCollectionEquality().hash(thumbnailUrl),
    const DeepCollectionEquality().hash(videoUrl),
    const DeepCollectionEquality().hash(mimeType),
    const DeepCollectionEquality().hash(videoWidth),
    const DeepCollectionEquality().hash(videoHeight),
    const DeepCollectionEquality().hash(videoDuration),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension InputInlineQueryResultVoiceNoteDataClassExtensions
    on InputInlineQueryResultVoiceNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputInlineQueryResultVoiceNote &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.voiceNoteUrl,
            voiceNoteUrl,
          ) &&
          const DeepCollectionEquality().equals(
            other.voiceNoteDuration,
            voiceNoteDuration,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(voiceNoteUrl),
    const DeepCollectionEquality().hash(voiceNoteDuration),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension InlineQueryResultDataClassExtensions on InlineQueryResult {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InlineQueryResult);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InlineQueryResultArticleDataClassExtensions
    on InlineQueryResultArticle {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineQueryResultArticle &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(description),
    const DeepCollectionEquality().hash(thumbnail),
  ]);
}

extension InlineQueryResultContactDataClassExtensions
    on InlineQueryResultContact {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineQueryResultContact &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.contact, contact) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(contact),
    const DeepCollectionEquality().hash(thumbnail),
  ]);
}

extension InlineQueryResultLocationDataClassExtensions
    on InlineQueryResultLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineQueryResultLocation &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.location, location) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(location),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(thumbnail),
  ]);
}

extension InlineQueryResultVenueDataClassExtensions on InlineQueryResultVenue {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineQueryResultVenue &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.venue, venue) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(venue),
    const DeepCollectionEquality().hash(thumbnail),
  ]);
}

extension InlineQueryResultGameDataClassExtensions on InlineQueryResultGame {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineQueryResultGame &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.game, game));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(game),
  ]);
}

extension InlineQueryResultAnimationDataClassExtensions
    on InlineQueryResultAnimation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineQueryResultAnimation &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.animation, animation) &&
          const DeepCollectionEquality().equals(other.title, title));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(animation),
    const DeepCollectionEquality().hash(title),
  ]);
}

extension InlineQueryResultAudioDataClassExtensions on InlineQueryResultAudio {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineQueryResultAudio &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.audio, audio));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(audio),
  ]);
}

extension InlineQueryResultDocumentDataClassExtensions
    on InlineQueryResultDocument {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineQueryResultDocument &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.document, document) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(document),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(description),
  ]);
}

extension InlineQueryResultPhotoDataClassExtensions on InlineQueryResultPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineQueryResultPhoto &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(description),
  ]);
}

extension InlineQueryResultStickerDataClassExtensions
    on InlineQueryResultSticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineQueryResultSticker &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension InlineQueryResultVideoDataClassExtensions on InlineQueryResultVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineQueryResultVideo &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.video, video) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(video),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(description),
  ]);
}

extension InlineQueryResultVoiceNoteDataClassExtensions
    on InlineQueryResultVoiceNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineQueryResultVoiceNote &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.voiceNote, voiceNote) &&
          const DeepCollectionEquality().equals(other.title, title));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(voiceNote),
    const DeepCollectionEquality().hash(title),
  ]);
}

extension InlineQueryResultsButtonTypeDataClassExtensions
    on InlineQueryResultsButtonType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineQueryResultsButtonType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InlineQueryResultsButtonTypeStartBotDataClassExtensions
    on InlineQueryResultsButtonTypeStartBot {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineQueryResultsButtonTypeStartBot &&
          const DeepCollectionEquality().equals(other.parameter, parameter));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(parameter),
  ]);
}

extension InlineQueryResultsButtonTypeWebAppDataClassExtensions
    on InlineQueryResultsButtonTypeWebApp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineQueryResultsButtonTypeWebApp &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(url)]);
}

extension InlineQueryResultsButtonDataClassExtensions
    on InlineQueryResultsButton {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineQueryResultsButton &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension InlineQueryResultsDataClassExtensions on InlineQueryResults {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InlineQueryResults &&
          const DeepCollectionEquality().equals(
            other.inlineQueryId,
            inlineQueryId,
          ) &&
          const DeepCollectionEquality().equals(other.button, button) &&
          const DeepCollectionEquality().equals(other.results, results) &&
          const DeepCollectionEquality().equals(other.nextOffset, nextOffset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inlineQueryId),
    const DeepCollectionEquality().hash(button),
    const DeepCollectionEquality().hash(results),
    const DeepCollectionEquality().hash(nextOffset),
  ]);
}

extension PreparedInlineMessageIdDataClassExtensions
    on PreparedInlineMessageId {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PreparedInlineMessageId &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.expirationDate,
            expirationDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(expirationDate),
  ]);
}

extension PreparedInlineMessageDataClassExtensions on PreparedInlineMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PreparedInlineMessage &&
          const DeepCollectionEquality().equals(
            other.inlineQueryId,
            inlineQueryId,
          ) &&
          const DeepCollectionEquality().equals(other.result, result) &&
          const DeepCollectionEquality().equals(other.chatTypes, chatTypes));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inlineQueryId),
    const DeepCollectionEquality().hash(result),
    const DeepCollectionEquality().hash(chatTypes),
  ]);
}

extension CallbackQueryPayloadDataClassExtensions on CallbackQueryPayload {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CallbackQueryPayload);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CallbackQueryPayloadDataDataClassExtensions
    on CallbackQueryPayloadData {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CallbackQueryPayloadData &&
          const DeepCollectionEquality().equals(other.data, data));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(data)]);
}

extension CallbackQueryPayloadDataWithPasswordDataClassExtensions
    on CallbackQueryPayloadDataWithPassword {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CallbackQueryPayloadDataWithPassword &&
          const DeepCollectionEquality().equals(other.password, password) &&
          const DeepCollectionEquality().equals(other.data, data));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(password),
    const DeepCollectionEquality().hash(data),
  ]);
}

extension CallbackQueryPayloadGameDataClassExtensions
    on CallbackQueryPayloadGame {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CallbackQueryPayloadGame &&
          const DeepCollectionEquality().equals(
            other.gameShortName,
            gameShortName,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(gameShortName),
  ]);
}

extension CallbackQueryAnswerDataClassExtensions on CallbackQueryAnswer {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CallbackQueryAnswer &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.showAlert, showAlert) &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(showAlert),
    const DeepCollectionEquality().hash(url),
  ]);
}

extension CustomRequestResultDataClassExtensions on CustomRequestResult {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CustomRequestResult &&
          const DeepCollectionEquality().equals(other.result, result));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(result),
  ]);
}

extension GameHighScoreDataClassExtensions on GameHighScore {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GameHighScore &&
          const DeepCollectionEquality().equals(other.position, position) &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.score, score));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(position),
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(score),
  ]);
}

extension GameHighScoresDataClassExtensions on GameHighScores {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GameHighScores &&
          const DeepCollectionEquality().equals(other.scores, scores));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(scores),
  ]);
}

extension ChatEventActionDataClassExtensions on ChatEventAction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatEventAction);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatEventMessageEditedDataClassExtensions on ChatEventMessageEdited {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventMessageEdited &&
          const DeepCollectionEquality().equals(other.oldMessage, oldMessage) &&
          const DeepCollectionEquality().equals(other.newMessage, newMessage));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldMessage),
    const DeepCollectionEquality().hash(newMessage),
  ]);
}

extension ChatEventMessageDeletedDataClassExtensions
    on ChatEventMessageDeleted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventMessageDeleted &&
          const DeepCollectionEquality().equals(other.message, message) &&
          const DeepCollectionEquality().equals(
            other.canReportAntiSpamFalsePositive,
            canReportAntiSpamFalsePositive,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(message),
    const DeepCollectionEquality().hash(canReportAntiSpamFalsePositive),
  ]);
}

extension ChatEventMessagePinnedDataClassExtensions on ChatEventMessagePinned {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventMessagePinned &&
          const DeepCollectionEquality().equals(other.message, message));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(message),
  ]);
}

extension ChatEventMessageUnpinnedDataClassExtensions
    on ChatEventMessageUnpinned {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventMessageUnpinned &&
          const DeepCollectionEquality().equals(other.message, message));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(message),
  ]);
}

extension ChatEventPollStoppedDataClassExtensions on ChatEventPollStopped {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventPollStopped &&
          const DeepCollectionEquality().equals(other.message, message));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(message),
  ]);
}

extension ChatEventMemberJoinedDataClassExtensions on ChatEventMemberJoined {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatEventMemberJoined);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatEventMemberJoinedByInviteLinkDataClassExtensions
    on ChatEventMemberJoinedByInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventMemberJoinedByInviteLink &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink) &&
          const DeepCollectionEquality().equals(
            other.viaChatFolderInviteLink,
            viaChatFolderInviteLink,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inviteLink),
    const DeepCollectionEquality().hash(viaChatFolderInviteLink),
  ]);
}

extension ChatEventMemberJoinedByRequestDataClassExtensions
    on ChatEventMemberJoinedByRequest {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventMemberJoinedByRequest &&
          const DeepCollectionEquality().equals(
            other.approverUserId,
            approverUserId,
          ) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(approverUserId),
    const DeepCollectionEquality().hash(inviteLink),
  ]);
}

extension ChatEventMemberInvitedDataClassExtensions on ChatEventMemberInvited {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventMemberInvited &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.status, status));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(status),
  ]);
}

extension ChatEventMemberLeftDataClassExtensions on ChatEventMemberLeft {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatEventMemberLeft);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatEventMemberPromotedDataClassExtensions
    on ChatEventMemberPromoted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventMemberPromoted &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.oldStatus, oldStatus) &&
          const DeepCollectionEquality().equals(other.newStatus, newStatus));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(oldStatus),
    const DeepCollectionEquality().hash(newStatus),
  ]);
}

extension ChatEventMemberRestrictedDataClassExtensions
    on ChatEventMemberRestricted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventMemberRestricted &&
          const DeepCollectionEquality().equals(other.memberId, memberId) &&
          const DeepCollectionEquality().equals(other.oldStatus, oldStatus) &&
          const DeepCollectionEquality().equals(other.newStatus, newStatus));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(memberId),
    const DeepCollectionEquality().hash(oldStatus),
    const DeepCollectionEquality().hash(newStatus),
  ]);
}

extension ChatEventMemberSubscriptionExtendedDataClassExtensions
    on ChatEventMemberSubscriptionExtended {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventMemberSubscriptionExtended &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.oldStatus, oldStatus) &&
          const DeepCollectionEquality().equals(other.newStatus, newStatus));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(oldStatus),
    const DeepCollectionEquality().hash(newStatus),
  ]);
}

extension ChatEventAvailableReactionsChangedDataClassExtensions
    on ChatEventAvailableReactionsChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventAvailableReactionsChanged &&
          const DeepCollectionEquality().equals(
            other.oldAvailableReactions,
            oldAvailableReactions,
          ) &&
          const DeepCollectionEquality().equals(
            other.newAvailableReactions,
            newAvailableReactions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldAvailableReactions),
    const DeepCollectionEquality().hash(newAvailableReactions),
  ]);
}

extension ChatEventBackgroundChangedDataClassExtensions
    on ChatEventBackgroundChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventBackgroundChanged &&
          const DeepCollectionEquality().equals(
            other.oldBackground,
            oldBackground,
          ) &&
          const DeepCollectionEquality().equals(
            other.newBackground,
            newBackground,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldBackground),
    const DeepCollectionEquality().hash(newBackground),
  ]);
}

extension ChatEventDescriptionChangedDataClassExtensions
    on ChatEventDescriptionChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventDescriptionChanged &&
          const DeepCollectionEquality().equals(
            other.oldDescription,
            oldDescription,
          ) &&
          const DeepCollectionEquality().equals(
            other.newDescription,
            newDescription,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldDescription),
    const DeepCollectionEquality().hash(newDescription),
  ]);
}

extension ChatEventEmojiStatusChangedDataClassExtensions
    on ChatEventEmojiStatusChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventEmojiStatusChanged &&
          const DeepCollectionEquality().equals(
            other.oldEmojiStatus,
            oldEmojiStatus,
          ) &&
          const DeepCollectionEquality().equals(
            other.newEmojiStatus,
            newEmojiStatus,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldEmojiStatus),
    const DeepCollectionEquality().hash(newEmojiStatus),
  ]);
}

extension ChatEventLinkedChatChangedDataClassExtensions
    on ChatEventLinkedChatChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventLinkedChatChanged &&
          const DeepCollectionEquality().equals(
            other.oldLinkedChatId,
            oldLinkedChatId,
          ) &&
          const DeepCollectionEquality().equals(
            other.newLinkedChatId,
            newLinkedChatId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldLinkedChatId),
    const DeepCollectionEquality().hash(newLinkedChatId),
  ]);
}

extension ChatEventLocationChangedDataClassExtensions
    on ChatEventLocationChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventLocationChanged &&
          const DeepCollectionEquality().equals(
            other.oldLocation,
            oldLocation,
          ) &&
          const DeepCollectionEquality().equals(
            other.newLocation,
            newLocation,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldLocation),
    const DeepCollectionEquality().hash(newLocation),
  ]);
}

extension ChatEventMessageAutoDeleteTimeChangedDataClassExtensions
    on ChatEventMessageAutoDeleteTimeChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventMessageAutoDeleteTimeChanged &&
          const DeepCollectionEquality().equals(
            other.oldMessageAutoDeleteTime,
            oldMessageAutoDeleteTime,
          ) &&
          const DeepCollectionEquality().equals(
            other.newMessageAutoDeleteTime,
            newMessageAutoDeleteTime,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldMessageAutoDeleteTime),
    const DeepCollectionEquality().hash(newMessageAutoDeleteTime),
  ]);
}

extension ChatEventPermissionsChangedDataClassExtensions
    on ChatEventPermissionsChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventPermissionsChanged &&
          const DeepCollectionEquality().equals(
            other.oldPermissions,
            oldPermissions,
          ) &&
          const DeepCollectionEquality().equals(
            other.newPermissions,
            newPermissions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldPermissions),
    const DeepCollectionEquality().hash(newPermissions),
  ]);
}

extension ChatEventPhotoChangedDataClassExtensions on ChatEventPhotoChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventPhotoChanged &&
          const DeepCollectionEquality().equals(other.oldPhoto, oldPhoto) &&
          const DeepCollectionEquality().equals(other.newPhoto, newPhoto));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldPhoto),
    const DeepCollectionEquality().hash(newPhoto),
  ]);
}

extension ChatEventSlowModeDelayChangedDataClassExtensions
    on ChatEventSlowModeDelayChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventSlowModeDelayChanged &&
          const DeepCollectionEquality().equals(
            other.oldSlowModeDelay,
            oldSlowModeDelay,
          ) &&
          const DeepCollectionEquality().equals(
            other.newSlowModeDelay,
            newSlowModeDelay,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldSlowModeDelay),
    const DeepCollectionEquality().hash(newSlowModeDelay),
  ]);
}

extension ChatEventStickerSetChangedDataClassExtensions
    on ChatEventStickerSetChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventStickerSetChanged &&
          const DeepCollectionEquality().equals(
            other.oldStickerSetId,
            oldStickerSetId,
          ) &&
          const DeepCollectionEquality().equals(
            other.newStickerSetId,
            newStickerSetId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldStickerSetId),
    const DeepCollectionEquality().hash(newStickerSetId),
  ]);
}

extension ChatEventCustomEmojiStickerSetChangedDataClassExtensions
    on ChatEventCustomEmojiStickerSetChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventCustomEmojiStickerSetChanged &&
          const DeepCollectionEquality().equals(
            other.oldStickerSetId,
            oldStickerSetId,
          ) &&
          const DeepCollectionEquality().equals(
            other.newStickerSetId,
            newStickerSetId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldStickerSetId),
    const DeepCollectionEquality().hash(newStickerSetId),
  ]);
}

extension ChatEventTitleChangedDataClassExtensions on ChatEventTitleChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventTitleChanged &&
          const DeepCollectionEquality().equals(other.oldTitle, oldTitle) &&
          const DeepCollectionEquality().equals(other.newTitle, newTitle));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldTitle),
    const DeepCollectionEquality().hash(newTitle),
  ]);
}

extension ChatEventUsernameChangedDataClassExtensions
    on ChatEventUsernameChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventUsernameChanged &&
          const DeepCollectionEquality().equals(
            other.oldUsername,
            oldUsername,
          ) &&
          const DeepCollectionEquality().equals(
            other.newUsername,
            newUsername,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldUsername),
    const DeepCollectionEquality().hash(newUsername),
  ]);
}

extension ChatEventActiveUsernamesChangedDataClassExtensions
    on ChatEventActiveUsernamesChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventActiveUsernamesChanged &&
          const DeepCollectionEquality().equals(
            other.oldUsernames,
            oldUsernames,
          ) &&
          const DeepCollectionEquality().equals(
            other.newUsernames,
            newUsernames,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldUsernames),
    const DeepCollectionEquality().hash(newUsernames),
  ]);
}

extension ChatEventAccentColorChangedDataClassExtensions
    on ChatEventAccentColorChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventAccentColorChanged &&
          const DeepCollectionEquality().equals(
            other.oldAccentColorId,
            oldAccentColorId,
          ) &&
          const DeepCollectionEquality().equals(
            other.oldBackgroundCustomEmojiId,
            oldBackgroundCustomEmojiId,
          ) &&
          const DeepCollectionEquality().equals(
            other.newAccentColorId,
            newAccentColorId,
          ) &&
          const DeepCollectionEquality().equals(
            other.newBackgroundCustomEmojiId,
            newBackgroundCustomEmojiId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldAccentColorId),
    const DeepCollectionEquality().hash(oldBackgroundCustomEmojiId),
    const DeepCollectionEquality().hash(newAccentColorId),
    const DeepCollectionEquality().hash(newBackgroundCustomEmojiId),
  ]);
}

extension ChatEventProfileAccentColorChangedDataClassExtensions
    on ChatEventProfileAccentColorChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventProfileAccentColorChanged &&
          const DeepCollectionEquality().equals(
            other.oldProfileAccentColorId,
            oldProfileAccentColorId,
          ) &&
          const DeepCollectionEquality().equals(
            other.oldProfileBackgroundCustomEmojiId,
            oldProfileBackgroundCustomEmojiId,
          ) &&
          const DeepCollectionEquality().equals(
            other.newProfileAccentColorId,
            newProfileAccentColorId,
          ) &&
          const DeepCollectionEquality().equals(
            other.newProfileBackgroundCustomEmojiId,
            newProfileBackgroundCustomEmojiId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldProfileAccentColorId),
    const DeepCollectionEquality().hash(oldProfileBackgroundCustomEmojiId),
    const DeepCollectionEquality().hash(newProfileAccentColorId),
    const DeepCollectionEquality().hash(newProfileBackgroundCustomEmojiId),
  ]);
}

extension ChatEventHasProtectedContentToggledDataClassExtensions
    on ChatEventHasProtectedContentToggled {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventHasProtectedContentToggled &&
          const DeepCollectionEquality().equals(
            other.hasProtectedContent,
            hasProtectedContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(hasProtectedContent),
  ]);
}

extension ChatEventInvitesToggledDataClassExtensions
    on ChatEventInvitesToggled {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventInvitesToggled &&
          const DeepCollectionEquality().equals(
            other.canInviteUsers,
            canInviteUsers,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(canInviteUsers),
  ]);
}

extension ChatEventIsAllHistoryAvailableToggledDataClassExtensions
    on ChatEventIsAllHistoryAvailableToggled {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventIsAllHistoryAvailableToggled &&
          const DeepCollectionEquality().equals(
            other.isAllHistoryAvailable,
            isAllHistoryAvailable,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isAllHistoryAvailable),
  ]);
}

extension ChatEventHasAggressiveAntiSpamEnabledToggledDataClassExtensions
    on ChatEventHasAggressiveAntiSpamEnabledToggled {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventHasAggressiveAntiSpamEnabledToggled &&
          const DeepCollectionEquality().equals(
            other.hasAggressiveAntiSpamEnabled,
            hasAggressiveAntiSpamEnabled,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(hasAggressiveAntiSpamEnabled),
  ]);
}

extension ChatEventSignMessagesToggledDataClassExtensions
    on ChatEventSignMessagesToggled {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventSignMessagesToggled &&
          const DeepCollectionEquality().equals(
            other.signMessages,
            signMessages,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(signMessages),
  ]);
}

extension ChatEventShowMessageSenderToggledDataClassExtensions
    on ChatEventShowMessageSenderToggled {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventShowMessageSenderToggled &&
          const DeepCollectionEquality().equals(
            other.showMessageSender,
            showMessageSender,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(showMessageSender),
  ]);
}

extension ChatEventAutomaticTranslationToggledDataClassExtensions
    on ChatEventAutomaticTranslationToggled {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventAutomaticTranslationToggled &&
          const DeepCollectionEquality().equals(
            other.hasAutomaticTranslation,
            hasAutomaticTranslation,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(hasAutomaticTranslation),
  ]);
}

extension ChatEventInviteLinkEditedDataClassExtensions
    on ChatEventInviteLinkEdited {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventInviteLinkEdited &&
          const DeepCollectionEquality().equals(
            other.oldInviteLink,
            oldInviteLink,
          ) &&
          const DeepCollectionEquality().equals(
            other.newInviteLink,
            newInviteLink,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldInviteLink),
    const DeepCollectionEquality().hash(newInviteLink),
  ]);
}

extension ChatEventInviteLinkRevokedDataClassExtensions
    on ChatEventInviteLinkRevoked {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventInviteLinkRevoked &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inviteLink),
  ]);
}

extension ChatEventInviteLinkDeletedDataClassExtensions
    on ChatEventInviteLinkDeleted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventInviteLinkDeleted &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inviteLink),
  ]);
}

extension ChatEventVideoChatCreatedDataClassExtensions
    on ChatEventVideoChatCreated {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventVideoChatCreated &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
  ]);
}

extension ChatEventVideoChatEndedDataClassExtensions
    on ChatEventVideoChatEnded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventVideoChatEnded &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
  ]);
}

extension ChatEventVideoChatMuteNewParticipantsToggledDataClassExtensions
    on ChatEventVideoChatMuteNewParticipantsToggled {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventVideoChatMuteNewParticipantsToggled &&
          const DeepCollectionEquality().equals(
            other.muteNewParticipants,
            muteNewParticipants,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(muteNewParticipants),
  ]);
}

extension ChatEventVideoChatParticipantIsMutedToggledDataClassExtensions
    on ChatEventVideoChatParticipantIsMutedToggled {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventVideoChatParticipantIsMutedToggled &&
          const DeepCollectionEquality().equals(
            other.participantId,
            participantId,
          ) &&
          const DeepCollectionEquality().equals(other.isMuted, isMuted));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(participantId),
    const DeepCollectionEquality().hash(isMuted),
  ]);
}

extension ChatEventVideoChatParticipantVolumeLevelChangedDataClassExtensions
    on ChatEventVideoChatParticipantVolumeLevelChanged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventVideoChatParticipantVolumeLevelChanged &&
          const DeepCollectionEquality().equals(
            other.participantId,
            participantId,
          ) &&
          const DeepCollectionEquality().equals(
            other.volumeLevel,
            volumeLevel,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(participantId),
    const DeepCollectionEquality().hash(volumeLevel),
  ]);
}

extension ChatEventIsForumToggledDataClassExtensions
    on ChatEventIsForumToggled {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventIsForumToggled &&
          const DeepCollectionEquality().equals(other.isForum, isForum));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isForum),
  ]);
}

extension ChatEventForumTopicCreatedDataClassExtensions
    on ChatEventForumTopicCreated {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventForumTopicCreated &&
          const DeepCollectionEquality().equals(other.topicInfo, topicInfo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(topicInfo),
  ]);
}

extension ChatEventForumTopicEditedDataClassExtensions
    on ChatEventForumTopicEdited {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventForumTopicEdited &&
          const DeepCollectionEquality().equals(
            other.oldTopicInfo,
            oldTopicInfo,
          ) &&
          const DeepCollectionEquality().equals(
            other.newTopicInfo,
            newTopicInfo,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldTopicInfo),
    const DeepCollectionEquality().hash(newTopicInfo),
  ]);
}

extension ChatEventForumTopicToggleIsClosedDataClassExtensions
    on ChatEventForumTopicToggleIsClosed {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventForumTopicToggleIsClosed &&
          const DeepCollectionEquality().equals(other.topicInfo, topicInfo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(topicInfo),
  ]);
}

extension ChatEventForumTopicToggleIsHiddenDataClassExtensions
    on ChatEventForumTopicToggleIsHidden {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventForumTopicToggleIsHidden &&
          const DeepCollectionEquality().equals(other.topicInfo, topicInfo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(topicInfo),
  ]);
}

extension ChatEventForumTopicDeletedDataClassExtensions
    on ChatEventForumTopicDeleted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventForumTopicDeleted &&
          const DeepCollectionEquality().equals(other.topicInfo, topicInfo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(topicInfo),
  ]);
}

extension ChatEventForumTopicPinnedDataClassExtensions
    on ChatEventForumTopicPinned {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventForumTopicPinned &&
          const DeepCollectionEquality().equals(
            other.oldTopicInfo,
            oldTopicInfo,
          ) &&
          const DeepCollectionEquality().equals(
            other.newTopicInfo,
            newTopicInfo,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldTopicInfo),
    const DeepCollectionEquality().hash(newTopicInfo),
  ]);
}

extension ChatEventDataClassExtensions on ChatEvent {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEvent &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(other.memberId, memberId) &&
          const DeepCollectionEquality().equals(other.action, action));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(memberId),
    const DeepCollectionEquality().hash(action),
  ]);
}

extension ChatEventsDataClassExtensions on ChatEvents {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEvents &&
          const DeepCollectionEquality().equals(other.events, events));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(events),
  ]);
}

extension ChatEventLogFiltersDataClassExtensions on ChatEventLogFilters {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatEventLogFilters &&
          const DeepCollectionEquality().equals(
            other.messageEdits,
            messageEdits,
          ) &&
          const DeepCollectionEquality().equals(
            other.messageDeletions,
            messageDeletions,
          ) &&
          const DeepCollectionEquality().equals(
            other.messagePins,
            messagePins,
          ) &&
          const DeepCollectionEquality().equals(
            other.memberJoins,
            memberJoins,
          ) &&
          const DeepCollectionEquality().equals(
            other.memberLeaves,
            memberLeaves,
          ) &&
          const DeepCollectionEquality().equals(
            other.memberInvites,
            memberInvites,
          ) &&
          const DeepCollectionEquality().equals(
            other.memberPromotions,
            memberPromotions,
          ) &&
          const DeepCollectionEquality().equals(
            other.memberRestrictions,
            memberRestrictions,
          ) &&
          const DeepCollectionEquality().equals(
            other.infoChanges,
            infoChanges,
          ) &&
          const DeepCollectionEquality().equals(
            other.settingChanges,
            settingChanges,
          ) &&
          const DeepCollectionEquality().equals(
            other.inviteLinkChanges,
            inviteLinkChanges,
          ) &&
          const DeepCollectionEquality().equals(
            other.videoChatChanges,
            videoChatChanges,
          ) &&
          const DeepCollectionEquality().equals(
            other.forumChanges,
            forumChanges,
          ) &&
          const DeepCollectionEquality().equals(
            other.subscriptionExtensions,
            subscriptionExtensions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messageEdits),
    const DeepCollectionEquality().hash(messageDeletions),
    const DeepCollectionEquality().hash(messagePins),
    const DeepCollectionEquality().hash(memberJoins),
    const DeepCollectionEquality().hash(memberLeaves),
    const DeepCollectionEquality().hash(memberInvites),
    const DeepCollectionEquality().hash(memberPromotions),
    const DeepCollectionEquality().hash(memberRestrictions),
    const DeepCollectionEquality().hash(infoChanges),
    const DeepCollectionEquality().hash(settingChanges),
    const DeepCollectionEquality().hash(inviteLinkChanges),
    const DeepCollectionEquality().hash(videoChatChanges),
    const DeepCollectionEquality().hash(forumChanges),
    const DeepCollectionEquality().hash(subscriptionExtensions),
  ]);
}

extension LanguagePackStringValueDataClassExtensions
    on LanguagePackStringValue {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is LanguagePackStringValue);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension LanguagePackStringValueOrdinaryDataClassExtensions
    on LanguagePackStringValueOrdinary {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LanguagePackStringValueOrdinary &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(value)]);
}

extension LanguagePackStringValuePluralizedDataClassExtensions
    on LanguagePackStringValuePluralized {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LanguagePackStringValuePluralized &&
          const DeepCollectionEquality().equals(other.zeroValue, zeroValue) &&
          const DeepCollectionEquality().equals(other.oneValue, oneValue) &&
          const DeepCollectionEquality().equals(other.twoValue, twoValue) &&
          const DeepCollectionEquality().equals(other.fewValue, fewValue) &&
          const DeepCollectionEquality().equals(other.manyValue, manyValue) &&
          const DeepCollectionEquality().equals(other.otherValue, otherValue));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(zeroValue),
    const DeepCollectionEquality().hash(oneValue),
    const DeepCollectionEquality().hash(twoValue),
    const DeepCollectionEquality().hash(fewValue),
    const DeepCollectionEquality().hash(manyValue),
    const DeepCollectionEquality().hash(otherValue),
  ]);
}

extension LanguagePackStringValueDeletedDataClassExtensions
    on LanguagePackStringValueDeleted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LanguagePackStringValueDeleted);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension LanguagePackStringDataClassExtensions on LanguagePackString {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LanguagePackString &&
          const DeepCollectionEquality().equals(other.key, key) &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(key),
    const DeepCollectionEquality().hash(value),
  ]);
}

extension LanguagePackStringsDataClassExtensions on LanguagePackStrings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LanguagePackStrings &&
          const DeepCollectionEquality().equals(other.strings, strings));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(strings),
  ]);
}

extension LanguagePackInfoDataClassExtensions on LanguagePackInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LanguagePackInfo &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.baseLanguagePackId,
            baseLanguagePackId,
          ) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.nativeName, nativeName) &&
          const DeepCollectionEquality().equals(other.pluralCode, pluralCode) &&
          const DeepCollectionEquality().equals(other.isOfficial, isOfficial) &&
          const DeepCollectionEquality().equals(other.isRtl, isRtl) &&
          const DeepCollectionEquality().equals(other.isBeta, isBeta) &&
          const DeepCollectionEquality().equals(
            other.isInstalled,
            isInstalled,
          ) &&
          const DeepCollectionEquality().equals(
            other.totalStringCount,
            totalStringCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.translatedStringCount,
            translatedStringCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.localStringCount,
            localStringCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.translationUrl,
            translationUrl,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(baseLanguagePackId),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(nativeName),
    const DeepCollectionEquality().hash(pluralCode),
    const DeepCollectionEquality().hash(isOfficial),
    const DeepCollectionEquality().hash(isRtl),
    const DeepCollectionEquality().hash(isBeta),
    const DeepCollectionEquality().hash(isInstalled),
    const DeepCollectionEquality().hash(totalStringCount),
    const DeepCollectionEquality().hash(translatedStringCount),
    const DeepCollectionEquality().hash(localStringCount),
    const DeepCollectionEquality().hash(translationUrl),
  ]);
}

extension LocalizationTargetInfoDataClassExtensions on LocalizationTargetInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LocalizationTargetInfo &&
          const DeepCollectionEquality().equals(
            other.languagePacks,
            languagePacks,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(languagePacks),
  ]);
}

extension PremiumLimitTypeDataClassExtensions on PremiumLimitType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PremiumLimitType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypeSupergroupCountDataClassExtensions
    on PremiumLimitTypeSupergroupCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypeSupergroupCount);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypePinnedChatCountDataClassExtensions
    on PremiumLimitTypePinnedChatCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypePinnedChatCount);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypeCreatedPublicChatCountDataClassExtensions
    on PremiumLimitTypeCreatedPublicChatCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypeCreatedPublicChatCount);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypeSavedAnimationCountDataClassExtensions
    on PremiumLimitTypeSavedAnimationCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypeSavedAnimationCount);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypeFavoriteStickerCountDataClassExtensions
    on PremiumLimitTypeFavoriteStickerCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypeFavoriteStickerCount);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypeChatFolderCountDataClassExtensions
    on PremiumLimitTypeChatFolderCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypeChatFolderCount);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypeChatFolderChosenChatCountDataClassExtensions
    on PremiumLimitTypeChatFolderChosenChatCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypeChatFolderChosenChatCount);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypePinnedArchivedChatCountDataClassExtensions
    on PremiumLimitTypePinnedArchivedChatCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypePinnedArchivedChatCount);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypePinnedSavedMessagesTopicCountDataClassExtensions
    on PremiumLimitTypePinnedSavedMessagesTopicCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypePinnedSavedMessagesTopicCount);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypeCaptionLengthDataClassExtensions
    on PremiumLimitTypeCaptionLength {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypeCaptionLength);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypeBioLengthDataClassExtensions
    on PremiumLimitTypeBioLength {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PremiumLimitTypeBioLength);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypeChatFolderInviteLinkCountDataClassExtensions
    on PremiumLimitTypeChatFolderInviteLinkCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypeChatFolderInviteLinkCount);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypeShareableChatFolderCountDataClassExtensions
    on PremiumLimitTypeShareableChatFolderCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypeShareableChatFolderCount);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypeActiveStoryCountDataClassExtensions
    on PremiumLimitTypeActiveStoryCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypeActiveStoryCount);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypeWeeklyPostedStoryCountDataClassExtensions
    on PremiumLimitTypeWeeklyPostedStoryCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypeWeeklyPostedStoryCount);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypeMonthlyPostedStoryCountDataClassExtensions
    on PremiumLimitTypeMonthlyPostedStoryCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypeMonthlyPostedStoryCount);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypeStoryCaptionLengthDataClassExtensions
    on PremiumLimitTypeStoryCaptionLength {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypeStoryCaptionLength);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypeStorySuggestedReactionAreaCountDataClassExtensions
    on PremiumLimitTypeStorySuggestedReactionAreaCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypeStorySuggestedReactionAreaCount);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitTypeSimilarChatCountDataClassExtensions
    on PremiumLimitTypeSimilarChatCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimitTypeSimilarChatCount);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureDataClassExtensions on PremiumFeature {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PremiumFeature);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureIncreasedLimitsDataClassExtensions
    on PremiumFeatureIncreasedLimits {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeatureIncreasedLimits);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureIncreasedUploadFileSizeDataClassExtensions
    on PremiumFeatureIncreasedUploadFileSize {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeatureIncreasedUploadFileSize);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureImprovedDownloadSpeedDataClassExtensions
    on PremiumFeatureImprovedDownloadSpeed {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeatureImprovedDownloadSpeed);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureVoiceRecognitionDataClassExtensions
    on PremiumFeatureVoiceRecognition {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeatureVoiceRecognition);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureDisabledAdsDataClassExtensions
    on PremiumFeatureDisabledAds {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PremiumFeatureDisabledAds);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureUniqueReactionsDataClassExtensions
    on PremiumFeatureUniqueReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeatureUniqueReactions);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureUniqueStickersDataClassExtensions
    on PremiumFeatureUniqueStickers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeatureUniqueStickers);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureCustomEmojiDataClassExtensions
    on PremiumFeatureCustomEmoji {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PremiumFeatureCustomEmoji);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureAdvancedChatManagementDataClassExtensions
    on PremiumFeatureAdvancedChatManagement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeatureAdvancedChatManagement);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureProfileBadgeDataClassExtensions
    on PremiumFeatureProfileBadge {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PremiumFeatureProfileBadge);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureEmojiStatusDataClassExtensions
    on PremiumFeatureEmojiStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PremiumFeatureEmojiStatus);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureAnimatedProfilePhotoDataClassExtensions
    on PremiumFeatureAnimatedProfilePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeatureAnimatedProfilePhoto);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureForumTopicIconDataClassExtensions
    on PremiumFeatureForumTopicIcon {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeatureForumTopicIcon);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureAppIconsDataClassExtensions on PremiumFeatureAppIcons {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PremiumFeatureAppIcons);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureRealTimeChatTranslationDataClassExtensions
    on PremiumFeatureRealTimeChatTranslation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeatureRealTimeChatTranslation);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureUpgradedStoriesDataClassExtensions
    on PremiumFeatureUpgradedStories {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeatureUpgradedStories);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureChatBoostDataClassExtensions
    on PremiumFeatureChatBoost {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PremiumFeatureChatBoost);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureAccentColorDataClassExtensions
    on PremiumFeatureAccentColor {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PremiumFeatureAccentColor);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureBackgroundForBothDataClassExtensions
    on PremiumFeatureBackgroundForBoth {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeatureBackgroundForBoth);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureSavedMessagesTagsDataClassExtensions
    on PremiumFeatureSavedMessagesTags {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeatureSavedMessagesTags);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureMessagePrivacyDataClassExtensions
    on PremiumFeatureMessagePrivacy {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeatureMessagePrivacy);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureLastSeenTimesDataClassExtensions
    on PremiumFeatureLastSeenTimes {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeatureLastSeenTimes);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureBusinessDataClassExtensions on PremiumFeatureBusiness {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PremiumFeatureBusiness);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureMessageEffectsDataClassExtensions
    on PremiumFeatureMessageEffects {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeatureMessageEffects);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeatureChecklistsDataClassExtensions
    on PremiumFeatureChecklists {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PremiumFeatureChecklists);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BusinessFeatureDataClassExtensions on BusinessFeature {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is BusinessFeature);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BusinessFeatureLocationDataClassExtensions
    on BusinessFeatureLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is BusinessFeatureLocation);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BusinessFeatureOpeningHoursDataClassExtensions
    on BusinessFeatureOpeningHours {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessFeatureOpeningHours);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BusinessFeatureQuickRepliesDataClassExtensions
    on BusinessFeatureQuickReplies {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessFeatureQuickReplies);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BusinessFeatureGreetingMessageDataClassExtensions
    on BusinessFeatureGreetingMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessFeatureGreetingMessage);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BusinessFeatureAwayMessageDataClassExtensions
    on BusinessFeatureAwayMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is BusinessFeatureAwayMessage);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BusinessFeatureAccountLinksDataClassExtensions
    on BusinessFeatureAccountLinks {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessFeatureAccountLinks);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BusinessFeatureStartPageDataClassExtensions
    on BusinessFeatureStartPage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is BusinessFeatureStartPage);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BusinessFeatureBotsDataClassExtensions on BusinessFeatureBots {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is BusinessFeatureBots);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BusinessFeatureEmojiStatusDataClassExtensions
    on BusinessFeatureEmojiStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is BusinessFeatureEmojiStatus);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BusinessFeatureChatFolderTagsDataClassExtensions
    on BusinessFeatureChatFolderTags {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessFeatureChatFolderTags);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BusinessFeatureUpgradedStoriesDataClassExtensions
    on BusinessFeatureUpgradedStories {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessFeatureUpgradedStories);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumStoryFeatureDataClassExtensions on PremiumStoryFeature {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PremiumStoryFeature);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumStoryFeaturePriorityOrderDataClassExtensions
    on PremiumStoryFeaturePriorityOrder {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumStoryFeaturePriorityOrder);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumStoryFeatureStealthModeDataClassExtensions
    on PremiumStoryFeatureStealthMode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumStoryFeatureStealthMode);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumStoryFeaturePermanentViewsHistoryDataClassExtensions
    on PremiumStoryFeaturePermanentViewsHistory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumStoryFeaturePermanentViewsHistory);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumStoryFeatureCustomExpirationDurationDataClassExtensions
    on PremiumStoryFeatureCustomExpirationDuration {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumStoryFeatureCustomExpirationDuration);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumStoryFeatureSaveStoriesDataClassExtensions
    on PremiumStoryFeatureSaveStories {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumStoryFeatureSaveStories);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumStoryFeatureLinksAndFormattingDataClassExtensions
    on PremiumStoryFeatureLinksAndFormatting {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumStoryFeatureLinksAndFormatting);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumStoryFeatureVideoQualityDataClassExtensions
    on PremiumStoryFeatureVideoQuality {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumStoryFeatureVideoQuality);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumLimitDataClassExtensions on PremiumLimit {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumLimit &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(
            other.defaultValue,
            defaultValue,
          ) &&
          const DeepCollectionEquality().equals(
            other.premiumValue,
            premiumValue,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(defaultValue),
    const DeepCollectionEquality().hash(premiumValue),
  ]);
}

extension PremiumFeaturesDataClassExtensions on PremiumFeatures {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeatures &&
          const DeepCollectionEquality().equals(other.features, features) &&
          const DeepCollectionEquality().equals(other.limits, limits) &&
          const DeepCollectionEquality().equals(
            other.paymentLink,
            paymentLink,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(features),
    const DeepCollectionEquality().hash(limits),
    const DeepCollectionEquality().hash(paymentLink),
  ]);
}

extension BusinessFeaturesDataClassExtensions on BusinessFeatures {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessFeatures &&
          const DeepCollectionEquality().equals(other.features, features));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(features),
  ]);
}

extension PremiumSourceDataClassExtensions on PremiumSource {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PremiumSource);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumSourceLimitExceededDataClassExtensions
    on PremiumSourceLimitExceeded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumSourceLimitExceeded &&
          const DeepCollectionEquality().equals(other.limitType, limitType));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(limitType),
  ]);
}

extension PremiumSourceFeatureDataClassExtensions on PremiumSourceFeature {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumSourceFeature &&
          const DeepCollectionEquality().equals(other.feature, feature));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(feature),
  ]);
}

extension PremiumSourceBusinessFeatureDataClassExtensions
    on PremiumSourceBusinessFeature {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumSourceBusinessFeature &&
          const DeepCollectionEquality().equals(other.feature, feature));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(feature),
  ]);
}

extension PremiumSourceStoryFeatureDataClassExtensions
    on PremiumSourceStoryFeature {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumSourceStoryFeature &&
          const DeepCollectionEquality().equals(other.feature, feature));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(feature),
  ]);
}

extension PremiumSourceLinkDataClassExtensions on PremiumSourceLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumSourceLink &&
          const DeepCollectionEquality().equals(other.referrer, referrer));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(referrer),
  ]);
}

extension PremiumSourceSettingsDataClassExtensions on PremiumSourceSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PremiumSourceSettings);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PremiumFeaturePromotionAnimationDataClassExtensions
    on PremiumFeaturePromotionAnimation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumFeaturePromotionAnimation &&
          const DeepCollectionEquality().equals(other.feature, feature) &&
          const DeepCollectionEquality().equals(other.animation, animation));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(feature),
    const DeepCollectionEquality().hash(animation),
  ]);
}

extension BusinessFeaturePromotionAnimationDataClassExtensions
    on BusinessFeaturePromotionAnimation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BusinessFeaturePromotionAnimation &&
          const DeepCollectionEquality().equals(other.feature, feature) &&
          const DeepCollectionEquality().equals(other.animation, animation));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(feature),
    const DeepCollectionEquality().hash(animation),
  ]);
}

extension PremiumStateDataClassExtensions on PremiumState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PremiumState &&
          const DeepCollectionEquality().equals(other.state, state) &&
          const DeepCollectionEquality().equals(
            other.paymentOptions,
            paymentOptions,
          ) &&
          const DeepCollectionEquality().equals(other.animations, animations) &&
          const DeepCollectionEquality().equals(
            other.businessAnimations,
            businessAnimations,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(state),
    const DeepCollectionEquality().hash(paymentOptions),
    const DeepCollectionEquality().hash(animations),
    const DeepCollectionEquality().hash(businessAnimations),
  ]);
}

extension StorePaymentPurposeDataClassExtensions on StorePaymentPurpose {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StorePaymentPurpose);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StorePaymentPurposePremiumSubscriptionDataClassExtensions
    on StorePaymentPurposePremiumSubscription {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StorePaymentPurposePremiumSubscription &&
          const DeepCollectionEquality().equals(other.isRestore, isRestore) &&
          const DeepCollectionEquality().equals(other.isUpgrade, isUpgrade));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isRestore),
    const DeepCollectionEquality().hash(isUpgrade),
  ]);
}

extension StorePaymentPurposePremiumGiftDataClassExtensions
    on StorePaymentPurposePremiumGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StorePaymentPurposePremiumGift &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(text),
  ]);
}

extension StorePaymentPurposePremiumGiftCodesDataClassExtensions
    on StorePaymentPurposePremiumGiftCodes {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StorePaymentPurposePremiumGiftCodes &&
          const DeepCollectionEquality().equals(
            other.boostedChatId,
            boostedChatId,
          ) &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(other.userIds, userIds) &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(boostedChatId),
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(userIds),
    const DeepCollectionEquality().hash(text),
  ]);
}

extension StorePaymentPurposePremiumGiveawayDataClassExtensions
    on StorePaymentPurposePremiumGiveaway {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StorePaymentPurposePremiumGiveaway &&
          const DeepCollectionEquality().equals(other.parameters, parameters) &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(parameters),
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
  ]);
}

extension StorePaymentPurposeStarGiveawayDataClassExtensions
    on StorePaymentPurposeStarGiveaway {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StorePaymentPurposeStarGiveaway &&
          const DeepCollectionEquality().equals(other.parameters, parameters) &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(
            other.winnerCount,
            winnerCount,
          ) &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(parameters),
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(winnerCount),
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension StorePaymentPurposeStarsDataClassExtensions
    on StorePaymentPurposeStars {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StorePaymentPurposeStars &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension StorePaymentPurposeGiftedStarsDataClassExtensions
    on StorePaymentPurposeGiftedStars {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StorePaymentPurposeGiftedStars &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension StoreTransactionDataClassExtensions on StoreTransaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StoreTransaction);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StoreTransactionAppStoreDataClassExtensions
    on StoreTransactionAppStore {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoreTransactionAppStore &&
          const DeepCollectionEquality().equals(other.receipt, receipt));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(receipt),
  ]);
}

extension StoreTransactionGooglePlayDataClassExtensions
    on StoreTransactionGooglePlay {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoreTransactionGooglePlay &&
          const DeepCollectionEquality().equals(
            other.packageName,
            packageName,
          ) &&
          const DeepCollectionEquality().equals(
            other.storeProductId,
            storeProductId,
          ) &&
          const DeepCollectionEquality().equals(
            other.purchaseToken,
            purchaseToken,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(packageName),
    const DeepCollectionEquality().hash(storeProductId),
    const DeepCollectionEquality().hash(purchaseToken),
  ]);
}

extension TelegramPaymentPurposeDataClassExtensions on TelegramPaymentPurpose {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TelegramPaymentPurpose);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TelegramPaymentPurposePremiumGiftDataClassExtensions
    on TelegramPaymentPurposePremiumGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TelegramPaymentPurposePremiumGift &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.monthCount, monthCount) &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(monthCount),
    const DeepCollectionEquality().hash(text),
  ]);
}

extension TelegramPaymentPurposePremiumGiftCodesDataClassExtensions
    on TelegramPaymentPurposePremiumGiftCodes {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TelegramPaymentPurposePremiumGiftCodes &&
          const DeepCollectionEquality().equals(
            other.boostedChatId,
            boostedChatId,
          ) &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(other.userIds, userIds) &&
          const DeepCollectionEquality().equals(other.monthCount, monthCount) &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(boostedChatId),
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(userIds),
    const DeepCollectionEquality().hash(monthCount),
    const DeepCollectionEquality().hash(text),
  ]);
}

extension TelegramPaymentPurposePremiumGiveawayDataClassExtensions
    on TelegramPaymentPurposePremiumGiveaway {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TelegramPaymentPurposePremiumGiveaway &&
          const DeepCollectionEquality().equals(other.parameters, parameters) &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(
            other.winnerCount,
            winnerCount,
          ) &&
          const DeepCollectionEquality().equals(other.monthCount, monthCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(parameters),
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(winnerCount),
    const DeepCollectionEquality().hash(monthCount),
  ]);
}

extension TelegramPaymentPurposeStarsDataClassExtensions
    on TelegramPaymentPurposeStars {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TelegramPaymentPurposeStars &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension TelegramPaymentPurposeGiftedStarsDataClassExtensions
    on TelegramPaymentPurposeGiftedStars {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TelegramPaymentPurposeGiftedStars &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension TelegramPaymentPurposeStarGiveawayDataClassExtensions
    on TelegramPaymentPurposeStarGiveaway {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TelegramPaymentPurposeStarGiveaway &&
          const DeepCollectionEquality().equals(other.parameters, parameters) &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount) &&
          const DeepCollectionEquality().equals(
            other.winnerCount,
            winnerCount,
          ) &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(parameters),
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
    const DeepCollectionEquality().hash(winnerCount),
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension TelegramPaymentPurposeJoinChatDataClassExtensions
    on TelegramPaymentPurposeJoinChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TelegramPaymentPurposeJoinChat &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inviteLink),
  ]);
}

extension DeviceTokenDataClassExtensions on DeviceToken {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is DeviceToken);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension DeviceTokenFirebaseCloudMessagingDataClassExtensions
    on DeviceTokenFirebaseCloudMessaging {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeviceTokenFirebaseCloudMessaging &&
          const DeepCollectionEquality().equals(other.token, token) &&
          const DeepCollectionEquality().equals(other.encrypt, encrypt));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(token),
    const DeepCollectionEquality().hash(encrypt),
  ]);
}

extension DeviceTokenApplePushDataClassExtensions on DeviceTokenApplePush {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeviceTokenApplePush &&
          const DeepCollectionEquality().equals(
            other.deviceToken,
            deviceToken,
          ) &&
          const DeepCollectionEquality().equals(
            other.isAppSandbox,
            isAppSandbox,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(deviceToken),
    const DeepCollectionEquality().hash(isAppSandbox),
  ]);
}

extension DeviceTokenApplePushVoIPDataClassExtensions
    on DeviceTokenApplePushVoIP {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeviceTokenApplePushVoIP &&
          const DeepCollectionEquality().equals(
            other.deviceToken,
            deviceToken,
          ) &&
          const DeepCollectionEquality().equals(
            other.isAppSandbox,
            isAppSandbox,
          ) &&
          const DeepCollectionEquality().equals(other.encrypt, encrypt));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(deviceToken),
    const DeepCollectionEquality().hash(isAppSandbox),
    const DeepCollectionEquality().hash(encrypt),
  ]);
}

extension DeviceTokenWindowsPushDataClassExtensions on DeviceTokenWindowsPush {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeviceTokenWindowsPush &&
          const DeepCollectionEquality().equals(
            other.accessToken,
            accessToken,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(accessToken),
  ]);
}

extension DeviceTokenMicrosoftPushDataClassExtensions
    on DeviceTokenMicrosoftPush {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeviceTokenMicrosoftPush &&
          const DeepCollectionEquality().equals(other.channelUri, channelUri));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(channelUri),
  ]);
}

extension DeviceTokenMicrosoftPushVoIPDataClassExtensions
    on DeviceTokenMicrosoftPushVoIP {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeviceTokenMicrosoftPushVoIP &&
          const DeepCollectionEquality().equals(other.channelUri, channelUri));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(channelUri),
  ]);
}

extension DeviceTokenWebPushDataClassExtensions on DeviceTokenWebPush {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeviceTokenWebPush &&
          const DeepCollectionEquality().equals(other.endpoint, endpoint) &&
          const DeepCollectionEquality().equals(
            other.p256dhBase64url,
            p256dhBase64url,
          ) &&
          const DeepCollectionEquality().equals(
            other.authBase64url,
            authBase64url,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(endpoint),
    const DeepCollectionEquality().hash(p256dhBase64url),
    const DeepCollectionEquality().hash(authBase64url),
  ]);
}

extension DeviceTokenSimplePushDataClassExtensions on DeviceTokenSimplePush {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeviceTokenSimplePush &&
          const DeepCollectionEquality().equals(other.endpoint, endpoint));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(endpoint),
  ]);
}

extension DeviceTokenUbuntuPushDataClassExtensions on DeviceTokenUbuntuPush {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeviceTokenUbuntuPush &&
          const DeepCollectionEquality().equals(other.token, token));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(token)]);
}

extension DeviceTokenBlackBerryPushDataClassExtensions
    on DeviceTokenBlackBerryPush {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeviceTokenBlackBerryPush &&
          const DeepCollectionEquality().equals(other.token, token));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(token)]);
}

extension DeviceTokenTizenPushDataClassExtensions on DeviceTokenTizenPush {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeviceTokenTizenPush &&
          const DeepCollectionEquality().equals(other.regId, regId));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(regId)]);
}

extension DeviceTokenHuaweiPushDataClassExtensions on DeviceTokenHuaweiPush {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeviceTokenHuaweiPush &&
          const DeepCollectionEquality().equals(other.token, token) &&
          const DeepCollectionEquality().equals(other.encrypt, encrypt));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(token),
    const DeepCollectionEquality().hash(encrypt),
  ]);
}

extension PushReceiverIdDataClassExtensions on PushReceiverId {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushReceiverId &&
          const DeepCollectionEquality().equals(other.id, id));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(id)]);
}

extension BackgroundFillDataClassExtensions on BackgroundFill {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is BackgroundFill);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BackgroundFillSolidDataClassExtensions on BackgroundFillSolid {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BackgroundFillSolid &&
          const DeepCollectionEquality().equals(other.color, color));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(color)]);
}

extension BackgroundFillGradientDataClassExtensions on BackgroundFillGradient {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BackgroundFillGradient &&
          const DeepCollectionEquality().equals(other.topColor, topColor) &&
          const DeepCollectionEquality().equals(
            other.bottomColor,
            bottomColor,
          ) &&
          const DeepCollectionEquality().equals(
            other.rotationAngle,
            rotationAngle,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(topColor),
    const DeepCollectionEquality().hash(bottomColor),
    const DeepCollectionEquality().hash(rotationAngle),
  ]);
}

extension BackgroundFillFreeformGradientDataClassExtensions
    on BackgroundFillFreeformGradient {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BackgroundFillFreeformGradient &&
          const DeepCollectionEquality().equals(other.colors, colors));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(colors),
  ]);
}

extension BackgroundTypeDataClassExtensions on BackgroundType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is BackgroundType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BackgroundTypeWallpaperDataClassExtensions
    on BackgroundTypeWallpaper {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BackgroundTypeWallpaper &&
          const DeepCollectionEquality().equals(other.isBlurred, isBlurred) &&
          const DeepCollectionEquality().equals(other.isMoving, isMoving));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isBlurred),
    const DeepCollectionEquality().hash(isMoving),
  ]);
}

extension BackgroundTypePatternDataClassExtensions on BackgroundTypePattern {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BackgroundTypePattern &&
          const DeepCollectionEquality().equals(other.fill, fill) &&
          const DeepCollectionEquality().equals(other.intensity, intensity) &&
          const DeepCollectionEquality().equals(other.isInverted, isInverted) &&
          const DeepCollectionEquality().equals(other.isMoving, isMoving));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fill),
    const DeepCollectionEquality().hash(intensity),
    const DeepCollectionEquality().hash(isInverted),
    const DeepCollectionEquality().hash(isMoving),
  ]);
}

extension BackgroundTypeFillDataClassExtensions on BackgroundTypeFill {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BackgroundTypeFill &&
          const DeepCollectionEquality().equals(other.fill, fill));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(fill)]);
}

extension BackgroundTypeChatThemeDataClassExtensions
    on BackgroundTypeChatTheme {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BackgroundTypeChatTheme &&
          const DeepCollectionEquality().equals(other.themeName, themeName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(themeName),
  ]);
}

extension InputBackgroundDataClassExtensions on InputBackground {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InputBackground);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InputBackgroundLocalDataClassExtensions on InputBackgroundLocal {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputBackgroundLocal &&
          const DeepCollectionEquality().equals(other.background, background));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(background),
  ]);
}

extension InputBackgroundRemoteDataClassExtensions on InputBackgroundRemote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputBackgroundRemote &&
          const DeepCollectionEquality().equals(
            other.backgroundId,
            backgroundId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(backgroundId),
  ]);
}

extension InputBackgroundPreviousDataClassExtensions
    on InputBackgroundPrevious {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputBackgroundPrevious &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension ChatThemeDataClassExtensions on ChatTheme {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatTheme &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(
            other.lightSettings,
            lightSettings,
          ) &&
          const DeepCollectionEquality().equals(
            other.darkSettings,
            darkSettings,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(lightSettings),
    const DeepCollectionEquality().hash(darkSettings),
  ]);
}

extension TimeZoneDataClassExtensions on TimeZone {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TimeZone &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(
            other.utcTimeOffset,
            utcTimeOffset,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(utcTimeOffset),
  ]);
}

extension TimeZonesDataClassExtensions on TimeZones {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TimeZones &&
          const DeepCollectionEquality().equals(other.timeZones, timeZones));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(timeZones),
  ]);
}

extension HashtagsDataClassExtensions on Hashtags {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Hashtags &&
          const DeepCollectionEquality().equals(other.hashtags, hashtags));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(hashtags),
  ]);
}

extension CanPostStoryResultDataClassExtensions on CanPostStoryResult {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CanPostStoryResult);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CanPostStoryResultOkDataClassExtensions on CanPostStoryResultOk {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanPostStoryResultOk &&
          const DeepCollectionEquality().equals(other.storyCount, storyCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyCount),
  ]);
}

extension CanPostStoryResultPremiumNeededDataClassExtensions
    on CanPostStoryResultPremiumNeeded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanPostStoryResultPremiumNeeded);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CanPostStoryResultBoostNeededDataClassExtensions
    on CanPostStoryResultBoostNeeded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanPostStoryResultBoostNeeded);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CanPostStoryResultActiveStoryLimitExceededDataClassExtensions
    on CanPostStoryResultActiveStoryLimitExceeded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanPostStoryResultActiveStoryLimitExceeded);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CanPostStoryResultWeeklyLimitExceededDataClassExtensions
    on CanPostStoryResultWeeklyLimitExceeded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanPostStoryResultWeeklyLimitExceeded &&
          const DeepCollectionEquality().equals(other.retryAfter, retryAfter));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(retryAfter),
  ]);
}

extension CanPostStoryResultMonthlyLimitExceededDataClassExtensions
    on CanPostStoryResultMonthlyLimitExceeded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanPostStoryResultMonthlyLimitExceeded &&
          const DeepCollectionEquality().equals(other.retryAfter, retryAfter));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(retryAfter),
  ]);
}

extension CanTransferOwnershipResultDataClassExtensions
    on CanTransferOwnershipResult {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CanTransferOwnershipResult);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CanTransferOwnershipResultOkDataClassExtensions
    on CanTransferOwnershipResultOk {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanTransferOwnershipResultOk);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CanTransferOwnershipResultPasswordNeededDataClassExtensions
    on CanTransferOwnershipResultPasswordNeeded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanTransferOwnershipResultPasswordNeeded);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CanTransferOwnershipResultPasswordTooFreshDataClassExtensions
    on CanTransferOwnershipResultPasswordTooFresh {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanTransferOwnershipResultPasswordTooFresh &&
          const DeepCollectionEquality().equals(other.retryAfter, retryAfter));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(retryAfter),
  ]);
}

extension CanTransferOwnershipResultSessionTooFreshDataClassExtensions
    on CanTransferOwnershipResultSessionTooFresh {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanTransferOwnershipResultSessionTooFresh &&
          const DeepCollectionEquality().equals(other.retryAfter, retryAfter));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(retryAfter),
  ]);
}

extension CheckChatUsernameResultDataClassExtensions
    on CheckChatUsernameResult {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CheckChatUsernameResult);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CheckChatUsernameResultOkDataClassExtensions
    on CheckChatUsernameResultOk {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CheckChatUsernameResultOk);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CheckChatUsernameResultUsernameInvalidDataClassExtensions
    on CheckChatUsernameResultUsernameInvalid {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckChatUsernameResultUsernameInvalid);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CheckChatUsernameResultUsernameOccupiedDataClassExtensions
    on CheckChatUsernameResultUsernameOccupied {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckChatUsernameResultUsernameOccupied);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CheckChatUsernameResultUsernamePurchasableDataClassExtensions
    on CheckChatUsernameResultUsernamePurchasable {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckChatUsernameResultUsernamePurchasable);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CheckChatUsernameResultPublicChatsTooManyDataClassExtensions
    on CheckChatUsernameResultPublicChatsTooMany {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckChatUsernameResultPublicChatsTooMany);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CheckChatUsernameResultPublicGroupsUnavailableDataClassExtensions
    on CheckChatUsernameResultPublicGroupsUnavailable {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckChatUsernameResultPublicGroupsUnavailable);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CheckStickerSetNameResultDataClassExtensions
    on CheckStickerSetNameResult {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CheckStickerSetNameResult);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CheckStickerSetNameResultOkDataClassExtensions
    on CheckStickerSetNameResultOk {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckStickerSetNameResultOk);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CheckStickerSetNameResultNameInvalidDataClassExtensions
    on CheckStickerSetNameResultNameInvalid {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckStickerSetNameResultNameInvalid);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CheckStickerSetNameResultNameOccupiedDataClassExtensions
    on CheckStickerSetNameResultNameOccupied {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckStickerSetNameResultNameOccupied);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ResetPasswordResultDataClassExtensions on ResetPasswordResult {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ResetPasswordResult);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ResetPasswordResultOkDataClassExtensions on ResetPasswordResultOk {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ResetPasswordResultOk);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ResetPasswordResultPendingDataClassExtensions
    on ResetPasswordResultPending {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ResetPasswordResultPending &&
          const DeepCollectionEquality().equals(
            other.pendingResetDate,
            pendingResetDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(pendingResetDate),
  ]);
}

extension ResetPasswordResultDeclinedDataClassExtensions
    on ResetPasswordResultDeclined {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ResetPasswordResultDeclined &&
          const DeepCollectionEquality().equals(other.retryDate, retryDate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(retryDate),
  ]);
}

extension MessageFileTypeDataClassExtensions on MessageFileType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageFileType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension MessageFileTypePrivateDataClassExtensions on MessageFileTypePrivate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageFileTypePrivate &&
          const DeepCollectionEquality().equals(other.name, name));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(name)]);
}

extension MessageFileTypeGroupDataClassExtensions on MessageFileTypeGroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageFileTypeGroup &&
          const DeepCollectionEquality().equals(other.title, title));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(title)]);
}

extension MessageFileTypeUnknownDataClassExtensions on MessageFileTypeUnknown {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is MessageFileTypeUnknown);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PushMessageContentDataClassExtensions on PushMessageContent {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PushMessageContent);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PushMessageContentHiddenDataClassExtensions
    on PushMessageContentHidden {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentHidden &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentAnimationDataClassExtensions
    on PushMessageContentAnimation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentAnimation &&
          const DeepCollectionEquality().equals(other.animation, animation) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(animation),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentAudioDataClassExtensions
    on PushMessageContentAudio {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentAudio &&
          const DeepCollectionEquality().equals(other.audio, audio) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(audio),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentContactDataClassExtensions
    on PushMessageContentContact {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentContact &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentContactRegisteredDataClassExtensions
    on PushMessageContentContactRegistered {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentContactRegistered);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PushMessageContentDocumentDataClassExtensions
    on PushMessageContentDocument {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentDocument &&
          const DeepCollectionEquality().equals(other.document, document) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(document),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentGameDataClassExtensions on PushMessageContentGame {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentGame &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentGameScoreDataClassExtensions
    on PushMessageContentGameScore {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentGameScore &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.score, score) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(score),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentInvoiceDataClassExtensions
    on PushMessageContentInvoice {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentInvoice &&
          const DeepCollectionEquality().equals(other.price, price) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(price),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentLocationDataClassExtensions
    on PushMessageContentLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentLocation &&
          const DeepCollectionEquality().equals(other.isLive, isLive) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isLive),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentPaidMediaDataClassExtensions
    on PushMessageContentPaidMedia {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentPaidMedia &&
          const DeepCollectionEquality().equals(other.starCount, starCount) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(starCount),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentPhotoDataClassExtensions
    on PushMessageContentPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentPhoto &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(other.isSecret, isSecret) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(isSecret),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentPollDataClassExtensions on PushMessageContentPoll {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentPoll &&
          const DeepCollectionEquality().equals(other.question, question) &&
          const DeepCollectionEquality().equals(other.isRegular, isRegular) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(question),
    const DeepCollectionEquality().hash(isRegular),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentPremiumGiftCodeDataClassExtensions
    on PushMessageContentPremiumGiftCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentPremiumGiftCode &&
          const DeepCollectionEquality().equals(other.monthCount, monthCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(monthCount),
  ]);
}

extension PushMessageContentGiveawayDataClassExtensions
    on PushMessageContentGiveaway {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentGiveaway &&
          const DeepCollectionEquality().equals(
            other.winnerCount,
            winnerCount,
          ) &&
          const DeepCollectionEquality().equals(other.prize, prize) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(winnerCount),
    const DeepCollectionEquality().hash(prize),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentGiftDataClassExtensions on PushMessageContentGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentGift &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension PushMessageContentUpgradedGiftDataClassExtensions
    on PushMessageContentUpgradedGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentUpgradedGift &&
          const DeepCollectionEquality().equals(other.isUpgrade, isUpgrade));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isUpgrade),
  ]);
}

extension PushMessageContentScreenshotTakenDataClassExtensions
    on PushMessageContentScreenshotTaken {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentScreenshotTaken);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PushMessageContentStickerDataClassExtensions
    on PushMessageContentSticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentSticker &&
          const DeepCollectionEquality().equals(other.sticker, sticker) &&
          const DeepCollectionEquality().equals(other.emoji, emoji) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sticker),
    const DeepCollectionEquality().hash(emoji),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentStoryDataClassExtensions
    on PushMessageContentStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentStory &&
          const DeepCollectionEquality().equals(other.isMention, isMention) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isMention),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentTextDataClassExtensions on PushMessageContentText {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentText &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentChecklistDataClassExtensions
    on PushMessageContentChecklist {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentChecklist &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentVideoDataClassExtensions
    on PushMessageContentVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentVideo &&
          const DeepCollectionEquality().equals(other.video, video) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(other.isSecret, isSecret) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(video),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(isSecret),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentVideoNoteDataClassExtensions
    on PushMessageContentVideoNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentVideoNote &&
          const DeepCollectionEquality().equals(other.videoNote, videoNote) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(videoNote),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentVoiceNoteDataClassExtensions
    on PushMessageContentVoiceNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentVoiceNote &&
          const DeepCollectionEquality().equals(other.voiceNote, voiceNote) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(voiceNote),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension PushMessageContentBasicGroupChatCreateDataClassExtensions
    on PushMessageContentBasicGroupChatCreate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentBasicGroupChatCreate);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PushMessageContentVideoChatStartedDataClassExtensions
    on PushMessageContentVideoChatStarted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentVideoChatStarted);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PushMessageContentVideoChatEndedDataClassExtensions
    on PushMessageContentVideoChatEnded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentVideoChatEnded);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PushMessageContentInviteVideoChatParticipantsDataClassExtensions
    on PushMessageContentInviteVideoChatParticipants {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentInviteVideoChatParticipants &&
          const DeepCollectionEquality().equals(
            other.isCurrentUser,
            isCurrentUser,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isCurrentUser),
  ]);
}

extension PushMessageContentChatAddMembersDataClassExtensions
    on PushMessageContentChatAddMembers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentChatAddMembers &&
          const DeepCollectionEquality().equals(other.memberName, memberName) &&
          const DeepCollectionEquality().equals(
            other.isCurrentUser,
            isCurrentUser,
          ) &&
          const DeepCollectionEquality().equals(other.isReturned, isReturned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(memberName),
    const DeepCollectionEquality().hash(isCurrentUser),
    const DeepCollectionEquality().hash(isReturned),
  ]);
}

extension PushMessageContentChatChangePhotoDataClassExtensions
    on PushMessageContentChatChangePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentChatChangePhoto);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PushMessageContentChatChangeTitleDataClassExtensions
    on PushMessageContentChatChangeTitle {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentChatChangeTitle &&
          const DeepCollectionEquality().equals(other.title, title));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(title)]);
}

extension PushMessageContentChatSetBackgroundDataClassExtensions
    on PushMessageContentChatSetBackground {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentChatSetBackground &&
          const DeepCollectionEquality().equals(other.isSame, isSame));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isSame),
  ]);
}

extension PushMessageContentChatSetThemeDataClassExtensions
    on PushMessageContentChatSetTheme {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentChatSetTheme &&
          const DeepCollectionEquality().equals(other.themeName, themeName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(themeName),
  ]);
}

extension PushMessageContentChatDeleteMemberDataClassExtensions
    on PushMessageContentChatDeleteMember {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentChatDeleteMember &&
          const DeepCollectionEquality().equals(other.memberName, memberName) &&
          const DeepCollectionEquality().equals(
            other.isCurrentUser,
            isCurrentUser,
          ) &&
          const DeepCollectionEquality().equals(other.isLeft, isLeft));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(memberName),
    const DeepCollectionEquality().hash(isCurrentUser),
    const DeepCollectionEquality().hash(isLeft),
  ]);
}

extension PushMessageContentChatJoinByLinkDataClassExtensions
    on PushMessageContentChatJoinByLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentChatJoinByLink);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PushMessageContentChatJoinByRequestDataClassExtensions
    on PushMessageContentChatJoinByRequest {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentChatJoinByRequest);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PushMessageContentRecurringPaymentDataClassExtensions
    on PushMessageContentRecurringPayment {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentRecurringPayment &&
          const DeepCollectionEquality().equals(other.amount, amount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(amount),
  ]);
}

extension PushMessageContentSuggestProfilePhotoDataClassExtensions
    on PushMessageContentSuggestProfilePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentSuggestProfilePhoto);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PushMessageContentProximityAlertTriggeredDataClassExtensions
    on PushMessageContentProximityAlertTriggered {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentProximityAlertTriggered &&
          const DeepCollectionEquality().equals(other.distance, distance));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(distance),
  ]);
}

extension PushMessageContentChecklistTasksAddedDataClassExtensions
    on PushMessageContentChecklistTasksAdded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentChecklistTasksAdded &&
          const DeepCollectionEquality().equals(other.taskCount, taskCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(taskCount),
  ]);
}

extension PushMessageContentChecklistTasksDoneDataClassExtensions
    on PushMessageContentChecklistTasksDone {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentChecklistTasksDone &&
          const DeepCollectionEquality().equals(other.taskCount, taskCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(taskCount),
  ]);
}

extension PushMessageContentMessageForwardsDataClassExtensions
    on PushMessageContentMessageForwards {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentMessageForwards &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
  ]);
}

extension PushMessageContentMediaAlbumDataClassExtensions
    on PushMessageContentMediaAlbum {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PushMessageContentMediaAlbum &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.hasPhotos, hasPhotos) &&
          const DeepCollectionEquality().equals(other.hasVideos, hasVideos) &&
          const DeepCollectionEquality().equals(other.hasAudios, hasAudios) &&
          const DeepCollectionEquality().equals(
            other.hasDocuments,
            hasDocuments,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(hasPhotos),
    const DeepCollectionEquality().hash(hasVideos),
    const DeepCollectionEquality().hash(hasAudios),
    const DeepCollectionEquality().hash(hasDocuments),
  ]);
}

extension NotificationTypeDataClassExtensions on NotificationType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is NotificationType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension NotificationTypeNewMessageDataClassExtensions
    on NotificationTypeNewMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is NotificationTypeNewMessage &&
          const DeepCollectionEquality().equals(other.message, message) &&
          const DeepCollectionEquality().equals(
            other.showPreview,
            showPreview,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(message),
    const DeepCollectionEquality().hash(showPreview),
  ]);
}

extension NotificationTypeNewSecretChatDataClassExtensions
    on NotificationTypeNewSecretChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is NotificationTypeNewSecretChat);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension NotificationTypeNewCallDataClassExtensions
    on NotificationTypeNewCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is NotificationTypeNewCall &&
          const DeepCollectionEquality().equals(other.callId, callId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(callId),
  ]);
}

extension NotificationTypeNewPushMessageDataClassExtensions
    on NotificationTypeNewPushMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is NotificationTypeNewPushMessage &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.senderId, senderId) &&
          const DeepCollectionEquality().equals(other.senderName, senderName) &&
          const DeepCollectionEquality().equals(other.isOutgoing, isOutgoing) &&
          const DeepCollectionEquality().equals(other.content, content));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(senderId),
    const DeepCollectionEquality().hash(senderName),
    const DeepCollectionEquality().hash(isOutgoing),
    const DeepCollectionEquality().hash(content),
  ]);
}

extension NotificationGroupTypeDataClassExtensions on NotificationGroupType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is NotificationGroupType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension NotificationGroupTypeMessagesDataClassExtensions
    on NotificationGroupTypeMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is NotificationGroupTypeMessages);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension NotificationGroupTypeMentionsDataClassExtensions
    on NotificationGroupTypeMentions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is NotificationGroupTypeMentions);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension NotificationGroupTypeSecretChatDataClassExtensions
    on NotificationGroupTypeSecretChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is NotificationGroupTypeSecretChat);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension NotificationGroupTypeCallsDataClassExtensions
    on NotificationGroupTypeCalls {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is NotificationGroupTypeCalls);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension NotificationSoundDataClassExtensions on NotificationSound {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is NotificationSound &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.data, data) &&
          const DeepCollectionEquality().equals(other.sound, sound));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(data),
    const DeepCollectionEquality().hash(sound),
  ]);
}

extension NotificationSoundsDataClassExtensions on NotificationSounds {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is NotificationSounds &&
          const DeepCollectionEquality().equals(
            other.notificationSounds,
            notificationSounds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(notificationSounds),
  ]);
}

extension NotificationDataClassExtensions on Notification {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Notification &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(other.isSilent, isSilent) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(isSilent),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension NotificationGroupDataClassExtensions on NotificationGroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is NotificationGroup &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(
            other.notifications,
            notifications,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(notifications),
  ]);
}

extension OptionValueDataClassExtensions on OptionValue {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is OptionValue);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension OptionValueBooleanDataClassExtensions on OptionValueBoolean {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is OptionValueBoolean &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(value)]);
}

extension OptionValueEmptyDataClassExtensions on OptionValueEmpty {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is OptionValueEmpty);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension OptionValueIntegerDataClassExtensions on OptionValueInteger {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is OptionValueInteger &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(value)]);
}

extension OptionValueStringDataClassExtensions on OptionValueString {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is OptionValueString &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(value)]);
}

extension JsonObjectMemberDataClassExtensions on JsonObjectMember {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is JsonObjectMember &&
          const DeepCollectionEquality().equals(other.key, key) &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(key),
    const DeepCollectionEquality().hash(value),
  ]);
}

extension JsonValueDataClassExtensions on JsonValue {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is JsonValue);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension JsonValueNullDataClassExtensions on JsonValueNull {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is JsonValueNull);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension JsonValueBooleanDataClassExtensions on JsonValueBoolean {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is JsonValueBoolean &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(value)]);
}

extension JsonValueNumberDataClassExtensions on JsonValueNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is JsonValueNumber &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(value)]);
}

extension JsonValueStringDataClassExtensions on JsonValueString {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is JsonValueString &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(value)]);
}

extension JsonValueArrayDataClassExtensions on JsonValueArray {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is JsonValueArray &&
          const DeepCollectionEquality().equals(other.values, values));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(values),
  ]);
}

extension JsonValueObjectDataClassExtensions on JsonValueObject {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is JsonValueObject &&
          const DeepCollectionEquality().equals(other.members, members));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(members),
  ]);
}

extension StoryPrivacySettingsDataClassExtensions on StoryPrivacySettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StoryPrivacySettings);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StoryPrivacySettingsEveryoneDataClassExtensions
    on StoryPrivacySettingsEveryone {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryPrivacySettingsEveryone &&
          const DeepCollectionEquality().equals(
            other.exceptUserIds,
            exceptUserIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(exceptUserIds),
  ]);
}

extension StoryPrivacySettingsContactsDataClassExtensions
    on StoryPrivacySettingsContacts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryPrivacySettingsContacts &&
          const DeepCollectionEquality().equals(
            other.exceptUserIds,
            exceptUserIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(exceptUserIds),
  ]);
}

extension StoryPrivacySettingsCloseFriendsDataClassExtensions
    on StoryPrivacySettingsCloseFriends {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryPrivacySettingsCloseFriends);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StoryPrivacySettingsSelectedUsersDataClassExtensions
    on StoryPrivacySettingsSelectedUsers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryPrivacySettingsSelectedUsers &&
          const DeepCollectionEquality().equals(other.userIds, userIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userIds),
  ]);
}

extension UserPrivacySettingRuleDataClassExtensions on UserPrivacySettingRule {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is UserPrivacySettingRule);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingRuleAllowAllDataClassExtensions
    on UserPrivacySettingRuleAllowAll {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingRuleAllowAll);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingRuleAllowContactsDataClassExtensions
    on UserPrivacySettingRuleAllowContacts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingRuleAllowContacts);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingRuleAllowBotsDataClassExtensions
    on UserPrivacySettingRuleAllowBots {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingRuleAllowBots);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingRuleAllowPremiumUsersDataClassExtensions
    on UserPrivacySettingRuleAllowPremiumUsers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingRuleAllowPremiumUsers);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingRuleAllowUsersDataClassExtensions
    on UserPrivacySettingRuleAllowUsers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingRuleAllowUsers &&
          const DeepCollectionEquality().equals(other.userIds, userIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userIds),
  ]);
}

extension UserPrivacySettingRuleAllowChatMembersDataClassExtensions
    on UserPrivacySettingRuleAllowChatMembers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingRuleAllowChatMembers &&
          const DeepCollectionEquality().equals(other.chatIds, chatIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatIds),
  ]);
}

extension UserPrivacySettingRuleRestrictAllDataClassExtensions
    on UserPrivacySettingRuleRestrictAll {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingRuleRestrictAll);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingRuleRestrictContactsDataClassExtensions
    on UserPrivacySettingRuleRestrictContacts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingRuleRestrictContacts);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingRuleRestrictBotsDataClassExtensions
    on UserPrivacySettingRuleRestrictBots {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingRuleRestrictBots);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingRuleRestrictUsersDataClassExtensions
    on UserPrivacySettingRuleRestrictUsers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingRuleRestrictUsers &&
          const DeepCollectionEquality().equals(other.userIds, userIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userIds),
  ]);
}

extension UserPrivacySettingRuleRestrictChatMembersDataClassExtensions
    on UserPrivacySettingRuleRestrictChatMembers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingRuleRestrictChatMembers &&
          const DeepCollectionEquality().equals(other.chatIds, chatIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatIds),
  ]);
}

extension UserPrivacySettingRulesDataClassExtensions
    on UserPrivacySettingRules {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingRules &&
          const DeepCollectionEquality().equals(other.rules, rules));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(rules)]);
}

extension UserPrivacySettingDataClassExtensions on UserPrivacySetting {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is UserPrivacySetting);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingShowStatusDataClassExtensions
    on UserPrivacySettingShowStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingShowStatus);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingShowProfilePhotoDataClassExtensions
    on UserPrivacySettingShowProfilePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingShowProfilePhoto);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingShowLinkInForwardedMessagesDataClassExtensions
    on UserPrivacySettingShowLinkInForwardedMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingShowLinkInForwardedMessages);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingShowPhoneNumberDataClassExtensions
    on UserPrivacySettingShowPhoneNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingShowPhoneNumber);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingShowBioDataClassExtensions
    on UserPrivacySettingShowBio {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is UserPrivacySettingShowBio);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingShowBirthdateDataClassExtensions
    on UserPrivacySettingShowBirthdate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingShowBirthdate);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingAllowChatInvitesDataClassExtensions
    on UserPrivacySettingAllowChatInvites {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingAllowChatInvites);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingAllowCallsDataClassExtensions
    on UserPrivacySettingAllowCalls {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingAllowCalls);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingAllowPeerToPeerCallsDataClassExtensions
    on UserPrivacySettingAllowPeerToPeerCalls {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingAllowPeerToPeerCalls);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingAllowFindingByPhoneNumberDataClassExtensions
    on UserPrivacySettingAllowFindingByPhoneNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingAllowFindingByPhoneNumber);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessagesDataClassExtensions
    on UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingAllowPrivateVoiceAndVideoNoteMessages);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingAutosaveGiftsDataClassExtensions
    on UserPrivacySettingAutosaveGifts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingAutosaveGifts);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UserPrivacySettingAllowUnpaidMessagesDataClassExtensions
    on UserPrivacySettingAllowUnpaidMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserPrivacySettingAllowUnpaidMessages);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReadDatePrivacySettingsDataClassExtensions
    on ReadDatePrivacySettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReadDatePrivacySettings &&
          const DeepCollectionEquality().equals(
            other.showReadDate,
            showReadDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(showReadDate),
  ]);
}

extension NewChatPrivacySettingsDataClassExtensions on NewChatPrivacySettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is NewChatPrivacySettings &&
          const DeepCollectionEquality().equals(
            other.allowNewChatsFromUnknownUsers,
            allowNewChatsFromUnknownUsers,
          ) &&
          const DeepCollectionEquality().equals(
            other.incomingPaidMessageStarCount,
            incomingPaidMessageStarCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(allowNewChatsFromUnknownUsers),
    const DeepCollectionEquality().hash(incomingPaidMessageStarCount),
  ]);
}

extension CanSendMessageToUserResultDataClassExtensions
    on CanSendMessageToUserResult {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CanSendMessageToUserResult);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CanSendMessageToUserResultOkDataClassExtensions
    on CanSendMessageToUserResultOk {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanSendMessageToUserResultOk);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CanSendMessageToUserResultUserHasPaidMessagesDataClassExtensions
    on CanSendMessageToUserResultUserHasPaidMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanSendMessageToUserResultUserHasPaidMessages &&
          const DeepCollectionEquality().equals(
            other.outgoingPaidMessageStarCount,
            outgoingPaidMessageStarCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(outgoingPaidMessageStarCount),
  ]);
}

extension CanSendMessageToUserResultUserIsDeletedDataClassExtensions
    on CanSendMessageToUserResultUserIsDeleted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanSendMessageToUserResultUserIsDeleted);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CanSendMessageToUserResultUserRestrictsNewChatsDataClassExtensions
    on CanSendMessageToUserResultUserRestrictsNewChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanSendMessageToUserResultUserRestrictsNewChats);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AccountTtlDataClassExtensions on AccountTtl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AccountTtl &&
          const DeepCollectionEquality().equals(other.days, days));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(days)]);
}

extension MessageAutoDeleteTimeDataClassExtensions on MessageAutoDeleteTime {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageAutoDeleteTime &&
          const DeepCollectionEquality().equals(other.time, time));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(time)]);
}

extension SessionTypeDataClassExtensions on SessionType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionTypeAndroidDataClassExtensions on SessionTypeAndroid {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionTypeAndroid);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionTypeAppleDataClassExtensions on SessionTypeApple {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionTypeApple);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionTypeBraveDataClassExtensions on SessionTypeBrave {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionTypeBrave);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionTypeChromeDataClassExtensions on SessionTypeChrome {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionTypeChrome);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionTypeEdgeDataClassExtensions on SessionTypeEdge {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionTypeEdge);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionTypeFirefoxDataClassExtensions on SessionTypeFirefox {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionTypeFirefox);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionTypeIpadDataClassExtensions on SessionTypeIpad {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionTypeIpad);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionTypeIphoneDataClassExtensions on SessionTypeIphone {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionTypeIphone);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionTypeLinuxDataClassExtensions on SessionTypeLinux {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionTypeLinux);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionTypeMacDataClassExtensions on SessionTypeMac {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionTypeMac);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionTypeOperaDataClassExtensions on SessionTypeOpera {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionTypeOpera);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionTypeSafariDataClassExtensions on SessionTypeSafari {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionTypeSafari);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionTypeUbuntuDataClassExtensions on SessionTypeUbuntu {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionTypeUbuntu);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionTypeUnknownDataClassExtensions on SessionTypeUnknown {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionTypeUnknown);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionTypeVivaldiDataClassExtensions on SessionTypeVivaldi {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionTypeVivaldi);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionTypeWindowsDataClassExtensions on SessionTypeWindows {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionTypeWindows);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionTypeXboxDataClassExtensions on SessionTypeXbox {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SessionTypeXbox);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SessionDataClassExtensions on Session {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Session &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.isCurrent, isCurrent) &&
          const DeepCollectionEquality().equals(
            other.isPasswordPending,
            isPasswordPending,
          ) &&
          const DeepCollectionEquality().equals(
            other.isUnconfirmed,
            isUnconfirmed,
          ) &&
          const DeepCollectionEquality().equals(
            other.canAcceptSecretChats,
            canAcceptSecretChats,
          ) &&
          const DeepCollectionEquality().equals(
            other.canAcceptCalls,
            canAcceptCalls,
          ) &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.apiId, apiId) &&
          const DeepCollectionEquality().equals(
            other.applicationName,
            applicationName,
          ) &&
          const DeepCollectionEquality().equals(
            other.applicationVersion,
            applicationVersion,
          ) &&
          const DeepCollectionEquality().equals(
            other.isOfficialApplication,
            isOfficialApplication,
          ) &&
          const DeepCollectionEquality().equals(
            other.deviceModel,
            deviceModel,
          ) &&
          const DeepCollectionEquality().equals(other.platform, platform) &&
          const DeepCollectionEquality().equals(
            other.systemVersion,
            systemVersion,
          ) &&
          const DeepCollectionEquality().equals(other.logInDate, logInDate) &&
          const DeepCollectionEquality().equals(
            other.lastActiveDate,
            lastActiveDate,
          ) &&
          const DeepCollectionEquality().equals(other.ipAddress, ipAddress) &&
          const DeepCollectionEquality().equals(other.location, location));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(isCurrent),
    const DeepCollectionEquality().hash(isPasswordPending),
    const DeepCollectionEquality().hash(isUnconfirmed),
    const DeepCollectionEquality().hash(canAcceptSecretChats),
    const DeepCollectionEquality().hash(canAcceptCalls),
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(apiId),
    const DeepCollectionEquality().hash(applicationName),
    const DeepCollectionEquality().hash(applicationVersion),
    const DeepCollectionEquality().hash(isOfficialApplication),
    const DeepCollectionEquality().hash(deviceModel),
    const DeepCollectionEquality().hash(platform),
    const DeepCollectionEquality().hash(systemVersion),
    const DeepCollectionEquality().hash(logInDate),
    const DeepCollectionEquality().hash(lastActiveDate),
    const DeepCollectionEquality().hash(ipAddress),
    const DeepCollectionEquality().hash(location),
  ]);
}

extension SessionsDataClassExtensions on Sessions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Sessions &&
          const DeepCollectionEquality().equals(other.sessions, sessions) &&
          const DeepCollectionEquality().equals(
            other.inactiveSessionTtlDays,
            inactiveSessionTtlDays,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sessions),
    const DeepCollectionEquality().hash(inactiveSessionTtlDays),
  ]);
}

extension UnconfirmedSessionDataClassExtensions on UnconfirmedSession {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UnconfirmedSession &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.logInDate, logInDate) &&
          const DeepCollectionEquality().equals(
            other.deviceModel,
            deviceModel,
          ) &&
          const DeepCollectionEquality().equals(other.location, location));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(logInDate),
    const DeepCollectionEquality().hash(deviceModel),
    const DeepCollectionEquality().hash(location),
  ]);
}

extension ConnectedWebsiteDataClassExtensions on ConnectedWebsite {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ConnectedWebsite &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.domainName, domainName) &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.browser, browser) &&
          const DeepCollectionEquality().equals(other.platform, platform) &&
          const DeepCollectionEquality().equals(other.logInDate, logInDate) &&
          const DeepCollectionEquality().equals(
            other.lastActiveDate,
            lastActiveDate,
          ) &&
          const DeepCollectionEquality().equals(other.ipAddress, ipAddress) &&
          const DeepCollectionEquality().equals(other.location, location));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(domainName),
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(browser),
    const DeepCollectionEquality().hash(platform),
    const DeepCollectionEquality().hash(logInDate),
    const DeepCollectionEquality().hash(lastActiveDate),
    const DeepCollectionEquality().hash(ipAddress),
    const DeepCollectionEquality().hash(location),
  ]);
}

extension ConnectedWebsitesDataClassExtensions on ConnectedWebsites {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ConnectedWebsites &&
          const DeepCollectionEquality().equals(other.websites, websites));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(websites),
  ]);
}

extension ReportReasonDataClassExtensions on ReportReason {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReportReason);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportReasonSpamDataClassExtensions on ReportReasonSpam {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReportReasonSpam);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportReasonViolenceDataClassExtensions on ReportReasonViolence {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReportReasonViolence);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportReasonPornographyDataClassExtensions
    on ReportReasonPornography {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReportReasonPornography);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportReasonChildAbuseDataClassExtensions on ReportReasonChildAbuse {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReportReasonChildAbuse);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportReasonCopyrightDataClassExtensions on ReportReasonCopyright {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReportReasonCopyright);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportReasonUnrelatedLocationDataClassExtensions
    on ReportReasonUnrelatedLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportReasonUnrelatedLocation);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportReasonFakeDataClassExtensions on ReportReasonFake {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReportReasonFake);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportReasonIllegalDrugsDataClassExtensions
    on ReportReasonIllegalDrugs {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReportReasonIllegalDrugs);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportReasonPersonalDetailsDataClassExtensions
    on ReportReasonPersonalDetails {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportReasonPersonalDetails);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportReasonCustomDataClassExtensions on ReportReasonCustom {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReportReasonCustom);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportChatResultDataClassExtensions on ReportChatResult {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReportChatResult);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportChatResultOkDataClassExtensions on ReportChatResultOk {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReportChatResultOk);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportChatResultOptionRequiredDataClassExtensions
    on ReportChatResultOptionRequired {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportChatResultOptionRequired &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.options, options));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(options),
  ]);
}

extension ReportChatResultTextRequiredDataClassExtensions
    on ReportChatResultTextRequired {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportChatResultTextRequired &&
          const DeepCollectionEquality().equals(other.optionId, optionId) &&
          const DeepCollectionEquality().equals(other.isOptional, isOptional));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(optionId),
    const DeepCollectionEquality().hash(isOptional),
  ]);
}

extension ReportChatResultMessagesRequiredDataClassExtensions
    on ReportChatResultMessagesRequired {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportChatResultMessagesRequired);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportStoryResultDataClassExtensions on ReportStoryResult {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReportStoryResult);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportStoryResultOkDataClassExtensions on ReportStoryResultOk {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ReportStoryResultOk);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ReportStoryResultOptionRequiredDataClassExtensions
    on ReportStoryResultOptionRequired {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportStoryResultOptionRequired &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.options, options));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(options),
  ]);
}

extension ReportStoryResultTextRequiredDataClassExtensions
    on ReportStoryResultTextRequired {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportStoryResultTextRequired &&
          const DeepCollectionEquality().equals(other.optionId, optionId) &&
          const DeepCollectionEquality().equals(other.isOptional, isOptional));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(optionId),
    const DeepCollectionEquality().hash(isOptional),
  ]);
}

extension InternalLinkTypeDataClassExtensions on InternalLinkType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InternalLinkType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InternalLinkTypeActiveSessionsDataClassExtensions
    on InternalLinkTypeActiveSessions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeActiveSessions);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InternalLinkTypeAttachmentMenuBotDataClassExtensions
    on InternalLinkTypeAttachmentMenuBot {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeAttachmentMenuBot &&
          const DeepCollectionEquality().equals(other.targetChat, targetChat) &&
          const DeepCollectionEquality().equals(
            other.botUsername,
            botUsername,
          ) &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(targetChat),
    const DeepCollectionEquality().hash(botUsername),
    const DeepCollectionEquality().hash(url),
  ]);
}

extension InternalLinkTypeAuthenticationCodeDataClassExtensions
    on InternalLinkTypeAuthenticationCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeAuthenticationCode &&
          const DeepCollectionEquality().equals(other.code, code));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(code)]);
}

extension InternalLinkTypeBackgroundDataClassExtensions
    on InternalLinkTypeBackground {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeBackground &&
          const DeepCollectionEquality().equals(
            other.backgroundName,
            backgroundName,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(backgroundName),
  ]);
}

extension InternalLinkTypeBotAddToChannelDataClassExtensions
    on InternalLinkTypeBotAddToChannel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeBotAddToChannel &&
          const DeepCollectionEquality().equals(
            other.botUsername,
            botUsername,
          ) &&
          const DeepCollectionEquality().equals(
            other.administratorRights,
            administratorRights,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUsername),
    const DeepCollectionEquality().hash(administratorRights),
  ]);
}

extension InternalLinkTypeBotStartDataClassExtensions
    on InternalLinkTypeBotStart {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeBotStart &&
          const DeepCollectionEquality().equals(
            other.botUsername,
            botUsername,
          ) &&
          const DeepCollectionEquality().equals(
            other.startParameter,
            startParameter,
          ) &&
          const DeepCollectionEquality().equals(other.autostart, autostart));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUsername),
    const DeepCollectionEquality().hash(startParameter),
    const DeepCollectionEquality().hash(autostart),
  ]);
}

extension InternalLinkTypeBotStartInGroupDataClassExtensions
    on InternalLinkTypeBotStartInGroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeBotStartInGroup &&
          const DeepCollectionEquality().equals(
            other.botUsername,
            botUsername,
          ) &&
          const DeepCollectionEquality().equals(
            other.startParameter,
            startParameter,
          ) &&
          const DeepCollectionEquality().equals(
            other.administratorRights,
            administratorRights,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUsername),
    const DeepCollectionEquality().hash(startParameter),
    const DeepCollectionEquality().hash(administratorRights),
  ]);
}

extension InternalLinkTypeBusinessChatDataClassExtensions
    on InternalLinkTypeBusinessChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeBusinessChat &&
          const DeepCollectionEquality().equals(other.linkName, linkName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(linkName),
  ]);
}

extension InternalLinkTypeBuyStarsDataClassExtensions
    on InternalLinkTypeBuyStars {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeBuyStars &&
          const DeepCollectionEquality().equals(other.starCount, starCount) &&
          const DeepCollectionEquality().equals(other.purpose, purpose));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(starCount),
    const DeepCollectionEquality().hash(purpose),
  ]);
}

extension InternalLinkTypeChangePhoneNumberDataClassExtensions
    on InternalLinkTypeChangePhoneNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeChangePhoneNumber);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InternalLinkTypeChatAffiliateProgramDataClassExtensions
    on InternalLinkTypeChatAffiliateProgram {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeChatAffiliateProgram &&
          const DeepCollectionEquality().equals(other.username, username) &&
          const DeepCollectionEquality().equals(other.referrer, referrer));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(username),
    const DeepCollectionEquality().hash(referrer),
  ]);
}

extension InternalLinkTypeChatBoostDataClassExtensions
    on InternalLinkTypeChatBoost {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeChatBoost &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(url)]);
}

extension InternalLinkTypeChatFolderInviteDataClassExtensions
    on InternalLinkTypeChatFolderInvite {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeChatFolderInvite &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inviteLink),
  ]);
}

extension InternalLinkTypeChatFolderSettingsDataClassExtensions
    on InternalLinkTypeChatFolderSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeChatFolderSettings);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InternalLinkTypeChatInviteDataClassExtensions
    on InternalLinkTypeChatInvite {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeChatInvite &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inviteLink),
  ]);
}

extension InternalLinkTypeDefaultMessageAutoDeleteTimerSettingsDataClassExtensions
    on InternalLinkTypeDefaultMessageAutoDeleteTimerSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeDefaultMessageAutoDeleteTimerSettings);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InternalLinkTypeEditProfileSettingsDataClassExtensions
    on InternalLinkTypeEditProfileSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeEditProfileSettings);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InternalLinkTypeGameDataClassExtensions on InternalLinkTypeGame {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeGame &&
          const DeepCollectionEquality().equals(
            other.botUsername,
            botUsername,
          ) &&
          const DeepCollectionEquality().equals(
            other.gameShortName,
            gameShortName,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUsername),
    const DeepCollectionEquality().hash(gameShortName),
  ]);
}

extension InternalLinkTypeGroupCallDataClassExtensions
    on InternalLinkTypeGroupCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeGroupCall &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inviteLink),
  ]);
}

extension InternalLinkTypeInstantViewDataClassExtensions
    on InternalLinkTypeInstantView {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeInstantView &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(
            other.fallbackUrl,
            fallbackUrl,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(fallbackUrl),
  ]);
}

extension InternalLinkTypeInvoiceDataClassExtensions
    on InternalLinkTypeInvoice {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeInvoice &&
          const DeepCollectionEquality().equals(
            other.invoiceName,
            invoiceName,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(invoiceName),
  ]);
}

extension InternalLinkTypeLanguagePackDataClassExtensions
    on InternalLinkTypeLanguagePack {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeLanguagePack &&
          const DeepCollectionEquality().equals(
            other.languagePackId,
            languagePackId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(languagePackId),
  ]);
}

extension InternalLinkTypeLanguageSettingsDataClassExtensions
    on InternalLinkTypeLanguageSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeLanguageSettings);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InternalLinkTypeMainWebAppDataClassExtensions
    on InternalLinkTypeMainWebApp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeMainWebApp &&
          const DeepCollectionEquality().equals(
            other.botUsername,
            botUsername,
          ) &&
          const DeepCollectionEquality().equals(
            other.startParameter,
            startParameter,
          ) &&
          const DeepCollectionEquality().equals(other.mode, mode));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUsername),
    const DeepCollectionEquality().hash(startParameter),
    const DeepCollectionEquality().hash(mode),
  ]);
}

extension InternalLinkTypeMessageDataClassExtensions
    on InternalLinkTypeMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeMessage &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(url)]);
}

extension InternalLinkTypeMessageDraftDataClassExtensions
    on InternalLinkTypeMessageDraft {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeMessageDraft &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(
            other.containsLink,
            containsLink,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(containsLink),
  ]);
}

extension InternalLinkTypeMyStarsDataClassExtensions
    on InternalLinkTypeMyStars {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InternalLinkTypeMyStars);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InternalLinkTypePassportDataRequestDataClassExtensions
    on InternalLinkTypePassportDataRequest {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypePassportDataRequest &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.scope, scope) &&
          const DeepCollectionEquality().equals(other.publicKey, publicKey) &&
          const DeepCollectionEquality().equals(other.nonce, nonce) &&
          const DeepCollectionEquality().equals(
            other.callbackUrl,
            callbackUrl,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(scope),
    const DeepCollectionEquality().hash(publicKey),
    const DeepCollectionEquality().hash(nonce),
    const DeepCollectionEquality().hash(callbackUrl),
  ]);
}

extension InternalLinkTypePhoneNumberConfirmationDataClassExtensions
    on InternalLinkTypePhoneNumberConfirmation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypePhoneNumberConfirmation &&
          const DeepCollectionEquality().equals(other.hash, hash) &&
          const DeepCollectionEquality().equals(
            other.phoneNumber,
            phoneNumber,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(hash),
    const DeepCollectionEquality().hash(phoneNumber),
  ]);
}

extension InternalLinkTypePremiumFeaturesDataClassExtensions
    on InternalLinkTypePremiumFeatures {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypePremiumFeatures &&
          const DeepCollectionEquality().equals(other.referrer, referrer));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(referrer),
  ]);
}

extension InternalLinkTypePremiumGiftDataClassExtensions
    on InternalLinkTypePremiumGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypePremiumGift &&
          const DeepCollectionEquality().equals(other.referrer, referrer));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(referrer),
  ]);
}

extension InternalLinkTypePremiumGiftCodeDataClassExtensions
    on InternalLinkTypePremiumGiftCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypePremiumGiftCode &&
          const DeepCollectionEquality().equals(other.code, code));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(code)]);
}

extension InternalLinkTypePrivacyAndSecuritySettingsDataClassExtensions
    on InternalLinkTypePrivacyAndSecuritySettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypePrivacyAndSecuritySettings);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InternalLinkTypeProxyDataClassExtensions on InternalLinkTypeProxy {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeProxy &&
          const DeepCollectionEquality().equals(other.server, server) &&
          const DeepCollectionEquality().equals(other.port, port) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(server),
    const DeepCollectionEquality().hash(port),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension InternalLinkTypePublicChatDataClassExtensions
    on InternalLinkTypePublicChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypePublicChat &&
          const DeepCollectionEquality().equals(
            other.chatUsername,
            chatUsername,
          ) &&
          const DeepCollectionEquality().equals(other.draftText, draftText) &&
          const DeepCollectionEquality().equals(
            other.openProfile,
            openProfile,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatUsername),
    const DeepCollectionEquality().hash(draftText),
    const DeepCollectionEquality().hash(openProfile),
  ]);
}

extension InternalLinkTypeQrCodeAuthenticationDataClassExtensions
    on InternalLinkTypeQrCodeAuthentication {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeQrCodeAuthentication);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InternalLinkTypeRestorePurchasesDataClassExtensions
    on InternalLinkTypeRestorePurchases {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeRestorePurchases);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InternalLinkTypeSettingsDataClassExtensions
    on InternalLinkTypeSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is InternalLinkTypeSettings);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InternalLinkTypeStickerSetDataClassExtensions
    on InternalLinkTypeStickerSet {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeStickerSet &&
          const DeepCollectionEquality().equals(
            other.stickerSetName,
            stickerSetName,
          ) &&
          const DeepCollectionEquality().equals(
            other.expectCustomEmoji,
            expectCustomEmoji,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerSetName),
    const DeepCollectionEquality().hash(expectCustomEmoji),
  ]);
}

extension InternalLinkTypeStoryDataClassExtensions on InternalLinkTypeStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeStory &&
          const DeepCollectionEquality().equals(
            other.storyPosterUsername,
            storyPosterUsername,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterUsername),
    const DeepCollectionEquality().hash(storyId),
  ]);
}

extension InternalLinkTypeThemeDataClassExtensions on InternalLinkTypeTheme {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeTheme &&
          const DeepCollectionEquality().equals(other.themeName, themeName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(themeName),
  ]);
}

extension InternalLinkTypeThemeSettingsDataClassExtensions
    on InternalLinkTypeThemeSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeThemeSettings);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InternalLinkTypeUnknownDeepLinkDataClassExtensions
    on InternalLinkTypeUnknownDeepLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeUnknownDeepLink &&
          const DeepCollectionEquality().equals(other.link, link));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(link)]);
}

extension InternalLinkTypeUnsupportedProxyDataClassExtensions
    on InternalLinkTypeUnsupportedProxy {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeUnsupportedProxy);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension InternalLinkTypeUpgradedGiftDataClassExtensions
    on InternalLinkTypeUpgradedGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeUpgradedGift &&
          const DeepCollectionEquality().equals(other.name, name));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(name)]);
}

extension InternalLinkTypeUserPhoneNumberDataClassExtensions
    on InternalLinkTypeUserPhoneNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeUserPhoneNumber &&
          const DeepCollectionEquality().equals(
            other.phoneNumber,
            phoneNumber,
          ) &&
          const DeepCollectionEquality().equals(other.draftText, draftText) &&
          const DeepCollectionEquality().equals(
            other.openProfile,
            openProfile,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(phoneNumber),
    const DeepCollectionEquality().hash(draftText),
    const DeepCollectionEquality().hash(openProfile),
  ]);
}

extension InternalLinkTypeUserTokenDataClassExtensions
    on InternalLinkTypeUserToken {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeUserToken &&
          const DeepCollectionEquality().equals(other.token, token));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(token)]);
}

extension InternalLinkTypeVideoChatDataClassExtensions
    on InternalLinkTypeVideoChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeVideoChat &&
          const DeepCollectionEquality().equals(
            other.chatUsername,
            chatUsername,
          ) &&
          const DeepCollectionEquality().equals(other.inviteHash, inviteHash) &&
          const DeepCollectionEquality().equals(
            other.isLiveStream,
            isLiveStream,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatUsername),
    const DeepCollectionEquality().hash(inviteHash),
    const DeepCollectionEquality().hash(isLiveStream),
  ]);
}

extension InternalLinkTypeWebAppDataClassExtensions on InternalLinkTypeWebApp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InternalLinkTypeWebApp &&
          const DeepCollectionEquality().equals(
            other.botUsername,
            botUsername,
          ) &&
          const DeepCollectionEquality().equals(
            other.webAppShortName,
            webAppShortName,
          ) &&
          const DeepCollectionEquality().equals(
            other.startParameter,
            startParameter,
          ) &&
          const DeepCollectionEquality().equals(other.mode, mode));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUsername),
    const DeepCollectionEquality().hash(webAppShortName),
    const DeepCollectionEquality().hash(startParameter),
    const DeepCollectionEquality().hash(mode),
  ]);
}

extension MessageLinkDataClassExtensions on MessageLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageLink &&
          const DeepCollectionEquality().equals(other.link, link) &&
          const DeepCollectionEquality().equals(other.isPublic, isPublic));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(link),
    const DeepCollectionEquality().hash(isPublic),
  ]);
}

extension MessageLinkInfoDataClassExtensions on MessageLinkInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageLinkInfo &&
          const DeepCollectionEquality().equals(other.isPublic, isPublic) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ) &&
          const DeepCollectionEquality().equals(other.message, message) &&
          const DeepCollectionEquality().equals(
            other.mediaTimestamp,
            mediaTimestamp,
          ) &&
          const DeepCollectionEquality().equals(other.forAlbum, forAlbum));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isPublic),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
    const DeepCollectionEquality().hash(message),
    const DeepCollectionEquality().hash(mediaTimestamp),
    const DeepCollectionEquality().hash(forAlbum),
  ]);
}

extension ChatBoostLinkDataClassExtensions on ChatBoostLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatBoostLink &&
          const DeepCollectionEquality().equals(other.link, link) &&
          const DeepCollectionEquality().equals(other.isPublic, isPublic));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(link),
    const DeepCollectionEquality().hash(isPublic),
  ]);
}

extension ChatBoostLinkInfoDataClassExtensions on ChatBoostLinkInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatBoostLinkInfo &&
          const DeepCollectionEquality().equals(other.isPublic, isPublic) &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isPublic),
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension BlockListDataClassExtensions on BlockList {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is BlockList);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BlockListMainDataClassExtensions on BlockListMain {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is BlockListMain);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BlockListStoriesDataClassExtensions on BlockListStories {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is BlockListStories);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeDataClassExtensions on FileType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeNoneDataClassExtensions on FileTypeNone {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypeNone);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeAnimationDataClassExtensions on FileTypeAnimation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypeAnimation);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeAudioDataClassExtensions on FileTypeAudio {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypeAudio);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeDocumentDataClassExtensions on FileTypeDocument {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypeDocument);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeNotificationSoundDataClassExtensions
    on FileTypeNotificationSound {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypeNotificationSound);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypePhotoDataClassExtensions on FileTypePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypePhoto);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypePhotoStoryDataClassExtensions on FileTypePhotoStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypePhotoStory);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeProfilePhotoDataClassExtensions on FileTypeProfilePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypeProfilePhoto);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeSecretDataClassExtensions on FileTypeSecret {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypeSecret);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeSecretThumbnailDataClassExtensions
    on FileTypeSecretThumbnail {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypeSecretThumbnail);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeSecureDataClassExtensions on FileTypeSecure {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypeSecure);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeSelfDestructingPhotoDataClassExtensions
    on FileTypeSelfDestructingPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FileTypeSelfDestructingPhoto);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeSelfDestructingVideoDataClassExtensions
    on FileTypeSelfDestructingVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FileTypeSelfDestructingVideo);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeSelfDestructingVideoNoteDataClassExtensions
    on FileTypeSelfDestructingVideoNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FileTypeSelfDestructingVideoNote);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeSelfDestructingVoiceNoteDataClassExtensions
    on FileTypeSelfDestructingVoiceNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FileTypeSelfDestructingVoiceNote);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeStickerDataClassExtensions on FileTypeSticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypeSticker);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeThumbnailDataClassExtensions on FileTypeThumbnail {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypeThumbnail);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeUnknownDataClassExtensions on FileTypeUnknown {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypeUnknown);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeVideoDataClassExtensions on FileTypeVideo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypeVideo);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeVideoNoteDataClassExtensions on FileTypeVideoNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypeVideoNote);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeVideoStoryDataClassExtensions on FileTypeVideoStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypeVideoStory);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeVoiceNoteDataClassExtensions on FileTypeVoiceNote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypeVoiceNote);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FileTypeWallpaperDataClassExtensions on FileTypeWallpaper {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is FileTypeWallpaper);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StorageStatisticsByFileTypeDataClassExtensions
    on StorageStatisticsByFileType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StorageStatisticsByFileType &&
          const DeepCollectionEquality().equals(other.fileType, fileType) &&
          const DeepCollectionEquality().equals(other.size, size) &&
          const DeepCollectionEquality().equals(other.count, count));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileType),
    const DeepCollectionEquality().hash(size),
    const DeepCollectionEquality().hash(count),
  ]);
}

extension StorageStatisticsByChatDataClassExtensions
    on StorageStatisticsByChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StorageStatisticsByChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.size, size) &&
          const DeepCollectionEquality().equals(other.count, count) &&
          const DeepCollectionEquality().equals(other.byFileType, byFileType));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(size),
    const DeepCollectionEquality().hash(count),
    const DeepCollectionEquality().hash(byFileType),
  ]);
}

extension StorageStatisticsDataClassExtensions on StorageStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StorageStatistics &&
          const DeepCollectionEquality().equals(other.size, size) &&
          const DeepCollectionEquality().equals(other.count, count) &&
          const DeepCollectionEquality().equals(other.byChat, byChat));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(size),
    const DeepCollectionEquality().hash(count),
    const DeepCollectionEquality().hash(byChat),
  ]);
}

extension StorageStatisticsFastDataClassExtensions on StorageStatisticsFast {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StorageStatisticsFast &&
          const DeepCollectionEquality().equals(other.filesSize, filesSize) &&
          const DeepCollectionEquality().equals(other.fileCount, fileCount) &&
          const DeepCollectionEquality().equals(
            other.databaseSize,
            databaseSize,
          ) &&
          const DeepCollectionEquality().equals(
            other.languagePackDatabaseSize,
            languagePackDatabaseSize,
          ) &&
          const DeepCollectionEquality().equals(other.logSize, logSize));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(filesSize),
    const DeepCollectionEquality().hash(fileCount),
    const DeepCollectionEquality().hash(databaseSize),
    const DeepCollectionEquality().hash(languagePackDatabaseSize),
    const DeepCollectionEquality().hash(logSize),
  ]);
}

extension DatabaseStatisticsDataClassExtensions on DatabaseStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DatabaseStatistics &&
          const DeepCollectionEquality().equals(other.statistics, statistics));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(statistics),
  ]);
}

extension NetworkTypeDataClassExtensions on NetworkType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is NetworkType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension NetworkTypeNoneDataClassExtensions on NetworkTypeNone {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is NetworkTypeNone);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension NetworkTypeMobileDataClassExtensions on NetworkTypeMobile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is NetworkTypeMobile);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension NetworkTypeMobileRoamingDataClassExtensions
    on NetworkTypeMobileRoaming {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is NetworkTypeMobileRoaming);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension NetworkTypeWiFiDataClassExtensions on NetworkTypeWiFi {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is NetworkTypeWiFi);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension NetworkTypeOtherDataClassExtensions on NetworkTypeOther {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is NetworkTypeOther);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension NetworkStatisticsEntryDataClassExtensions on NetworkStatisticsEntry {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is NetworkStatisticsEntry);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension NetworkStatisticsEntryFileDataClassExtensions
    on NetworkStatisticsEntryFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is NetworkStatisticsEntryFile &&
          const DeepCollectionEquality().equals(other.fileType, fileType) &&
          const DeepCollectionEquality().equals(
            other.networkType,
            networkType,
          ) &&
          const DeepCollectionEquality().equals(other.sentBytes, sentBytes) &&
          const DeepCollectionEquality().equals(
            other.receivedBytes,
            receivedBytes,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileType),
    const DeepCollectionEquality().hash(networkType),
    const DeepCollectionEquality().hash(sentBytes),
    const DeepCollectionEquality().hash(receivedBytes),
  ]);
}

extension NetworkStatisticsEntryCallDataClassExtensions
    on NetworkStatisticsEntryCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is NetworkStatisticsEntryCall &&
          const DeepCollectionEquality().equals(
            other.networkType,
            networkType,
          ) &&
          const DeepCollectionEquality().equals(other.sentBytes, sentBytes) &&
          const DeepCollectionEquality().equals(
            other.receivedBytes,
            receivedBytes,
          ) &&
          const DeepCollectionEquality().equals(other.duration, duration));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(networkType),
    const DeepCollectionEquality().hash(sentBytes),
    const DeepCollectionEquality().hash(receivedBytes),
    const DeepCollectionEquality().hash(duration),
  ]);
}

extension NetworkStatisticsDataClassExtensions on NetworkStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is NetworkStatistics &&
          const DeepCollectionEquality().equals(other.sinceDate, sinceDate) &&
          const DeepCollectionEquality().equals(other.entries, entries));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sinceDate),
    const DeepCollectionEquality().hash(entries),
  ]);
}

extension AutoDownloadSettingsDataClassExtensions on AutoDownloadSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AutoDownloadSettings &&
          const DeepCollectionEquality().equals(
            other.isAutoDownloadEnabled,
            isAutoDownloadEnabled,
          ) &&
          const DeepCollectionEquality().equals(
            other.maxPhotoFileSize,
            maxPhotoFileSize,
          ) &&
          const DeepCollectionEquality().equals(
            other.maxVideoFileSize,
            maxVideoFileSize,
          ) &&
          const DeepCollectionEquality().equals(
            other.maxOtherFileSize,
            maxOtherFileSize,
          ) &&
          const DeepCollectionEquality().equals(
            other.videoUploadBitrate,
            videoUploadBitrate,
          ) &&
          const DeepCollectionEquality().equals(
            other.preloadLargeVideos,
            preloadLargeVideos,
          ) &&
          const DeepCollectionEquality().equals(
            other.preloadNextAudio,
            preloadNextAudio,
          ) &&
          const DeepCollectionEquality().equals(
            other.preloadStories,
            preloadStories,
          ) &&
          const DeepCollectionEquality().equals(
            other.useLessDataForCalls,
            useLessDataForCalls,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isAutoDownloadEnabled),
    const DeepCollectionEquality().hash(maxPhotoFileSize),
    const DeepCollectionEquality().hash(maxVideoFileSize),
    const DeepCollectionEquality().hash(maxOtherFileSize),
    const DeepCollectionEquality().hash(videoUploadBitrate),
    const DeepCollectionEquality().hash(preloadLargeVideos),
    const DeepCollectionEquality().hash(preloadNextAudio),
    const DeepCollectionEquality().hash(preloadStories),
    const DeepCollectionEquality().hash(useLessDataForCalls),
  ]);
}

extension AutoDownloadSettingsPresetsDataClassExtensions
    on AutoDownloadSettingsPresets {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AutoDownloadSettingsPresets &&
          const DeepCollectionEquality().equals(other.low, low) &&
          const DeepCollectionEquality().equals(other.medium, medium) &&
          const DeepCollectionEquality().equals(other.high, high));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(low),
    const DeepCollectionEquality().hash(medium),
    const DeepCollectionEquality().hash(high),
  ]);
}

extension AutosaveSettingsScopeDataClassExtensions on AutosaveSettingsScope {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is AutosaveSettingsScope);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AutosaveSettingsScopePrivateChatsDataClassExtensions
    on AutosaveSettingsScopePrivateChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AutosaveSettingsScopePrivateChats);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AutosaveSettingsScopeGroupChatsDataClassExtensions
    on AutosaveSettingsScopeGroupChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AutosaveSettingsScopeGroupChats);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AutosaveSettingsScopeChannelChatsDataClassExtensions
    on AutosaveSettingsScopeChannelChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AutosaveSettingsScopeChannelChats);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AutosaveSettingsScopeChatDataClassExtensions
    on AutosaveSettingsScopeChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AutosaveSettingsScopeChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension ScopeAutosaveSettingsDataClassExtensions on ScopeAutosaveSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ScopeAutosaveSettings &&
          const DeepCollectionEquality().equals(
            other.autosavePhotos,
            autosavePhotos,
          ) &&
          const DeepCollectionEquality().equals(
            other.autosaveVideos,
            autosaveVideos,
          ) &&
          const DeepCollectionEquality().equals(
            other.maxVideoFileSize,
            maxVideoFileSize,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(autosavePhotos),
    const DeepCollectionEquality().hash(autosaveVideos),
    const DeepCollectionEquality().hash(maxVideoFileSize),
  ]);
}

extension AutosaveSettingsExceptionDataClassExtensions
    on AutosaveSettingsException {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AutosaveSettingsException &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.settings, settings));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(settings),
  ]);
}

extension AutosaveSettingsDataClassExtensions on AutosaveSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AutosaveSettings &&
          const DeepCollectionEquality().equals(
            other.privateChatSettings,
            privateChatSettings,
          ) &&
          const DeepCollectionEquality().equals(
            other.groupSettings,
            groupSettings,
          ) &&
          const DeepCollectionEquality().equals(
            other.channelSettings,
            channelSettings,
          ) &&
          const DeepCollectionEquality().equals(other.exceptions, exceptions));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(privateChatSettings),
    const DeepCollectionEquality().hash(groupSettings),
    const DeepCollectionEquality().hash(channelSettings),
    const DeepCollectionEquality().hash(exceptions),
  ]);
}

extension ConnectionStateDataClassExtensions on ConnectionState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ConnectionState);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ConnectionStateWaitingForNetworkDataClassExtensions
    on ConnectionStateWaitingForNetwork {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ConnectionStateWaitingForNetwork);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ConnectionStateConnectingToProxyDataClassExtensions
    on ConnectionStateConnectingToProxy {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ConnectionStateConnectingToProxy);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ConnectionStateConnectingDataClassExtensions
    on ConnectionStateConnecting {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ConnectionStateConnecting);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ConnectionStateUpdatingDataClassExtensions
    on ConnectionStateUpdating {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ConnectionStateUpdating);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ConnectionStateReadyDataClassExtensions on ConnectionStateReady {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ConnectionStateReady);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TopChatCategoryDataClassExtensions on TopChatCategory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TopChatCategory);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TopChatCategoryUsersDataClassExtensions on TopChatCategoryUsers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TopChatCategoryUsers);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TopChatCategoryBotsDataClassExtensions on TopChatCategoryBots {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TopChatCategoryBots);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TopChatCategoryGroupsDataClassExtensions on TopChatCategoryGroups {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TopChatCategoryGroups);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TopChatCategoryChannelsDataClassExtensions
    on TopChatCategoryChannels {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TopChatCategoryChannels);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TopChatCategoryInlineBotsDataClassExtensions
    on TopChatCategoryInlineBots {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TopChatCategoryInlineBots);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TopChatCategoryWebAppBotsDataClassExtensions
    on TopChatCategoryWebAppBots {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TopChatCategoryWebAppBots);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TopChatCategoryCallsDataClassExtensions on TopChatCategoryCalls {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TopChatCategoryCalls);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TopChatCategoryForwardChatsDataClassExtensions
    on TopChatCategoryForwardChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TopChatCategoryForwardChats);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension FoundPositionDataClassExtensions on FoundPosition {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FoundPosition &&
          const DeepCollectionEquality().equals(other.position, position));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(position),
  ]);
}

extension FoundPositionsDataClassExtensions on FoundPositions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FoundPositions &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(other.positions, positions));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(positions),
  ]);
}

extension TMeUrlTypeDataClassExtensions on TMeUrlType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TMeUrlType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TMeUrlTypeUserDataClassExtensions on TMeUrlTypeUser {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TMeUrlTypeUser &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension TMeUrlTypeSupergroupDataClassExtensions on TMeUrlTypeSupergroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TMeUrlTypeSupergroup &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
  ]);
}

extension TMeUrlTypeChatInviteDataClassExtensions on TMeUrlTypeChatInvite {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TMeUrlTypeChatInvite &&
          const DeepCollectionEquality().equals(other.info, info));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(info)]);
}

extension TMeUrlTypeStickerSetDataClassExtensions on TMeUrlTypeStickerSet {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TMeUrlTypeStickerSet &&
          const DeepCollectionEquality().equals(
            other.stickerSetId,
            stickerSetId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerSetId),
  ]);
}

extension TMeUrlDataClassExtensions on TMeUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TMeUrl &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension TMeUrlsDataClassExtensions on TMeUrls {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TMeUrls &&
          const DeepCollectionEquality().equals(other.urls, urls));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(urls)]);
}

extension SuggestedActionDataClassExtensions on SuggestedAction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is SuggestedAction);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SuggestedActionEnableArchiveAndMuteNewChatsDataClassExtensions
    on SuggestedActionEnableArchiveAndMuteNewChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SuggestedActionEnableArchiveAndMuteNewChats);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SuggestedActionCheckPasswordDataClassExtensions
    on SuggestedActionCheckPassword {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SuggestedActionCheckPassword);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SuggestedActionCheckPhoneNumberDataClassExtensions
    on SuggestedActionCheckPhoneNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SuggestedActionCheckPhoneNumber);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SuggestedActionViewChecksHintDataClassExtensions
    on SuggestedActionViewChecksHint {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SuggestedActionViewChecksHint);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SuggestedActionConvertToBroadcastGroupDataClassExtensions
    on SuggestedActionConvertToBroadcastGroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SuggestedActionConvertToBroadcastGroup &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
  ]);
}

extension SuggestedActionSetPasswordDataClassExtensions
    on SuggestedActionSetPassword {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SuggestedActionSetPassword &&
          const DeepCollectionEquality().equals(
            other.authorizationDelay,
            authorizationDelay,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(authorizationDelay),
  ]);
}

extension SuggestedActionUpgradePremiumDataClassExtensions
    on SuggestedActionUpgradePremium {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SuggestedActionUpgradePremium);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SuggestedActionRestorePremiumDataClassExtensions
    on SuggestedActionRestorePremium {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SuggestedActionRestorePremium);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SuggestedActionSubscribeToAnnualPremiumDataClassExtensions
    on SuggestedActionSubscribeToAnnualPremium {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SuggestedActionSubscribeToAnnualPremium);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SuggestedActionGiftPremiumForChristmasDataClassExtensions
    on SuggestedActionGiftPremiumForChristmas {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SuggestedActionGiftPremiumForChristmas);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SuggestedActionSetBirthdateDataClassExtensions
    on SuggestedActionSetBirthdate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SuggestedActionSetBirthdate);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SuggestedActionSetProfilePhotoDataClassExtensions
    on SuggestedActionSetProfilePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SuggestedActionSetProfilePhoto);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SuggestedActionExtendPremiumDataClassExtensions
    on SuggestedActionExtendPremium {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SuggestedActionExtendPremium &&
          const DeepCollectionEquality().equals(
            other.managePremiumSubscriptionUrl,
            managePremiumSubscriptionUrl,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(managePremiumSubscriptionUrl),
  ]);
}

extension SuggestedActionExtendStarSubscriptionsDataClassExtensions
    on SuggestedActionExtendStarSubscriptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SuggestedActionExtendStarSubscriptions);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SuggestedActionCustomDataClassExtensions on SuggestedActionCustom {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SuggestedActionCustom &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ) &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(description),
    const DeepCollectionEquality().hash(url),
  ]);
}

extension CountDataClassExtensions on Count {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Count &&
          const DeepCollectionEquality().equals(other.count, count));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(count)]);
}

extension TextDataClassExtensions on Text {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Text &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(text)]);
}

extension DataDataClassExtensions on Data {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Data &&
          const DeepCollectionEquality().equals(other.data, data));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(data)]);
}

extension SecondsDataClassExtensions on Seconds {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Seconds &&
          const DeepCollectionEquality().equals(other.seconds, seconds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(seconds),
  ]);
}

extension FileDownloadedPrefixSizeDataClassExtensions
    on FileDownloadedPrefixSize {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FileDownloadedPrefixSize &&
          const DeepCollectionEquality().equals(other.size, size));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(size)]);
}

extension StarCountDataClassExtensions on StarCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarCount &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension DeepLinkInfoDataClassExtensions on DeepLinkInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeepLinkInfo &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(
            other.needUpdateApplication,
            needUpdateApplication,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(needUpdateApplication),
  ]);
}

extension TextParseModeDataClassExtensions on TextParseMode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TextParseMode);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TextParseModeMarkdownDataClassExtensions on TextParseModeMarkdown {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TextParseModeMarkdown &&
          const DeepCollectionEquality().equals(other.version, version));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(version),
  ]);
}

extension TextParseModeHTMLDataClassExtensions on TextParseModeHTML {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TextParseModeHTML);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ProxyTypeDataClassExtensions on ProxyType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ProxyType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ProxyTypeSocks5DataClassExtensions on ProxyTypeSocks5 {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ProxyTypeSocks5 &&
          const DeepCollectionEquality().equals(other.username, username) &&
          const DeepCollectionEquality().equals(other.password, password));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(username),
    const DeepCollectionEquality().hash(password),
  ]);
}

extension ProxyTypeHttpDataClassExtensions on ProxyTypeHttp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ProxyTypeHttp &&
          const DeepCollectionEquality().equals(other.username, username) &&
          const DeepCollectionEquality().equals(other.password, password) &&
          const DeepCollectionEquality().equals(other.httpOnly, httpOnly));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(username),
    const DeepCollectionEquality().hash(password),
    const DeepCollectionEquality().hash(httpOnly),
  ]);
}

extension ProxyTypeMtprotoDataClassExtensions on ProxyTypeMtproto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ProxyTypeMtproto &&
          const DeepCollectionEquality().equals(other.secret, secret));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(secret),
  ]);
}

extension ProxyDataClassExtensions on Proxy {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Proxy &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.server, server) &&
          const DeepCollectionEquality().equals(other.port, port) &&
          const DeepCollectionEquality().equals(
            other.lastUsedDate,
            lastUsedDate,
          ) &&
          const DeepCollectionEquality().equals(other.isEnabled, isEnabled) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(server),
    const DeepCollectionEquality().hash(port),
    const DeepCollectionEquality().hash(lastUsedDate),
    const DeepCollectionEquality().hash(isEnabled),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension ProxiesDataClassExtensions on Proxies {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Proxies &&
          const DeepCollectionEquality().equals(other.proxies, proxies));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(proxies),
  ]);
}

extension InputStickerDataClassExtensions on InputSticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InputSticker &&
          const DeepCollectionEquality().equals(other.sticker, sticker) &&
          const DeepCollectionEquality().equals(other.format, format) &&
          const DeepCollectionEquality().equals(other.emojis, emojis) &&
          const DeepCollectionEquality().equals(
            other.maskPosition,
            maskPosition,
          ) &&
          const DeepCollectionEquality().equals(other.keywords, keywords));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sticker),
    const DeepCollectionEquality().hash(format),
    const DeepCollectionEquality().hash(emojis),
    const DeepCollectionEquality().hash(maskPosition),
    const DeepCollectionEquality().hash(keywords),
  ]);
}

extension DateRangeDataClassExtensions on DateRange {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DateRange &&
          const DeepCollectionEquality().equals(other.startDate, startDate) &&
          const DeepCollectionEquality().equals(other.endDate, endDate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(startDate),
    const DeepCollectionEquality().hash(endDate),
  ]);
}

extension StatisticalValueDataClassExtensions on StatisticalValue {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StatisticalValue &&
          const DeepCollectionEquality().equals(other.value, value) &&
          const DeepCollectionEquality().equals(
            other.previousValue,
            previousValue,
          ) &&
          const DeepCollectionEquality().equals(
            other.growthRatePercentage,
            growthRatePercentage,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(value),
    const DeepCollectionEquality().hash(previousValue),
    const DeepCollectionEquality().hash(growthRatePercentage),
  ]);
}

extension StatisticalGraphDataClassExtensions on StatisticalGraph {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is StatisticalGraph);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension StatisticalGraphDataDataClassExtensions on StatisticalGraphData {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StatisticalGraphData &&
          const DeepCollectionEquality().equals(other.jsonData, jsonData) &&
          const DeepCollectionEquality().equals(other.zoomToken, zoomToken));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(jsonData),
    const DeepCollectionEquality().hash(zoomToken),
  ]);
}

extension StatisticalGraphAsyncDataClassExtensions on StatisticalGraphAsync {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StatisticalGraphAsync &&
          const DeepCollectionEquality().equals(other.token, token));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(token)]);
}

extension StatisticalGraphErrorDataClassExtensions on StatisticalGraphError {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StatisticalGraphError &&
          const DeepCollectionEquality().equals(
            other.errorMessage,
            errorMessage,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(errorMessage),
  ]);
}

extension ChatStatisticsObjectTypeDataClassExtensions
    on ChatStatisticsObjectType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatStatisticsObjectType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatStatisticsObjectTypeMessageDataClassExtensions
    on ChatStatisticsObjectTypeMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatStatisticsObjectTypeMessage &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension ChatStatisticsObjectTypeStoryDataClassExtensions
    on ChatStatisticsObjectTypeStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatStatisticsObjectTypeStory &&
          const DeepCollectionEquality().equals(other.storyId, storyId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyId),
  ]);
}

extension ChatStatisticsInteractionInfoDataClassExtensions
    on ChatStatisticsInteractionInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatStatisticsInteractionInfo &&
          const DeepCollectionEquality().equals(other.objectType, objectType) &&
          const DeepCollectionEquality().equals(other.viewCount, viewCount) &&
          const DeepCollectionEquality().equals(
            other.forwardCount,
            forwardCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.reactionCount,
            reactionCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(objectType),
    const DeepCollectionEquality().hash(viewCount),
    const DeepCollectionEquality().hash(forwardCount),
    const DeepCollectionEquality().hash(reactionCount),
  ]);
}

extension ChatStatisticsMessageSenderInfoDataClassExtensions
    on ChatStatisticsMessageSenderInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatStatisticsMessageSenderInfo &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.sentMessageCount,
            sentMessageCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.averageCharacterCount,
            averageCharacterCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(sentMessageCount),
    const DeepCollectionEquality().hash(averageCharacterCount),
  ]);
}

extension ChatStatisticsAdministratorActionsInfoDataClassExtensions
    on ChatStatisticsAdministratorActionsInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatStatisticsAdministratorActionsInfo &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.deletedMessageCount,
            deletedMessageCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.bannedUserCount,
            bannedUserCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.restrictedUserCount,
            restrictedUserCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(deletedMessageCount),
    const DeepCollectionEquality().hash(bannedUserCount),
    const DeepCollectionEquality().hash(restrictedUserCount),
  ]);
}

extension ChatStatisticsInviterInfoDataClassExtensions
    on ChatStatisticsInviterInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatStatisticsInviterInfo &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.addedMemberCount,
            addedMemberCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(addedMemberCount),
  ]);
}

extension ChatStatisticsDataClassExtensions on ChatStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatStatistics);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatStatisticsSupergroupDataClassExtensions
    on ChatStatisticsSupergroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatStatisticsSupergroup &&
          const DeepCollectionEquality().equals(other.period, period) &&
          const DeepCollectionEquality().equals(
            other.memberCount,
            memberCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.messageCount,
            messageCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.viewerCount,
            viewerCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.senderCount,
            senderCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.memberCountGraph,
            memberCountGraph,
          ) &&
          const DeepCollectionEquality().equals(other.joinGraph, joinGraph) &&
          const DeepCollectionEquality().equals(
            other.joinBySourceGraph,
            joinBySourceGraph,
          ) &&
          const DeepCollectionEquality().equals(
            other.languageGraph,
            languageGraph,
          ) &&
          const DeepCollectionEquality().equals(
            other.messageContentGraph,
            messageContentGraph,
          ) &&
          const DeepCollectionEquality().equals(
            other.actionGraph,
            actionGraph,
          ) &&
          const DeepCollectionEquality().equals(other.dayGraph, dayGraph) &&
          const DeepCollectionEquality().equals(other.weekGraph, weekGraph) &&
          const DeepCollectionEquality().equals(other.topSenders, topSenders) &&
          const DeepCollectionEquality().equals(
            other.topAdministrators,
            topAdministrators,
          ) &&
          const DeepCollectionEquality().equals(
            other.topInviters,
            topInviters,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(period),
    const DeepCollectionEquality().hash(memberCount),
    const DeepCollectionEquality().hash(messageCount),
    const DeepCollectionEquality().hash(viewerCount),
    const DeepCollectionEquality().hash(senderCount),
    const DeepCollectionEquality().hash(memberCountGraph),
    const DeepCollectionEquality().hash(joinGraph),
    const DeepCollectionEquality().hash(joinBySourceGraph),
    const DeepCollectionEquality().hash(languageGraph),
    const DeepCollectionEquality().hash(messageContentGraph),
    const DeepCollectionEquality().hash(actionGraph),
    const DeepCollectionEquality().hash(dayGraph),
    const DeepCollectionEquality().hash(weekGraph),
    const DeepCollectionEquality().hash(topSenders),
    const DeepCollectionEquality().hash(topAdministrators),
    const DeepCollectionEquality().hash(topInviters),
  ]);
}

extension ChatStatisticsChannelDataClassExtensions on ChatStatisticsChannel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatStatisticsChannel &&
          const DeepCollectionEquality().equals(other.period, period) &&
          const DeepCollectionEquality().equals(
            other.memberCount,
            memberCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.meanMessageViewCount,
            meanMessageViewCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.meanMessageShareCount,
            meanMessageShareCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.meanMessageReactionCount,
            meanMessageReactionCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.meanStoryViewCount,
            meanStoryViewCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.meanStoryShareCount,
            meanStoryShareCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.meanStoryReactionCount,
            meanStoryReactionCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.enabledNotificationsPercentage,
            enabledNotificationsPercentage,
          ) &&
          const DeepCollectionEquality().equals(
            other.memberCountGraph,
            memberCountGraph,
          ) &&
          const DeepCollectionEquality().equals(other.joinGraph, joinGraph) &&
          const DeepCollectionEquality().equals(other.muteGraph, muteGraph) &&
          const DeepCollectionEquality().equals(
            other.viewCountByHourGraph,
            viewCountByHourGraph,
          ) &&
          const DeepCollectionEquality().equals(
            other.viewCountBySourceGraph,
            viewCountBySourceGraph,
          ) &&
          const DeepCollectionEquality().equals(
            other.joinBySourceGraph,
            joinBySourceGraph,
          ) &&
          const DeepCollectionEquality().equals(
            other.languageGraph,
            languageGraph,
          ) &&
          const DeepCollectionEquality().equals(
            other.messageInteractionGraph,
            messageInteractionGraph,
          ) &&
          const DeepCollectionEquality().equals(
            other.messageReactionGraph,
            messageReactionGraph,
          ) &&
          const DeepCollectionEquality().equals(
            other.storyInteractionGraph,
            storyInteractionGraph,
          ) &&
          const DeepCollectionEquality().equals(
            other.storyReactionGraph,
            storyReactionGraph,
          ) &&
          const DeepCollectionEquality().equals(
            other.instantViewInteractionGraph,
            instantViewInteractionGraph,
          ) &&
          const DeepCollectionEquality().equals(
            other.recentInteractions,
            recentInteractions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(period),
    const DeepCollectionEquality().hash(memberCount),
    const DeepCollectionEquality().hash(meanMessageViewCount),
    const DeepCollectionEquality().hash(meanMessageShareCount),
    const DeepCollectionEquality().hash(meanMessageReactionCount),
    const DeepCollectionEquality().hash(meanStoryViewCount),
    const DeepCollectionEquality().hash(meanStoryShareCount),
    const DeepCollectionEquality().hash(meanStoryReactionCount),
    const DeepCollectionEquality().hash(enabledNotificationsPercentage),
    const DeepCollectionEquality().hash(memberCountGraph),
    const DeepCollectionEquality().hash(joinGraph),
    const DeepCollectionEquality().hash(muteGraph),
    const DeepCollectionEquality().hash(viewCountByHourGraph),
    const DeepCollectionEquality().hash(viewCountBySourceGraph),
    const DeepCollectionEquality().hash(joinBySourceGraph),
    const DeepCollectionEquality().hash(languageGraph),
    const DeepCollectionEquality().hash(messageInteractionGraph),
    const DeepCollectionEquality().hash(messageReactionGraph),
    const DeepCollectionEquality().hash(storyInteractionGraph),
    const DeepCollectionEquality().hash(storyReactionGraph),
    const DeepCollectionEquality().hash(instantViewInteractionGraph),
    const DeepCollectionEquality().hash(recentInteractions),
  ]);
}

extension ChatRevenueAmountDataClassExtensions on ChatRevenueAmount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatRevenueAmount &&
          const DeepCollectionEquality().equals(
            other.cryptocurrency,
            cryptocurrency,
          ) &&
          const DeepCollectionEquality().equals(
            other.totalAmount,
            totalAmount,
          ) &&
          const DeepCollectionEquality().equals(
            other.balanceAmount,
            balanceAmount,
          ) &&
          const DeepCollectionEquality().equals(
            other.availableAmount,
            availableAmount,
          ) &&
          const DeepCollectionEquality().equals(
            other.withdrawalEnabled,
            withdrawalEnabled,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(cryptocurrency),
    const DeepCollectionEquality().hash(totalAmount),
    const DeepCollectionEquality().hash(balanceAmount),
    const DeepCollectionEquality().hash(availableAmount),
    const DeepCollectionEquality().hash(withdrawalEnabled),
  ]);
}

extension ChatRevenueStatisticsDataClassExtensions on ChatRevenueStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatRevenueStatistics &&
          const DeepCollectionEquality().equals(
            other.revenueByHourGraph,
            revenueByHourGraph,
          ) &&
          const DeepCollectionEquality().equals(
            other.revenueGraph,
            revenueGraph,
          ) &&
          const DeepCollectionEquality().equals(
            other.revenueAmount,
            revenueAmount,
          ) &&
          const DeepCollectionEquality().equals(other.usdRate, usdRate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(revenueByHourGraph),
    const DeepCollectionEquality().hash(revenueGraph),
    const DeepCollectionEquality().hash(revenueAmount),
    const DeepCollectionEquality().hash(usdRate),
  ]);
}

extension MessageStatisticsDataClassExtensions on MessageStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MessageStatistics &&
          const DeepCollectionEquality().equals(
            other.messageInteractionGraph,
            messageInteractionGraph,
          ) &&
          const DeepCollectionEquality().equals(
            other.messageReactionGraph,
            messageReactionGraph,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messageInteractionGraph),
    const DeepCollectionEquality().hash(messageReactionGraph),
  ]);
}

extension StoryStatisticsDataClassExtensions on StoryStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StoryStatistics &&
          const DeepCollectionEquality().equals(
            other.storyInteractionGraph,
            storyInteractionGraph,
          ) &&
          const DeepCollectionEquality().equals(
            other.storyReactionGraph,
            storyReactionGraph,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyInteractionGraph),
    const DeepCollectionEquality().hash(storyReactionGraph),
  ]);
}

extension RevenueWithdrawalStateDataClassExtensions on RevenueWithdrawalState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is RevenueWithdrawalState);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension RevenueWithdrawalStatePendingDataClassExtensions
    on RevenueWithdrawalStatePending {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RevenueWithdrawalStatePending);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension RevenueWithdrawalStateSucceededDataClassExtensions
    on RevenueWithdrawalStateSucceeded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RevenueWithdrawalStateSucceeded &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(url),
  ]);
}

extension RevenueWithdrawalStateFailedDataClassExtensions
    on RevenueWithdrawalStateFailed {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RevenueWithdrawalStateFailed);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatRevenueTransactionTypeDataClassExtensions
    on ChatRevenueTransactionType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ChatRevenueTransactionType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChatRevenueTransactionTypeEarningsDataClassExtensions
    on ChatRevenueTransactionTypeEarnings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatRevenueTransactionTypeEarnings &&
          const DeepCollectionEquality().equals(other.startDate, startDate) &&
          const DeepCollectionEquality().equals(other.endDate, endDate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(startDate),
    const DeepCollectionEquality().hash(endDate),
  ]);
}

extension ChatRevenueTransactionTypeWithdrawalDataClassExtensions
    on ChatRevenueTransactionTypeWithdrawal {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatRevenueTransactionTypeWithdrawal &&
          const DeepCollectionEquality().equals(
            other.withdrawalDate,
            withdrawalDate,
          ) &&
          const DeepCollectionEquality().equals(other.provider, provider) &&
          const DeepCollectionEquality().equals(other.state, state));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(withdrawalDate),
    const DeepCollectionEquality().hash(provider),
    const DeepCollectionEquality().hash(state),
  ]);
}

extension ChatRevenueTransactionTypeRefundDataClassExtensions
    on ChatRevenueTransactionTypeRefund {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatRevenueTransactionTypeRefund &&
          const DeepCollectionEquality().equals(other.refundDate, refundDate) &&
          const DeepCollectionEquality().equals(other.provider, provider));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(refundDate),
    const DeepCollectionEquality().hash(provider),
  ]);
}

extension ChatRevenueTransactionDataClassExtensions on ChatRevenueTransaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatRevenueTransaction &&
          const DeepCollectionEquality().equals(
            other.cryptocurrency,
            cryptocurrency,
          ) &&
          const DeepCollectionEquality().equals(
            other.cryptocurrencyAmount,
            cryptocurrencyAmount,
          ) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(cryptocurrency),
    const DeepCollectionEquality().hash(cryptocurrencyAmount),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension ChatRevenueTransactionsDataClassExtensions
    on ChatRevenueTransactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChatRevenueTransactions &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(
            other.transactions,
            transactions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(transactions),
  ]);
}

extension StarRevenueStatusDataClassExtensions on StarRevenueStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarRevenueStatus &&
          const DeepCollectionEquality().equals(
            other.totalAmount,
            totalAmount,
          ) &&
          const DeepCollectionEquality().equals(
            other.currentAmount,
            currentAmount,
          ) &&
          const DeepCollectionEquality().equals(
            other.availableAmount,
            availableAmount,
          ) &&
          const DeepCollectionEquality().equals(
            other.withdrawalEnabled,
            withdrawalEnabled,
          ) &&
          const DeepCollectionEquality().equals(
            other.nextWithdrawalIn,
            nextWithdrawalIn,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalAmount),
    const DeepCollectionEquality().hash(currentAmount),
    const DeepCollectionEquality().hash(availableAmount),
    const DeepCollectionEquality().hash(withdrawalEnabled),
    const DeepCollectionEquality().hash(nextWithdrawalIn),
  ]);
}

extension StarRevenueStatisticsDataClassExtensions on StarRevenueStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StarRevenueStatistics &&
          const DeepCollectionEquality().equals(
            other.revenueByDayGraph,
            revenueByDayGraph,
          ) &&
          const DeepCollectionEquality().equals(other.status, status) &&
          const DeepCollectionEquality().equals(other.usdRate, usdRate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(revenueByDayGraph),
    const DeepCollectionEquality().hash(status),
    const DeepCollectionEquality().hash(usdRate),
  ]);
}

extension PointDataClassExtensions on Point {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Point &&
          const DeepCollectionEquality().equals(other.x, x) &&
          const DeepCollectionEquality().equals(other.y, y));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(x),
    const DeepCollectionEquality().hash(y),
  ]);
}

extension VectorPathCommandDataClassExtensions on VectorPathCommand {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is VectorPathCommand);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension VectorPathCommandLineDataClassExtensions on VectorPathCommandLine {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is VectorPathCommandLine &&
          const DeepCollectionEquality().equals(other.endPoint, endPoint));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(endPoint),
  ]);
}

extension VectorPathCommandCubicBezierCurveDataClassExtensions
    on VectorPathCommandCubicBezierCurve {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is VectorPathCommandCubicBezierCurve &&
          const DeepCollectionEquality().equals(
            other.startControlPoint,
            startControlPoint,
          ) &&
          const DeepCollectionEquality().equals(
            other.endControlPoint,
            endControlPoint,
          ) &&
          const DeepCollectionEquality().equals(other.endPoint, endPoint));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(startControlPoint),
    const DeepCollectionEquality().hash(endControlPoint),
    const DeepCollectionEquality().hash(endPoint),
  ]);
}

extension BotCommandScopeDataClassExtensions on BotCommandScope {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is BotCommandScope);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BotCommandScopeDefaultDataClassExtensions on BotCommandScopeDefault {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is BotCommandScopeDefault);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BotCommandScopeAllPrivateChatsDataClassExtensions
    on BotCommandScopeAllPrivateChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotCommandScopeAllPrivateChats);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BotCommandScopeAllGroupChatsDataClassExtensions
    on BotCommandScopeAllGroupChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotCommandScopeAllGroupChats);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BotCommandScopeAllChatAdministratorsDataClassExtensions
    on BotCommandScopeAllChatAdministrators {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotCommandScopeAllChatAdministrators);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension BotCommandScopeChatDataClassExtensions on BotCommandScopeChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotCommandScopeChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension BotCommandScopeChatAdministratorsDataClassExtensions
    on BotCommandScopeChatAdministrators {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotCommandScopeChatAdministrators &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension BotCommandScopeChatMemberDataClassExtensions
    on BotCommandScopeChatMember {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BotCommandScopeChatMember &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension PhoneNumberCodeTypeDataClassExtensions on PhoneNumberCodeType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PhoneNumberCodeType);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PhoneNumberCodeTypeChangeDataClassExtensions
    on PhoneNumberCodeTypeChange {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PhoneNumberCodeTypeChange);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PhoneNumberCodeTypeVerifyDataClassExtensions
    on PhoneNumberCodeTypeVerify {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is PhoneNumberCodeTypeVerify);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension PhoneNumberCodeTypeConfirmOwnershipDataClassExtensions
    on PhoneNumberCodeTypeConfirmOwnership {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PhoneNumberCodeTypeConfirmOwnership &&
          const DeepCollectionEquality().equals(other.hash, hash));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(hash)]);
}

extension UpdateDataClassExtensions on Update {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is Update);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension UpdateAuthorizationStateDataClassExtensions
    on UpdateAuthorizationState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateAuthorizationState &&
          const DeepCollectionEquality().equals(
            other.authorizationState,
            authorizationState,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(authorizationState),
  ]);
}

extension UpdateNewMessageDataClassExtensions on UpdateNewMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateNewMessage &&
          const DeepCollectionEquality().equals(other.message, message));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(message),
  ]);
}

extension UpdateMessageSendAcknowledgedDataClassExtensions
    on UpdateMessageSendAcknowledged {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateMessageSendAcknowledged &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension UpdateMessageSendSucceededDataClassExtensions
    on UpdateMessageSendSucceeded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateMessageSendSucceeded &&
          const DeepCollectionEquality().equals(other.message, message) &&
          const DeepCollectionEquality().equals(
            other.oldMessageId,
            oldMessageId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(message),
    const DeepCollectionEquality().hash(oldMessageId),
  ]);
}

extension UpdateMessageSendFailedDataClassExtensions
    on UpdateMessageSendFailed {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateMessageSendFailed &&
          const DeepCollectionEquality().equals(other.message, message) &&
          const DeepCollectionEquality().equals(
            other.oldMessageId,
            oldMessageId,
          ) &&
          const DeepCollectionEquality().equals(other.error, error));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(message),
    const DeepCollectionEquality().hash(oldMessageId),
    const DeepCollectionEquality().hash(error),
  ]);
}

extension UpdateMessageContentDataClassExtensions on UpdateMessageContent {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateMessageContent &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.newContent, newContent));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(newContent),
  ]);
}

extension UpdateMessageEditedDataClassExtensions on UpdateMessageEdited {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateMessageEdited &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.editDate, editDate) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(editDate),
    const DeepCollectionEquality().hash(replyMarkup),
  ]);
}

extension UpdateMessageIsPinnedDataClassExtensions on UpdateMessageIsPinned {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateMessageIsPinned &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension UpdateMessageInteractionInfoDataClassExtensions
    on UpdateMessageInteractionInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateMessageInteractionInfo &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.interactionInfo,
            interactionInfo,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(interactionInfo),
  ]);
}

extension UpdateMessageContentOpenedDataClassExtensions
    on UpdateMessageContentOpened {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateMessageContentOpened &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension UpdateMessageMentionReadDataClassExtensions
    on UpdateMessageMentionRead {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateMessageMentionRead &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.unreadMentionCount,
            unreadMentionCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(unreadMentionCount),
  ]);
}

extension UpdateMessageUnreadReactionsDataClassExtensions
    on UpdateMessageUnreadReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateMessageUnreadReactions &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.unreadReactions,
            unreadReactions,
          ) &&
          const DeepCollectionEquality().equals(
            other.unreadReactionCount,
            unreadReactionCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(unreadReactions),
    const DeepCollectionEquality().hash(unreadReactionCount),
  ]);
}

extension UpdateMessageFactCheckDataClassExtensions on UpdateMessageFactCheck {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateMessageFactCheck &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.factCheck, factCheck));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(factCheck),
  ]);
}

extension UpdateMessageLiveLocationViewedDataClassExtensions
    on UpdateMessageLiveLocationViewed {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateMessageLiveLocationViewed &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension UpdateVideoPublishedDataClassExtensions on UpdateVideoPublished {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateVideoPublished &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension UpdateNewChatDataClassExtensions on UpdateNewChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateNewChat &&
          const DeepCollectionEquality().equals(other.chat, chat));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(chat)]);
}

extension UpdateChatTitleDataClassExtensions on UpdateChatTitle {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatTitle &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.title, title));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(title),
  ]);
}

extension UpdateChatPhotoDataClassExtensions on UpdateChatPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatPhoto &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(photo),
  ]);
}

extension UpdateChatAccentColorsDataClassExtensions on UpdateChatAccentColors {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatAccentColors &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.accentColorId,
            accentColorId,
          ) &&
          const DeepCollectionEquality().equals(
            other.backgroundCustomEmojiId,
            backgroundCustomEmojiId,
          ) &&
          const DeepCollectionEquality().equals(
            other.profileAccentColorId,
            profileAccentColorId,
          ) &&
          const DeepCollectionEquality().equals(
            other.profileBackgroundCustomEmojiId,
            profileBackgroundCustomEmojiId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(accentColorId),
    const DeepCollectionEquality().hash(backgroundCustomEmojiId),
    const DeepCollectionEquality().hash(profileAccentColorId),
    const DeepCollectionEquality().hash(profileBackgroundCustomEmojiId),
  ]);
}

extension UpdateChatPermissionsDataClassExtensions on UpdateChatPermissions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatPermissions &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.permissions,
            permissions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(permissions),
  ]);
}

extension UpdateChatLastMessageDataClassExtensions on UpdateChatLastMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatLastMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.lastMessage,
            lastMessage,
          ) &&
          const DeepCollectionEquality().equals(other.positions, positions));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(lastMessage),
    const DeepCollectionEquality().hash(positions),
  ]);
}

extension UpdateChatPositionDataClassExtensions on UpdateChatPosition {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatPosition &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.position, position));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(position),
  ]);
}

extension UpdateChatAddedToListDataClassExtensions on UpdateChatAddedToList {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatAddedToList &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.chatList, chatList));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(chatList),
  ]);
}

extension UpdateChatRemovedFromListDataClassExtensions
    on UpdateChatRemovedFromList {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatRemovedFromList &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.chatList, chatList));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(chatList),
  ]);
}

extension UpdateChatReadInboxDataClassExtensions on UpdateChatReadInbox {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatReadInbox &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.lastReadInboxMessageId,
            lastReadInboxMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.unreadCount,
            unreadCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(lastReadInboxMessageId),
    const DeepCollectionEquality().hash(unreadCount),
  ]);
}

extension UpdateChatReadOutboxDataClassExtensions on UpdateChatReadOutbox {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatReadOutbox &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.lastReadOutboxMessageId,
            lastReadOutboxMessageId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(lastReadOutboxMessageId),
  ]);
}

extension UpdateChatActionBarDataClassExtensions on UpdateChatActionBar {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatActionBar &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.actionBar, actionBar));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(actionBar),
  ]);
}

extension UpdateChatBusinessBotManageBarDataClassExtensions
    on UpdateChatBusinessBotManageBar {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatBusinessBotManageBar &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.businessBotManageBar,
            businessBotManageBar,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(businessBotManageBar),
  ]);
}

extension UpdateChatAvailableReactionsDataClassExtensions
    on UpdateChatAvailableReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatAvailableReactions &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.availableReactions,
            availableReactions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(availableReactions),
  ]);
}

extension UpdateChatDraftMessageDataClassExtensions on UpdateChatDraftMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatDraftMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.draftMessage,
            draftMessage,
          ) &&
          const DeepCollectionEquality().equals(other.positions, positions));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(draftMessage),
    const DeepCollectionEquality().hash(positions),
  ]);
}

extension UpdateChatEmojiStatusDataClassExtensions on UpdateChatEmojiStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatEmojiStatus &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.emojiStatus,
            emojiStatus,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(emojiStatus),
  ]);
}

extension UpdateChatMessageSenderDataClassExtensions
    on UpdateChatMessageSender {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatMessageSender &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageSenderId,
            messageSenderId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageSenderId),
  ]);
}

extension UpdateChatMessageAutoDeleteTimeDataClassExtensions
    on UpdateChatMessageAutoDeleteTime {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatMessageAutoDeleteTime &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageAutoDeleteTime,
            messageAutoDeleteTime,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageAutoDeleteTime),
  ]);
}

extension UpdateChatNotificationSettingsDataClassExtensions
    on UpdateChatNotificationSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatNotificationSettings &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.notificationSettings,
            notificationSettings,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(notificationSettings),
  ]);
}

extension UpdateChatPendingJoinRequestsDataClassExtensions
    on UpdateChatPendingJoinRequests {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatPendingJoinRequests &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.pendingJoinRequests,
            pendingJoinRequests,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(pendingJoinRequests),
  ]);
}

extension UpdateChatReplyMarkupDataClassExtensions on UpdateChatReplyMarkup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatReplyMarkup &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.replyMarkupMessageId,
            replyMarkupMessageId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(replyMarkupMessageId),
  ]);
}

extension UpdateChatBackgroundDataClassExtensions on UpdateChatBackground {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatBackground &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.background, background));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(background),
  ]);
}

extension UpdateChatThemeDataClassExtensions on UpdateChatTheme {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatTheme &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.themeName, themeName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(themeName),
  ]);
}

extension UpdateChatUnreadMentionCountDataClassExtensions
    on UpdateChatUnreadMentionCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatUnreadMentionCount &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.unreadMentionCount,
            unreadMentionCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(unreadMentionCount),
  ]);
}

extension UpdateChatUnreadReactionCountDataClassExtensions
    on UpdateChatUnreadReactionCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatUnreadReactionCount &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.unreadReactionCount,
            unreadReactionCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(unreadReactionCount),
  ]);
}

extension UpdateChatVideoChatDataClassExtensions on UpdateChatVideoChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatVideoChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.videoChat, videoChat));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(videoChat),
  ]);
}

extension UpdateChatDefaultDisableNotificationDataClassExtensions
    on UpdateChatDefaultDisableNotification {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatDefaultDisableNotification &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.defaultDisableNotification,
            defaultDisableNotification,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(defaultDisableNotification),
  ]);
}

extension UpdateChatHasProtectedContentDataClassExtensions
    on UpdateChatHasProtectedContent {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatHasProtectedContent &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.hasProtectedContent,
            hasProtectedContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(hasProtectedContent),
  ]);
}

extension UpdateChatIsTranslatableDataClassExtensions
    on UpdateChatIsTranslatable {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatIsTranslatable &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.isTranslatable,
            isTranslatable,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(isTranslatable),
  ]);
}

extension UpdateChatIsMarkedAsUnreadDataClassExtensions
    on UpdateChatIsMarkedAsUnread {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatIsMarkedAsUnread &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.isMarkedAsUnread,
            isMarkedAsUnread,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(isMarkedAsUnread),
  ]);
}

extension UpdateChatViewAsTopicsDataClassExtensions on UpdateChatViewAsTopics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatViewAsTopics &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.viewAsTopics,
            viewAsTopics,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(viewAsTopics),
  ]);
}

extension UpdateChatBlockListDataClassExtensions on UpdateChatBlockList {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatBlockList &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.blockList, blockList));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(blockList),
  ]);
}

extension UpdateChatHasScheduledMessagesDataClassExtensions
    on UpdateChatHasScheduledMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatHasScheduledMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.hasScheduledMessages,
            hasScheduledMessages,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(hasScheduledMessages),
  ]);
}

extension UpdateChatFoldersDataClassExtensions on UpdateChatFolders {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatFolders &&
          const DeepCollectionEquality().equals(
            other.chatFolders,
            chatFolders,
          ) &&
          const DeepCollectionEquality().equals(
            other.mainChatListPosition,
            mainChatListPosition,
          ) &&
          const DeepCollectionEquality().equals(
            other.areTagsEnabled,
            areTagsEnabled,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatFolders),
    const DeepCollectionEquality().hash(mainChatListPosition),
    const DeepCollectionEquality().hash(areTagsEnabled),
  ]);
}

extension UpdateChatOnlineMemberCountDataClassExtensions
    on UpdateChatOnlineMemberCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatOnlineMemberCount &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.onlineMemberCount,
            onlineMemberCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(onlineMemberCount),
  ]);
}

extension UpdateSavedMessagesTopicDataClassExtensions
    on UpdateSavedMessagesTopic {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateSavedMessagesTopic &&
          const DeepCollectionEquality().equals(other.topic, topic));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(topic)]);
}

extension UpdateSavedMessagesTopicCountDataClassExtensions
    on UpdateSavedMessagesTopicCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateSavedMessagesTopicCount &&
          const DeepCollectionEquality().equals(other.topicCount, topicCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(topicCount),
  ]);
}

extension UpdateDirectMessagesChatTopicDataClassExtensions
    on UpdateDirectMessagesChatTopic {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateDirectMessagesChatTopic &&
          const DeepCollectionEquality().equals(other.topic, topic));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(topic)]);
}

extension UpdateTopicMessageCountDataClassExtensions
    on UpdateTopicMessageCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateTopicMessageCount &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.topicId, topicId) &&
          const DeepCollectionEquality().equals(
            other.messageCount,
            messageCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(topicId),
    const DeepCollectionEquality().hash(messageCount),
  ]);
}

extension UpdateQuickReplyShortcutDataClassExtensions
    on UpdateQuickReplyShortcut {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateQuickReplyShortcut &&
          const DeepCollectionEquality().equals(other.shortcut, shortcut));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortcut),
  ]);
}

extension UpdateQuickReplyShortcutDeletedDataClassExtensions
    on UpdateQuickReplyShortcutDeleted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateQuickReplyShortcutDeleted &&
          const DeepCollectionEquality().equals(other.shortcutId, shortcutId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortcutId),
  ]);
}

extension UpdateQuickReplyShortcutsDataClassExtensions
    on UpdateQuickReplyShortcuts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateQuickReplyShortcuts &&
          const DeepCollectionEquality().equals(
            other.shortcutIds,
            shortcutIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortcutIds),
  ]);
}

extension UpdateQuickReplyShortcutMessagesDataClassExtensions
    on UpdateQuickReplyShortcutMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateQuickReplyShortcutMessages &&
          const DeepCollectionEquality().equals(other.shortcutId, shortcutId) &&
          const DeepCollectionEquality().equals(other.messages, messages));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortcutId),
    const DeepCollectionEquality().hash(messages),
  ]);
}

extension UpdateForumTopicInfoDataClassExtensions on UpdateForumTopicInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateForumTopicInfo &&
          const DeepCollectionEquality().equals(other.info, info));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(info)]);
}

extension UpdateForumTopicDataClassExtensions on UpdateForumTopic {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateForumTopic &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned) &&
          const DeepCollectionEquality().equals(
            other.lastReadInboxMessageId,
            lastReadInboxMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.lastReadOutboxMessageId,
            lastReadOutboxMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.unreadMentionCount,
            unreadMentionCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.unreadReactionCount,
            unreadReactionCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.notificationSettings,
            notificationSettings,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
    const DeepCollectionEquality().hash(isPinned),
    const DeepCollectionEquality().hash(lastReadInboxMessageId),
    const DeepCollectionEquality().hash(lastReadOutboxMessageId),
    const DeepCollectionEquality().hash(unreadMentionCount),
    const DeepCollectionEquality().hash(unreadReactionCount),
    const DeepCollectionEquality().hash(notificationSettings),
  ]);
}

extension UpdateScopeNotificationSettingsDataClassExtensions
    on UpdateScopeNotificationSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateScopeNotificationSettings &&
          const DeepCollectionEquality().equals(other.scope, scope) &&
          const DeepCollectionEquality().equals(
            other.notificationSettings,
            notificationSettings,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(scope),
    const DeepCollectionEquality().hash(notificationSettings),
  ]);
}

extension UpdateReactionNotificationSettingsDataClassExtensions
    on UpdateReactionNotificationSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateReactionNotificationSettings &&
          const DeepCollectionEquality().equals(
            other.notificationSettings,
            notificationSettings,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(notificationSettings),
  ]);
}

extension UpdateNotificationDataClassExtensions on UpdateNotification {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateNotification &&
          const DeepCollectionEquality().equals(
            other.notificationGroupId,
            notificationGroupId,
          ) &&
          const DeepCollectionEquality().equals(
            other.notification,
            notification,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(notificationGroupId),
    const DeepCollectionEquality().hash(notification),
  ]);
}

extension UpdateNotificationGroupDataClassExtensions
    on UpdateNotificationGroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateNotificationGroup &&
          const DeepCollectionEquality().equals(
            other.notificationGroupId,
            notificationGroupId,
          ) &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.notificationSettingsChatId,
            notificationSettingsChatId,
          ) &&
          const DeepCollectionEquality().equals(
            other.notificationSoundId,
            notificationSoundId,
          ) &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(
            other.addedNotifications,
            addedNotifications,
          ) &&
          const DeepCollectionEquality().equals(
            other.removedNotificationIds,
            removedNotificationIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(notificationGroupId),
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(notificationSettingsChatId),
    const DeepCollectionEquality().hash(notificationSoundId),
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(addedNotifications),
    const DeepCollectionEquality().hash(removedNotificationIds),
  ]);
}

extension UpdateActiveNotificationsDataClassExtensions
    on UpdateActiveNotifications {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateActiveNotifications &&
          const DeepCollectionEquality().equals(other.groups, groups));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groups),
  ]);
}

extension UpdateHavePendingNotificationsDataClassExtensions
    on UpdateHavePendingNotifications {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateHavePendingNotifications &&
          const DeepCollectionEquality().equals(
            other.haveDelayedNotifications,
            haveDelayedNotifications,
          ) &&
          const DeepCollectionEquality().equals(
            other.haveUnreceivedNotifications,
            haveUnreceivedNotifications,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(haveDelayedNotifications),
    const DeepCollectionEquality().hash(haveUnreceivedNotifications),
  ]);
}

extension UpdateDeleteMessagesDataClassExtensions on UpdateDeleteMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateDeleteMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageIds, messageIds) &&
          const DeepCollectionEquality().equals(
            other.isPermanent,
            isPermanent,
          ) &&
          const DeepCollectionEquality().equals(other.fromCache, fromCache));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageIds),
    const DeepCollectionEquality().hash(isPermanent),
    const DeepCollectionEquality().hash(fromCache),
  ]);
}

extension UpdateChatActionDataClassExtensions on UpdateChatAction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatAction &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ) &&
          const DeepCollectionEquality().equals(other.senderId, senderId) &&
          const DeepCollectionEquality().equals(other.action, action));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
    const DeepCollectionEquality().hash(senderId),
    const DeepCollectionEquality().hash(action),
  ]);
}

extension UpdateUserStatusDataClassExtensions on UpdateUserStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateUserStatus &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.status, status));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(status),
  ]);
}

extension UpdateUserDataClassExtensions on UpdateUser {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateUser &&
          const DeepCollectionEquality().equals(other.user, user));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(user)]);
}

extension UpdateBasicGroupDataClassExtensions on UpdateBasicGroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateBasicGroup &&
          const DeepCollectionEquality().equals(other.basicGroup, basicGroup));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(basicGroup),
  ]);
}

extension UpdateSupergroupDataClassExtensions on UpdateSupergroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateSupergroup &&
          const DeepCollectionEquality().equals(other.supergroup, supergroup));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroup),
  ]);
}

extension UpdateSecretChatDataClassExtensions on UpdateSecretChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateSecretChat &&
          const DeepCollectionEquality().equals(other.secretChat, secretChat));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(secretChat),
  ]);
}

extension UpdateUserFullInfoDataClassExtensions on UpdateUserFullInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateUserFullInfo &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.userFullInfo,
            userFullInfo,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(userFullInfo),
  ]);
}

extension UpdateBasicGroupFullInfoDataClassExtensions
    on UpdateBasicGroupFullInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateBasicGroupFullInfo &&
          const DeepCollectionEquality().equals(
            other.basicGroupId,
            basicGroupId,
          ) &&
          const DeepCollectionEquality().equals(
            other.basicGroupFullInfo,
            basicGroupFullInfo,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(basicGroupId),
    const DeepCollectionEquality().hash(basicGroupFullInfo),
  ]);
}

extension UpdateSupergroupFullInfoDataClassExtensions
    on UpdateSupergroupFullInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateSupergroupFullInfo &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(
            other.supergroupFullInfo,
            supergroupFullInfo,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(supergroupFullInfo),
  ]);
}

extension UpdateServiceNotificationDataClassExtensions
    on UpdateServiceNotification {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateServiceNotification &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.content, content));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(content),
  ]);
}

extension UpdateFileDataClassExtensions on UpdateFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateFile &&
          const DeepCollectionEquality().equals(other.file, file));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(file)]);
}

extension UpdateFileGenerationStartDataClassExtensions
    on UpdateFileGenerationStart {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateFileGenerationStart &&
          const DeepCollectionEquality().equals(
            other.generationId,
            generationId,
          ) &&
          const DeepCollectionEquality().equals(
            other.originalPath,
            originalPath,
          ) &&
          const DeepCollectionEquality().equals(
            other.destinationPath,
            destinationPath,
          ) &&
          const DeepCollectionEquality().equals(other.conversion, conversion));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(generationId),
    const DeepCollectionEquality().hash(originalPath),
    const DeepCollectionEquality().hash(destinationPath),
    const DeepCollectionEquality().hash(conversion),
  ]);
}

extension UpdateFileGenerationStopDataClassExtensions
    on UpdateFileGenerationStop {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateFileGenerationStop &&
          const DeepCollectionEquality().equals(
            other.generationId,
            generationId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(generationId),
  ]);
}

extension UpdateFileDownloadsDataClassExtensions on UpdateFileDownloads {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateFileDownloads &&
          const DeepCollectionEquality().equals(other.totalSize, totalSize) &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(
            other.downloadedSize,
            downloadedSize,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(totalSize),
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(downloadedSize),
  ]);
}

extension UpdateFileAddedToDownloadsDataClassExtensions
    on UpdateFileAddedToDownloads {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateFileAddedToDownloads &&
          const DeepCollectionEquality().equals(
            other.fileDownload,
            fileDownload,
          ) &&
          const DeepCollectionEquality().equals(other.counts, counts));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileDownload),
    const DeepCollectionEquality().hash(counts),
  ]);
}

extension UpdateFileDownloadDataClassExtensions on UpdateFileDownload {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateFileDownload &&
          const DeepCollectionEquality().equals(other.fileId, fileId) &&
          const DeepCollectionEquality().equals(
            other.completeDate,
            completeDate,
          ) &&
          const DeepCollectionEquality().equals(other.isPaused, isPaused) &&
          const DeepCollectionEquality().equals(other.counts, counts));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileId),
    const DeepCollectionEquality().hash(completeDate),
    const DeepCollectionEquality().hash(isPaused),
    const DeepCollectionEquality().hash(counts),
  ]);
}

extension UpdateFileRemovedFromDownloadsDataClassExtensions
    on UpdateFileRemovedFromDownloads {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateFileRemovedFromDownloads &&
          const DeepCollectionEquality().equals(other.fileId, fileId) &&
          const DeepCollectionEquality().equals(other.counts, counts));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileId),
    const DeepCollectionEquality().hash(counts),
  ]);
}

extension UpdateApplicationVerificationRequiredDataClassExtensions
    on UpdateApplicationVerificationRequired {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateApplicationVerificationRequired &&
          const DeepCollectionEquality().equals(
            other.verificationId,
            verificationId,
          ) &&
          const DeepCollectionEquality().equals(other.nonce, nonce) &&
          const DeepCollectionEquality().equals(
            other.cloudProjectNumber,
            cloudProjectNumber,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(verificationId),
    const DeepCollectionEquality().hash(nonce),
    const DeepCollectionEquality().hash(cloudProjectNumber),
  ]);
}

extension UpdateApplicationRecaptchaVerificationRequiredDataClassExtensions
    on UpdateApplicationRecaptchaVerificationRequired {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateApplicationRecaptchaVerificationRequired &&
          const DeepCollectionEquality().equals(
            other.verificationId,
            verificationId,
          ) &&
          const DeepCollectionEquality().equals(other.action, action) &&
          const DeepCollectionEquality().equals(
            other.recaptchaKeyId,
            recaptchaKeyId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(verificationId),
    const DeepCollectionEquality().hash(action),
    const DeepCollectionEquality().hash(recaptchaKeyId),
  ]);
}

extension UpdateCallDataClassExtensions on UpdateCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateCall &&
          const DeepCollectionEquality().equals(other.call, call));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(call)]);
}

extension UpdateGroupCallDataClassExtensions on UpdateGroupCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateGroupCall &&
          const DeepCollectionEquality().equals(other.groupCall, groupCall));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCall),
  ]);
}

extension UpdateGroupCallParticipantDataClassExtensions
    on UpdateGroupCallParticipant {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateGroupCallParticipant &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(
            other.participant,
            participant,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(participant),
  ]);
}

extension UpdateGroupCallParticipantsDataClassExtensions
    on UpdateGroupCallParticipants {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateGroupCallParticipants &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(
            other.participantUserIds,
            participantUserIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(participantUserIds),
  ]);
}

extension UpdateGroupCallVerificationStateDataClassExtensions
    on UpdateGroupCallVerificationState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateGroupCallVerificationState &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(other.generation, generation) &&
          const DeepCollectionEquality().equals(other.emojis, emojis));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(generation),
    const DeepCollectionEquality().hash(emojis),
  ]);
}

extension UpdateNewCallSignalingDataDataClassExtensions
    on UpdateNewCallSignalingData {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateNewCallSignalingData &&
          const DeepCollectionEquality().equals(other.callId, callId) &&
          const DeepCollectionEquality().equals(other.data, data));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(callId),
    const DeepCollectionEquality().hash(data),
  ]);
}

extension UpdateUserPrivacySettingRulesDataClassExtensions
    on UpdateUserPrivacySettingRules {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateUserPrivacySettingRules &&
          const DeepCollectionEquality().equals(other.setting, setting) &&
          const DeepCollectionEquality().equals(other.rules, rules));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(setting),
    const DeepCollectionEquality().hash(rules),
  ]);
}

extension UpdateUnreadMessageCountDataClassExtensions
    on UpdateUnreadMessageCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateUnreadMessageCount &&
          const DeepCollectionEquality().equals(other.chatList, chatList) &&
          const DeepCollectionEquality().equals(
            other.unreadCount,
            unreadCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.unreadUnmutedCount,
            unreadUnmutedCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatList),
    const DeepCollectionEquality().hash(unreadCount),
    const DeepCollectionEquality().hash(unreadUnmutedCount),
  ]);
}

extension UpdateUnreadChatCountDataClassExtensions on UpdateUnreadChatCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateUnreadChatCount &&
          const DeepCollectionEquality().equals(other.chatList, chatList) &&
          const DeepCollectionEquality().equals(other.totalCount, totalCount) &&
          const DeepCollectionEquality().equals(
            other.unreadCount,
            unreadCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.unreadUnmutedCount,
            unreadUnmutedCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.markedAsUnreadCount,
            markedAsUnreadCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.markedAsUnreadUnmutedCount,
            markedAsUnreadUnmutedCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatList),
    const DeepCollectionEquality().hash(totalCount),
    const DeepCollectionEquality().hash(unreadCount),
    const DeepCollectionEquality().hash(unreadUnmutedCount),
    const DeepCollectionEquality().hash(markedAsUnreadCount),
    const DeepCollectionEquality().hash(markedAsUnreadUnmutedCount),
  ]);
}

extension UpdateStoryDataClassExtensions on UpdateStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateStory &&
          const DeepCollectionEquality().equals(other.story, story));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(story)]);
}

extension UpdateStoryDeletedDataClassExtensions on UpdateStoryDeleted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateStoryDeleted &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
  ]);
}

extension UpdateStoryPostSucceededDataClassExtensions
    on UpdateStoryPostSucceeded {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateStoryPostSucceeded &&
          const DeepCollectionEquality().equals(other.story, story) &&
          const DeepCollectionEquality().equals(other.oldStoryId, oldStoryId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(story),
    const DeepCollectionEquality().hash(oldStoryId),
  ]);
}

extension UpdateStoryPostFailedDataClassExtensions on UpdateStoryPostFailed {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateStoryPostFailed &&
          const DeepCollectionEquality().equals(other.story, story) &&
          const DeepCollectionEquality().equals(other.error, error) &&
          const DeepCollectionEquality().equals(other.errorType, errorType));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(story),
    const DeepCollectionEquality().hash(error),
    const DeepCollectionEquality().hash(errorType),
  ]);
}

extension UpdateChatActiveStoriesDataClassExtensions
    on UpdateChatActiveStories {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatActiveStories &&
          const DeepCollectionEquality().equals(
            other.activeStories,
            activeStories,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(activeStories),
  ]);
}

extension UpdateStoryListChatCountDataClassExtensions
    on UpdateStoryListChatCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateStoryListChatCount &&
          const DeepCollectionEquality().equals(other.storyList, storyList) &&
          const DeepCollectionEquality().equals(other.chatCount, chatCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyList),
    const DeepCollectionEquality().hash(chatCount),
  ]);
}

extension UpdateStoryStealthModeDataClassExtensions on UpdateStoryStealthMode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateStoryStealthMode &&
          const DeepCollectionEquality().equals(
            other.activeUntilDate,
            activeUntilDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.cooldownUntilDate,
            cooldownUntilDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(activeUntilDate),
    const DeepCollectionEquality().hash(cooldownUntilDate),
  ]);
}

extension UpdateOptionDataClassExtensions on UpdateOption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateOption &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(value),
  ]);
}

extension UpdateStickerSetDataClassExtensions on UpdateStickerSet {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateStickerSet &&
          const DeepCollectionEquality().equals(other.stickerSet, stickerSet));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerSet),
  ]);
}

extension UpdateInstalledStickerSetsDataClassExtensions
    on UpdateInstalledStickerSets {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateInstalledStickerSets &&
          const DeepCollectionEquality().equals(
            other.stickerType,
            stickerType,
          ) &&
          const DeepCollectionEquality().equals(
            other.stickerSetIds,
            stickerSetIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerType),
    const DeepCollectionEquality().hash(stickerSetIds),
  ]);
}

extension UpdateTrendingStickerSetsDataClassExtensions
    on UpdateTrendingStickerSets {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateTrendingStickerSets &&
          const DeepCollectionEquality().equals(
            other.stickerType,
            stickerType,
          ) &&
          const DeepCollectionEquality().equals(
            other.stickerSets,
            stickerSets,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerType),
    const DeepCollectionEquality().hash(stickerSets),
  ]);
}

extension UpdateRecentStickersDataClassExtensions on UpdateRecentStickers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateRecentStickers &&
          const DeepCollectionEquality().equals(other.isAttached, isAttached) &&
          const DeepCollectionEquality().equals(other.stickerIds, stickerIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isAttached),
    const DeepCollectionEquality().hash(stickerIds),
  ]);
}

extension UpdateFavoriteStickersDataClassExtensions on UpdateFavoriteStickers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateFavoriteStickers &&
          const DeepCollectionEquality().equals(other.stickerIds, stickerIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerIds),
  ]);
}

extension UpdateSavedAnimationsDataClassExtensions on UpdateSavedAnimations {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateSavedAnimations &&
          const DeepCollectionEquality().equals(
            other.animationIds,
            animationIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(animationIds),
  ]);
}

extension UpdateSavedNotificationSoundsDataClassExtensions
    on UpdateSavedNotificationSounds {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateSavedNotificationSounds &&
          const DeepCollectionEquality().equals(
            other.notificationSoundIds,
            notificationSoundIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(notificationSoundIds),
  ]);
}

extension UpdateDefaultBackgroundDataClassExtensions
    on UpdateDefaultBackground {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateDefaultBackground &&
          const DeepCollectionEquality().equals(
            other.forDarkTheme,
            forDarkTheme,
          ) &&
          const DeepCollectionEquality().equals(other.background, background));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(forDarkTheme),
    const DeepCollectionEquality().hash(background),
  ]);
}

extension UpdateChatThemesDataClassExtensions on UpdateChatThemes {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatThemes &&
          const DeepCollectionEquality().equals(other.chatThemes, chatThemes));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatThemes),
  ]);
}

extension UpdateAccentColorsDataClassExtensions on UpdateAccentColors {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateAccentColors &&
          const DeepCollectionEquality().equals(other.colors, colors) &&
          const DeepCollectionEquality().equals(
            other.availableAccentColorIds,
            availableAccentColorIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(colors),
    const DeepCollectionEquality().hash(availableAccentColorIds),
  ]);
}

extension UpdateProfileAccentColorsDataClassExtensions
    on UpdateProfileAccentColors {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateProfileAccentColors &&
          const DeepCollectionEquality().equals(other.colors, colors) &&
          const DeepCollectionEquality().equals(
            other.availableAccentColorIds,
            availableAccentColorIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(colors),
    const DeepCollectionEquality().hash(availableAccentColorIds),
  ]);
}

extension UpdateLanguagePackStringsDataClassExtensions
    on UpdateLanguagePackStrings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateLanguagePackStrings &&
          const DeepCollectionEquality().equals(
            other.localizationTarget,
            localizationTarget,
          ) &&
          const DeepCollectionEquality().equals(
            other.languagePackId,
            languagePackId,
          ) &&
          const DeepCollectionEquality().equals(other.strings, strings));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(localizationTarget),
    const DeepCollectionEquality().hash(languagePackId),
    const DeepCollectionEquality().hash(strings),
  ]);
}

extension UpdateConnectionStateDataClassExtensions on UpdateConnectionState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateConnectionState &&
          const DeepCollectionEquality().equals(other.state, state));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(state)]);
}

extension UpdateFreezeStateDataClassExtensions on UpdateFreezeState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateFreezeState &&
          const DeepCollectionEquality().equals(other.isFrozen, isFrozen) &&
          const DeepCollectionEquality().equals(
            other.freezingDate,
            freezingDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.deletionDate,
            deletionDate,
          ) &&
          const DeepCollectionEquality().equals(other.appealLink, appealLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isFrozen),
    const DeepCollectionEquality().hash(freezingDate),
    const DeepCollectionEquality().hash(deletionDate),
    const DeepCollectionEquality().hash(appealLink),
  ]);
}

extension UpdateTermsOfServiceDataClassExtensions on UpdateTermsOfService {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateTermsOfService &&
          const DeepCollectionEquality().equals(
            other.termsOfServiceId,
            termsOfServiceId,
          ) &&
          const DeepCollectionEquality().equals(
            other.termsOfService,
            termsOfService,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(termsOfServiceId),
    const DeepCollectionEquality().hash(termsOfService),
  ]);
}

extension UpdateUnconfirmedSessionDataClassExtensions
    on UpdateUnconfirmedSession {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateUnconfirmedSession &&
          const DeepCollectionEquality().equals(other.session, session));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(session),
  ]);
}

extension UpdateAttachmentMenuBotsDataClassExtensions
    on UpdateAttachmentMenuBots {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateAttachmentMenuBots &&
          const DeepCollectionEquality().equals(other.bots, bots));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(bots)]);
}

extension UpdateWebAppMessageSentDataClassExtensions
    on UpdateWebAppMessageSent {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateWebAppMessageSent &&
          const DeepCollectionEquality().equals(
            other.webAppLaunchId,
            webAppLaunchId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(webAppLaunchId),
  ]);
}

extension UpdateActiveEmojiReactionsDataClassExtensions
    on UpdateActiveEmojiReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateActiveEmojiReactions &&
          const DeepCollectionEquality().equals(other.emojis, emojis));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(emojis),
  ]);
}

extension UpdateAvailableMessageEffectsDataClassExtensions
    on UpdateAvailableMessageEffects {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateAvailableMessageEffects &&
          const DeepCollectionEquality().equals(
            other.reactionEffectIds,
            reactionEffectIds,
          ) &&
          const DeepCollectionEquality().equals(
            other.stickerEffectIds,
            stickerEffectIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(reactionEffectIds),
    const DeepCollectionEquality().hash(stickerEffectIds),
  ]);
}

extension UpdateDefaultReactionTypeDataClassExtensions
    on UpdateDefaultReactionType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateDefaultReactionType &&
          const DeepCollectionEquality().equals(
            other.reactionType,
            reactionType,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(reactionType),
  ]);
}

extension UpdateDefaultPaidReactionTypeDataClassExtensions
    on UpdateDefaultPaidReactionType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateDefaultPaidReactionType &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(type)]);
}

extension UpdateSavedMessagesTagsDataClassExtensions
    on UpdateSavedMessagesTags {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateSavedMessagesTags &&
          const DeepCollectionEquality().equals(
            other.savedMessagesTopicId,
            savedMessagesTopicId,
          ) &&
          const DeepCollectionEquality().equals(other.tags, tags));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(savedMessagesTopicId),
    const DeepCollectionEquality().hash(tags),
  ]);
}

extension UpdateActiveLiveLocationMessagesDataClassExtensions
    on UpdateActiveLiveLocationMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateActiveLiveLocationMessages &&
          const DeepCollectionEquality().equals(other.messages, messages));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messages),
  ]);
}

extension UpdateOwnedStarCountDataClassExtensions on UpdateOwnedStarCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateOwnedStarCount &&
          const DeepCollectionEquality().equals(other.starAmount, starAmount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(starAmount),
  ]);
}

extension UpdateChatRevenueAmountDataClassExtensions
    on UpdateChatRevenueAmount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatRevenueAmount &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.revenueAmount,
            revenueAmount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(revenueAmount),
  ]);
}

extension UpdateStarRevenueStatusDataClassExtensions
    on UpdateStarRevenueStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateStarRevenueStatus &&
          const DeepCollectionEquality().equals(other.ownerId, ownerId) &&
          const DeepCollectionEquality().equals(other.status, status));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(ownerId),
    const DeepCollectionEquality().hash(status),
  ]);
}

extension UpdateSpeechRecognitionTrialDataClassExtensions
    on UpdateSpeechRecognitionTrial {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateSpeechRecognitionTrial &&
          const DeepCollectionEquality().equals(
            other.maxMediaDuration,
            maxMediaDuration,
          ) &&
          const DeepCollectionEquality().equals(
            other.weeklyCount,
            weeklyCount,
          ) &&
          const DeepCollectionEquality().equals(other.leftCount, leftCount) &&
          const DeepCollectionEquality().equals(
            other.nextResetDate,
            nextResetDate,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(maxMediaDuration),
    const DeepCollectionEquality().hash(weeklyCount),
    const DeepCollectionEquality().hash(leftCount),
    const DeepCollectionEquality().hash(nextResetDate),
  ]);
}

extension UpdateDiceEmojisDataClassExtensions on UpdateDiceEmojis {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateDiceEmojis &&
          const DeepCollectionEquality().equals(other.emojis, emojis));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(emojis),
  ]);
}

extension UpdateAnimatedEmojiMessageClickedDataClassExtensions
    on UpdateAnimatedEmojiMessageClicked {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateAnimatedEmojiMessageClicked &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension UpdateAnimationSearchParametersDataClassExtensions
    on UpdateAnimationSearchParameters {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateAnimationSearchParameters &&
          const DeepCollectionEquality().equals(other.provider, provider) &&
          const DeepCollectionEquality().equals(other.emojis, emojis));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(provider),
    const DeepCollectionEquality().hash(emojis),
  ]);
}

extension UpdateSuggestedActionsDataClassExtensions on UpdateSuggestedActions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateSuggestedActions &&
          const DeepCollectionEquality().equals(
            other.addedActions,
            addedActions,
          ) &&
          const DeepCollectionEquality().equals(
            other.removedActions,
            removedActions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(addedActions),
    const DeepCollectionEquality().hash(removedActions),
  ]);
}

extension UpdateSpeedLimitNotificationDataClassExtensions
    on UpdateSpeedLimitNotification {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateSpeedLimitNotification &&
          const DeepCollectionEquality().equals(other.isUpload, isUpload));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isUpload),
  ]);
}

extension UpdateContactCloseBirthdaysDataClassExtensions
    on UpdateContactCloseBirthdays {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateContactCloseBirthdays &&
          const DeepCollectionEquality().equals(
            other.closeBirthdayUsers,
            closeBirthdayUsers,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(closeBirthdayUsers),
  ]);
}

extension UpdateAutosaveSettingsDataClassExtensions on UpdateAutosaveSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateAutosaveSettings &&
          const DeepCollectionEquality().equals(other.scope, scope) &&
          const DeepCollectionEquality().equals(other.settings, settings));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(scope),
    const DeepCollectionEquality().hash(settings),
  ]);
}

extension UpdateBusinessConnectionDataClassExtensions
    on UpdateBusinessConnection {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateBusinessConnection &&
          const DeepCollectionEquality().equals(other.connection, connection));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(connection),
  ]);
}

extension UpdateNewBusinessMessageDataClassExtensions
    on UpdateNewBusinessMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateNewBusinessMessage &&
          const DeepCollectionEquality().equals(
            other.connectionId,
            connectionId,
          ) &&
          const DeepCollectionEquality().equals(other.message, message));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(connectionId),
    const DeepCollectionEquality().hash(message),
  ]);
}

extension UpdateBusinessMessageEditedDataClassExtensions
    on UpdateBusinessMessageEdited {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateBusinessMessageEdited &&
          const DeepCollectionEquality().equals(
            other.connectionId,
            connectionId,
          ) &&
          const DeepCollectionEquality().equals(other.message, message));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(connectionId),
    const DeepCollectionEquality().hash(message),
  ]);
}

extension UpdateBusinessMessagesDeletedDataClassExtensions
    on UpdateBusinessMessagesDeleted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateBusinessMessagesDeleted &&
          const DeepCollectionEquality().equals(
            other.connectionId,
            connectionId,
          ) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageIds, messageIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(connectionId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageIds),
  ]);
}

extension UpdateNewInlineQueryDataClassExtensions on UpdateNewInlineQuery {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateNewInlineQuery &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.senderUserId,
            senderUserId,
          ) &&
          const DeepCollectionEquality().equals(
            other.userLocation,
            userLocation,
          ) &&
          const DeepCollectionEquality().equals(other.chatType, chatType) &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.offset, offset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(senderUserId),
    const DeepCollectionEquality().hash(userLocation),
    const DeepCollectionEquality().hash(chatType),
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(offset),
  ]);
}

extension UpdateNewChosenInlineResultDataClassExtensions
    on UpdateNewChosenInlineResult {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateNewChosenInlineResult &&
          const DeepCollectionEquality().equals(
            other.senderUserId,
            senderUserId,
          ) &&
          const DeepCollectionEquality().equals(
            other.userLocation,
            userLocation,
          ) &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.resultId, resultId) &&
          const DeepCollectionEquality().equals(
            other.inlineMessageId,
            inlineMessageId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(senderUserId),
    const DeepCollectionEquality().hash(userLocation),
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(resultId),
    const DeepCollectionEquality().hash(inlineMessageId),
  ]);
}

extension UpdateNewCallbackQueryDataClassExtensions on UpdateNewCallbackQuery {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateNewCallbackQuery &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.senderUserId,
            senderUserId,
          ) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.chatInstance,
            chatInstance,
          ) &&
          const DeepCollectionEquality().equals(other.payload, payload));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(senderUserId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(chatInstance),
    const DeepCollectionEquality().hash(payload),
  ]);
}

extension UpdateNewInlineCallbackQueryDataClassExtensions
    on UpdateNewInlineCallbackQuery {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateNewInlineCallbackQuery &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.senderUserId,
            senderUserId,
          ) &&
          const DeepCollectionEquality().equals(
            other.inlineMessageId,
            inlineMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.chatInstance,
            chatInstance,
          ) &&
          const DeepCollectionEquality().equals(other.payload, payload));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(senderUserId),
    const DeepCollectionEquality().hash(inlineMessageId),
    const DeepCollectionEquality().hash(chatInstance),
    const DeepCollectionEquality().hash(payload),
  ]);
}

extension UpdateNewBusinessCallbackQueryDataClassExtensions
    on UpdateNewBusinessCallbackQuery {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateNewBusinessCallbackQuery &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.senderUserId,
            senderUserId,
          ) &&
          const DeepCollectionEquality().equals(
            other.connectionId,
            connectionId,
          ) &&
          const DeepCollectionEquality().equals(other.message, message) &&
          const DeepCollectionEquality().equals(
            other.chatInstance,
            chatInstance,
          ) &&
          const DeepCollectionEquality().equals(other.payload, payload));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(senderUserId),
    const DeepCollectionEquality().hash(connectionId),
    const DeepCollectionEquality().hash(message),
    const DeepCollectionEquality().hash(chatInstance),
    const DeepCollectionEquality().hash(payload),
  ]);
}

extension UpdateNewShippingQueryDataClassExtensions on UpdateNewShippingQuery {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateNewShippingQuery &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.senderUserId,
            senderUserId,
          ) &&
          const DeepCollectionEquality().equals(
            other.invoicePayload,
            invoicePayload,
          ) &&
          const DeepCollectionEquality().equals(
            other.shippingAddress,
            shippingAddress,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(senderUserId),
    const DeepCollectionEquality().hash(invoicePayload),
    const DeepCollectionEquality().hash(shippingAddress),
  ]);
}

extension UpdateNewPreCheckoutQueryDataClassExtensions
    on UpdateNewPreCheckoutQuery {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateNewPreCheckoutQuery &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(
            other.senderUserId,
            senderUserId,
          ) &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(
            other.totalAmount,
            totalAmount,
          ) &&
          const DeepCollectionEquality().equals(
            other.invoicePayload,
            invoicePayload,
          ) &&
          const DeepCollectionEquality().equals(
            other.shippingOptionId,
            shippingOptionId,
          ) &&
          const DeepCollectionEquality().equals(other.orderInfo, orderInfo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(senderUserId),
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(totalAmount),
    const DeepCollectionEquality().hash(invoicePayload),
    const DeepCollectionEquality().hash(shippingOptionId),
    const DeepCollectionEquality().hash(orderInfo),
  ]);
}

extension UpdateNewCustomEventDataClassExtensions on UpdateNewCustomEvent {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateNewCustomEvent &&
          const DeepCollectionEquality().equals(other.event, event));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(event)]);
}

extension UpdateNewCustomQueryDataClassExtensions on UpdateNewCustomQuery {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateNewCustomQuery &&
          const DeepCollectionEquality().equals(other.id, id) &&
          const DeepCollectionEquality().equals(other.data, data) &&
          const DeepCollectionEquality().equals(other.timeout, timeout));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(id),
    const DeepCollectionEquality().hash(data),
    const DeepCollectionEquality().hash(timeout),
  ]);
}

extension UpdatePollDataClassExtensions on UpdatePoll {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdatePoll &&
          const DeepCollectionEquality().equals(other.poll, poll));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(poll)]);
}

extension UpdatePollAnswerDataClassExtensions on UpdatePollAnswer {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdatePollAnswer &&
          const DeepCollectionEquality().equals(other.pollId, pollId) &&
          const DeepCollectionEquality().equals(other.voterId, voterId) &&
          const DeepCollectionEquality().equals(other.optionIds, optionIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(pollId),
    const DeepCollectionEquality().hash(voterId),
    const DeepCollectionEquality().hash(optionIds),
  ]);
}

extension UpdateChatMemberDataClassExtensions on UpdateChatMember {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatMember &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.actorUserId,
            actorUserId,
          ) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink) &&
          const DeepCollectionEquality().equals(
            other.viaJoinRequest,
            viaJoinRequest,
          ) &&
          const DeepCollectionEquality().equals(
            other.viaChatFolderInviteLink,
            viaChatFolderInviteLink,
          ) &&
          const DeepCollectionEquality().equals(
            other.oldChatMember,
            oldChatMember,
          ) &&
          const DeepCollectionEquality().equals(
            other.newChatMember,
            newChatMember,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(actorUserId),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(inviteLink),
    const DeepCollectionEquality().hash(viaJoinRequest),
    const DeepCollectionEquality().hash(viaChatFolderInviteLink),
    const DeepCollectionEquality().hash(oldChatMember),
    const DeepCollectionEquality().hash(newChatMember),
  ]);
}

extension UpdateNewChatJoinRequestDataClassExtensions
    on UpdateNewChatJoinRequest {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateNewChatJoinRequest &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.request, request) &&
          const DeepCollectionEquality().equals(other.userChatId, userChatId) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(request),
    const DeepCollectionEquality().hash(userChatId),
    const DeepCollectionEquality().hash(inviteLink),
  ]);
}

extension UpdateChatBoostDataClassExtensions on UpdateChatBoost {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateChatBoost &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.boost, boost));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(boost),
  ]);
}

extension UpdateMessageReactionDataClassExtensions on UpdateMessageReaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateMessageReaction &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.actorId, actorId) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(
            other.oldReactionTypes,
            oldReactionTypes,
          ) &&
          const DeepCollectionEquality().equals(
            other.newReactionTypes,
            newReactionTypes,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(actorId),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(oldReactionTypes),
    const DeepCollectionEquality().hash(newReactionTypes),
  ]);
}

extension UpdateMessageReactionsDataClassExtensions on UpdateMessageReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdateMessageReactions &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.date, date) &&
          const DeepCollectionEquality().equals(other.reactions, reactions));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(date),
    const DeepCollectionEquality().hash(reactions),
  ]);
}

extension UpdatePaidMediaPurchasedDataClassExtensions
    on UpdatePaidMediaPurchased {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpdatePaidMediaPurchased &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.payload, payload));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(payload),
  ]);
}

extension UpdatesDataClassExtensions on Updates {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is Updates &&
          const DeepCollectionEquality().equals(other.updates, updates));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(updates),
  ]);
}

extension LogStreamDataClassExtensions on LogStream {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is LogStream);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension LogStreamDefaultDataClassExtensions on LogStreamDefault {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is LogStreamDefault);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension LogStreamFileDataClassExtensions on LogStreamFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LogStreamFile &&
          const DeepCollectionEquality().equals(other.path, path) &&
          const DeepCollectionEquality().equals(
            other.maxFileSize,
            maxFileSize,
          ) &&
          const DeepCollectionEquality().equals(
            other.redirectStderr,
            redirectStderr,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(path),
    const DeepCollectionEquality().hash(maxFileSize),
    const DeepCollectionEquality().hash(redirectStderr),
  ]);
}

extension LogStreamEmptyDataClassExtensions on LogStreamEmpty {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is LogStreamEmpty);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension LogVerbosityLevelDataClassExtensions on LogVerbosityLevel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LogVerbosityLevel &&
          const DeepCollectionEquality().equals(
            other.verbosityLevel,
            verbosityLevel,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(verbosityLevel),
  ]);
}

extension LogTagsDataClassExtensions on LogTags {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LogTags &&
          const DeepCollectionEquality().equals(other.tags, tags));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(tags)]);
}

extension UserSupportInfoDataClassExtensions on UserSupportInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UserSupportInfo &&
          const DeepCollectionEquality().equals(other.message, message) &&
          const DeepCollectionEquality().equals(other.author, author) &&
          const DeepCollectionEquality().equals(other.date, date));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(message),
    const DeepCollectionEquality().hash(author),
    const DeepCollectionEquality().hash(date),
  ]);
}

extension TestIntDataClassExtensions on TestInt {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TestInt &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(value)]);
}

extension TestStringDataClassExtensions on TestString {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TestString &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(value)]);
}

extension TestBytesDataClassExtensions on TestBytes {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TestBytes &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(value)]);
}

extension TestVectorIntDataClassExtensions on TestVectorInt {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TestVectorInt &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(value)]);
}

extension TestVectorIntObjectDataClassExtensions on TestVectorIntObject {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TestVectorIntObject &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(value)]);
}

extension TestVectorStringDataClassExtensions on TestVectorString {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TestVectorString &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(value)]);
}

extension TestVectorStringObjectDataClassExtensions on TestVectorStringObject {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TestVectorStringObject &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(value)]);
}

extension GetAuthorizationStateDataClassExtensions on GetAuthorizationState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetAuthorizationState);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SetTdlibParametersDataClassExtensions on SetTdlibParameters {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetTdlibParameters &&
          const DeepCollectionEquality().equals(other.useTestDc, useTestDc) &&
          const DeepCollectionEquality().equals(
            other.databaseDirectory,
            databaseDirectory,
          ) &&
          const DeepCollectionEquality().equals(
            other.filesDirectory,
            filesDirectory,
          ) &&
          const DeepCollectionEquality().equals(
            other.databaseEncryptionKey,
            databaseEncryptionKey,
          ) &&
          const DeepCollectionEquality().equals(
            other.useFileDatabase,
            useFileDatabase,
          ) &&
          const DeepCollectionEquality().equals(
            other.useChatInfoDatabase,
            useChatInfoDatabase,
          ) &&
          const DeepCollectionEquality().equals(
            other.useMessageDatabase,
            useMessageDatabase,
          ) &&
          const DeepCollectionEquality().equals(
            other.useSecretChats,
            useSecretChats,
          ) &&
          const DeepCollectionEquality().equals(other.apiId, apiId) &&
          const DeepCollectionEquality().equals(other.apiHash, apiHash) &&
          const DeepCollectionEquality().equals(
            other.systemLanguageCode,
            systemLanguageCode,
          ) &&
          const DeepCollectionEquality().equals(
            other.deviceModel,
            deviceModel,
          ) &&
          const DeepCollectionEquality().equals(
            other.systemVersion,
            systemVersion,
          ) &&
          const DeepCollectionEquality().equals(
            other.applicationVersion,
            applicationVersion,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(useTestDc),
    const DeepCollectionEquality().hash(databaseDirectory),
    const DeepCollectionEquality().hash(filesDirectory),
    const DeepCollectionEquality().hash(databaseEncryptionKey),
    const DeepCollectionEquality().hash(useFileDatabase),
    const DeepCollectionEquality().hash(useChatInfoDatabase),
    const DeepCollectionEquality().hash(useMessageDatabase),
    const DeepCollectionEquality().hash(useSecretChats),
    const DeepCollectionEquality().hash(apiId),
    const DeepCollectionEquality().hash(apiHash),
    const DeepCollectionEquality().hash(systemLanguageCode),
    const DeepCollectionEquality().hash(deviceModel),
    const DeepCollectionEquality().hash(systemVersion),
    const DeepCollectionEquality().hash(applicationVersion),
  ]);
}

extension SetAuthenticationPhoneNumberDataClassExtensions
    on SetAuthenticationPhoneNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetAuthenticationPhoneNumber &&
          const DeepCollectionEquality().equals(
            other.phoneNumber,
            phoneNumber,
          ) &&
          const DeepCollectionEquality().equals(other.settings, settings));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(phoneNumber),
    const DeepCollectionEquality().hash(settings),
  ]);
}

extension CheckAuthenticationPremiumPurchaseDataClassExtensions
    on CheckAuthenticationPremiumPurchase {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckAuthenticationPremiumPurchase &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
  ]);
}

extension SetAuthenticationPremiumPurchaseTransactionDataClassExtensions
    on SetAuthenticationPremiumPurchaseTransaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetAuthenticationPremiumPurchaseTransaction &&
          const DeepCollectionEquality().equals(
            other.transaction,
            transaction,
          ) &&
          const DeepCollectionEquality().equals(other.isRestore, isRestore) &&
          const DeepCollectionEquality().equals(other.currency, currency) &&
          const DeepCollectionEquality().equals(other.amount, amount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(transaction),
    const DeepCollectionEquality().hash(isRestore),
    const DeepCollectionEquality().hash(currency),
    const DeepCollectionEquality().hash(amount),
  ]);
}

extension SetAuthenticationEmailAddressDataClassExtensions
    on SetAuthenticationEmailAddress {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetAuthenticationEmailAddress &&
          const DeepCollectionEquality().equals(
            other.emailAddress,
            emailAddress,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(emailAddress),
  ]);
}

extension ResendAuthenticationCodeDataClassExtensions
    on ResendAuthenticationCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ResendAuthenticationCode &&
          const DeepCollectionEquality().equals(other.reason, reason));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(reason),
  ]);
}

extension CheckAuthenticationEmailCodeDataClassExtensions
    on CheckAuthenticationEmailCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckAuthenticationEmailCode &&
          const DeepCollectionEquality().equals(other.code, code));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(code)]);
}

extension CheckAuthenticationCodeDataClassExtensions
    on CheckAuthenticationCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckAuthenticationCode &&
          const DeepCollectionEquality().equals(other.code, code));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(code)]);
}

extension RequestQrCodeAuthenticationDataClassExtensions
    on RequestQrCodeAuthentication {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RequestQrCodeAuthentication &&
          const DeepCollectionEquality().equals(
            other.otherUserIds,
            otherUserIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(otherUserIds),
  ]);
}

extension RegisterUserDataClassExtensions on RegisterUser {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RegisterUser &&
          const DeepCollectionEquality().equals(other.firstName, firstName) &&
          const DeepCollectionEquality().equals(other.lastName, lastName) &&
          const DeepCollectionEquality().equals(
            other.disableNotification,
            disableNotification,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(firstName),
    const DeepCollectionEquality().hash(lastName),
    const DeepCollectionEquality().hash(disableNotification),
  ]);
}

extension ResetAuthenticationEmailAddressDataClassExtensions
    on ResetAuthenticationEmailAddress {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ResetAuthenticationEmailAddress);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CheckAuthenticationPasswordDataClassExtensions
    on CheckAuthenticationPassword {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckAuthenticationPassword &&
          const DeepCollectionEquality().equals(other.password, password));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(password),
  ]);
}

extension RequestAuthenticationPasswordRecoveryDataClassExtensions
    on RequestAuthenticationPasswordRecovery {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RequestAuthenticationPasswordRecovery);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CheckAuthenticationPasswordRecoveryCodeDataClassExtensions
    on CheckAuthenticationPasswordRecoveryCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckAuthenticationPasswordRecoveryCode &&
          const DeepCollectionEquality().equals(
            other.recoveryCode,
            recoveryCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(recoveryCode),
  ]);
}

extension RecoverAuthenticationPasswordDataClassExtensions
    on RecoverAuthenticationPassword {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RecoverAuthenticationPassword &&
          const DeepCollectionEquality().equals(
            other.recoveryCode,
            recoveryCode,
          ) &&
          const DeepCollectionEquality().equals(
            other.newPassword,
            newPassword,
          ) &&
          const DeepCollectionEquality().equals(other.newHint, newHint));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(recoveryCode),
    const DeepCollectionEquality().hash(newPassword),
    const DeepCollectionEquality().hash(newHint),
  ]);
}

extension SendAuthenticationFirebaseSmsDataClassExtensions
    on SendAuthenticationFirebaseSms {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendAuthenticationFirebaseSms &&
          const DeepCollectionEquality().equals(other.token, token));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(token)]);
}

extension ReportAuthenticationCodeMissingDataClassExtensions
    on ReportAuthenticationCodeMissing {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportAuthenticationCodeMissing &&
          const DeepCollectionEquality().equals(
            other.mobileNetworkCode,
            mobileNetworkCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(mobileNetworkCode),
  ]);
}

extension CheckAuthenticationBotTokenDataClassExtensions
    on CheckAuthenticationBotToken {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckAuthenticationBotToken &&
          const DeepCollectionEquality().equals(other.token, token));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(token)]);
}

extension LogOutDataClassExtensions on LogOut {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is LogOut);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CloseDataClassExtensions on Close {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is Close);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension DestroyDataClassExtensions on Destroy {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is Destroy);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ConfirmQrCodeAuthenticationDataClassExtensions
    on ConfirmQrCodeAuthentication {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ConfirmQrCodeAuthentication &&
          const DeepCollectionEquality().equals(other.link, link));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(link)]);
}

extension GetCurrentStateDataClassExtensions on GetCurrentState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetCurrentState);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SetDatabaseEncryptionKeyDataClassExtensions
    on SetDatabaseEncryptionKey {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetDatabaseEncryptionKey &&
          const DeepCollectionEquality().equals(
            other.newEncryptionKey,
            newEncryptionKey,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(newEncryptionKey),
  ]);
}

extension GetPasswordStateDataClassExtensions on GetPasswordState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetPasswordState);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SetPasswordDataClassExtensions on SetPassword {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetPassword &&
          const DeepCollectionEquality().equals(
            other.oldPassword,
            oldPassword,
          ) &&
          const DeepCollectionEquality().equals(
            other.newPassword,
            newPassword,
          ) &&
          const DeepCollectionEquality().equals(other.newHint, newHint) &&
          const DeepCollectionEquality().equals(
            other.setRecoveryEmailAddress,
            setRecoveryEmailAddress,
          ) &&
          const DeepCollectionEquality().equals(
            other.newRecoveryEmailAddress,
            newRecoveryEmailAddress,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(oldPassword),
    const DeepCollectionEquality().hash(newPassword),
    const DeepCollectionEquality().hash(newHint),
    const DeepCollectionEquality().hash(setRecoveryEmailAddress),
    const DeepCollectionEquality().hash(newRecoveryEmailAddress),
  ]);
}

extension SetLoginEmailAddressDataClassExtensions on SetLoginEmailAddress {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetLoginEmailAddress &&
          const DeepCollectionEquality().equals(
            other.newLoginEmailAddress,
            newLoginEmailAddress,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(newLoginEmailAddress),
  ]);
}

extension ResendLoginEmailAddressCodeDataClassExtensions
    on ResendLoginEmailAddressCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ResendLoginEmailAddressCode);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CheckLoginEmailAddressCodeDataClassExtensions
    on CheckLoginEmailAddressCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckLoginEmailAddressCode &&
          const DeepCollectionEquality().equals(other.code, code));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(code)]);
}

extension GetRecoveryEmailAddressDataClassExtensions
    on GetRecoveryEmailAddress {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetRecoveryEmailAddress &&
          const DeepCollectionEquality().equals(other.password, password));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(password),
  ]);
}

extension SetRecoveryEmailAddressDataClassExtensions
    on SetRecoveryEmailAddress {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetRecoveryEmailAddress &&
          const DeepCollectionEquality().equals(other.password, password) &&
          const DeepCollectionEquality().equals(
            other.newRecoveryEmailAddress,
            newRecoveryEmailAddress,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(password),
    const DeepCollectionEquality().hash(newRecoveryEmailAddress),
  ]);
}

extension CheckRecoveryEmailAddressCodeDataClassExtensions
    on CheckRecoveryEmailAddressCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckRecoveryEmailAddressCode &&
          const DeepCollectionEquality().equals(other.code, code));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(code)]);
}

extension ResendRecoveryEmailAddressCodeDataClassExtensions
    on ResendRecoveryEmailAddressCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ResendRecoveryEmailAddressCode);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CancelRecoveryEmailAddressVerificationDataClassExtensions
    on CancelRecoveryEmailAddressVerification {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CancelRecoveryEmailAddressVerification);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension RequestPasswordRecoveryDataClassExtensions
    on RequestPasswordRecovery {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is RequestPasswordRecovery);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CheckPasswordRecoveryCodeDataClassExtensions
    on CheckPasswordRecoveryCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckPasswordRecoveryCode &&
          const DeepCollectionEquality().equals(
            other.recoveryCode,
            recoveryCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(recoveryCode),
  ]);
}

extension RecoverPasswordDataClassExtensions on RecoverPassword {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RecoverPassword &&
          const DeepCollectionEquality().equals(
            other.recoveryCode,
            recoveryCode,
          ) &&
          const DeepCollectionEquality().equals(
            other.newPassword,
            newPassword,
          ) &&
          const DeepCollectionEquality().equals(other.newHint, newHint));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(recoveryCode),
    const DeepCollectionEquality().hash(newPassword),
    const DeepCollectionEquality().hash(newHint),
  ]);
}

extension ResetPasswordDataClassExtensions on ResetPassword {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ResetPassword);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CancelPasswordResetDataClassExtensions on CancelPasswordReset {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CancelPasswordReset);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CreateTemporaryPasswordDataClassExtensions
    on CreateTemporaryPassword {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateTemporaryPassword &&
          const DeepCollectionEquality().equals(other.password, password) &&
          const DeepCollectionEquality().equals(other.validFor, validFor));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(password),
    const DeepCollectionEquality().hash(validFor),
  ]);
}

extension GetTemporaryPasswordStateDataClassExtensions
    on GetTemporaryPasswordState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetTemporaryPasswordState);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetMeDataClassExtensions on GetMe {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetMe);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetUserDataClassExtensions on GetUser {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetUser &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension GetUserFullInfoDataClassExtensions on GetUserFullInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetUserFullInfo &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension GetBasicGroupDataClassExtensions on GetBasicGroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetBasicGroup &&
          const DeepCollectionEquality().equals(
            other.basicGroupId,
            basicGroupId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(basicGroupId),
  ]);
}

extension GetBasicGroupFullInfoDataClassExtensions on GetBasicGroupFullInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetBasicGroupFullInfo &&
          const DeepCollectionEquality().equals(
            other.basicGroupId,
            basicGroupId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(basicGroupId),
  ]);
}

extension GetSupergroupDataClassExtensions on GetSupergroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetSupergroup &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
  ]);
}

extension GetSupergroupFullInfoDataClassExtensions on GetSupergroupFullInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetSupergroupFullInfo &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
  ]);
}

extension GetSecretChatDataClassExtensions on GetSecretChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetSecretChat &&
          const DeepCollectionEquality().equals(
            other.secretChatId,
            secretChatId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(secretChatId),
  ]);
}

extension GetChatDataClassExtensions on GetChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension GetMessageDataClassExtensions on GetMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension GetMessageLocallyDataClassExtensions on GetMessageLocally {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessageLocally &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension GetRepliedMessageDataClassExtensions on GetRepliedMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetRepliedMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension GetChatPinnedMessageDataClassExtensions on GetChatPinnedMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatPinnedMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension GetCallbackQueryMessageDataClassExtensions
    on GetCallbackQueryMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetCallbackQueryMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.callbackQueryId,
            callbackQueryId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(callbackQueryId),
  ]);
}

extension GetMessagesDataClassExtensions on GetMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageIds, messageIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageIds),
  ]);
}

extension GetMessagePropertiesDataClassExtensions on GetMessageProperties {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessageProperties &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension GetMessageThreadDataClassExtensions on GetMessageThread {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessageThread &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension GetMessageReadDateDataClassExtensions on GetMessageReadDate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessageReadDate &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension GetMessageViewersDataClassExtensions on GetMessageViewers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessageViewers &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension GetMessageAuthorDataClassExtensions on GetMessageAuthor {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessageAuthor &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension GetFileDataClassExtensions on GetFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetFile &&
          const DeepCollectionEquality().equals(other.fileId, fileId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileId),
  ]);
}

extension GetRemoteFileDataClassExtensions on GetRemoteFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetRemoteFile &&
          const DeepCollectionEquality().equals(
            other.remoteFileId,
            remoteFileId,
          ) &&
          const DeepCollectionEquality().equals(other.fileType, fileType));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(remoteFileId),
    const DeepCollectionEquality().hash(fileType),
  ]);
}

extension LoadChatsDataClassExtensions on LoadChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LoadChats &&
          const DeepCollectionEquality().equals(other.chatList, chatList) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatList),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetChatsDataClassExtensions on GetChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChats &&
          const DeepCollectionEquality().equals(other.chatList, chatList) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatList),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension SearchPublicChatDataClassExtensions on SearchPublicChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchPublicChat &&
          const DeepCollectionEquality().equals(other.username, username));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(username),
  ]);
}

extension SearchPublicChatsDataClassExtensions on SearchPublicChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchPublicChats &&
          const DeepCollectionEquality().equals(other.query, query));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(query)]);
}

extension SearchChatsDataClassExtensions on SearchChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchChats &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension SearchChatsOnServerDataClassExtensions on SearchChatsOnServer {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchChatsOnServer &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetRecommendedChatsDataClassExtensions on GetRecommendedChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetRecommendedChats);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetChatSimilarChatsDataClassExtensions on GetChatSimilarChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatSimilarChats &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension GetChatSimilarChatCountDataClassExtensions
    on GetChatSimilarChatCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatSimilarChatCount &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.returnLocal,
            returnLocal,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(returnLocal),
  ]);
}

extension OpenChatSimilarChatDataClassExtensions on OpenChatSimilarChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is OpenChatSimilarChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.openedChatId,
            openedChatId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(openedChatId),
  ]);
}

extension GetBotSimilarBotsDataClassExtensions on GetBotSimilarBots {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetBotSimilarBots &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
  ]);
}

extension GetBotSimilarBotCountDataClassExtensions on GetBotSimilarBotCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetBotSimilarBotCount &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.returnLocal,
            returnLocal,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(returnLocal),
  ]);
}

extension OpenBotSimilarBotDataClassExtensions on OpenBotSimilarBot {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is OpenBotSimilarBot &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.openedBotUserId,
            openedBotUserId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(openedBotUserId),
  ]);
}

extension GetTopChatsDataClassExtensions on GetTopChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetTopChats &&
          const DeepCollectionEquality().equals(other.category, category) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(category),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension RemoveTopChatDataClassExtensions on RemoveTopChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveTopChat &&
          const DeepCollectionEquality().equals(other.category, category) &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(category),
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension SearchRecentlyFoundChatsDataClassExtensions
    on SearchRecentlyFoundChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchRecentlyFoundChats &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension AddRecentlyFoundChatDataClassExtensions on AddRecentlyFoundChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddRecentlyFoundChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension RemoveRecentlyFoundChatDataClassExtensions
    on RemoveRecentlyFoundChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveRecentlyFoundChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension ClearRecentlyFoundChatsDataClassExtensions
    on ClearRecentlyFoundChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ClearRecentlyFoundChats);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetRecentlyOpenedChatsDataClassExtensions on GetRecentlyOpenedChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetRecentlyOpenedChats &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(limit)]);
}

extension CheckChatUsernameDataClassExtensions on CheckChatUsername {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckChatUsername &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.username, username));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(username),
  ]);
}

extension GetCreatedPublicChatsDataClassExtensions on GetCreatedPublicChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetCreatedPublicChats &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(type)]);
}

extension CheckCreatedPublicChatsLimitDataClassExtensions
    on CheckCreatedPublicChatsLimit {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckCreatedPublicChatsLimit &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(type)]);
}

extension GetSuitableDiscussionChatsDataClassExtensions
    on GetSuitableDiscussionChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetSuitableDiscussionChats);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetInactiveSupergroupChatsDataClassExtensions
    on GetInactiveSupergroupChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetInactiveSupergroupChats);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetSuitablePersonalChatsDataClassExtensions
    on GetSuitablePersonalChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetSuitablePersonalChats);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension LoadDirectMessagesChatTopicsDataClassExtensions
    on LoadDirectMessagesChatTopics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LoadDirectMessagesChatTopics &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetDirectMessagesChatTopicDataClassExtensions
    on GetDirectMessagesChatTopic {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetDirectMessagesChatTopic &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.topicId, topicId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(topicId),
  ]);
}

extension GetDirectMessagesChatTopicHistoryDataClassExtensions
    on GetDirectMessagesChatTopicHistory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetDirectMessagesChatTopicHistory &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.topicId, topicId) &&
          const DeepCollectionEquality().equals(
            other.fromMessageId,
            fromMessageId,
          ) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(topicId),
    const DeepCollectionEquality().hash(fromMessageId),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetDirectMessagesChatTopicMessageByDateDataClassExtensions
    on GetDirectMessagesChatTopicMessageByDate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetDirectMessagesChatTopicMessageByDate &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.topicId, topicId) &&
          const DeepCollectionEquality().equals(other.date, date));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(topicId),
    const DeepCollectionEquality().hash(date),
  ]);
}

extension DeleteDirectMessagesChatTopicHistoryDataClassExtensions
    on DeleteDirectMessagesChatTopicHistory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteDirectMessagesChatTopicHistory &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.topicId, topicId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(topicId),
  ]);
}

extension DeleteDirectMessagesChatTopicMessagesByDateDataClassExtensions
    on DeleteDirectMessagesChatTopicMessagesByDate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteDirectMessagesChatTopicMessagesByDate &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.topicId, topicId) &&
          const DeepCollectionEquality().equals(other.minDate, minDate) &&
          const DeepCollectionEquality().equals(other.maxDate, maxDate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(topicId),
    const DeepCollectionEquality().hash(minDate),
    const DeepCollectionEquality().hash(maxDate),
  ]);
}

extension SetDirectMessagesChatTopicIsMarkedAsUnreadDataClassExtensions
    on SetDirectMessagesChatTopicIsMarkedAsUnread {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetDirectMessagesChatTopicIsMarkedAsUnread &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.topicId, topicId) &&
          const DeepCollectionEquality().equals(
            other.isMarkedAsUnread,
            isMarkedAsUnread,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(topicId),
    const DeepCollectionEquality().hash(isMarkedAsUnread),
  ]);
}

extension SetDirectMessagesChatTopicDraftMessageDataClassExtensions
    on SetDirectMessagesChatTopicDraftMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetDirectMessagesChatTopicDraftMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.topicId, topicId) &&
          const DeepCollectionEquality().equals(
            other.draftMessage,
            draftMessage,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(topicId),
    const DeepCollectionEquality().hash(draftMessage),
  ]);
}

extension UnpinAllDirectMessagesChatTopicMessagesDataClassExtensions
    on UnpinAllDirectMessagesChatTopicMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UnpinAllDirectMessagesChatTopicMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.topicId, topicId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(topicId),
  ]);
}

extension ReadAllDirectMessagesChatTopicReactionsDataClassExtensions
    on ReadAllDirectMessagesChatTopicReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReadAllDirectMessagesChatTopicReactions &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.topicId, topicId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(topicId),
  ]);
}

extension GetDirectMessagesChatTopicRevenueDataClassExtensions
    on GetDirectMessagesChatTopicRevenue {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetDirectMessagesChatTopicRevenue &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.topicId, topicId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(topicId),
  ]);
}

extension ToggleDirectMessagesChatTopicCanSendUnpaidMessagesDataClassExtensions
    on ToggleDirectMessagesChatTopicCanSendUnpaidMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleDirectMessagesChatTopicCanSendUnpaidMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.topicId, topicId) &&
          const DeepCollectionEquality().equals(
            other.canSendUnpaidMessages,
            canSendUnpaidMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.refundPayments,
            refundPayments,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(topicId),
    const DeepCollectionEquality().hash(canSendUnpaidMessages),
    const DeepCollectionEquality().hash(refundPayments),
  ]);
}

extension LoadSavedMessagesTopicsDataClassExtensions
    on LoadSavedMessagesTopics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LoadSavedMessagesTopics &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(limit)]);
}

extension GetSavedMessagesTopicHistoryDataClassExtensions
    on GetSavedMessagesTopicHistory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetSavedMessagesTopicHistory &&
          const DeepCollectionEquality().equals(
            other.savedMessagesTopicId,
            savedMessagesTopicId,
          ) &&
          const DeepCollectionEquality().equals(
            other.fromMessageId,
            fromMessageId,
          ) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(savedMessagesTopicId),
    const DeepCollectionEquality().hash(fromMessageId),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetSavedMessagesTopicMessageByDateDataClassExtensions
    on GetSavedMessagesTopicMessageByDate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetSavedMessagesTopicMessageByDate &&
          const DeepCollectionEquality().equals(
            other.savedMessagesTopicId,
            savedMessagesTopicId,
          ) &&
          const DeepCollectionEquality().equals(other.date, date));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(savedMessagesTopicId),
    const DeepCollectionEquality().hash(date),
  ]);
}

extension DeleteSavedMessagesTopicHistoryDataClassExtensions
    on DeleteSavedMessagesTopicHistory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteSavedMessagesTopicHistory &&
          const DeepCollectionEquality().equals(
            other.savedMessagesTopicId,
            savedMessagesTopicId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(savedMessagesTopicId),
  ]);
}

extension DeleteSavedMessagesTopicMessagesByDateDataClassExtensions
    on DeleteSavedMessagesTopicMessagesByDate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteSavedMessagesTopicMessagesByDate &&
          const DeepCollectionEquality().equals(
            other.savedMessagesTopicId,
            savedMessagesTopicId,
          ) &&
          const DeepCollectionEquality().equals(other.minDate, minDate) &&
          const DeepCollectionEquality().equals(other.maxDate, maxDate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(savedMessagesTopicId),
    const DeepCollectionEquality().hash(minDate),
    const DeepCollectionEquality().hash(maxDate),
  ]);
}

extension ToggleSavedMessagesTopicIsPinnedDataClassExtensions
    on ToggleSavedMessagesTopicIsPinned {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleSavedMessagesTopicIsPinned &&
          const DeepCollectionEquality().equals(
            other.savedMessagesTopicId,
            savedMessagesTopicId,
          ) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(savedMessagesTopicId),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension SetPinnedSavedMessagesTopicsDataClassExtensions
    on SetPinnedSavedMessagesTopics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetPinnedSavedMessagesTopics &&
          const DeepCollectionEquality().equals(
            other.savedMessagesTopicIds,
            savedMessagesTopicIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(savedMessagesTopicIds),
  ]);
}

extension GetGroupsInCommonDataClassExtensions on GetGroupsInCommon {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetGroupsInCommon &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.offsetChatId,
            offsetChatId,
          ) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(offsetChatId),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetChatHistoryDataClassExtensions on GetChatHistory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatHistory &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.fromMessageId,
            fromMessageId,
          ) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit) &&
          const DeepCollectionEquality().equals(other.onlyLocal, onlyLocal));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(fromMessageId),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
    const DeepCollectionEquality().hash(onlyLocal),
  ]);
}

extension GetMessageThreadHistoryDataClassExtensions
    on GetMessageThreadHistory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessageThreadHistory &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.fromMessageId,
            fromMessageId,
          ) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(fromMessageId),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension DeleteChatHistoryDataClassExtensions on DeleteChatHistory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteChatHistory &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.removeFromChatList,
            removeFromChatList,
          ) &&
          const DeepCollectionEquality().equals(other.revoke, revoke));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(removeFromChatList),
    const DeepCollectionEquality().hash(revoke),
  ]);
}

extension DeleteChatDataClassExtensions on DeleteChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension SearchChatMessagesDataClassExtensions on SearchChatMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchChatMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.topicId, topicId) &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.senderId, senderId) &&
          const DeepCollectionEquality().equals(
            other.fromMessageId,
            fromMessageId,
          ) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit) &&
          const DeepCollectionEquality().equals(other.filter, filter));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(topicId),
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(senderId),
    const DeepCollectionEquality().hash(fromMessageId),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
    const DeepCollectionEquality().hash(filter),
  ]);
}

extension SearchMessagesDataClassExtensions on SearchMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchMessages &&
          const DeepCollectionEquality().equals(other.chatList, chatList) &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit) &&
          const DeepCollectionEquality().equals(other.filter, filter) &&
          const DeepCollectionEquality().equals(
            other.chatTypeFilter,
            chatTypeFilter,
          ) &&
          const DeepCollectionEquality().equals(other.minDate, minDate) &&
          const DeepCollectionEquality().equals(other.maxDate, maxDate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatList),
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
    const DeepCollectionEquality().hash(filter),
    const DeepCollectionEquality().hash(chatTypeFilter),
    const DeepCollectionEquality().hash(minDate),
    const DeepCollectionEquality().hash(maxDate),
  ]);
}

extension SearchSecretMessagesDataClassExtensions on SearchSecretMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchSecretMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit) &&
          const DeepCollectionEquality().equals(other.filter, filter));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
    const DeepCollectionEquality().hash(filter),
  ]);
}

extension SearchSavedMessagesDataClassExtensions on SearchSavedMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchSavedMessages &&
          const DeepCollectionEquality().equals(
            other.savedMessagesTopicId,
            savedMessagesTopicId,
          ) &&
          const DeepCollectionEquality().equals(other.tag, tag) &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(
            other.fromMessageId,
            fromMessageId,
          ) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(savedMessagesTopicId),
    const DeepCollectionEquality().hash(tag),
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(fromMessageId),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension SearchCallMessagesDataClassExtensions on SearchCallMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchCallMessages &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit) &&
          const DeepCollectionEquality().equals(other.onlyMissed, onlyMissed));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
    const DeepCollectionEquality().hash(onlyMissed),
  ]);
}

extension SearchOutgoingDocumentMessagesDataClassExtensions
    on SearchOutgoingDocumentMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchOutgoingDocumentMessages &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension SearchPublicMessagesByTagDataClassExtensions
    on SearchPublicMessagesByTag {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchPublicMessagesByTag &&
          const DeepCollectionEquality().equals(other.tag, tag) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(tag),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension SearchPublicStoriesByTagDataClassExtensions
    on SearchPublicStoriesByTag {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchPublicStoriesByTag &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.tag, tag) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(tag),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension SearchPublicStoriesByLocationDataClassExtensions
    on SearchPublicStoriesByLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchPublicStoriesByLocation &&
          const DeepCollectionEquality().equals(other.address, address) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(address),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension SearchPublicStoriesByVenueDataClassExtensions
    on SearchPublicStoriesByVenue {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchPublicStoriesByVenue &&
          const DeepCollectionEquality().equals(
            other.venueProvider,
            venueProvider,
          ) &&
          const DeepCollectionEquality().equals(other.venueId, venueId) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(venueProvider),
    const DeepCollectionEquality().hash(venueId),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetSearchedForTagsDataClassExtensions on GetSearchedForTags {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetSearchedForTags &&
          const DeepCollectionEquality().equals(other.tagPrefix, tagPrefix) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(tagPrefix),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension RemoveSearchedForTagDataClassExtensions on RemoveSearchedForTag {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveSearchedForTag &&
          const DeepCollectionEquality().equals(other.tag, tag));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(tag)]);
}

extension ClearSearchedForTagsDataClassExtensions on ClearSearchedForTags {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ClearSearchedForTags &&
          const DeepCollectionEquality().equals(
            other.clearCashtags,
            clearCashtags,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(clearCashtags),
  ]);
}

extension DeleteAllCallMessagesDataClassExtensions on DeleteAllCallMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteAllCallMessages &&
          const DeepCollectionEquality().equals(other.revoke, revoke));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(revoke),
  ]);
}

extension SearchChatRecentLocationMessagesDataClassExtensions
    on SearchChatRecentLocationMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchChatRecentLocationMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetChatMessageByDateDataClassExtensions on GetChatMessageByDate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatMessageByDate &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.date, date));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(date),
  ]);
}

extension GetChatSparseMessagePositionsDataClassExtensions
    on GetChatSparseMessagePositions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatSparseMessagePositions &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.filter, filter) &&
          const DeepCollectionEquality().equals(
            other.fromMessageId,
            fromMessageId,
          ) &&
          const DeepCollectionEquality().equals(other.limit, limit) &&
          const DeepCollectionEquality().equals(
            other.savedMessagesTopicId,
            savedMessagesTopicId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(filter),
    const DeepCollectionEquality().hash(fromMessageId),
    const DeepCollectionEquality().hash(limit),
    const DeepCollectionEquality().hash(savedMessagesTopicId),
  ]);
}

extension GetChatMessageCalendarDataClassExtensions on GetChatMessageCalendar {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatMessageCalendar &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.topicId, topicId) &&
          const DeepCollectionEquality().equals(other.filter, filter) &&
          const DeepCollectionEquality().equals(
            other.fromMessageId,
            fromMessageId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(topicId),
    const DeepCollectionEquality().hash(filter),
    const DeepCollectionEquality().hash(fromMessageId),
  ]);
}

extension GetChatMessageCountDataClassExtensions on GetChatMessageCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatMessageCount &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.topicId, topicId) &&
          const DeepCollectionEquality().equals(other.filter, filter) &&
          const DeepCollectionEquality().equals(
            other.returnLocal,
            returnLocal,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(topicId),
    const DeepCollectionEquality().hash(filter),
    const DeepCollectionEquality().hash(returnLocal),
  ]);
}

extension GetChatMessagePositionDataClassExtensions on GetChatMessagePosition {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatMessagePosition &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.topicId, topicId) &&
          const DeepCollectionEquality().equals(other.filter, filter) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(topicId),
    const DeepCollectionEquality().hash(filter),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension GetChatScheduledMessagesDataClassExtensions
    on GetChatScheduledMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatScheduledMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension GetChatSponsoredMessagesDataClassExtensions
    on GetChatSponsoredMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatSponsoredMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension ClickChatSponsoredMessageDataClassExtensions
    on ClickChatSponsoredMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ClickChatSponsoredMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.isMediaClick,
            isMediaClick,
          ) &&
          const DeepCollectionEquality().equals(
            other.fromFullscreen,
            fromFullscreen,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(isMediaClick),
    const DeepCollectionEquality().hash(fromFullscreen),
  ]);
}

extension ReportChatSponsoredMessageDataClassExtensions
    on ReportChatSponsoredMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportChatSponsoredMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.optionId, optionId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(optionId),
  ]);
}

extension GetSearchSponsoredChatsDataClassExtensions
    on GetSearchSponsoredChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetSearchSponsoredChats &&
          const DeepCollectionEquality().equals(other.query, query));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(query)]);
}

extension ViewSponsoredChatDataClassExtensions on ViewSponsoredChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ViewSponsoredChat &&
          const DeepCollectionEquality().equals(
            other.sponsoredChatUniqueId,
            sponsoredChatUniqueId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sponsoredChatUniqueId),
  ]);
}

extension OpenSponsoredChatDataClassExtensions on OpenSponsoredChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is OpenSponsoredChat &&
          const DeepCollectionEquality().equals(
            other.sponsoredChatUniqueId,
            sponsoredChatUniqueId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sponsoredChatUniqueId),
  ]);
}

extension ReportSponsoredChatDataClassExtensions on ReportSponsoredChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportSponsoredChat &&
          const DeepCollectionEquality().equals(
            other.sponsoredChatUniqueId,
            sponsoredChatUniqueId,
          ) &&
          const DeepCollectionEquality().equals(other.optionId, optionId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sponsoredChatUniqueId),
    const DeepCollectionEquality().hash(optionId),
  ]);
}

extension GetVideoMessageAdvertisementsDataClassExtensions
    on GetVideoMessageAdvertisements {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetVideoMessageAdvertisements &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension ViewVideoMessageAdvertisementDataClassExtensions
    on ViewVideoMessageAdvertisement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ViewVideoMessageAdvertisement &&
          const DeepCollectionEquality().equals(
            other.advertisementUniqueId,
            advertisementUniqueId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(advertisementUniqueId),
  ]);
}

extension ClickVideoMessageAdvertisementDataClassExtensions
    on ClickVideoMessageAdvertisement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ClickVideoMessageAdvertisement &&
          const DeepCollectionEquality().equals(
            other.advertisementUniqueId,
            advertisementUniqueId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(advertisementUniqueId),
  ]);
}

extension ReportVideoMessageAdvertisementDataClassExtensions
    on ReportVideoMessageAdvertisement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportVideoMessageAdvertisement &&
          const DeepCollectionEquality().equals(
            other.advertisementUniqueId,
            advertisementUniqueId,
          ) &&
          const DeepCollectionEquality().equals(other.optionId, optionId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(advertisementUniqueId),
    const DeepCollectionEquality().hash(optionId),
  ]);
}

extension RemoveNotificationDataClassExtensions on RemoveNotification {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveNotification &&
          const DeepCollectionEquality().equals(
            other.notificationGroupId,
            notificationGroupId,
          ) &&
          const DeepCollectionEquality().equals(
            other.notificationId,
            notificationId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(notificationGroupId),
    const DeepCollectionEquality().hash(notificationId),
  ]);
}

extension RemoveNotificationGroupDataClassExtensions
    on RemoveNotificationGroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveNotificationGroup &&
          const DeepCollectionEquality().equals(
            other.notificationGroupId,
            notificationGroupId,
          ) &&
          const DeepCollectionEquality().equals(
            other.maxNotificationId,
            maxNotificationId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(notificationGroupId),
    const DeepCollectionEquality().hash(maxNotificationId),
  ]);
}

extension GetMessageLinkDataClassExtensions on GetMessageLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessageLink &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.mediaTimestamp,
            mediaTimestamp,
          ) &&
          const DeepCollectionEquality().equals(other.forAlbum, forAlbum) &&
          const DeepCollectionEquality().equals(
            other.inMessageThread,
            inMessageThread,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(mediaTimestamp),
    const DeepCollectionEquality().hash(forAlbum),
    const DeepCollectionEquality().hash(inMessageThread),
  ]);
}

extension GetMessageEmbeddingCodeDataClassExtensions
    on GetMessageEmbeddingCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessageEmbeddingCode &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.forAlbum, forAlbum));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(forAlbum),
  ]);
}

extension GetMessageLinkInfoDataClassExtensions on GetMessageLinkInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessageLinkInfo &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(url)]);
}

extension TranslateTextDataClassExtensions on TranslateText {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TranslateText &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(
            other.toLanguageCode,
            toLanguageCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(toLanguageCode),
  ]);
}

extension TranslateMessageTextDataClassExtensions on TranslateMessageText {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TranslateMessageText &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.toLanguageCode,
            toLanguageCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(toLanguageCode),
  ]);
}

extension RecognizeSpeechDataClassExtensions on RecognizeSpeech {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RecognizeSpeech &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension RateSpeechRecognitionDataClassExtensions on RateSpeechRecognition {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RateSpeechRecognition &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.isGood, isGood));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(isGood),
  ]);
}

extension GetChatAvailableMessageSendersDataClassExtensions
    on GetChatAvailableMessageSenders {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatAvailableMessageSenders &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension SetChatMessageSenderDataClassExtensions on SetChatMessageSender {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatMessageSender &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageSenderId,
            messageSenderId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageSenderId),
  ]);
}

extension SendMessageDataClassExtensions on SendMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ) &&
          const DeepCollectionEquality().equals(other.replyTo, replyTo) &&
          const DeepCollectionEquality().equals(other.options, options) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
    const DeepCollectionEquality().hash(replyTo),
    const DeepCollectionEquality().hash(options),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension SendMessageAlbumDataClassExtensions on SendMessageAlbum {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendMessageAlbum &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ) &&
          const DeepCollectionEquality().equals(other.replyTo, replyTo) &&
          const DeepCollectionEquality().equals(other.options, options) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContents,
            inputMessageContents,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
    const DeepCollectionEquality().hash(replyTo),
    const DeepCollectionEquality().hash(options),
    const DeepCollectionEquality().hash(inputMessageContents),
  ]);
}

extension SendBotStartMessageDataClassExtensions on SendBotStartMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendBotStartMessage &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.parameter, parameter));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(parameter),
  ]);
}

extension SendInlineQueryResultMessageDataClassExtensions
    on SendInlineQueryResultMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendInlineQueryResultMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ) &&
          const DeepCollectionEquality().equals(other.replyTo, replyTo) &&
          const DeepCollectionEquality().equals(other.options, options) &&
          const DeepCollectionEquality().equals(other.queryId, queryId) &&
          const DeepCollectionEquality().equals(other.resultId, resultId) &&
          const DeepCollectionEquality().equals(other.hideViaBot, hideViaBot));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
    const DeepCollectionEquality().hash(replyTo),
    const DeepCollectionEquality().hash(options),
    const DeepCollectionEquality().hash(queryId),
    const DeepCollectionEquality().hash(resultId),
    const DeepCollectionEquality().hash(hideViaBot),
  ]);
}

extension ForwardMessagesDataClassExtensions on ForwardMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ForwardMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ) &&
          const DeepCollectionEquality().equals(other.fromChatId, fromChatId) &&
          const DeepCollectionEquality().equals(other.messageIds, messageIds) &&
          const DeepCollectionEquality().equals(other.options, options) &&
          const DeepCollectionEquality().equals(other.sendCopy, sendCopy) &&
          const DeepCollectionEquality().equals(
            other.removeCaption,
            removeCaption,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
    const DeepCollectionEquality().hash(fromChatId),
    const DeepCollectionEquality().hash(messageIds),
    const DeepCollectionEquality().hash(options),
    const DeepCollectionEquality().hash(sendCopy),
    const DeepCollectionEquality().hash(removeCaption),
  ]);
}

extension SendQuickReplyShortcutMessagesDataClassExtensions
    on SendQuickReplyShortcutMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendQuickReplyShortcutMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.shortcutId, shortcutId) &&
          const DeepCollectionEquality().equals(other.sendingId, sendingId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(shortcutId),
    const DeepCollectionEquality().hash(sendingId),
  ]);
}

extension ResendMessagesDataClassExtensions on ResendMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ResendMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageIds, messageIds) &&
          const DeepCollectionEquality().equals(other.quote, quote) &&
          const DeepCollectionEquality().equals(
            other.paidMessageStarCount,
            paidMessageStarCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageIds),
    const DeepCollectionEquality().hash(quote),
    const DeepCollectionEquality().hash(paidMessageStarCount),
  ]);
}

extension AddLocalMessageDataClassExtensions on AddLocalMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddLocalMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.senderId, senderId) &&
          const DeepCollectionEquality().equals(other.replyTo, replyTo) &&
          const DeepCollectionEquality().equals(
            other.disableNotification,
            disableNotification,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(senderId),
    const DeepCollectionEquality().hash(replyTo),
    const DeepCollectionEquality().hash(disableNotification),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension DeleteMessagesDataClassExtensions on DeleteMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageIds, messageIds) &&
          const DeepCollectionEquality().equals(other.revoke, revoke));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageIds),
    const DeepCollectionEquality().hash(revoke),
  ]);
}

extension DeleteChatMessagesBySenderDataClassExtensions
    on DeleteChatMessagesBySender {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteChatMessagesBySender &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.senderId, senderId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(senderId),
  ]);
}

extension DeleteChatMessagesByDateDataClassExtensions
    on DeleteChatMessagesByDate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteChatMessagesByDate &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.minDate, minDate) &&
          const DeepCollectionEquality().equals(other.maxDate, maxDate) &&
          const DeepCollectionEquality().equals(other.revoke, revoke));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(minDate),
    const DeepCollectionEquality().hash(maxDate),
    const DeepCollectionEquality().hash(revoke),
  ]);
}

extension EditMessageTextDataClassExtensions on EditMessageText {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditMessageText &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension EditMessageLiveLocationDataClassExtensions
    on EditMessageLiveLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditMessageLiveLocation &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(other.location, location) &&
          const DeepCollectionEquality().equals(other.livePeriod, livePeriod) &&
          const DeepCollectionEquality().equals(other.heading, heading) &&
          const DeepCollectionEquality().equals(
            other.proximityAlertRadius,
            proximityAlertRadius,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(location),
    const DeepCollectionEquality().hash(livePeriod),
    const DeepCollectionEquality().hash(heading),
    const DeepCollectionEquality().hash(proximityAlertRadius),
  ]);
}

extension EditMessageChecklistDataClassExtensions on EditMessageChecklist {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditMessageChecklist &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(other.checklist, checklist));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(checklist),
  ]);
}

extension EditMessageMediaDataClassExtensions on EditMessageMedia {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditMessageMedia &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension EditMessageCaptionDataClassExtensions on EditMessageCaption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditMessageCaption &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(
            other.showCaptionAboveMedia,
            showCaptionAboveMedia,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(showCaptionAboveMedia),
  ]);
}

extension EditMessageReplyMarkupDataClassExtensions on EditMessageReplyMarkup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditMessageReplyMarkup &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(replyMarkup),
  ]);
}

extension EditInlineMessageTextDataClassExtensions on EditInlineMessageText {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditInlineMessageText &&
          const DeepCollectionEquality().equals(
            other.inlineMessageId,
            inlineMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inlineMessageId),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension EditInlineMessageLiveLocationDataClassExtensions
    on EditInlineMessageLiveLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditInlineMessageLiveLocation &&
          const DeepCollectionEquality().equals(
            other.inlineMessageId,
            inlineMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(other.location, location) &&
          const DeepCollectionEquality().equals(other.livePeriod, livePeriod) &&
          const DeepCollectionEquality().equals(other.heading, heading) &&
          const DeepCollectionEquality().equals(
            other.proximityAlertRadius,
            proximityAlertRadius,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inlineMessageId),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(location),
    const DeepCollectionEquality().hash(livePeriod),
    const DeepCollectionEquality().hash(heading),
    const DeepCollectionEquality().hash(proximityAlertRadius),
  ]);
}

extension EditInlineMessageMediaDataClassExtensions on EditInlineMessageMedia {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditInlineMessageMedia &&
          const DeepCollectionEquality().equals(
            other.inlineMessageId,
            inlineMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inlineMessageId),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension EditInlineMessageCaptionDataClassExtensions
    on EditInlineMessageCaption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditInlineMessageCaption &&
          const DeepCollectionEquality().equals(
            other.inlineMessageId,
            inlineMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(
            other.showCaptionAboveMedia,
            showCaptionAboveMedia,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inlineMessageId),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(showCaptionAboveMedia),
  ]);
}

extension EditInlineMessageReplyMarkupDataClassExtensions
    on EditInlineMessageReplyMarkup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditInlineMessageReplyMarkup &&
          const DeepCollectionEquality().equals(
            other.inlineMessageId,
            inlineMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inlineMessageId),
    const DeepCollectionEquality().hash(replyMarkup),
  ]);
}

extension EditMessageSchedulingStateDataClassExtensions
    on EditMessageSchedulingState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditMessageSchedulingState &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.schedulingState,
            schedulingState,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(schedulingState),
  ]);
}

extension SetMessageFactCheckDataClassExtensions on SetMessageFactCheck {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetMessageFactCheck &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(text),
  ]);
}

extension SendBusinessMessageDataClassExtensions on SendBusinessMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendBusinessMessage &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.replyTo, replyTo) &&
          const DeepCollectionEquality().equals(
            other.disableNotification,
            disableNotification,
          ) &&
          const DeepCollectionEquality().equals(
            other.protectContent,
            protectContent,
          ) &&
          const DeepCollectionEquality().equals(other.effectId, effectId) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(replyTo),
    const DeepCollectionEquality().hash(disableNotification),
    const DeepCollectionEquality().hash(protectContent),
    const DeepCollectionEquality().hash(effectId),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension SendBusinessMessageAlbumDataClassExtensions
    on SendBusinessMessageAlbum {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendBusinessMessageAlbum &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.replyTo, replyTo) &&
          const DeepCollectionEquality().equals(
            other.disableNotification,
            disableNotification,
          ) &&
          const DeepCollectionEquality().equals(
            other.protectContent,
            protectContent,
          ) &&
          const DeepCollectionEquality().equals(other.effectId, effectId) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContents,
            inputMessageContents,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(replyTo),
    const DeepCollectionEquality().hash(disableNotification),
    const DeepCollectionEquality().hash(protectContent),
    const DeepCollectionEquality().hash(effectId),
    const DeepCollectionEquality().hash(inputMessageContents),
  ]);
}

extension EditBusinessMessageTextDataClassExtensions
    on EditBusinessMessageText {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditBusinessMessageText &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension EditBusinessMessageLiveLocationDataClassExtensions
    on EditBusinessMessageLiveLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditBusinessMessageLiveLocation &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(other.location, location) &&
          const DeepCollectionEquality().equals(other.livePeriod, livePeriod) &&
          const DeepCollectionEquality().equals(other.heading, heading) &&
          const DeepCollectionEquality().equals(
            other.proximityAlertRadius,
            proximityAlertRadius,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(location),
    const DeepCollectionEquality().hash(livePeriod),
    const DeepCollectionEquality().hash(heading),
    const DeepCollectionEquality().hash(proximityAlertRadius),
  ]);
}

extension EditBusinessMessageChecklistDataClassExtensions
    on EditBusinessMessageChecklist {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditBusinessMessageChecklist &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(other.checklist, checklist));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(checklist),
  ]);
}

extension EditBusinessMessageMediaDataClassExtensions
    on EditBusinessMessageMedia {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditBusinessMessageMedia &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension EditBusinessMessageCaptionDataClassExtensions
    on EditBusinessMessageCaption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditBusinessMessageCaption &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(
            other.showCaptionAboveMedia,
            showCaptionAboveMedia,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(replyMarkup),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(showCaptionAboveMedia),
  ]);
}

extension EditBusinessMessageReplyMarkupDataClassExtensions
    on EditBusinessMessageReplyMarkup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditBusinessMessageReplyMarkup &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(replyMarkup),
  ]);
}

extension StopBusinessPollDataClassExtensions on StopBusinessPoll {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StopBusinessPoll &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(replyMarkup),
  ]);
}

extension SetBusinessMessageIsPinnedDataClassExtensions
    on SetBusinessMessageIsPinned {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBusinessMessageIsPinned &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension ReadBusinessMessageDataClassExtensions on ReadBusinessMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReadBusinessMessage &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension DeleteBusinessMessagesDataClassExtensions on DeleteBusinessMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteBusinessMessages &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.messageIds, messageIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(messageIds),
  ]);
}

extension EditBusinessStoryDataClassExtensions on EditBusinessStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditBusinessStory &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId) &&
          const DeepCollectionEquality().equals(other.content, content) &&
          const DeepCollectionEquality().equals(other.areas, areas) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(
            other.privacySettings,
            privacySettings,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
    const DeepCollectionEquality().hash(content),
    const DeepCollectionEquality().hash(areas),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(privacySettings),
  ]);
}

extension DeleteBusinessStoryDataClassExtensions on DeleteBusinessStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteBusinessStory &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(storyId),
  ]);
}

extension SetBusinessAccountNameDataClassExtensions on SetBusinessAccountName {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBusinessAccountName &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.firstName, firstName) &&
          const DeepCollectionEquality().equals(other.lastName, lastName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(firstName),
    const DeepCollectionEquality().hash(lastName),
  ]);
}

extension SetBusinessAccountBioDataClassExtensions on SetBusinessAccountBio {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBusinessAccountBio &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.bio, bio));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(bio),
  ]);
}

extension SetBusinessAccountProfilePhotoDataClassExtensions
    on SetBusinessAccountProfilePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBusinessAccountProfilePhoto &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(other.isPublic, isPublic));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(isPublic),
  ]);
}

extension SetBusinessAccountUsernameDataClassExtensions
    on SetBusinessAccountUsername {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBusinessAccountUsername &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.username, username));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(username),
  ]);
}

extension SetBusinessAccountGiftSettingsDataClassExtensions
    on SetBusinessAccountGiftSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBusinessAccountGiftSettings &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.settings, settings));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(settings),
  ]);
}

extension GetBusinessAccountStarAmountDataClassExtensions
    on GetBusinessAccountStarAmount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetBusinessAccountStarAmount &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
  ]);
}

extension TransferBusinessAccountStarsDataClassExtensions
    on TransferBusinessAccountStars {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TransferBusinessAccountStars &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension CheckQuickReplyShortcutNameDataClassExtensions
    on CheckQuickReplyShortcutName {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckQuickReplyShortcutName &&
          const DeepCollectionEquality().equals(other.name, name));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(name)]);
}

extension LoadQuickReplyShortcutsDataClassExtensions
    on LoadQuickReplyShortcuts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is LoadQuickReplyShortcuts);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SetQuickReplyShortcutNameDataClassExtensions
    on SetQuickReplyShortcutName {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetQuickReplyShortcutName &&
          const DeepCollectionEquality().equals(other.shortcutId, shortcutId) &&
          const DeepCollectionEquality().equals(other.name, name));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortcutId),
    const DeepCollectionEquality().hash(name),
  ]);
}

extension DeleteQuickReplyShortcutDataClassExtensions
    on DeleteQuickReplyShortcut {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteQuickReplyShortcut &&
          const DeepCollectionEquality().equals(other.shortcutId, shortcutId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortcutId),
  ]);
}

extension ReorderQuickReplyShortcutsDataClassExtensions
    on ReorderQuickReplyShortcuts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReorderQuickReplyShortcuts &&
          const DeepCollectionEquality().equals(
            other.shortcutIds,
            shortcutIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortcutIds),
  ]);
}

extension LoadQuickReplyShortcutMessagesDataClassExtensions
    on LoadQuickReplyShortcutMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LoadQuickReplyShortcutMessages &&
          const DeepCollectionEquality().equals(other.shortcutId, shortcutId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortcutId),
  ]);
}

extension DeleteQuickReplyShortcutMessagesDataClassExtensions
    on DeleteQuickReplyShortcutMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteQuickReplyShortcutMessages &&
          const DeepCollectionEquality().equals(other.shortcutId, shortcutId) &&
          const DeepCollectionEquality().equals(other.messageIds, messageIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortcutId),
    const DeepCollectionEquality().hash(messageIds),
  ]);
}

extension AddQuickReplyShortcutMessageDataClassExtensions
    on AddQuickReplyShortcutMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddQuickReplyShortcutMessage &&
          const DeepCollectionEquality().equals(
            other.shortcutName,
            shortcutName,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyToMessageId,
            replyToMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortcutName),
    const DeepCollectionEquality().hash(replyToMessageId),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension AddQuickReplyShortcutInlineQueryResultMessageDataClassExtensions
    on AddQuickReplyShortcutInlineQueryResultMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddQuickReplyShortcutInlineQueryResultMessage &&
          const DeepCollectionEquality().equals(
            other.shortcutName,
            shortcutName,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyToMessageId,
            replyToMessageId,
          ) &&
          const DeepCollectionEquality().equals(other.queryId, queryId) &&
          const DeepCollectionEquality().equals(other.resultId, resultId) &&
          const DeepCollectionEquality().equals(other.hideViaBot, hideViaBot));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortcutName),
    const DeepCollectionEquality().hash(replyToMessageId),
    const DeepCollectionEquality().hash(queryId),
    const DeepCollectionEquality().hash(resultId),
    const DeepCollectionEquality().hash(hideViaBot),
  ]);
}

extension AddQuickReplyShortcutMessageAlbumDataClassExtensions
    on AddQuickReplyShortcutMessageAlbum {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddQuickReplyShortcutMessageAlbum &&
          const DeepCollectionEquality().equals(
            other.shortcutName,
            shortcutName,
          ) &&
          const DeepCollectionEquality().equals(
            other.replyToMessageId,
            replyToMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContents,
            inputMessageContents,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortcutName),
    const DeepCollectionEquality().hash(replyToMessageId),
    const DeepCollectionEquality().hash(inputMessageContents),
  ]);
}

extension ReaddQuickReplyShortcutMessagesDataClassExtensions
    on ReaddQuickReplyShortcutMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReaddQuickReplyShortcutMessages &&
          const DeepCollectionEquality().equals(
            other.shortcutName,
            shortcutName,
          ) &&
          const DeepCollectionEquality().equals(other.messageIds, messageIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortcutName),
    const DeepCollectionEquality().hash(messageIds),
  ]);
}

extension EditQuickReplyMessageDataClassExtensions on EditQuickReplyMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditQuickReplyMessage &&
          const DeepCollectionEquality().equals(other.shortcutId, shortcutId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.inputMessageContent,
            inputMessageContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shortcutId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(inputMessageContent),
  ]);
}

extension GetForumTopicDefaultIconsDataClassExtensions
    on GetForumTopicDefaultIcons {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetForumTopicDefaultIcons);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CreateForumTopicDataClassExtensions on CreateForumTopic {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateForumTopic &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.icon, icon));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(icon),
  ]);
}

extension EditForumTopicDataClassExtensions on EditForumTopic {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditForumTopic &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(
            other.editIconCustomEmoji,
            editIconCustomEmoji,
          ) &&
          const DeepCollectionEquality().equals(
            other.iconCustomEmojiId,
            iconCustomEmojiId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(editIconCustomEmoji),
    const DeepCollectionEquality().hash(iconCustomEmojiId),
  ]);
}

extension GetForumTopicDataClassExtensions on GetForumTopic {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetForumTopic &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
  ]);
}

extension GetForumTopicLinkDataClassExtensions on GetForumTopicLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetForumTopicLink &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
  ]);
}

extension GetForumTopicsDataClassExtensions on GetForumTopics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetForumTopics &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.offsetDate, offsetDate) &&
          const DeepCollectionEquality().equals(
            other.offsetMessageId,
            offsetMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.offsetMessageThreadId,
            offsetMessageThreadId,
          ) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(offsetDate),
    const DeepCollectionEquality().hash(offsetMessageId),
    const DeepCollectionEquality().hash(offsetMessageThreadId),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension SetForumTopicNotificationSettingsDataClassExtensions
    on SetForumTopicNotificationSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetForumTopicNotificationSettings &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ) &&
          const DeepCollectionEquality().equals(
            other.notificationSettings,
            notificationSettings,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
    const DeepCollectionEquality().hash(notificationSettings),
  ]);
}

extension ToggleForumTopicIsClosedDataClassExtensions
    on ToggleForumTopicIsClosed {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleForumTopicIsClosed &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ) &&
          const DeepCollectionEquality().equals(other.isClosed, isClosed));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
    const DeepCollectionEquality().hash(isClosed),
  ]);
}

extension ToggleGeneralForumTopicIsHiddenDataClassExtensions
    on ToggleGeneralForumTopicIsHidden {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleGeneralForumTopicIsHidden &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.isHidden, isHidden));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(isHidden),
  ]);
}

extension ToggleForumTopicIsPinnedDataClassExtensions
    on ToggleForumTopicIsPinned {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleForumTopicIsPinned &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension SetPinnedForumTopicsDataClassExtensions on SetPinnedForumTopics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetPinnedForumTopics &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadIds,
            messageThreadIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadIds),
  ]);
}

extension DeleteForumTopicDataClassExtensions on DeleteForumTopic {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteForumTopic &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
  ]);
}

extension GetEmojiReactionDataClassExtensions on GetEmojiReaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetEmojiReaction &&
          const DeepCollectionEquality().equals(other.emoji, emoji));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(emoji)]);
}

extension GetCustomEmojiReactionAnimationsDataClassExtensions
    on GetCustomEmojiReactionAnimations {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetCustomEmojiReactionAnimations);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetMessageAvailableReactionsDataClassExtensions
    on GetMessageAvailableReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessageAvailableReactions &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.rowSize, rowSize));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(rowSize),
  ]);
}

extension ClearRecentReactionsDataClassExtensions on ClearRecentReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ClearRecentReactions);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AddMessageReactionDataClassExtensions on AddMessageReaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddMessageReaction &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.reactionType,
            reactionType,
          ) &&
          const DeepCollectionEquality().equals(other.isBig, isBig) &&
          const DeepCollectionEquality().equals(
            other.updateRecentReactions,
            updateRecentReactions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(reactionType),
    const DeepCollectionEquality().hash(isBig),
    const DeepCollectionEquality().hash(updateRecentReactions),
  ]);
}

extension RemoveMessageReactionDataClassExtensions on RemoveMessageReaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveMessageReaction &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.reactionType,
            reactionType,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(reactionType),
  ]);
}

extension GetChatAvailablePaidMessageReactionSendersDataClassExtensions
    on GetChatAvailablePaidMessageReactionSenders {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatAvailablePaidMessageReactionSenders &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension AddPendingPaidMessageReactionDataClassExtensions
    on AddPendingPaidMessageReaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddPendingPaidMessageReaction &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.starCount, starCount) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(starCount),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension CommitPendingPaidMessageReactionsDataClassExtensions
    on CommitPendingPaidMessageReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CommitPendingPaidMessageReactions &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension RemovePendingPaidMessageReactionsDataClassExtensions
    on RemovePendingPaidMessageReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemovePendingPaidMessageReactions &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension SetPaidMessageReactionTypeDataClassExtensions
    on SetPaidMessageReactionType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetPaidMessageReactionType &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension SetMessageReactionsDataClassExtensions on SetMessageReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetMessageReactions &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.reactionTypes,
            reactionTypes,
          ) &&
          const DeepCollectionEquality().equals(other.isBig, isBig));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(reactionTypes),
    const DeepCollectionEquality().hash(isBig),
  ]);
}

extension GetMessageAddedReactionsDataClassExtensions
    on GetMessageAddedReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessageAddedReactions &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.reactionType,
            reactionType,
          ) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(reactionType),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension SetDefaultReactionTypeDataClassExtensions on SetDefaultReactionType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetDefaultReactionType &&
          const DeepCollectionEquality().equals(
            other.reactionType,
            reactionType,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(reactionType),
  ]);
}

extension GetSavedMessagesTagsDataClassExtensions on GetSavedMessagesTags {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetSavedMessagesTags &&
          const DeepCollectionEquality().equals(
            other.savedMessagesTopicId,
            savedMessagesTopicId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(savedMessagesTopicId),
  ]);
}

extension SetSavedMessagesTagLabelDataClassExtensions
    on SetSavedMessagesTagLabel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetSavedMessagesTagLabel &&
          const DeepCollectionEquality().equals(other.tag, tag) &&
          const DeepCollectionEquality().equals(other.label, label));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(tag),
    const DeepCollectionEquality().hash(label),
  ]);
}

extension GetMessageEffectDataClassExtensions on GetMessageEffect {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessageEffect &&
          const DeepCollectionEquality().equals(other.effectId, effectId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(effectId),
  ]);
}

extension SearchQuoteDataClassExtensions on SearchQuote {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchQuote &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.quote, quote) &&
          const DeepCollectionEquality().equals(
            other.quotePosition,
            quotePosition,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(quote),
    const DeepCollectionEquality().hash(quotePosition),
  ]);
}

extension GetTextEntitiesDataClassExtensions on GetTextEntities {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetTextEntities &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(text)]);
}

extension ParseTextEntitiesDataClassExtensions on ParseTextEntities {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ParseTextEntities &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.parseMode, parseMode));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(parseMode),
  ]);
}

extension ParseMarkdownDataClassExtensions on ParseMarkdown {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ParseMarkdown &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(text)]);
}

extension GetMarkdownTextDataClassExtensions on GetMarkdownText {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMarkdownText &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(text)]);
}

extension GetCountryFlagEmojiDataClassExtensions on GetCountryFlagEmoji {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetCountryFlagEmoji &&
          const DeepCollectionEquality().equals(
            other.countryCode,
            countryCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(countryCode),
  ]);
}

extension GetFileMimeTypeDataClassExtensions on GetFileMimeType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetFileMimeType &&
          const DeepCollectionEquality().equals(other.fileName, fileName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileName),
  ]);
}

extension GetFileExtensionDataClassExtensions on GetFileExtension {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetFileExtension &&
          const DeepCollectionEquality().equals(other.mimeType, mimeType));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(mimeType),
  ]);
}

extension CleanFileNameDataClassExtensions on CleanFileName {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CleanFileName &&
          const DeepCollectionEquality().equals(other.fileName, fileName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileName),
  ]);
}

extension GetLanguagePackStringDataClassExtensions on GetLanguagePackString {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetLanguagePackString &&
          const DeepCollectionEquality().equals(
            other.languagePackDatabasePath,
            languagePackDatabasePath,
          ) &&
          const DeepCollectionEquality().equals(
            other.localizationTarget,
            localizationTarget,
          ) &&
          const DeepCollectionEquality().equals(
            other.languagePackId,
            languagePackId,
          ) &&
          const DeepCollectionEquality().equals(other.key, key));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(languagePackDatabasePath),
    const DeepCollectionEquality().hash(localizationTarget),
    const DeepCollectionEquality().hash(languagePackId),
    const DeepCollectionEquality().hash(key),
  ]);
}

extension GetJsonValueDataClassExtensions on GetJsonValue {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetJsonValue &&
          const DeepCollectionEquality().equals(other.json, json));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(json)]);
}

extension GetJsonStringDataClassExtensions on GetJsonString {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetJsonString &&
          const DeepCollectionEquality().equals(other.jsonValue, jsonValue));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(jsonValue),
  ]);
}

extension GetThemeParametersJsonStringDataClassExtensions
    on GetThemeParametersJsonString {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetThemeParametersJsonString &&
          const DeepCollectionEquality().equals(other.theme, theme));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(theme)]);
}

extension SetPollAnswerDataClassExtensions on SetPollAnswer {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetPollAnswer &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.optionIds, optionIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(optionIds),
  ]);
}

extension GetPollVotersDataClassExtensions on GetPollVoters {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPollVoters &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.optionId, optionId) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(optionId),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension StopPollDataClassExtensions on StopPoll {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StopPoll &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.replyMarkup,
            replyMarkup,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(replyMarkup),
  ]);
}

extension AddChecklistTasksDataClassExtensions on AddChecklistTasks {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddChecklistTasks &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.tasks, tasks));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(tasks),
  ]);
}

extension MarkChecklistTasksAsDoneDataClassExtensions
    on MarkChecklistTasksAsDone {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is MarkChecklistTasksAsDone &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.markedAsDoneTaskIds,
            markedAsDoneTaskIds,
          ) &&
          const DeepCollectionEquality().equals(
            other.markedAsNotDoneTaskIds,
            markedAsNotDoneTaskIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(markedAsDoneTaskIds),
    const DeepCollectionEquality().hash(markedAsNotDoneTaskIds),
  ]);
}

extension HideSuggestedActionDataClassExtensions on HideSuggestedAction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is HideSuggestedAction &&
          const DeepCollectionEquality().equals(other.action, action));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(action),
  ]);
}

extension HideContactCloseBirthdaysDataClassExtensions
    on HideContactCloseBirthdays {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is HideContactCloseBirthdays);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetBusinessConnectionDataClassExtensions on GetBusinessConnection {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetBusinessConnection &&
          const DeepCollectionEquality().equals(
            other.connectionId,
            connectionId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(connectionId),
  ]);
}

extension GetLoginUrlInfoDataClassExtensions on GetLoginUrlInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetLoginUrlInfo &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.buttonId, buttonId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(buttonId),
  ]);
}

extension GetLoginUrlDataClassExtensions on GetLoginUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetLoginUrl &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.buttonId, buttonId) &&
          const DeepCollectionEquality().equals(
            other.allowWriteAccess,
            allowWriteAccess,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(buttonId),
    const DeepCollectionEquality().hash(allowWriteAccess),
  ]);
}

extension ShareUsersWithBotDataClassExtensions on ShareUsersWithBot {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ShareUsersWithBot &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.buttonId, buttonId) &&
          const DeepCollectionEquality().equals(
            other.sharedUserIds,
            sharedUserIds,
          ) &&
          const DeepCollectionEquality().equals(other.onlyCheck, onlyCheck));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(buttonId),
    const DeepCollectionEquality().hash(sharedUserIds),
    const DeepCollectionEquality().hash(onlyCheck),
  ]);
}

extension ShareChatWithBotDataClassExtensions on ShareChatWithBot {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ShareChatWithBot &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.buttonId, buttonId) &&
          const DeepCollectionEquality().equals(
            other.sharedChatId,
            sharedChatId,
          ) &&
          const DeepCollectionEquality().equals(other.onlyCheck, onlyCheck));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(buttonId),
    const DeepCollectionEquality().hash(sharedChatId),
    const DeepCollectionEquality().hash(onlyCheck),
  ]);
}

extension GetInlineQueryResultsDataClassExtensions on GetInlineQueryResults {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetInlineQueryResults &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.userLocation,
            userLocation,
          ) &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.offset, offset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(userLocation),
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(offset),
  ]);
}

extension AnswerInlineQueryDataClassExtensions on AnswerInlineQuery {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AnswerInlineQuery &&
          const DeepCollectionEquality().equals(
            other.inlineQueryId,
            inlineQueryId,
          ) &&
          const DeepCollectionEquality().equals(other.isPersonal, isPersonal) &&
          const DeepCollectionEquality().equals(other.button, button) &&
          const DeepCollectionEquality().equals(other.results, results) &&
          const DeepCollectionEquality().equals(other.cacheTime, cacheTime) &&
          const DeepCollectionEquality().equals(other.nextOffset, nextOffset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inlineQueryId),
    const DeepCollectionEquality().hash(isPersonal),
    const DeepCollectionEquality().hash(button),
    const DeepCollectionEquality().hash(results),
    const DeepCollectionEquality().hash(cacheTime),
    const DeepCollectionEquality().hash(nextOffset),
  ]);
}

extension SavePreparedInlineMessageDataClassExtensions
    on SavePreparedInlineMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SavePreparedInlineMessage &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.result, result) &&
          const DeepCollectionEquality().equals(other.chatTypes, chatTypes));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(result),
    const DeepCollectionEquality().hash(chatTypes),
  ]);
}

extension GetPreparedInlineMessageDataClassExtensions
    on GetPreparedInlineMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPreparedInlineMessage &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.preparedMessageId,
            preparedMessageId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(preparedMessageId),
  ]);
}

extension GetGrossingWebAppBotsDataClassExtensions on GetGrossingWebAppBots {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetGrossingWebAppBots &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension SearchWebAppDataClassExtensions on SearchWebApp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchWebApp &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.webAppShortName,
            webAppShortName,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(webAppShortName),
  ]);
}

extension GetWebAppPlaceholderDataClassExtensions on GetWebAppPlaceholder {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetWebAppPlaceholder &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
  ]);
}

extension GetWebAppLinkUrlDataClassExtensions on GetWebAppLinkUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetWebAppLinkUrl &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.webAppShortName,
            webAppShortName,
          ) &&
          const DeepCollectionEquality().equals(
            other.startParameter,
            startParameter,
          ) &&
          const DeepCollectionEquality().equals(
            other.allowWriteAccess,
            allowWriteAccess,
          ) &&
          const DeepCollectionEquality().equals(other.parameters, parameters));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(webAppShortName),
    const DeepCollectionEquality().hash(startParameter),
    const DeepCollectionEquality().hash(allowWriteAccess),
    const DeepCollectionEquality().hash(parameters),
  ]);
}

extension GetMainWebAppDataClassExtensions on GetMainWebApp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMainWebApp &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.startParameter,
            startParameter,
          ) &&
          const DeepCollectionEquality().equals(other.parameters, parameters));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(startParameter),
    const DeepCollectionEquality().hash(parameters),
  ]);
}

extension GetWebAppUrlDataClassExtensions on GetWebAppUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetWebAppUrl &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.parameters, parameters));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(parameters),
  ]);
}

extension SendWebAppDataDataClassExtensions on SendWebAppData {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendWebAppData &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.buttonText, buttonText) &&
          const DeepCollectionEquality().equals(other.data, data));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(buttonText),
    const DeepCollectionEquality().hash(data),
  ]);
}

extension OpenWebAppDataClassExtensions on OpenWebApp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is OpenWebApp &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ) &&
          const DeepCollectionEquality().equals(
            other.directMessagesChatTopicId,
            directMessagesChatTopicId,
          ) &&
          const DeepCollectionEquality().equals(other.replyTo, replyTo) &&
          const DeepCollectionEquality().equals(other.parameters, parameters));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(messageThreadId),
    const DeepCollectionEquality().hash(directMessagesChatTopicId),
    const DeepCollectionEquality().hash(replyTo),
    const DeepCollectionEquality().hash(parameters),
  ]);
}

extension CloseWebAppDataClassExtensions on CloseWebApp {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CloseWebApp &&
          const DeepCollectionEquality().equals(
            other.webAppLaunchId,
            webAppLaunchId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(webAppLaunchId),
  ]);
}

extension AnswerWebAppQueryDataClassExtensions on AnswerWebAppQuery {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AnswerWebAppQuery &&
          const DeepCollectionEquality().equals(
            other.webAppQueryId,
            webAppQueryId,
          ) &&
          const DeepCollectionEquality().equals(other.result, result));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(webAppQueryId),
    const DeepCollectionEquality().hash(result),
  ]);
}

extension CheckWebAppFileDownloadDataClassExtensions
    on CheckWebAppFileDownload {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckWebAppFileDownload &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.fileName, fileName) &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(fileName),
    const DeepCollectionEquality().hash(url),
  ]);
}

extension GetCallbackQueryAnswerDataClassExtensions on GetCallbackQueryAnswer {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetCallbackQueryAnswer &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.payload, payload));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(payload),
  ]);
}

extension AnswerCallbackQueryDataClassExtensions on AnswerCallbackQuery {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AnswerCallbackQuery &&
          const DeepCollectionEquality().equals(
            other.callbackQueryId,
            callbackQueryId,
          ) &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.showAlert, showAlert) &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.cacheTime, cacheTime));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(callbackQueryId),
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(showAlert),
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(cacheTime),
  ]);
}

extension AnswerShippingQueryDataClassExtensions on AnswerShippingQuery {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AnswerShippingQuery &&
          const DeepCollectionEquality().equals(
            other.shippingQueryId,
            shippingQueryId,
          ) &&
          const DeepCollectionEquality().equals(
            other.shippingOptions,
            shippingOptions,
          ) &&
          const DeepCollectionEquality().equals(
            other.errorMessage,
            errorMessage,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(shippingQueryId),
    const DeepCollectionEquality().hash(shippingOptions),
    const DeepCollectionEquality().hash(errorMessage),
  ]);
}

extension AnswerPreCheckoutQueryDataClassExtensions on AnswerPreCheckoutQuery {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AnswerPreCheckoutQuery &&
          const DeepCollectionEquality().equals(
            other.preCheckoutQueryId,
            preCheckoutQueryId,
          ) &&
          const DeepCollectionEquality().equals(
            other.errorMessage,
            errorMessage,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(preCheckoutQueryId),
    const DeepCollectionEquality().hash(errorMessage),
  ]);
}

extension SetGameScoreDataClassExtensions on SetGameScore {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetGameScore &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.editMessage,
            editMessage,
          ) &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.score, score) &&
          const DeepCollectionEquality().equals(other.force, force));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(editMessage),
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(score),
    const DeepCollectionEquality().hash(force),
  ]);
}

extension SetInlineGameScoreDataClassExtensions on SetInlineGameScore {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetInlineGameScore &&
          const DeepCollectionEquality().equals(
            other.inlineMessageId,
            inlineMessageId,
          ) &&
          const DeepCollectionEquality().equals(
            other.editMessage,
            editMessage,
          ) &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.score, score) &&
          const DeepCollectionEquality().equals(other.force, force));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inlineMessageId),
    const DeepCollectionEquality().hash(editMessage),
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(score),
    const DeepCollectionEquality().hash(force),
  ]);
}

extension GetGameHighScoresDataClassExtensions on GetGameHighScores {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetGameHighScores &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension GetInlineGameHighScoresDataClassExtensions
    on GetInlineGameHighScores {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetInlineGameHighScores &&
          const DeepCollectionEquality().equals(
            other.inlineMessageId,
            inlineMessageId,
          ) &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inlineMessageId),
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension DeleteChatReplyMarkupDataClassExtensions on DeleteChatReplyMarkup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteChatReplyMarkup &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension SendChatActionDataClassExtensions on SendChatAction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendChatAction &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ) &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.action, action));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(action),
  ]);
}

extension OpenChatDataClassExtensions on OpenChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is OpenChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension CloseChatDataClassExtensions on CloseChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CloseChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension ViewMessagesDataClassExtensions on ViewMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ViewMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageIds, messageIds) &&
          const DeepCollectionEquality().equals(other.source, source) &&
          const DeepCollectionEquality().equals(other.forceRead, forceRead));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageIds),
    const DeepCollectionEquality().hash(source),
    const DeepCollectionEquality().hash(forceRead),
  ]);
}

extension OpenMessageContentDataClassExtensions on OpenMessageContent {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is OpenMessageContent &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension ClickAnimatedEmojiMessageDataClassExtensions
    on ClickAnimatedEmojiMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ClickAnimatedEmojiMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension GetInternalLinkDataClassExtensions on GetInternalLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetInternalLink &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.isHttp, isHttp));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(isHttp),
  ]);
}

extension GetInternalLinkTypeDataClassExtensions on GetInternalLinkType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetInternalLinkType &&
          const DeepCollectionEquality().equals(other.link, link));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(link)]);
}

extension GetExternalLinkInfoDataClassExtensions on GetExternalLinkInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetExternalLinkInfo &&
          const DeepCollectionEquality().equals(other.link, link));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(link)]);
}

extension GetExternalLinkDataClassExtensions on GetExternalLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetExternalLink &&
          const DeepCollectionEquality().equals(other.link, link) &&
          const DeepCollectionEquality().equals(
            other.allowWriteAccess,
            allowWriteAccess,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(link),
    const DeepCollectionEquality().hash(allowWriteAccess),
  ]);
}

extension ReadAllChatMentionsDataClassExtensions on ReadAllChatMentions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReadAllChatMentions &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension ReadAllMessageThreadMentionsDataClassExtensions
    on ReadAllMessageThreadMentions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReadAllMessageThreadMentions &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
  ]);
}

extension ReadAllChatReactionsDataClassExtensions on ReadAllChatReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReadAllChatReactions &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension ReadAllMessageThreadReactionsDataClassExtensions
    on ReadAllMessageThreadReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReadAllMessageThreadReactions &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
  ]);
}

extension CreatePrivateChatDataClassExtensions on CreatePrivateChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreatePrivateChat &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.force, force));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(force),
  ]);
}

extension CreateBasicGroupChatDataClassExtensions on CreateBasicGroupChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateBasicGroupChat &&
          const DeepCollectionEquality().equals(
            other.basicGroupId,
            basicGroupId,
          ) &&
          const DeepCollectionEquality().equals(other.force, force));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(basicGroupId),
    const DeepCollectionEquality().hash(force),
  ]);
}

extension CreateSupergroupChatDataClassExtensions on CreateSupergroupChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateSupergroupChat &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(other.force, force));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(force),
  ]);
}

extension CreateSecretChatDataClassExtensions on CreateSecretChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateSecretChat &&
          const DeepCollectionEquality().equals(
            other.secretChatId,
            secretChatId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(secretChatId),
  ]);
}

extension CreateNewBasicGroupChatDataClassExtensions
    on CreateNewBasicGroupChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateNewBasicGroupChat &&
          const DeepCollectionEquality().equals(other.userIds, userIds) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.messageAutoDeleteTime,
            messageAutoDeleteTime,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userIds),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(messageAutoDeleteTime),
  ]);
}

extension CreateNewSupergroupChatDataClassExtensions
    on CreateNewSupergroupChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateNewSupergroupChat &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.isForum, isForum) &&
          const DeepCollectionEquality().equals(other.isChannel, isChannel) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ) &&
          const DeepCollectionEquality().equals(other.location, location) &&
          const DeepCollectionEquality().equals(
            other.messageAutoDeleteTime,
            messageAutoDeleteTime,
          ) &&
          const DeepCollectionEquality().equals(other.forImport, forImport));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(isForum),
    const DeepCollectionEquality().hash(isChannel),
    const DeepCollectionEquality().hash(description),
    const DeepCollectionEquality().hash(location),
    const DeepCollectionEquality().hash(messageAutoDeleteTime),
    const DeepCollectionEquality().hash(forImport),
  ]);
}

extension CreateNewSecretChatDataClassExtensions on CreateNewSecretChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateNewSecretChat &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension UpgradeBasicGroupChatToSupergroupChatDataClassExtensions
    on UpgradeBasicGroupChatToSupergroupChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpgradeBasicGroupChatToSupergroupChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension GetChatListsToAddChatDataClassExtensions on GetChatListsToAddChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatListsToAddChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension AddChatToListDataClassExtensions on AddChatToList {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddChatToList &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.chatList, chatList));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(chatList),
  ]);
}

extension GetChatFolderDataClassExtensions on GetChatFolder {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatFolder &&
          const DeepCollectionEquality().equals(
            other.chatFolderId,
            chatFolderId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatFolderId),
  ]);
}

extension CreateChatFolderDataClassExtensions on CreateChatFolder {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateChatFolder &&
          const DeepCollectionEquality().equals(other.folder, folder));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(folder),
  ]);
}

extension EditChatFolderDataClassExtensions on EditChatFolder {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditChatFolder &&
          const DeepCollectionEquality().equals(
            other.chatFolderId,
            chatFolderId,
          ) &&
          const DeepCollectionEquality().equals(other.folder, folder));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatFolderId),
    const DeepCollectionEquality().hash(folder),
  ]);
}

extension DeleteChatFolderDataClassExtensions on DeleteChatFolder {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteChatFolder &&
          const DeepCollectionEquality().equals(
            other.chatFolderId,
            chatFolderId,
          ) &&
          const DeepCollectionEquality().equals(
            other.leaveChatIds,
            leaveChatIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatFolderId),
    const DeepCollectionEquality().hash(leaveChatIds),
  ]);
}

extension GetChatFolderChatsToLeaveDataClassExtensions
    on GetChatFolderChatsToLeave {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatFolderChatsToLeave &&
          const DeepCollectionEquality().equals(
            other.chatFolderId,
            chatFolderId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatFolderId),
  ]);
}

extension GetChatFolderChatCountDataClassExtensions on GetChatFolderChatCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatFolderChatCount &&
          const DeepCollectionEquality().equals(other.folder, folder));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(folder),
  ]);
}

extension ReorderChatFoldersDataClassExtensions on ReorderChatFolders {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReorderChatFolders &&
          const DeepCollectionEquality().equals(
            other.chatFolderIds,
            chatFolderIds,
          ) &&
          const DeepCollectionEquality().equals(
            other.mainChatListPosition,
            mainChatListPosition,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatFolderIds),
    const DeepCollectionEquality().hash(mainChatListPosition),
  ]);
}

extension ToggleChatFolderTagsDataClassExtensions on ToggleChatFolderTags {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleChatFolderTags &&
          const DeepCollectionEquality().equals(
            other.areTagsEnabled,
            areTagsEnabled,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(areTagsEnabled),
  ]);
}

extension GetRecommendedChatFoldersDataClassExtensions
    on GetRecommendedChatFolders {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetRecommendedChatFolders);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetChatFolderDefaultIconNameDataClassExtensions
    on GetChatFolderDefaultIconName {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatFolderDefaultIconName &&
          const DeepCollectionEquality().equals(other.folder, folder));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(folder),
  ]);
}

extension GetChatsForChatFolderInviteLinkDataClassExtensions
    on GetChatsForChatFolderInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatsForChatFolderInviteLink &&
          const DeepCollectionEquality().equals(
            other.chatFolderId,
            chatFolderId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatFolderId),
  ]);
}

extension CreateChatFolderInviteLinkDataClassExtensions
    on CreateChatFolderInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateChatFolderInviteLink &&
          const DeepCollectionEquality().equals(
            other.chatFolderId,
            chatFolderId,
          ) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.chatIds, chatIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatFolderId),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(chatIds),
  ]);
}

extension GetChatFolderInviteLinksDataClassExtensions
    on GetChatFolderInviteLinks {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatFolderInviteLinks &&
          const DeepCollectionEquality().equals(
            other.chatFolderId,
            chatFolderId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatFolderId),
  ]);
}

extension EditChatFolderInviteLinkDataClassExtensions
    on EditChatFolderInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditChatFolderInviteLink &&
          const DeepCollectionEquality().equals(
            other.chatFolderId,
            chatFolderId,
          ) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.chatIds, chatIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatFolderId),
    const DeepCollectionEquality().hash(inviteLink),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(chatIds),
  ]);
}

extension DeleteChatFolderInviteLinkDataClassExtensions
    on DeleteChatFolderInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteChatFolderInviteLink &&
          const DeepCollectionEquality().equals(
            other.chatFolderId,
            chatFolderId,
          ) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatFolderId),
    const DeepCollectionEquality().hash(inviteLink),
  ]);
}

extension CheckChatFolderInviteLinkDataClassExtensions
    on CheckChatFolderInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckChatFolderInviteLink &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inviteLink),
  ]);
}

extension AddChatFolderByInviteLinkDataClassExtensions
    on AddChatFolderByInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddChatFolderByInviteLink &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink) &&
          const DeepCollectionEquality().equals(other.chatIds, chatIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inviteLink),
    const DeepCollectionEquality().hash(chatIds),
  ]);
}

extension GetChatFolderNewChatsDataClassExtensions on GetChatFolderNewChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatFolderNewChats &&
          const DeepCollectionEquality().equals(
            other.chatFolderId,
            chatFolderId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatFolderId),
  ]);
}

extension ProcessChatFolderNewChatsDataClassExtensions
    on ProcessChatFolderNewChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ProcessChatFolderNewChats &&
          const DeepCollectionEquality().equals(
            other.chatFolderId,
            chatFolderId,
          ) &&
          const DeepCollectionEquality().equals(
            other.addedChatIds,
            addedChatIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatFolderId),
    const DeepCollectionEquality().hash(addedChatIds),
  ]);
}

extension GetArchiveChatListSettingsDataClassExtensions
    on GetArchiveChatListSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetArchiveChatListSettings);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SetArchiveChatListSettingsDataClassExtensions
    on SetArchiveChatListSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetArchiveChatListSettings &&
          const DeepCollectionEquality().equals(other.settings, settings));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(settings),
  ]);
}

extension SetChatTitleDataClassExtensions on SetChatTitle {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatTitle &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.title, title));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(title),
  ]);
}

extension SetChatPhotoDataClassExtensions on SetChatPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatPhoto &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(photo),
  ]);
}

extension SetChatAccentColorDataClassExtensions on SetChatAccentColor {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatAccentColor &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.accentColorId,
            accentColorId,
          ) &&
          const DeepCollectionEquality().equals(
            other.backgroundCustomEmojiId,
            backgroundCustomEmojiId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(accentColorId),
    const DeepCollectionEquality().hash(backgroundCustomEmojiId),
  ]);
}

extension SetChatProfileAccentColorDataClassExtensions
    on SetChatProfileAccentColor {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatProfileAccentColor &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.profileAccentColorId,
            profileAccentColorId,
          ) &&
          const DeepCollectionEquality().equals(
            other.profileBackgroundCustomEmojiId,
            profileBackgroundCustomEmojiId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(profileAccentColorId),
    const DeepCollectionEquality().hash(profileBackgroundCustomEmojiId),
  ]);
}

extension SetChatMessageAutoDeleteTimeDataClassExtensions
    on SetChatMessageAutoDeleteTime {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatMessageAutoDeleteTime &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageAutoDeleteTime,
            messageAutoDeleteTime,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageAutoDeleteTime),
  ]);
}

extension SetChatEmojiStatusDataClassExtensions on SetChatEmojiStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatEmojiStatus &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.emojiStatus,
            emojiStatus,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(emojiStatus),
  ]);
}

extension SetChatPermissionsDataClassExtensions on SetChatPermissions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatPermissions &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.permissions,
            permissions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(permissions),
  ]);
}

extension SetChatBackgroundDataClassExtensions on SetChatBackground {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatBackground &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.background, background) &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(
            other.darkThemeDimming,
            darkThemeDimming,
          ) &&
          const DeepCollectionEquality().equals(
            other.onlyForSelf,
            onlyForSelf,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(background),
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(darkThemeDimming),
    const DeepCollectionEquality().hash(onlyForSelf),
  ]);
}

extension DeleteChatBackgroundDataClassExtensions on DeleteChatBackground {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteChatBackground &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.restorePrevious,
            restorePrevious,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(restorePrevious),
  ]);
}

extension SetChatThemeDataClassExtensions on SetChatTheme {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatTheme &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.themeName, themeName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(themeName),
  ]);
}

extension SetChatDraftMessageDataClassExtensions on SetChatDraftMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatDraftMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ) &&
          const DeepCollectionEquality().equals(
            other.draftMessage,
            draftMessage,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
    const DeepCollectionEquality().hash(draftMessage),
  ]);
}

extension SetChatNotificationSettingsDataClassExtensions
    on SetChatNotificationSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatNotificationSettings &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.notificationSettings,
            notificationSettings,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(notificationSettings),
  ]);
}

extension ToggleChatHasProtectedContentDataClassExtensions
    on ToggleChatHasProtectedContent {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleChatHasProtectedContent &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.hasProtectedContent,
            hasProtectedContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(hasProtectedContent),
  ]);
}

extension ToggleChatViewAsTopicsDataClassExtensions on ToggleChatViewAsTopics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleChatViewAsTopics &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.viewAsTopics,
            viewAsTopics,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(viewAsTopics),
  ]);
}

extension ToggleChatIsTranslatableDataClassExtensions
    on ToggleChatIsTranslatable {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleChatIsTranslatable &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.isTranslatable,
            isTranslatable,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(isTranslatable),
  ]);
}

extension ToggleChatIsMarkedAsUnreadDataClassExtensions
    on ToggleChatIsMarkedAsUnread {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleChatIsMarkedAsUnread &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.isMarkedAsUnread,
            isMarkedAsUnread,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(isMarkedAsUnread),
  ]);
}

extension ToggleChatDefaultDisableNotificationDataClassExtensions
    on ToggleChatDefaultDisableNotification {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleChatDefaultDisableNotification &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.defaultDisableNotification,
            defaultDisableNotification,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(defaultDisableNotification),
  ]);
}

extension SetChatAvailableReactionsDataClassExtensions
    on SetChatAvailableReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatAvailableReactions &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.availableReactions,
            availableReactions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(availableReactions),
  ]);
}

extension SetChatClientDataDataClassExtensions on SetChatClientData {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatClientData &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.clientData, clientData));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(clientData),
  ]);
}

extension SetChatDescriptionDataClassExtensions on SetChatDescription {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatDescription &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(description),
  ]);
}

extension SetChatDiscussionGroupDataClassExtensions on SetChatDiscussionGroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatDiscussionGroup &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.discussionChatId,
            discussionChatId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(discussionChatId),
  ]);
}

extension SetChatDirectMessagesGroupDataClassExtensions
    on SetChatDirectMessagesGroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatDirectMessagesGroup &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.isEnabled, isEnabled) &&
          const DeepCollectionEquality().equals(
            other.paidMessageStarCount,
            paidMessageStarCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(isEnabled),
    const DeepCollectionEquality().hash(paidMessageStarCount),
  ]);
}

extension SetChatLocationDataClassExtensions on SetChatLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatLocation &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.location, location));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(location),
  ]);
}

extension SetChatSlowModeDelayDataClassExtensions on SetChatSlowModeDelay {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatSlowModeDelay &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.slowModeDelay,
            slowModeDelay,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(slowModeDelay),
  ]);
}

extension PinChatMessageDataClassExtensions on PinChatMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PinChatMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.disableNotification,
            disableNotification,
          ) &&
          const DeepCollectionEquality().equals(
            other.onlyForSelf,
            onlyForSelf,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(disableNotification),
    const DeepCollectionEquality().hash(onlyForSelf),
  ]);
}

extension UnpinChatMessageDataClassExtensions on UnpinChatMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UnpinChatMessage &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension UnpinAllChatMessagesDataClassExtensions on UnpinAllChatMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UnpinAllChatMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension UnpinAllMessageThreadMessagesDataClassExtensions
    on UnpinAllMessageThreadMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UnpinAllMessageThreadMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageThreadId,
            messageThreadId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageThreadId),
  ]);
}

extension JoinChatDataClassExtensions on JoinChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is JoinChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension LeaveChatDataClassExtensions on LeaveChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LeaveChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension AddChatMemberDataClassExtensions on AddChatMember {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddChatMember &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.forwardLimit,
            forwardLimit,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(forwardLimit),
  ]);
}

extension AddChatMembersDataClassExtensions on AddChatMembers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddChatMembers &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.userIds, userIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(userIds),
  ]);
}

extension SetChatMemberStatusDataClassExtensions on SetChatMemberStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatMemberStatus &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.memberId, memberId) &&
          const DeepCollectionEquality().equals(other.status, status));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(memberId),
    const DeepCollectionEquality().hash(status),
  ]);
}

extension BanChatMemberDataClassExtensions on BanChatMember {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BanChatMember &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.memberId, memberId) &&
          const DeepCollectionEquality().equals(
            other.bannedUntilDate,
            bannedUntilDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.revokeMessages,
            revokeMessages,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(memberId),
    const DeepCollectionEquality().hash(bannedUntilDate),
    const DeepCollectionEquality().hash(revokeMessages),
  ]);
}

extension CanTransferOwnershipDataClassExtensions on CanTransferOwnership {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is CanTransferOwnership);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TransferChatOwnershipDataClassExtensions on TransferChatOwnership {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TransferChatOwnership &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.password, password));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(password),
  ]);
}

extension GetChatMemberDataClassExtensions on GetChatMember {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatMember &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.memberId, memberId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(memberId),
  ]);
}

extension SearchChatMembersDataClassExtensions on SearchChatMembers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchChatMembers &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.limit, limit) &&
          const DeepCollectionEquality().equals(other.filter, filter));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(limit),
    const DeepCollectionEquality().hash(filter),
  ]);
}

extension GetChatAdministratorsDataClassExtensions on GetChatAdministrators {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatAdministrators &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension ClearAllDraftMessagesDataClassExtensions on ClearAllDraftMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ClearAllDraftMessages &&
          const DeepCollectionEquality().equals(
            other.excludeSecretChats,
            excludeSecretChats,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(excludeSecretChats),
  ]);
}

extension GetSavedNotificationSoundDataClassExtensions
    on GetSavedNotificationSound {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetSavedNotificationSound &&
          const DeepCollectionEquality().equals(
            other.notificationSoundId,
            notificationSoundId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(notificationSoundId),
  ]);
}

extension GetSavedNotificationSoundsDataClassExtensions
    on GetSavedNotificationSounds {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetSavedNotificationSounds);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AddSavedNotificationSoundDataClassExtensions
    on AddSavedNotificationSound {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddSavedNotificationSound &&
          const DeepCollectionEquality().equals(other.sound, sound));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(sound)]);
}

extension RemoveSavedNotificationSoundDataClassExtensions
    on RemoveSavedNotificationSound {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveSavedNotificationSound &&
          const DeepCollectionEquality().equals(
            other.notificationSoundId,
            notificationSoundId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(notificationSoundId),
  ]);
}

extension GetChatNotificationSettingsExceptionsDataClassExtensions
    on GetChatNotificationSettingsExceptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatNotificationSettingsExceptions &&
          const DeepCollectionEquality().equals(other.scope, scope) &&
          const DeepCollectionEquality().equals(
            other.compareSound,
            compareSound,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(scope),
    const DeepCollectionEquality().hash(compareSound),
  ]);
}

extension GetScopeNotificationSettingsDataClassExtensions
    on GetScopeNotificationSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetScopeNotificationSettings &&
          const DeepCollectionEquality().equals(other.scope, scope));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(scope)]);
}

extension SetScopeNotificationSettingsDataClassExtensions
    on SetScopeNotificationSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetScopeNotificationSettings &&
          const DeepCollectionEquality().equals(other.scope, scope) &&
          const DeepCollectionEquality().equals(
            other.notificationSettings,
            notificationSettings,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(scope),
    const DeepCollectionEquality().hash(notificationSettings),
  ]);
}

extension SetReactionNotificationSettingsDataClassExtensions
    on SetReactionNotificationSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetReactionNotificationSettings &&
          const DeepCollectionEquality().equals(
            other.notificationSettings,
            notificationSettings,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(notificationSettings),
  ]);
}

extension ResetAllNotificationSettingsDataClassExtensions
    on ResetAllNotificationSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ResetAllNotificationSettings);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ToggleChatIsPinnedDataClassExtensions on ToggleChatIsPinned {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleChatIsPinned &&
          const DeepCollectionEquality().equals(other.chatList, chatList) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.isPinned, isPinned));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatList),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(isPinned),
  ]);
}

extension SetPinnedChatsDataClassExtensions on SetPinnedChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetPinnedChats &&
          const DeepCollectionEquality().equals(other.chatList, chatList) &&
          const DeepCollectionEquality().equals(other.chatIds, chatIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatList),
    const DeepCollectionEquality().hash(chatIds),
  ]);
}

extension ReadChatListDataClassExtensions on ReadChatList {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReadChatList &&
          const DeepCollectionEquality().equals(other.chatList, chatList));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatList),
  ]);
}

extension GetCurrentWeatherDataClassExtensions on GetCurrentWeather {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetCurrentWeather &&
          const DeepCollectionEquality().equals(other.location, location));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(location),
  ]);
}

extension GetStoryDataClassExtensions on GetStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStory &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId) &&
          const DeepCollectionEquality().equals(other.onlyLocal, onlyLocal));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
    const DeepCollectionEquality().hash(onlyLocal),
  ]);
}

extension GetChatsToPostStoriesDataClassExtensions on GetChatsToPostStories {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetChatsToPostStories);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CanPostStoryDataClassExtensions on CanPostStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanPostStory &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension PostStoryDataClassExtensions on PostStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PostStory &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.content, content) &&
          const DeepCollectionEquality().equals(other.areas, areas) &&
          const DeepCollectionEquality().equals(other.caption, caption) &&
          const DeepCollectionEquality().equals(
            other.privacySettings,
            privacySettings,
          ) &&
          const DeepCollectionEquality().equals(
            other.activePeriod,
            activePeriod,
          ) &&
          const DeepCollectionEquality().equals(
            other.fromStoryFullId,
            fromStoryFullId,
          ) &&
          const DeepCollectionEquality().equals(
            other.isPostedToChatPage,
            isPostedToChatPage,
          ) &&
          const DeepCollectionEquality().equals(
            other.protectContent,
            protectContent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(content),
    const DeepCollectionEquality().hash(areas),
    const DeepCollectionEquality().hash(caption),
    const DeepCollectionEquality().hash(privacySettings),
    const DeepCollectionEquality().hash(activePeriod),
    const DeepCollectionEquality().hash(fromStoryFullId),
    const DeepCollectionEquality().hash(isPostedToChatPage),
    const DeepCollectionEquality().hash(protectContent),
  ]);
}

extension EditStoryDataClassExtensions on EditStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditStory &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId) &&
          const DeepCollectionEquality().equals(other.content, content) &&
          const DeepCollectionEquality().equals(other.areas, areas) &&
          const DeepCollectionEquality().equals(other.caption, caption));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
    const DeepCollectionEquality().hash(content),
    const DeepCollectionEquality().hash(areas),
    const DeepCollectionEquality().hash(caption),
  ]);
}

extension EditStoryCoverDataClassExtensions on EditStoryCover {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditStoryCover &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId) &&
          const DeepCollectionEquality().equals(
            other.coverFrameTimestamp,
            coverFrameTimestamp,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
    const DeepCollectionEquality().hash(coverFrameTimestamp),
  ]);
}

extension SetStoryPrivacySettingsDataClassExtensions
    on SetStoryPrivacySettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetStoryPrivacySettings &&
          const DeepCollectionEquality().equals(other.storyId, storyId) &&
          const DeepCollectionEquality().equals(
            other.privacySettings,
            privacySettings,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyId),
    const DeepCollectionEquality().hash(privacySettings),
  ]);
}

extension ToggleStoryIsPostedToChatPageDataClassExtensions
    on ToggleStoryIsPostedToChatPage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleStoryIsPostedToChatPage &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId) &&
          const DeepCollectionEquality().equals(
            other.isPostedToChatPage,
            isPostedToChatPage,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
    const DeepCollectionEquality().hash(isPostedToChatPage),
  ]);
}

extension DeleteStoryDataClassExtensions on DeleteStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteStory &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
  ]);
}

extension GetStoryNotificationSettingsExceptionsDataClassExtensions
    on GetStoryNotificationSettingsExceptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStoryNotificationSettingsExceptions);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension LoadActiveStoriesDataClassExtensions on LoadActiveStories {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LoadActiveStories &&
          const DeepCollectionEquality().equals(other.storyList, storyList));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyList),
  ]);
}

extension SetChatActiveStoriesListDataClassExtensions
    on SetChatActiveStoriesList {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatActiveStoriesList &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.storyList, storyList));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(storyList),
  ]);
}

extension GetChatActiveStoriesDataClassExtensions on GetChatActiveStories {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatActiveStories &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension GetChatPostedToChatPageStoriesDataClassExtensions
    on GetChatPostedToChatPageStories {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatPostedToChatPageStories &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.fromStoryId,
            fromStoryId,
          ) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(fromStoryId),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetChatArchivedStoriesDataClassExtensions on GetChatArchivedStories {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatArchivedStories &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.fromStoryId,
            fromStoryId,
          ) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(fromStoryId),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension SetChatPinnedStoriesDataClassExtensions on SetChatPinnedStories {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatPinnedStories &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.storyIds, storyIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(storyIds),
  ]);
}

extension OpenStoryDataClassExtensions on OpenStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is OpenStory &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
  ]);
}

extension CloseStoryDataClassExtensions on CloseStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CloseStory &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
  ]);
}

extension GetStoryAvailableReactionsDataClassExtensions
    on GetStoryAvailableReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStoryAvailableReactions &&
          const DeepCollectionEquality().equals(other.rowSize, rowSize));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(rowSize),
  ]);
}

extension SetStoryReactionDataClassExtensions on SetStoryReaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetStoryReaction &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId) &&
          const DeepCollectionEquality().equals(
            other.reactionType,
            reactionType,
          ) &&
          const DeepCollectionEquality().equals(
            other.updateRecentReactions,
            updateRecentReactions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
    const DeepCollectionEquality().hash(reactionType),
    const DeepCollectionEquality().hash(updateRecentReactions),
  ]);
}

extension GetStoryInteractionsDataClassExtensions on GetStoryInteractions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStoryInteractions &&
          const DeepCollectionEquality().equals(other.storyId, storyId) &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(
            other.onlyContacts,
            onlyContacts,
          ) &&
          const DeepCollectionEquality().equals(
            other.preferForwards,
            preferForwards,
          ) &&
          const DeepCollectionEquality().equals(
            other.preferWithReaction,
            preferWithReaction,
          ) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyId),
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(onlyContacts),
    const DeepCollectionEquality().hash(preferForwards),
    const DeepCollectionEquality().hash(preferWithReaction),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetChatStoryInteractionsDataClassExtensions
    on GetChatStoryInteractions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatStoryInteractions &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId) &&
          const DeepCollectionEquality().equals(
            other.reactionType,
            reactionType,
          ) &&
          const DeepCollectionEquality().equals(
            other.preferForwards,
            preferForwards,
          ) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
    const DeepCollectionEquality().hash(reactionType),
    const DeepCollectionEquality().hash(preferForwards),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension ReportStoryDataClassExtensions on ReportStory {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportStory &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId) &&
          const DeepCollectionEquality().equals(other.optionId, optionId) &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
    const DeepCollectionEquality().hash(optionId),
    const DeepCollectionEquality().hash(text),
  ]);
}

extension ActivateStoryStealthModeDataClassExtensions
    on ActivateStoryStealthMode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ActivateStoryStealthMode);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetStoryPublicForwardsDataClassExtensions on GetStoryPublicForwards {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStoryPublicForwards &&
          const DeepCollectionEquality().equals(
            other.storyPosterChatId,
            storyPosterChatId,
          ) &&
          const DeepCollectionEquality().equals(other.storyId, storyId) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(storyPosterChatId),
    const DeepCollectionEquality().hash(storyId),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetChatBoostLevelFeaturesDataClassExtensions
    on GetChatBoostLevelFeatures {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatBoostLevelFeatures &&
          const DeepCollectionEquality().equals(other.isChannel, isChannel) &&
          const DeepCollectionEquality().equals(other.level, level));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isChannel),
    const DeepCollectionEquality().hash(level),
  ]);
}

extension GetChatBoostFeaturesDataClassExtensions on GetChatBoostFeatures {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatBoostFeatures &&
          const DeepCollectionEquality().equals(other.isChannel, isChannel));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isChannel),
  ]);
}

extension GetAvailableChatBoostSlotsDataClassExtensions
    on GetAvailableChatBoostSlots {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetAvailableChatBoostSlots);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetChatBoostStatusDataClassExtensions on GetChatBoostStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatBoostStatus &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension BoostChatDataClassExtensions on BoostChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BoostChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.slotIds, slotIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(slotIds),
  ]);
}

extension GetChatBoostLinkDataClassExtensions on GetChatBoostLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatBoostLink &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension GetChatBoostLinkInfoDataClassExtensions on GetChatBoostLinkInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatBoostLinkInfo &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(url)]);
}

extension GetChatBoostsDataClassExtensions on GetChatBoosts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatBoosts &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.onlyGiftCodes,
            onlyGiftCodes,
          ) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(onlyGiftCodes),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetUserChatBoostsDataClassExtensions on GetUserChatBoosts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetUserChatBoosts &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension GetAttachmentMenuBotDataClassExtensions on GetAttachmentMenuBot {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetAttachmentMenuBot &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
  ]);
}

extension ToggleBotIsAddedToAttachmentMenuDataClassExtensions
    on ToggleBotIsAddedToAttachmentMenu {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleBotIsAddedToAttachmentMenu &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.isAdded, isAdded) &&
          const DeepCollectionEquality().equals(
            other.allowWriteAccess,
            allowWriteAccess,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(isAdded),
    const DeepCollectionEquality().hash(allowWriteAccess),
  ]);
}

extension GetThemedEmojiStatusesDataClassExtensions on GetThemedEmojiStatuses {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetThemedEmojiStatuses);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetRecentEmojiStatusesDataClassExtensions on GetRecentEmojiStatuses {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetRecentEmojiStatuses);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetUpgradedGiftEmojiStatusesDataClassExtensions
    on GetUpgradedGiftEmojiStatuses {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetUpgradedGiftEmojiStatuses);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetDefaultEmojiStatusesDataClassExtensions
    on GetDefaultEmojiStatuses {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetDefaultEmojiStatuses);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ClearRecentEmojiStatusesDataClassExtensions
    on ClearRecentEmojiStatuses {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ClearRecentEmojiStatuses);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetThemedChatEmojiStatusesDataClassExtensions
    on GetThemedChatEmojiStatuses {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetThemedChatEmojiStatuses);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetDefaultChatEmojiStatusesDataClassExtensions
    on GetDefaultChatEmojiStatuses {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetDefaultChatEmojiStatuses);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetDisallowedChatEmojiStatusesDataClassExtensions
    on GetDisallowedChatEmojiStatuses {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetDisallowedChatEmojiStatuses);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension DownloadFileDataClassExtensions on DownloadFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DownloadFile &&
          const DeepCollectionEquality().equals(other.fileId, fileId) &&
          const DeepCollectionEquality().equals(other.priority, priority) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit) &&
          const DeepCollectionEquality().equals(
            other.synchronous,
            synchronous,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileId),
    const DeepCollectionEquality().hash(priority),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
    const DeepCollectionEquality().hash(synchronous),
  ]);
}

extension GetFileDownloadedPrefixSizeDataClassExtensions
    on GetFileDownloadedPrefixSize {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetFileDownloadedPrefixSize &&
          const DeepCollectionEquality().equals(other.fileId, fileId) &&
          const DeepCollectionEquality().equals(other.offset, offset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileId),
    const DeepCollectionEquality().hash(offset),
  ]);
}

extension CancelDownloadFileDataClassExtensions on CancelDownloadFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CancelDownloadFile &&
          const DeepCollectionEquality().equals(other.fileId, fileId) &&
          const DeepCollectionEquality().equals(
            other.onlyIfPending,
            onlyIfPending,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileId),
    const DeepCollectionEquality().hash(onlyIfPending),
  ]);
}

extension GetSuggestedFileNameDataClassExtensions on GetSuggestedFileName {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetSuggestedFileName &&
          const DeepCollectionEquality().equals(other.fileId, fileId) &&
          const DeepCollectionEquality().equals(other.directory, directory));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileId),
    const DeepCollectionEquality().hash(directory),
  ]);
}

extension PreliminaryUploadFileDataClassExtensions on PreliminaryUploadFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PreliminaryUploadFile &&
          const DeepCollectionEquality().equals(other.file, file) &&
          const DeepCollectionEquality().equals(other.fileType, fileType) &&
          const DeepCollectionEquality().equals(other.priority, priority));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(file),
    const DeepCollectionEquality().hash(fileType),
    const DeepCollectionEquality().hash(priority),
  ]);
}

extension CancelPreliminaryUploadFileDataClassExtensions
    on CancelPreliminaryUploadFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CancelPreliminaryUploadFile &&
          const DeepCollectionEquality().equals(other.fileId, fileId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileId),
  ]);
}

extension WriteGeneratedFilePartDataClassExtensions on WriteGeneratedFilePart {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is WriteGeneratedFilePart &&
          const DeepCollectionEquality().equals(
            other.generationId,
            generationId,
          ) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.data, data));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(generationId),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(data),
  ]);
}

extension SetFileGenerationProgressDataClassExtensions
    on SetFileGenerationProgress {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetFileGenerationProgress &&
          const DeepCollectionEquality().equals(
            other.generationId,
            generationId,
          ) &&
          const DeepCollectionEquality().equals(
            other.expectedSize,
            expectedSize,
          ) &&
          const DeepCollectionEquality().equals(
            other.localPrefixSize,
            localPrefixSize,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(generationId),
    const DeepCollectionEquality().hash(expectedSize),
    const DeepCollectionEquality().hash(localPrefixSize),
  ]);
}

extension FinishFileGenerationDataClassExtensions on FinishFileGeneration {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is FinishFileGeneration &&
          const DeepCollectionEquality().equals(
            other.generationId,
            generationId,
          ) &&
          const DeepCollectionEquality().equals(other.error, error));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(generationId),
    const DeepCollectionEquality().hash(error),
  ]);
}

extension ReadFilePartDataClassExtensions on ReadFilePart {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReadFilePart &&
          const DeepCollectionEquality().equals(other.fileId, fileId) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.count, count));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileId),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(count),
  ]);
}

extension DeleteFileDataClassExtensions on DeleteFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteFile &&
          const DeepCollectionEquality().equals(other.fileId, fileId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileId),
  ]);
}

extension AddFileToDownloadsDataClassExtensions on AddFileToDownloads {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddFileToDownloads &&
          const DeepCollectionEquality().equals(other.fileId, fileId) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.priority, priority));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileId),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(priority),
  ]);
}

extension ToggleDownloadIsPausedDataClassExtensions on ToggleDownloadIsPaused {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleDownloadIsPaused &&
          const DeepCollectionEquality().equals(other.fileId, fileId) &&
          const DeepCollectionEquality().equals(other.isPaused, isPaused));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileId),
    const DeepCollectionEquality().hash(isPaused),
  ]);
}

extension ToggleAllDownloadsArePausedDataClassExtensions
    on ToggleAllDownloadsArePaused {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleAllDownloadsArePaused &&
          const DeepCollectionEquality().equals(other.arePaused, arePaused));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(arePaused),
  ]);
}

extension RemoveFileFromDownloadsDataClassExtensions
    on RemoveFileFromDownloads {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveFileFromDownloads &&
          const DeepCollectionEquality().equals(other.fileId, fileId) &&
          const DeepCollectionEquality().equals(
            other.deleteFromCache,
            deleteFromCache,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileId),
    const DeepCollectionEquality().hash(deleteFromCache),
  ]);
}

extension RemoveAllFilesFromDownloadsDataClassExtensions
    on RemoveAllFilesFromDownloads {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveAllFilesFromDownloads &&
          const DeepCollectionEquality().equals(other.onlyActive, onlyActive) &&
          const DeepCollectionEquality().equals(
            other.onlyCompleted,
            onlyCompleted,
          ) &&
          const DeepCollectionEquality().equals(
            other.deleteFromCache,
            deleteFromCache,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(onlyActive),
    const DeepCollectionEquality().hash(onlyCompleted),
    const DeepCollectionEquality().hash(deleteFromCache),
  ]);
}

extension SearchFileDownloadsDataClassExtensions on SearchFileDownloads {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchFileDownloads &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.onlyActive, onlyActive) &&
          const DeepCollectionEquality().equals(
            other.onlyCompleted,
            onlyCompleted,
          ) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(onlyActive),
    const DeepCollectionEquality().hash(onlyCompleted),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension SetApplicationVerificationTokenDataClassExtensions
    on SetApplicationVerificationToken {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetApplicationVerificationToken &&
          const DeepCollectionEquality().equals(
            other.verificationId,
            verificationId,
          ) &&
          const DeepCollectionEquality().equals(other.token, token));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(verificationId),
    const DeepCollectionEquality().hash(token),
  ]);
}

extension GetMessageFileTypeDataClassExtensions on GetMessageFileType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessageFileType &&
          const DeepCollectionEquality().equals(
            other.messageFileHead,
            messageFileHead,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messageFileHead),
  ]);
}

extension GetMessageImportConfirmationTextDataClassExtensions
    on GetMessageImportConfirmationText {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessageImportConfirmationText &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension ImportMessagesDataClassExtensions on ImportMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ImportMessages &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.messageFile,
            messageFile,
          ) &&
          const DeepCollectionEquality().equals(
            other.attachedFiles,
            attachedFiles,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageFile),
    const DeepCollectionEquality().hash(attachedFiles),
  ]);
}

extension ReplacePrimaryChatInviteLinkDataClassExtensions
    on ReplacePrimaryChatInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReplacePrimaryChatInviteLink &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension CreateChatInviteLinkDataClassExtensions on CreateChatInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateChatInviteLink &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(
            other.expirationDate,
            expirationDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.memberLimit,
            memberLimit,
          ) &&
          const DeepCollectionEquality().equals(
            other.createsJoinRequest,
            createsJoinRequest,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(expirationDate),
    const DeepCollectionEquality().hash(memberLimit),
    const DeepCollectionEquality().hash(createsJoinRequest),
  ]);
}

extension CreateChatSubscriptionInviteLinkDataClassExtensions
    on CreateChatSubscriptionInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateChatSubscriptionInviteLink &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(
            other.subscriptionPricing,
            subscriptionPricing,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(subscriptionPricing),
  ]);
}

extension EditChatInviteLinkDataClassExtensions on EditChatInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditChatInviteLink &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(
            other.expirationDate,
            expirationDate,
          ) &&
          const DeepCollectionEquality().equals(
            other.memberLimit,
            memberLimit,
          ) &&
          const DeepCollectionEquality().equals(
            other.createsJoinRequest,
            createsJoinRequest,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(inviteLink),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(expirationDate),
    const DeepCollectionEquality().hash(memberLimit),
    const DeepCollectionEquality().hash(createsJoinRequest),
  ]);
}

extension EditChatSubscriptionInviteLinkDataClassExtensions
    on EditChatSubscriptionInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditChatSubscriptionInviteLink &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink) &&
          const DeepCollectionEquality().equals(other.name, name));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(inviteLink),
    const DeepCollectionEquality().hash(name),
  ]);
}

extension GetChatInviteLinkDataClassExtensions on GetChatInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatInviteLink &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(inviteLink),
  ]);
}

extension GetChatInviteLinkCountsDataClassExtensions
    on GetChatInviteLinkCounts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatInviteLinkCounts &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension GetChatInviteLinksDataClassExtensions on GetChatInviteLinks {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatInviteLinks &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.creatorUserId,
            creatorUserId,
          ) &&
          const DeepCollectionEquality().equals(other.isRevoked, isRevoked) &&
          const DeepCollectionEquality().equals(other.offsetDate, offsetDate) &&
          const DeepCollectionEquality().equals(
            other.offsetInviteLink,
            offsetInviteLink,
          ) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(creatorUserId),
    const DeepCollectionEquality().hash(isRevoked),
    const DeepCollectionEquality().hash(offsetDate),
    const DeepCollectionEquality().hash(offsetInviteLink),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetChatInviteLinkMembersDataClassExtensions
    on GetChatInviteLinkMembers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatInviteLinkMembers &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink) &&
          const DeepCollectionEquality().equals(
            other.onlyWithExpiredSubscription,
            onlyWithExpiredSubscription,
          ) &&
          const DeepCollectionEquality().equals(
            other.offsetMember,
            offsetMember,
          ) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(inviteLink),
    const DeepCollectionEquality().hash(onlyWithExpiredSubscription),
    const DeepCollectionEquality().hash(offsetMember),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension RevokeChatInviteLinkDataClassExtensions on RevokeChatInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RevokeChatInviteLink &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(inviteLink),
  ]);
}

extension DeleteRevokedChatInviteLinkDataClassExtensions
    on DeleteRevokedChatInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteRevokedChatInviteLink &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(inviteLink),
  ]);
}

extension DeleteAllRevokedChatInviteLinksDataClassExtensions
    on DeleteAllRevokedChatInviteLinks {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteAllRevokedChatInviteLinks &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.creatorUserId,
            creatorUserId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(creatorUserId),
  ]);
}

extension CheckChatInviteLinkDataClassExtensions on CheckChatInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckChatInviteLink &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inviteLink),
  ]);
}

extension JoinChatByInviteLinkDataClassExtensions on JoinChatByInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is JoinChatByInviteLink &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inviteLink),
  ]);
}

extension GetChatJoinRequestsDataClassExtensions on GetChatJoinRequests {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatJoinRequests &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink) &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(
            other.offsetRequest,
            offsetRequest,
          ) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(inviteLink),
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(offsetRequest),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension ProcessChatJoinRequestDataClassExtensions on ProcessChatJoinRequest {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ProcessChatJoinRequest &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.approve, approve));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(approve),
  ]);
}

extension ProcessChatJoinRequestsDataClassExtensions
    on ProcessChatJoinRequests {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ProcessChatJoinRequests &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink) &&
          const DeepCollectionEquality().equals(other.approve, approve));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(inviteLink),
    const DeepCollectionEquality().hash(approve),
  ]);
}

extension CreateCallDataClassExtensions on CreateCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateCall &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.protocol, protocol) &&
          const DeepCollectionEquality().equals(other.isVideo, isVideo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(protocol),
    const DeepCollectionEquality().hash(isVideo),
  ]);
}

extension AcceptCallDataClassExtensions on AcceptCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AcceptCall &&
          const DeepCollectionEquality().equals(other.callId, callId) &&
          const DeepCollectionEquality().equals(other.protocol, protocol));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(callId),
    const DeepCollectionEquality().hash(protocol),
  ]);
}

extension SendCallSignalingDataDataClassExtensions on SendCallSignalingData {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendCallSignalingData &&
          const DeepCollectionEquality().equals(other.callId, callId) &&
          const DeepCollectionEquality().equals(other.data, data));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(callId),
    const DeepCollectionEquality().hash(data),
  ]);
}

extension DiscardCallDataClassExtensions on DiscardCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DiscardCall &&
          const DeepCollectionEquality().equals(other.callId, callId) &&
          const DeepCollectionEquality().equals(
            other.isDisconnected,
            isDisconnected,
          ) &&
          const DeepCollectionEquality().equals(other.inviteLink, inviteLink) &&
          const DeepCollectionEquality().equals(other.duration, duration) &&
          const DeepCollectionEquality().equals(other.isVideo, isVideo) &&
          const DeepCollectionEquality().equals(
            other.connectionId,
            connectionId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(callId),
    const DeepCollectionEquality().hash(isDisconnected),
    const DeepCollectionEquality().hash(inviteLink),
    const DeepCollectionEquality().hash(duration),
    const DeepCollectionEquality().hash(isVideo),
    const DeepCollectionEquality().hash(connectionId),
  ]);
}

extension SendCallRatingDataClassExtensions on SendCallRating {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendCallRating &&
          const DeepCollectionEquality().equals(other.callId, callId) &&
          const DeepCollectionEquality().equals(other.rating, rating) &&
          const DeepCollectionEquality().equals(other.comment, comment) &&
          const DeepCollectionEquality().equals(other.problems, problems));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(callId),
    const DeepCollectionEquality().hash(rating),
    const DeepCollectionEquality().hash(comment),
    const DeepCollectionEquality().hash(problems),
  ]);
}

extension SendCallDebugInformationDataClassExtensions
    on SendCallDebugInformation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendCallDebugInformation &&
          const DeepCollectionEquality().equals(other.callId, callId) &&
          const DeepCollectionEquality().equals(
            other.debugInformation,
            debugInformation,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(callId),
    const DeepCollectionEquality().hash(debugInformation),
  ]);
}

extension SendCallLogDataClassExtensions on SendCallLog {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendCallLog &&
          const DeepCollectionEquality().equals(other.callId, callId) &&
          const DeepCollectionEquality().equals(other.logFile, logFile));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(callId),
    const DeepCollectionEquality().hash(logFile),
  ]);
}

extension GetVideoChatAvailableParticipantsDataClassExtensions
    on GetVideoChatAvailableParticipants {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetVideoChatAvailableParticipants &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension SetVideoChatDefaultParticipantDataClassExtensions
    on SetVideoChatDefaultParticipant {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetVideoChatDefaultParticipant &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.defaultParticipantId,
            defaultParticipantId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(defaultParticipantId),
  ]);
}

extension CreateVideoChatDataClassExtensions on CreateVideoChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateVideoChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.startDate, startDate) &&
          const DeepCollectionEquality().equals(
            other.isRtmpStream,
            isRtmpStream,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(startDate),
    const DeepCollectionEquality().hash(isRtmpStream),
  ]);
}

extension CreateGroupCallDataClassExtensions on CreateGroupCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateGroupCall &&
          const DeepCollectionEquality().equals(
            other.joinParameters,
            joinParameters,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(joinParameters),
  ]);
}

extension GetVideoChatRtmpUrlDataClassExtensions on GetVideoChatRtmpUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetVideoChatRtmpUrl &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension ReplaceVideoChatRtmpUrlDataClassExtensions
    on ReplaceVideoChatRtmpUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReplaceVideoChatRtmpUrl &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension GetGroupCallDataClassExtensions on GetGroupCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetGroupCall &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
  ]);
}

extension StartScheduledVideoChatDataClassExtensions
    on StartScheduledVideoChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StartScheduledVideoChat &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
  ]);
}

extension ToggleVideoChatEnabledStartNotificationDataClassExtensions
    on ToggleVideoChatEnabledStartNotification {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleVideoChatEnabledStartNotification &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(
            other.enabledStartNotification,
            enabledStartNotification,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(enabledStartNotification),
  ]);
}

extension JoinGroupCallDataClassExtensions on JoinGroupCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is JoinGroupCall &&
          const DeepCollectionEquality().equals(
            other.inputGroupCall,
            inputGroupCall,
          ) &&
          const DeepCollectionEquality().equals(
            other.joinParameters,
            joinParameters,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inputGroupCall),
    const DeepCollectionEquality().hash(joinParameters),
  ]);
}

extension JoinVideoChatDataClassExtensions on JoinVideoChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is JoinVideoChat &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(
            other.participantId,
            participantId,
          ) &&
          const DeepCollectionEquality().equals(
            other.joinParameters,
            joinParameters,
          ) &&
          const DeepCollectionEquality().equals(other.inviteHash, inviteHash));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(participantId),
    const DeepCollectionEquality().hash(joinParameters),
    const DeepCollectionEquality().hash(inviteHash),
  ]);
}

extension StartGroupCallScreenSharingDataClassExtensions
    on StartGroupCallScreenSharing {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StartGroupCallScreenSharing &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(
            other.audioSourceId,
            audioSourceId,
          ) &&
          const DeepCollectionEquality().equals(other.payload, payload));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(audioSourceId),
    const DeepCollectionEquality().hash(payload),
  ]);
}

extension ToggleGroupCallScreenSharingIsPausedDataClassExtensions
    on ToggleGroupCallScreenSharingIsPaused {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleGroupCallScreenSharingIsPaused &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(other.isPaused, isPaused));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(isPaused),
  ]);
}

extension EndGroupCallScreenSharingDataClassExtensions
    on EndGroupCallScreenSharing {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EndGroupCallScreenSharing &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
  ]);
}

extension SetVideoChatTitleDataClassExtensions on SetVideoChatTitle {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetVideoChatTitle &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(other.title, title));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(title),
  ]);
}

extension ToggleVideoChatMuteNewParticipantsDataClassExtensions
    on ToggleVideoChatMuteNewParticipants {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleVideoChatMuteNewParticipants &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(
            other.muteNewParticipants,
            muteNewParticipants,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(muteNewParticipants),
  ]);
}

extension InviteGroupCallParticipantDataClassExtensions
    on InviteGroupCallParticipant {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InviteGroupCallParticipant &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.isVideo, isVideo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(isVideo),
  ]);
}

extension DeclineGroupCallInvitationDataClassExtensions
    on DeclineGroupCallInvitation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeclineGroupCallInvitation &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension BanGroupCallParticipantsDataClassExtensions
    on BanGroupCallParticipants {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BanGroupCallParticipants &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(other.userIds, userIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(userIds),
  ]);
}

extension InviteVideoChatParticipantsDataClassExtensions
    on InviteVideoChatParticipants {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is InviteVideoChatParticipants &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(other.userIds, userIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(userIds),
  ]);
}

extension GetVideoChatInviteLinkDataClassExtensions on GetVideoChatInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetVideoChatInviteLink &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(
            other.canSelfUnmute,
            canSelfUnmute,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(canSelfUnmute),
  ]);
}

extension RevokeGroupCallInviteLinkDataClassExtensions
    on RevokeGroupCallInviteLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RevokeGroupCallInviteLink &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
  ]);
}

extension StartGroupCallRecordingDataClassExtensions
    on StartGroupCallRecording {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is StartGroupCallRecording &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(
            other.recordVideo,
            recordVideo,
          ) &&
          const DeepCollectionEquality().equals(
            other.usePortraitOrientation,
            usePortraitOrientation,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(recordVideo),
    const DeepCollectionEquality().hash(usePortraitOrientation),
  ]);
}

extension EndGroupCallRecordingDataClassExtensions on EndGroupCallRecording {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EndGroupCallRecording &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
  ]);
}

extension ToggleGroupCallIsMyVideoPausedDataClassExtensions
    on ToggleGroupCallIsMyVideoPaused {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleGroupCallIsMyVideoPaused &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(
            other.isMyVideoPaused,
            isMyVideoPaused,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(isMyVideoPaused),
  ]);
}

extension ToggleGroupCallIsMyVideoEnabledDataClassExtensions
    on ToggleGroupCallIsMyVideoEnabled {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleGroupCallIsMyVideoEnabled &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(
            other.isMyVideoEnabled,
            isMyVideoEnabled,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(isMyVideoEnabled),
  ]);
}

extension SetGroupCallParticipantIsSpeakingDataClassExtensions
    on SetGroupCallParticipantIsSpeaking {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetGroupCallParticipantIsSpeaking &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(
            other.audioSource,
            audioSource,
          ) &&
          const DeepCollectionEquality().equals(other.isSpeaking, isSpeaking));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(audioSource),
    const DeepCollectionEquality().hash(isSpeaking),
  ]);
}

extension ToggleGroupCallParticipantIsMutedDataClassExtensions
    on ToggleGroupCallParticipantIsMuted {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleGroupCallParticipantIsMuted &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(
            other.participantId,
            participantId,
          ) &&
          const DeepCollectionEquality().equals(other.isMuted, isMuted));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(participantId),
    const DeepCollectionEquality().hash(isMuted),
  ]);
}

extension SetGroupCallParticipantVolumeLevelDataClassExtensions
    on SetGroupCallParticipantVolumeLevel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetGroupCallParticipantVolumeLevel &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(
            other.participantId,
            participantId,
          ) &&
          const DeepCollectionEquality().equals(
            other.volumeLevel,
            volumeLevel,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(participantId),
    const DeepCollectionEquality().hash(volumeLevel),
  ]);
}

extension ToggleGroupCallParticipantIsHandRaisedDataClassExtensions
    on ToggleGroupCallParticipantIsHandRaised {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleGroupCallParticipantIsHandRaised &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(
            other.participantId,
            participantId,
          ) &&
          const DeepCollectionEquality().equals(
            other.isHandRaised,
            isHandRaised,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(participantId),
    const DeepCollectionEquality().hash(isHandRaised),
  ]);
}

extension GetGroupCallParticipantsDataClassExtensions
    on GetGroupCallParticipants {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetGroupCallParticipants &&
          const DeepCollectionEquality().equals(
            other.inputGroupCall,
            inputGroupCall,
          ) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inputGroupCall),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension LoadGroupCallParticipantsDataClassExtensions
    on LoadGroupCallParticipants {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LoadGroupCallParticipants &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension LeaveGroupCallDataClassExtensions on LeaveGroupCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LeaveGroupCall &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
  ]);
}

extension EndGroupCallDataClassExtensions on EndGroupCall {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EndGroupCall &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
  ]);
}

extension GetVideoChatStreamsDataClassExtensions on GetVideoChatStreams {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetVideoChatStreams &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
  ]);
}

extension GetVideoChatStreamSegmentDataClassExtensions
    on GetVideoChatStreamSegment {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetVideoChatStreamSegment &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(other.timeOffset, timeOffset) &&
          const DeepCollectionEquality().equals(other.scale, scale) &&
          const DeepCollectionEquality().equals(other.channelId, channelId) &&
          const DeepCollectionEquality().equals(
            other.videoQuality,
            videoQuality,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(timeOffset),
    const DeepCollectionEquality().hash(scale),
    const DeepCollectionEquality().hash(channelId),
    const DeepCollectionEquality().hash(videoQuality),
  ]);
}

extension EncryptGroupCallDataDataClassExtensions on EncryptGroupCallData {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EncryptGroupCallData &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(
            other.dataChannel,
            dataChannel,
          ) &&
          const DeepCollectionEquality().equals(other.data, data) &&
          const DeepCollectionEquality().equals(
            other.unencryptedPrefixSize,
            unencryptedPrefixSize,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(dataChannel),
    const DeepCollectionEquality().hash(data),
    const DeepCollectionEquality().hash(unencryptedPrefixSize),
  ]);
}

extension DecryptGroupCallDataDataClassExtensions on DecryptGroupCallData {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DecryptGroupCallData &&
          const DeepCollectionEquality().equals(
            other.groupCallId,
            groupCallId,
          ) &&
          const DeepCollectionEquality().equals(
            other.participantId,
            participantId,
          ) &&
          const DeepCollectionEquality().equals(
            other.dataChannel,
            dataChannel,
          ) &&
          const DeepCollectionEquality().equals(other.data, data));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(groupCallId),
    const DeepCollectionEquality().hash(participantId),
    const DeepCollectionEquality().hash(dataChannel),
    const DeepCollectionEquality().hash(data),
  ]);
}

extension SetMessageSenderBlockListDataClassExtensions
    on SetMessageSenderBlockList {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetMessageSenderBlockList &&
          const DeepCollectionEquality().equals(other.senderId, senderId) &&
          const DeepCollectionEquality().equals(other.blockList, blockList));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(senderId),
    const DeepCollectionEquality().hash(blockList),
  ]);
}

extension BlockMessageSenderFromRepliesDataClassExtensions
    on BlockMessageSenderFromReplies {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is BlockMessageSenderFromReplies &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(
            other.deleteMessage,
            deleteMessage,
          ) &&
          const DeepCollectionEquality().equals(
            other.deleteAllMessages,
            deleteAllMessages,
          ) &&
          const DeepCollectionEquality().equals(other.reportSpam, reportSpam));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(deleteMessage),
    const DeepCollectionEquality().hash(deleteAllMessages),
    const DeepCollectionEquality().hash(reportSpam),
  ]);
}

extension GetBlockedMessageSendersDataClassExtensions
    on GetBlockedMessageSenders {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetBlockedMessageSenders &&
          const DeepCollectionEquality().equals(other.blockList, blockList) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(blockList),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension AddContactDataClassExtensions on AddContact {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddContact &&
          const DeepCollectionEquality().equals(other.contact, contact) &&
          const DeepCollectionEquality().equals(
            other.sharePhoneNumber,
            sharePhoneNumber,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(contact),
    const DeepCollectionEquality().hash(sharePhoneNumber),
  ]);
}

extension ImportContactsDataClassExtensions on ImportContacts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ImportContacts &&
          const DeepCollectionEquality().equals(other.contacts, contacts));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(contacts),
  ]);
}

extension GetContactsDataClassExtensions on GetContacts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetContacts);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchContactsDataClassExtensions on SearchContacts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchContacts &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension RemoveContactsDataClassExtensions on RemoveContacts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveContacts &&
          const DeepCollectionEquality().equals(other.userIds, userIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userIds),
  ]);
}

extension GetImportedContactCountDataClassExtensions
    on GetImportedContactCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetImportedContactCount);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ChangeImportedContactsDataClassExtensions on ChangeImportedContacts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChangeImportedContacts &&
          const DeepCollectionEquality().equals(other.contacts, contacts));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(contacts),
  ]);
}

extension ClearImportedContactsDataClassExtensions on ClearImportedContacts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ClearImportedContacts);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SetCloseFriendsDataClassExtensions on SetCloseFriends {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetCloseFriends &&
          const DeepCollectionEquality().equals(other.userIds, userIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userIds),
  ]);
}

extension GetCloseFriendsDataClassExtensions on GetCloseFriends {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetCloseFriends);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SetUserPersonalProfilePhotoDataClassExtensions
    on SetUserPersonalProfilePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetUserPersonalProfilePhoto &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(photo),
  ]);
}

extension SuggestUserProfilePhotoDataClassExtensions
    on SuggestUserProfilePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SuggestUserProfilePhoto &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(photo),
  ]);
}

extension ToggleBotCanManageEmojiStatusDataClassExtensions
    on ToggleBotCanManageEmojiStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleBotCanManageEmojiStatus &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.canManageEmojiStatus,
            canManageEmojiStatus,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(canManageEmojiStatus),
  ]);
}

extension SetUserEmojiStatusDataClassExtensions on SetUserEmojiStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetUserEmojiStatus &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.emojiStatus,
            emojiStatus,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(emojiStatus),
  ]);
}

extension SearchUserByPhoneNumberDataClassExtensions
    on SearchUserByPhoneNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchUserByPhoneNumber &&
          const DeepCollectionEquality().equals(
            other.phoneNumber,
            phoneNumber,
          ) &&
          const DeepCollectionEquality().equals(other.onlyLocal, onlyLocal));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(phoneNumber),
    const DeepCollectionEquality().hash(onlyLocal),
  ]);
}

extension SharePhoneNumberDataClassExtensions on SharePhoneNumber {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SharePhoneNumber &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension GetUserProfilePhotosDataClassExtensions on GetUserProfilePhotos {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetUserProfilePhotos &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetStickerOutlineDataClassExtensions on GetStickerOutline {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStickerOutline &&
          const DeepCollectionEquality().equals(
            other.stickerFileId,
            stickerFileId,
          ) &&
          const DeepCollectionEquality().equals(
            other.forAnimatedEmoji,
            forAnimatedEmoji,
          ) &&
          const DeepCollectionEquality().equals(
            other.forClickedAnimatedEmojiMessage,
            forClickedAnimatedEmojiMessage,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerFileId),
    const DeepCollectionEquality().hash(forAnimatedEmoji),
    const DeepCollectionEquality().hash(forClickedAnimatedEmojiMessage),
  ]);
}

extension GetStickersDataClassExtensions on GetStickers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStickers &&
          const DeepCollectionEquality().equals(
            other.stickerType,
            stickerType,
          ) &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.limit, limit) &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerType),
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(limit),
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension GetAllStickerEmojisDataClassExtensions on GetAllStickerEmojis {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetAllStickerEmojis &&
          const DeepCollectionEquality().equals(
            other.stickerType,
            stickerType,
          ) &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.returnOnlyMainEmoji,
            returnOnlyMainEmoji,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerType),
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(returnOnlyMainEmoji),
  ]);
}

extension SearchStickersDataClassExtensions on SearchStickers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchStickers &&
          const DeepCollectionEquality().equals(
            other.stickerType,
            stickerType,
          ) &&
          const DeepCollectionEquality().equals(other.emojis, emojis) &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(
            other.inputLanguageCodes,
            inputLanguageCodes,
          ) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerType),
    const DeepCollectionEquality().hash(emojis),
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(inputLanguageCodes),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetGreetingStickersDataClassExtensions on GetGreetingStickers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetGreetingStickers);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetPremiumStickersDataClassExtensions on GetPremiumStickers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPremiumStickers &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(limit)]);
}

extension GetInstalledStickerSetsDataClassExtensions
    on GetInstalledStickerSets {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetInstalledStickerSets &&
          const DeepCollectionEquality().equals(
            other.stickerType,
            stickerType,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerType),
  ]);
}

extension GetArchivedStickerSetsDataClassExtensions on GetArchivedStickerSets {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetArchivedStickerSets &&
          const DeepCollectionEquality().equals(
            other.stickerType,
            stickerType,
          ) &&
          const DeepCollectionEquality().equals(
            other.offsetStickerSetId,
            offsetStickerSetId,
          ) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerType),
    const DeepCollectionEquality().hash(offsetStickerSetId),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetTrendingStickerSetsDataClassExtensions on GetTrendingStickerSets {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetTrendingStickerSets &&
          const DeepCollectionEquality().equals(
            other.stickerType,
            stickerType,
          ) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerType),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetAttachedStickerSetsDataClassExtensions on GetAttachedStickerSets {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetAttachedStickerSets &&
          const DeepCollectionEquality().equals(other.fileId, fileId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(fileId),
  ]);
}

extension GetStickerSetDataClassExtensions on GetStickerSet {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStickerSet &&
          const DeepCollectionEquality().equals(other.setId, setId));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(setId)]);
}

extension GetStickerSetNameDataClassExtensions on GetStickerSetName {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStickerSetName &&
          const DeepCollectionEquality().equals(other.setId, setId));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(setId)]);
}

extension SearchStickerSetDataClassExtensions on SearchStickerSet {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchStickerSet &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(
            other.ignoreCache,
            ignoreCache,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(ignoreCache),
  ]);
}

extension SearchInstalledStickerSetsDataClassExtensions
    on SearchInstalledStickerSets {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchInstalledStickerSets &&
          const DeepCollectionEquality().equals(
            other.stickerType,
            stickerType,
          ) &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerType),
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension SearchStickerSetsDataClassExtensions on SearchStickerSets {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchStickerSets &&
          const DeepCollectionEquality().equals(
            other.stickerType,
            stickerType,
          ) &&
          const DeepCollectionEquality().equals(other.query, query));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerType),
    const DeepCollectionEquality().hash(query),
  ]);
}

extension ChangeStickerSetDataClassExtensions on ChangeStickerSet {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ChangeStickerSet &&
          const DeepCollectionEquality().equals(other.setId, setId) &&
          const DeepCollectionEquality().equals(
            other.isInstalled,
            isInstalled,
          ) &&
          const DeepCollectionEquality().equals(other.isArchived, isArchived));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(setId),
    const DeepCollectionEquality().hash(isInstalled),
    const DeepCollectionEquality().hash(isArchived),
  ]);
}

extension ViewTrendingStickerSetsDataClassExtensions
    on ViewTrendingStickerSets {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ViewTrendingStickerSets &&
          const DeepCollectionEquality().equals(
            other.stickerSetIds,
            stickerSetIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerSetIds),
  ]);
}

extension ReorderInstalledStickerSetsDataClassExtensions
    on ReorderInstalledStickerSets {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReorderInstalledStickerSets &&
          const DeepCollectionEquality().equals(
            other.stickerType,
            stickerType,
          ) &&
          const DeepCollectionEquality().equals(
            other.stickerSetIds,
            stickerSetIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(stickerType),
    const DeepCollectionEquality().hash(stickerSetIds),
  ]);
}

extension GetRecentStickersDataClassExtensions on GetRecentStickers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetRecentStickers &&
          const DeepCollectionEquality().equals(other.isAttached, isAttached));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isAttached),
  ]);
}

extension AddRecentStickerDataClassExtensions on AddRecentSticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddRecentSticker &&
          const DeepCollectionEquality().equals(other.isAttached, isAttached) &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isAttached),
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension RemoveRecentStickerDataClassExtensions on RemoveRecentSticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveRecentSticker &&
          const DeepCollectionEquality().equals(other.isAttached, isAttached) &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isAttached),
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension ClearRecentStickersDataClassExtensions on ClearRecentStickers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ClearRecentStickers &&
          const DeepCollectionEquality().equals(other.isAttached, isAttached));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(isAttached),
  ]);
}

extension GetFavoriteStickersDataClassExtensions on GetFavoriteStickers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetFavoriteStickers);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AddFavoriteStickerDataClassExtensions on AddFavoriteSticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddFavoriteSticker &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension RemoveFavoriteStickerDataClassExtensions on RemoveFavoriteSticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveFavoriteSticker &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension GetStickerEmojisDataClassExtensions on GetStickerEmojis {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStickerEmojis &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension SearchEmojisDataClassExtensions on SearchEmojis {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchEmojis &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(
            other.inputLanguageCodes,
            inputLanguageCodes,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(inputLanguageCodes),
  ]);
}

extension GetKeywordEmojisDataClassExtensions on GetKeywordEmojis {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetKeywordEmojis &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(
            other.inputLanguageCodes,
            inputLanguageCodes,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(inputLanguageCodes),
  ]);
}

extension GetEmojiCategoriesDataClassExtensions on GetEmojiCategories {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetEmojiCategories &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(type)]);
}

extension GetAnimatedEmojiDataClassExtensions on GetAnimatedEmoji {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetAnimatedEmoji &&
          const DeepCollectionEquality().equals(other.emoji, emoji));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(emoji)]);
}

extension GetEmojiSuggestionsUrlDataClassExtensions on GetEmojiSuggestionsUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetEmojiSuggestionsUrl &&
          const DeepCollectionEquality().equals(
            other.languageCode,
            languageCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(languageCode),
  ]);
}

extension GetCustomEmojiStickersDataClassExtensions on GetCustomEmojiStickers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetCustomEmojiStickers &&
          const DeepCollectionEquality().equals(
            other.customEmojiIds,
            customEmojiIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(customEmojiIds),
  ]);
}

extension GetDefaultChatPhotoCustomEmojiStickersDataClassExtensions
    on GetDefaultChatPhotoCustomEmojiStickers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetDefaultChatPhotoCustomEmojiStickers);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetDefaultProfilePhotoCustomEmojiStickersDataClassExtensions
    on GetDefaultProfilePhotoCustomEmojiStickers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetDefaultProfilePhotoCustomEmojiStickers);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetDefaultBackgroundCustomEmojiStickersDataClassExtensions
    on GetDefaultBackgroundCustomEmojiStickers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetDefaultBackgroundCustomEmojiStickers);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetSavedAnimationsDataClassExtensions on GetSavedAnimations {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetSavedAnimations);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AddSavedAnimationDataClassExtensions on AddSavedAnimation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddSavedAnimation &&
          const DeepCollectionEquality().equals(other.animation, animation));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(animation),
  ]);
}

extension RemoveSavedAnimationDataClassExtensions on RemoveSavedAnimation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveSavedAnimation &&
          const DeepCollectionEquality().equals(other.animation, animation));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(animation),
  ]);
}

extension GetRecentInlineBotsDataClassExtensions on GetRecentInlineBots {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetRecentInlineBots);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetOwnedBotsDataClassExtensions on GetOwnedBots {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetOwnedBots);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchHashtagsDataClassExtensions on SearchHashtags {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchHashtags &&
          const DeepCollectionEquality().equals(other.prefix, prefix) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(prefix),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension RemoveRecentHashtagDataClassExtensions on RemoveRecentHashtag {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveRecentHashtag &&
          const DeepCollectionEquality().equals(other.hashtag, hashtag));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(hashtag),
  ]);
}

extension GetLinkPreviewDataClassExtensions on GetLinkPreview {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetLinkPreview &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(
            other.linkPreviewOptions,
            linkPreviewOptions,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(linkPreviewOptions),
  ]);
}

extension GetWebPageInstantViewDataClassExtensions on GetWebPageInstantView {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetWebPageInstantView &&
          const DeepCollectionEquality().equals(other.url, url) &&
          const DeepCollectionEquality().equals(other.onlyLocal, onlyLocal));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(url),
    const DeepCollectionEquality().hash(onlyLocal),
  ]);
}

extension SetProfilePhotoDataClassExtensions on SetProfilePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetProfilePhoto &&
          const DeepCollectionEquality().equals(other.photo, photo) &&
          const DeepCollectionEquality().equals(other.isPublic, isPublic));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(photo),
    const DeepCollectionEquality().hash(isPublic),
  ]);
}

extension DeleteProfilePhotoDataClassExtensions on DeleteProfilePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteProfilePhoto &&
          const DeepCollectionEquality().equals(
            other.profilePhotoId,
            profilePhotoId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(profilePhotoId),
  ]);
}

extension SetAccentColorDataClassExtensions on SetAccentColor {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetAccentColor &&
          const DeepCollectionEquality().equals(
            other.accentColorId,
            accentColorId,
          ) &&
          const DeepCollectionEquality().equals(
            other.backgroundCustomEmojiId,
            backgroundCustomEmojiId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(accentColorId),
    const DeepCollectionEquality().hash(backgroundCustomEmojiId),
  ]);
}

extension SetProfileAccentColorDataClassExtensions on SetProfileAccentColor {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetProfileAccentColor &&
          const DeepCollectionEquality().equals(
            other.profileAccentColorId,
            profileAccentColorId,
          ) &&
          const DeepCollectionEquality().equals(
            other.profileBackgroundCustomEmojiId,
            profileBackgroundCustomEmojiId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(profileAccentColorId),
    const DeepCollectionEquality().hash(profileBackgroundCustomEmojiId),
  ]);
}

extension SetNameDataClassExtensions on SetName {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetName &&
          const DeepCollectionEquality().equals(other.firstName, firstName) &&
          const DeepCollectionEquality().equals(other.lastName, lastName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(firstName),
    const DeepCollectionEquality().hash(lastName),
  ]);
}

extension SetBioDataClassExtensions on SetBio {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBio &&
          const DeepCollectionEquality().equals(other.bio, bio));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(bio)]);
}

extension SetUsernameDataClassExtensions on SetUsername {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetUsername &&
          const DeepCollectionEquality().equals(other.username, username));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(username),
  ]);
}

extension ToggleUsernameIsActiveDataClassExtensions on ToggleUsernameIsActive {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleUsernameIsActive &&
          const DeepCollectionEquality().equals(other.username, username) &&
          const DeepCollectionEquality().equals(other.isActive, isActive));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(username),
    const DeepCollectionEquality().hash(isActive),
  ]);
}

extension ReorderActiveUsernamesDataClassExtensions on ReorderActiveUsernames {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReorderActiveUsernames &&
          const DeepCollectionEquality().equals(other.usernames, usernames));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(usernames),
  ]);
}

extension SetBirthdateDataClassExtensions on SetBirthdate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBirthdate &&
          const DeepCollectionEquality().equals(other.birthdate, birthdate));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(birthdate),
  ]);
}

extension SetPersonalChatDataClassExtensions on SetPersonalChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetPersonalChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension SetEmojiStatusDataClassExtensions on SetEmojiStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetEmojiStatus &&
          const DeepCollectionEquality().equals(
            other.emojiStatus,
            emojiStatus,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(emojiStatus),
  ]);
}

extension ToggleHasSponsoredMessagesEnabledDataClassExtensions
    on ToggleHasSponsoredMessagesEnabled {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleHasSponsoredMessagesEnabled &&
          const DeepCollectionEquality().equals(
            other.hasSponsoredMessagesEnabled,
            hasSponsoredMessagesEnabled,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(hasSponsoredMessagesEnabled),
  ]);
}

extension SetBusinessLocationDataClassExtensions on SetBusinessLocation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBusinessLocation &&
          const DeepCollectionEquality().equals(other.location, location));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(location),
  ]);
}

extension SetBusinessOpeningHoursDataClassExtensions
    on SetBusinessOpeningHours {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBusinessOpeningHours &&
          const DeepCollectionEquality().equals(
            other.openingHours,
            openingHours,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(openingHours),
  ]);
}

extension SetBusinessGreetingMessageSettingsDataClassExtensions
    on SetBusinessGreetingMessageSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBusinessGreetingMessageSettings &&
          const DeepCollectionEquality().equals(
            other.greetingMessageSettings,
            greetingMessageSettings,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(greetingMessageSettings),
  ]);
}

extension SetBusinessAwayMessageSettingsDataClassExtensions
    on SetBusinessAwayMessageSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBusinessAwayMessageSettings &&
          const DeepCollectionEquality().equals(
            other.awayMessageSettings,
            awayMessageSettings,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(awayMessageSettings),
  ]);
}

extension SetBusinessStartPageDataClassExtensions on SetBusinessStartPage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBusinessStartPage &&
          const DeepCollectionEquality().equals(other.startPage, startPage));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(startPage),
  ]);
}

extension SendPhoneNumberCodeDataClassExtensions on SendPhoneNumberCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendPhoneNumberCode &&
          const DeepCollectionEquality().equals(
            other.phoneNumber,
            phoneNumber,
          ) &&
          const DeepCollectionEquality().equals(other.settings, settings) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(phoneNumber),
    const DeepCollectionEquality().hash(settings),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension SendPhoneNumberFirebaseSmsDataClassExtensions
    on SendPhoneNumberFirebaseSms {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendPhoneNumberFirebaseSms &&
          const DeepCollectionEquality().equals(other.token, token));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(token)]);
}

extension ReportPhoneNumberCodeMissingDataClassExtensions
    on ReportPhoneNumberCodeMissing {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportPhoneNumberCodeMissing &&
          const DeepCollectionEquality().equals(
            other.mobileNetworkCode,
            mobileNetworkCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(mobileNetworkCode),
  ]);
}

extension ResendPhoneNumberCodeDataClassExtensions on ResendPhoneNumberCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ResendPhoneNumberCode &&
          const DeepCollectionEquality().equals(other.reason, reason));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(reason),
  ]);
}

extension CheckPhoneNumberCodeDataClassExtensions on CheckPhoneNumberCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckPhoneNumberCode &&
          const DeepCollectionEquality().equals(other.code, code));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(code)]);
}

extension GetBusinessConnectedBotDataClassExtensions
    on GetBusinessConnectedBot {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetBusinessConnectedBot);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SetBusinessConnectedBotDataClassExtensions
    on SetBusinessConnectedBot {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBusinessConnectedBot &&
          const DeepCollectionEquality().equals(other.bot, bot));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(bot)]);
}

extension DeleteBusinessConnectedBotDataClassExtensions
    on DeleteBusinessConnectedBot {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteBusinessConnectedBot &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
  ]);
}

extension ToggleBusinessConnectedBotChatIsPausedDataClassExtensions
    on ToggleBusinessConnectedBotChatIsPaused {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleBusinessConnectedBotChatIsPaused &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.isPaused, isPaused));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(isPaused),
  ]);
}

extension RemoveBusinessConnectedBotFromChatDataClassExtensions
    on RemoveBusinessConnectedBotFromChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveBusinessConnectedBotFromChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension GetBusinessChatLinksDataClassExtensions on GetBusinessChatLinks {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetBusinessChatLinks);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CreateBusinessChatLinkDataClassExtensions on CreateBusinessChatLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateBusinessChatLink &&
          const DeepCollectionEquality().equals(other.linkInfo, linkInfo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(linkInfo),
  ]);
}

extension EditBusinessChatLinkDataClassExtensions on EditBusinessChatLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditBusinessChatLink &&
          const DeepCollectionEquality().equals(other.link, link) &&
          const DeepCollectionEquality().equals(other.linkInfo, linkInfo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(link),
    const DeepCollectionEquality().hash(linkInfo),
  ]);
}

extension DeleteBusinessChatLinkDataClassExtensions on DeleteBusinessChatLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteBusinessChatLink &&
          const DeepCollectionEquality().equals(other.link, link));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(link)]);
}

extension GetBusinessChatLinkInfoDataClassExtensions
    on GetBusinessChatLinkInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetBusinessChatLinkInfo &&
          const DeepCollectionEquality().equals(other.linkName, linkName));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(linkName),
  ]);
}

extension GetUserLinkDataClassExtensions on GetUserLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetUserLink);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SearchUserByTokenDataClassExtensions on SearchUserByToken {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchUserByToken &&
          const DeepCollectionEquality().equals(other.token, token));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(token)]);
}

extension SetCommandsDataClassExtensions on SetCommands {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetCommands &&
          const DeepCollectionEquality().equals(other.scope, scope) &&
          const DeepCollectionEquality().equals(
            other.languageCode,
            languageCode,
          ) &&
          const DeepCollectionEquality().equals(other.commands, commands));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(scope),
    const DeepCollectionEquality().hash(languageCode),
    const DeepCollectionEquality().hash(commands),
  ]);
}

extension DeleteCommandsDataClassExtensions on DeleteCommands {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteCommands &&
          const DeepCollectionEquality().equals(other.scope, scope) &&
          const DeepCollectionEquality().equals(
            other.languageCode,
            languageCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(scope),
    const DeepCollectionEquality().hash(languageCode),
  ]);
}

extension GetCommandsDataClassExtensions on GetCommands {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetCommands &&
          const DeepCollectionEquality().equals(other.scope, scope) &&
          const DeepCollectionEquality().equals(
            other.languageCode,
            languageCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(scope),
    const DeepCollectionEquality().hash(languageCode),
  ]);
}

extension SetMenuButtonDataClassExtensions on SetMenuButton {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetMenuButton &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.menuButton, menuButton));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(menuButton),
  ]);
}

extension GetMenuButtonDataClassExtensions on GetMenuButton {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMenuButton &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension SetDefaultGroupAdministratorRightsDataClassExtensions
    on SetDefaultGroupAdministratorRights {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetDefaultGroupAdministratorRights &&
          const DeepCollectionEquality().equals(
            other.defaultGroupAdministratorRights,
            defaultGroupAdministratorRights,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(defaultGroupAdministratorRights),
  ]);
}

extension SetDefaultChannelAdministratorRightsDataClassExtensions
    on SetDefaultChannelAdministratorRights {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetDefaultChannelAdministratorRights &&
          const DeepCollectionEquality().equals(
            other.defaultChannelAdministratorRights,
            defaultChannelAdministratorRights,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(defaultChannelAdministratorRights),
  ]);
}

extension CanBotSendMessagesDataClassExtensions on CanBotSendMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanBotSendMessages &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
  ]);
}

extension AllowBotToSendMessagesDataClassExtensions on AllowBotToSendMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AllowBotToSendMessages &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
  ]);
}

extension SendWebAppCustomRequestDataClassExtensions
    on SendWebAppCustomRequest {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendWebAppCustomRequest &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.method, method) &&
          const DeepCollectionEquality().equals(other.parameters, parameters));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(method),
    const DeepCollectionEquality().hash(parameters),
  ]);
}

extension GetBotMediaPreviewsDataClassExtensions on GetBotMediaPreviews {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetBotMediaPreviews &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
  ]);
}

extension GetBotMediaPreviewInfoDataClassExtensions on GetBotMediaPreviewInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetBotMediaPreviewInfo &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.languageCode,
            languageCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(languageCode),
  ]);
}

extension AddBotMediaPreviewDataClassExtensions on AddBotMediaPreview {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddBotMediaPreview &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.languageCode,
            languageCode,
          ) &&
          const DeepCollectionEquality().equals(other.content, content));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(languageCode),
    const DeepCollectionEquality().hash(content),
  ]);
}

extension EditBotMediaPreviewDataClassExtensions on EditBotMediaPreview {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditBotMediaPreview &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.languageCode,
            languageCode,
          ) &&
          const DeepCollectionEquality().equals(other.fileId, fileId) &&
          const DeepCollectionEquality().equals(other.content, content));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(languageCode),
    const DeepCollectionEquality().hash(fileId),
    const DeepCollectionEquality().hash(content),
  ]);
}

extension ReorderBotMediaPreviewsDataClassExtensions
    on ReorderBotMediaPreviews {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReorderBotMediaPreviews &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.languageCode,
            languageCode,
          ) &&
          const DeepCollectionEquality().equals(other.fileIds, fileIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(languageCode),
    const DeepCollectionEquality().hash(fileIds),
  ]);
}

extension DeleteBotMediaPreviewsDataClassExtensions on DeleteBotMediaPreviews {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteBotMediaPreviews &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.languageCode,
            languageCode,
          ) &&
          const DeepCollectionEquality().equals(other.fileIds, fileIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(languageCode),
    const DeepCollectionEquality().hash(fileIds),
  ]);
}

extension SetBotNameDataClassExtensions on SetBotName {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBotName &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.languageCode,
            languageCode,
          ) &&
          const DeepCollectionEquality().equals(other.name, name));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(languageCode),
    const DeepCollectionEquality().hash(name),
  ]);
}

extension GetBotNameDataClassExtensions on GetBotName {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetBotName &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.languageCode,
            languageCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(languageCode),
  ]);
}

extension SetBotProfilePhotoDataClassExtensions on SetBotProfilePhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBotProfilePhoto &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.photo, photo));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(photo),
  ]);
}

extension ToggleBotUsernameIsActiveDataClassExtensions
    on ToggleBotUsernameIsActive {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleBotUsernameIsActive &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.username, username) &&
          const DeepCollectionEquality().equals(other.isActive, isActive));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(username),
    const DeepCollectionEquality().hash(isActive),
  ]);
}

extension ReorderBotActiveUsernamesDataClassExtensions
    on ReorderBotActiveUsernames {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReorderBotActiveUsernames &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.usernames, usernames));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(usernames),
  ]);
}

extension SetBotInfoDescriptionDataClassExtensions on SetBotInfoDescription {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBotInfoDescription &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.languageCode,
            languageCode,
          ) &&
          const DeepCollectionEquality().equals(
            other.description,
            description,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(languageCode),
    const DeepCollectionEquality().hash(description),
  ]);
}

extension GetBotInfoDescriptionDataClassExtensions on GetBotInfoDescription {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetBotInfoDescription &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.languageCode,
            languageCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(languageCode),
  ]);
}

extension SetBotInfoShortDescriptionDataClassExtensions
    on SetBotInfoShortDescription {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBotInfoShortDescription &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.languageCode,
            languageCode,
          ) &&
          const DeepCollectionEquality().equals(
            other.shortDescription,
            shortDescription,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(languageCode),
    const DeepCollectionEquality().hash(shortDescription),
  ]);
}

extension GetBotInfoShortDescriptionDataClassExtensions
    on GetBotInfoShortDescription {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetBotInfoShortDescription &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(
            other.languageCode,
            languageCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(languageCode),
  ]);
}

extension SetMessageSenderBotVerificationDataClassExtensions
    on SetMessageSenderBotVerification {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetMessageSenderBotVerification &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.verifiedId, verifiedId) &&
          const DeepCollectionEquality().equals(
            other.customDescription,
            customDescription,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(verifiedId),
    const DeepCollectionEquality().hash(customDescription),
  ]);
}

extension RemoveMessageSenderBotVerificationDataClassExtensions
    on RemoveMessageSenderBotVerification {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveMessageSenderBotVerification &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.verifiedId, verifiedId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(verifiedId),
  ]);
}

extension GetActiveSessionsDataClassExtensions on GetActiveSessions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetActiveSessions);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TerminateSessionDataClassExtensions on TerminateSession {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TerminateSession &&
          const DeepCollectionEquality().equals(other.sessionId, sessionId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sessionId),
  ]);
}

extension TerminateAllOtherSessionsDataClassExtensions
    on TerminateAllOtherSessions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TerminateAllOtherSessions);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension ConfirmSessionDataClassExtensions on ConfirmSession {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ConfirmSession &&
          const DeepCollectionEquality().equals(other.sessionId, sessionId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sessionId),
  ]);
}

extension ToggleSessionCanAcceptCallsDataClassExtensions
    on ToggleSessionCanAcceptCalls {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleSessionCanAcceptCalls &&
          const DeepCollectionEquality().equals(other.sessionId, sessionId) &&
          const DeepCollectionEquality().equals(
            other.canAcceptCalls,
            canAcceptCalls,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sessionId),
    const DeepCollectionEquality().hash(canAcceptCalls),
  ]);
}

extension ToggleSessionCanAcceptSecretChatsDataClassExtensions
    on ToggleSessionCanAcceptSecretChats {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleSessionCanAcceptSecretChats &&
          const DeepCollectionEquality().equals(other.sessionId, sessionId) &&
          const DeepCollectionEquality().equals(
            other.canAcceptSecretChats,
            canAcceptSecretChats,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sessionId),
    const DeepCollectionEquality().hash(canAcceptSecretChats),
  ]);
}

extension SetInactiveSessionTtlDataClassExtensions on SetInactiveSessionTtl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetInactiveSessionTtl &&
          const DeepCollectionEquality().equals(
            other.inactiveSessionTtlDays,
            inactiveSessionTtlDays,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inactiveSessionTtlDays),
  ]);
}

extension GetConnectedWebsitesDataClassExtensions on GetConnectedWebsites {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetConnectedWebsites);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension DisconnectWebsiteDataClassExtensions on DisconnectWebsite {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DisconnectWebsite &&
          const DeepCollectionEquality().equals(other.websiteId, websiteId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(websiteId),
  ]);
}

extension DisconnectAllWebsitesDataClassExtensions on DisconnectAllWebsites {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is DisconnectAllWebsites);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SetSupergroupUsernameDataClassExtensions on SetSupergroupUsername {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetSupergroupUsername &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(other.username, username));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(username),
  ]);
}

extension ToggleSupergroupUsernameIsActiveDataClassExtensions
    on ToggleSupergroupUsernameIsActive {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleSupergroupUsernameIsActive &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(other.username, username) &&
          const DeepCollectionEquality().equals(other.isActive, isActive));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(username),
    const DeepCollectionEquality().hash(isActive),
  ]);
}

extension DisableAllSupergroupUsernamesDataClassExtensions
    on DisableAllSupergroupUsernames {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DisableAllSupergroupUsernames &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
  ]);
}

extension ReorderSupergroupActiveUsernamesDataClassExtensions
    on ReorderSupergroupActiveUsernames {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReorderSupergroupActiveUsernames &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(other.usernames, usernames));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(usernames),
  ]);
}

extension SetSupergroupStickerSetDataClassExtensions
    on SetSupergroupStickerSet {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetSupergroupStickerSet &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(
            other.stickerSetId,
            stickerSetId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(stickerSetId),
  ]);
}

extension SetSupergroupCustomEmojiStickerSetDataClassExtensions
    on SetSupergroupCustomEmojiStickerSet {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetSupergroupCustomEmojiStickerSet &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(
            other.customEmojiStickerSetId,
            customEmojiStickerSetId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(customEmojiStickerSetId),
  ]);
}

extension SetSupergroupUnrestrictBoostCountDataClassExtensions
    on SetSupergroupUnrestrictBoostCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetSupergroupUnrestrictBoostCount &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(
            other.unrestrictBoostCount,
            unrestrictBoostCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(unrestrictBoostCount),
  ]);
}

extension ToggleSupergroupSignMessagesDataClassExtensions
    on ToggleSupergroupSignMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleSupergroupSignMessages &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(
            other.signMessages,
            signMessages,
          ) &&
          const DeepCollectionEquality().equals(
            other.showMessageSender,
            showMessageSender,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(signMessages),
    const DeepCollectionEquality().hash(showMessageSender),
  ]);
}

extension ToggleSupergroupJoinToSendMessagesDataClassExtensions
    on ToggleSupergroupJoinToSendMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleSupergroupJoinToSendMessages &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(
            other.joinToSendMessages,
            joinToSendMessages,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(joinToSendMessages),
  ]);
}

extension ToggleSupergroupJoinByRequestDataClassExtensions
    on ToggleSupergroupJoinByRequest {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleSupergroupJoinByRequest &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(
            other.joinByRequest,
            joinByRequest,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(joinByRequest),
  ]);
}

extension ToggleSupergroupIsAllHistoryAvailableDataClassExtensions
    on ToggleSupergroupIsAllHistoryAvailable {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleSupergroupIsAllHistoryAvailable &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(
            other.isAllHistoryAvailable,
            isAllHistoryAvailable,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(isAllHistoryAvailable),
  ]);
}

extension ToggleSupergroupCanHaveSponsoredMessagesDataClassExtensions
    on ToggleSupergroupCanHaveSponsoredMessages {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleSupergroupCanHaveSponsoredMessages &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(
            other.canHaveSponsoredMessages,
            canHaveSponsoredMessages,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(canHaveSponsoredMessages),
  ]);
}

extension ToggleSupergroupHasAutomaticTranslationDataClassExtensions
    on ToggleSupergroupHasAutomaticTranslation {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleSupergroupHasAutomaticTranslation &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasAutomaticTranslation,
            hasAutomaticTranslation,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(hasAutomaticTranslation),
  ]);
}

extension ToggleSupergroupHasHiddenMembersDataClassExtensions
    on ToggleSupergroupHasHiddenMembers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleSupergroupHasHiddenMembers &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasHiddenMembers,
            hasHiddenMembers,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(hasHiddenMembers),
  ]);
}

extension ToggleSupergroupHasAggressiveAntiSpamEnabledDataClassExtensions
    on ToggleSupergroupHasAggressiveAntiSpamEnabled {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleSupergroupHasAggressiveAntiSpamEnabled &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(
            other.hasAggressiveAntiSpamEnabled,
            hasAggressiveAntiSpamEnabled,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(hasAggressiveAntiSpamEnabled),
  ]);
}

extension ToggleSupergroupIsForumDataClassExtensions
    on ToggleSupergroupIsForum {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleSupergroupIsForum &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(other.isForum, isForum) &&
          const DeepCollectionEquality().equals(
            other.hasForumTabs,
            hasForumTabs,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(isForum),
    const DeepCollectionEquality().hash(hasForumTabs),
  ]);
}

extension ToggleSupergroupIsBroadcastGroupDataClassExtensions
    on ToggleSupergroupIsBroadcastGroup {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleSupergroupIsBroadcastGroup &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
  ]);
}

extension ReportSupergroupSpamDataClassExtensions on ReportSupergroupSpam {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportSupergroupSpam &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(other.messageIds, messageIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(messageIds),
  ]);
}

extension ReportSupergroupAntiSpamFalsePositiveDataClassExtensions
    on ReportSupergroupAntiSpamFalsePositive {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportSupergroupAntiSpamFalsePositive &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension GetSupergroupMembersDataClassExtensions on GetSupergroupMembers {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetSupergroupMembers &&
          const DeepCollectionEquality().equals(
            other.supergroupId,
            supergroupId,
          ) &&
          const DeepCollectionEquality().equals(other.filter, filter) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(supergroupId),
    const DeepCollectionEquality().hash(filter),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension CloseSecretChatDataClassExtensions on CloseSecretChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CloseSecretChat &&
          const DeepCollectionEquality().equals(
            other.secretChatId,
            secretChatId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(secretChatId),
  ]);
}

extension GetChatEventLogDataClassExtensions on GetChatEventLog {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatEventLog &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(
            other.fromEventId,
            fromEventId,
          ) &&
          const DeepCollectionEquality().equals(other.limit, limit) &&
          const DeepCollectionEquality().equals(other.filters, filters) &&
          const DeepCollectionEquality().equals(other.userIds, userIds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(fromEventId),
    const DeepCollectionEquality().hash(limit),
    const DeepCollectionEquality().hash(filters),
    const DeepCollectionEquality().hash(userIds),
  ]);
}

extension GetTimeZonesDataClassExtensions on GetTimeZones {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetTimeZones);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetPaymentFormDataClassExtensions on GetPaymentForm {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPaymentForm &&
          const DeepCollectionEquality().equals(
            other.inputInvoice,
            inputInvoice,
          ) &&
          const DeepCollectionEquality().equals(other.theme, theme));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inputInvoice),
    const DeepCollectionEquality().hash(theme),
  ]);
}

extension ValidateOrderInfoDataClassExtensions on ValidateOrderInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ValidateOrderInfo &&
          const DeepCollectionEquality().equals(
            other.inputInvoice,
            inputInvoice,
          ) &&
          const DeepCollectionEquality().equals(other.orderInfo, orderInfo) &&
          const DeepCollectionEquality().equals(other.allowSave, allowSave));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inputInvoice),
    const DeepCollectionEquality().hash(orderInfo),
    const DeepCollectionEquality().hash(allowSave),
  ]);
}

extension SendPaymentFormDataClassExtensions on SendPaymentForm {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendPaymentForm &&
          const DeepCollectionEquality().equals(
            other.inputInvoice,
            inputInvoice,
          ) &&
          const DeepCollectionEquality().equals(
            other.paymentFormId,
            paymentFormId,
          ) &&
          const DeepCollectionEquality().equals(
            other.orderInfoId,
            orderInfoId,
          ) &&
          const DeepCollectionEquality().equals(
            other.shippingOptionId,
            shippingOptionId,
          ) &&
          const DeepCollectionEquality().equals(
            other.credentials,
            credentials,
          ) &&
          const DeepCollectionEquality().equals(other.tipAmount, tipAmount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(inputInvoice),
    const DeepCollectionEquality().hash(paymentFormId),
    const DeepCollectionEquality().hash(orderInfoId),
    const DeepCollectionEquality().hash(shippingOptionId),
    const DeepCollectionEquality().hash(credentials),
    const DeepCollectionEquality().hash(tipAmount),
  ]);
}

extension GetPaymentReceiptDataClassExtensions on GetPaymentReceipt {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPaymentReceipt &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension GetSavedOrderInfoDataClassExtensions on GetSavedOrderInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetSavedOrderInfo);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension DeleteSavedOrderInfoDataClassExtensions on DeleteSavedOrderInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is DeleteSavedOrderInfo);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension DeleteSavedCredentialsDataClassExtensions on DeleteSavedCredentials {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is DeleteSavedCredentials);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SetGiftSettingsDataClassExtensions on SetGiftSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetGiftSettings &&
          const DeepCollectionEquality().equals(other.settings, settings));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(settings),
  ]);
}

extension GetAvailableGiftsDataClassExtensions on GetAvailableGifts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetAvailableGifts);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SendGiftDataClassExtensions on SendGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendGift &&
          const DeepCollectionEquality().equals(other.giftId, giftId) &&
          const DeepCollectionEquality().equals(other.ownerId, ownerId) &&
          const DeepCollectionEquality().equals(other.text, text) &&
          const DeepCollectionEquality().equals(other.isPrivate, isPrivate) &&
          const DeepCollectionEquality().equals(
            other.payForUpgrade,
            payForUpgrade,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(giftId),
    const DeepCollectionEquality().hash(ownerId),
    const DeepCollectionEquality().hash(text),
    const DeepCollectionEquality().hash(isPrivate),
    const DeepCollectionEquality().hash(payForUpgrade),
  ]);
}

extension SellGiftDataClassExtensions on SellGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SellGift &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(
            other.receivedGiftId,
            receivedGiftId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(receivedGiftId),
  ]);
}

extension ToggleGiftIsSavedDataClassExtensions on ToggleGiftIsSaved {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleGiftIsSaved &&
          const DeepCollectionEquality().equals(
            other.receivedGiftId,
            receivedGiftId,
          ) &&
          const DeepCollectionEquality().equals(other.isSaved, isSaved));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(receivedGiftId),
    const DeepCollectionEquality().hash(isSaved),
  ]);
}

extension SetPinnedGiftsDataClassExtensions on SetPinnedGifts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetPinnedGifts &&
          const DeepCollectionEquality().equals(other.ownerId, ownerId) &&
          const DeepCollectionEquality().equals(
            other.receivedGiftIds,
            receivedGiftIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(ownerId),
    const DeepCollectionEquality().hash(receivedGiftIds),
  ]);
}

extension ToggleChatGiftNotificationsDataClassExtensions
    on ToggleChatGiftNotifications {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ToggleChatGiftNotifications &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.areEnabled, areEnabled));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(areEnabled),
  ]);
}

extension GetGiftUpgradePreviewDataClassExtensions on GetGiftUpgradePreview {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetGiftUpgradePreview &&
          const DeepCollectionEquality().equals(other.giftId, giftId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(giftId),
  ]);
}

extension UpgradeGiftDataClassExtensions on UpgradeGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UpgradeGift &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(
            other.receivedGiftId,
            receivedGiftId,
          ) &&
          const DeepCollectionEquality().equals(
            other.keepOriginalDetails,
            keepOriginalDetails,
          ) &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(receivedGiftId),
    const DeepCollectionEquality().hash(keepOriginalDetails),
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension TransferGiftDataClassExtensions on TransferGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TransferGift &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(
            other.receivedGiftId,
            receivedGiftId,
          ) &&
          const DeepCollectionEquality().equals(other.newOwnerId, newOwnerId) &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(receivedGiftId),
    const DeepCollectionEquality().hash(newOwnerId),
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension SendResoldGiftDataClassExtensions on SendResoldGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendResoldGift &&
          const DeepCollectionEquality().equals(other.giftName, giftName) &&
          const DeepCollectionEquality().equals(other.ownerId, ownerId) &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(giftName),
    const DeepCollectionEquality().hash(ownerId),
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension GetReceivedGiftsDataClassExtensions on GetReceivedGifts {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetReceivedGifts &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.ownerId, ownerId) &&
          const DeepCollectionEquality().equals(
            other.excludeUnsaved,
            excludeUnsaved,
          ) &&
          const DeepCollectionEquality().equals(
            other.excludeSaved,
            excludeSaved,
          ) &&
          const DeepCollectionEquality().equals(
            other.excludeUnlimited,
            excludeUnlimited,
          ) &&
          const DeepCollectionEquality().equals(
            other.excludeLimited,
            excludeLimited,
          ) &&
          const DeepCollectionEquality().equals(
            other.excludeUpgraded,
            excludeUpgraded,
          ) &&
          const DeepCollectionEquality().equals(
            other.sortByPrice,
            sortByPrice,
          ) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(ownerId),
    const DeepCollectionEquality().hash(excludeUnsaved),
    const DeepCollectionEquality().hash(excludeSaved),
    const DeepCollectionEquality().hash(excludeUnlimited),
    const DeepCollectionEquality().hash(excludeLimited),
    const DeepCollectionEquality().hash(excludeUpgraded),
    const DeepCollectionEquality().hash(sortByPrice),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetReceivedGiftDataClassExtensions on GetReceivedGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetReceivedGift &&
          const DeepCollectionEquality().equals(
            other.receivedGiftId,
            receivedGiftId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(receivedGiftId),
  ]);
}

extension GetUpgradedGiftDataClassExtensions on GetUpgradedGift {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetUpgradedGift &&
          const DeepCollectionEquality().equals(other.name, name));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(name)]);
}

extension GetUpgradedGiftWithdrawalUrlDataClassExtensions
    on GetUpgradedGiftWithdrawalUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetUpgradedGiftWithdrawalUrl &&
          const DeepCollectionEquality().equals(
            other.receivedGiftId,
            receivedGiftId,
          ) &&
          const DeepCollectionEquality().equals(other.password, password));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(receivedGiftId),
    const DeepCollectionEquality().hash(password),
  ]);
}

extension SetGiftResalePriceDataClassExtensions on SetGiftResalePrice {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetGiftResalePrice &&
          const DeepCollectionEquality().equals(
            other.receivedGiftId,
            receivedGiftId,
          ) &&
          const DeepCollectionEquality().equals(
            other.resaleStarCount,
            resaleStarCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(receivedGiftId),
    const DeepCollectionEquality().hash(resaleStarCount),
  ]);
}

extension SearchGiftsForResaleDataClassExtensions on SearchGiftsForResale {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchGiftsForResale &&
          const DeepCollectionEquality().equals(other.giftId, giftId) &&
          const DeepCollectionEquality().equals(other.order, order) &&
          const DeepCollectionEquality().equals(other.attributes, attributes) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(giftId),
    const DeepCollectionEquality().hash(order),
    const DeepCollectionEquality().hash(attributes),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension CreateInvoiceLinkDataClassExtensions on CreateInvoiceLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateInvoiceLink &&
          const DeepCollectionEquality().equals(
            other.businessConnectionId,
            businessConnectionId,
          ) &&
          const DeepCollectionEquality().equals(other.invoice, invoice));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(businessConnectionId),
    const DeepCollectionEquality().hash(invoice),
  ]);
}

extension RefundStarPaymentDataClassExtensions on RefundStarPayment {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RefundStarPayment &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.telegramPaymentChargeId,
            telegramPaymentChargeId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(telegramPaymentChargeId),
  ]);
}

extension GetSupportUserDataClassExtensions on GetSupportUser {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetSupportUser);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetBackgroundUrlDataClassExtensions on GetBackgroundUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetBackgroundUrl &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension SearchBackgroundDataClassExtensions on SearchBackground {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchBackground &&
          const DeepCollectionEquality().equals(other.name, name));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(name)]);
}

extension SetDefaultBackgroundDataClassExtensions on SetDefaultBackground {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetDefaultBackground &&
          const DeepCollectionEquality().equals(other.background, background) &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(
            other.forDarkTheme,
            forDarkTheme,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(background),
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(forDarkTheme),
  ]);
}

extension DeleteDefaultBackgroundDataClassExtensions
    on DeleteDefaultBackground {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteDefaultBackground &&
          const DeepCollectionEquality().equals(
            other.forDarkTheme,
            forDarkTheme,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(forDarkTheme),
  ]);
}

extension GetInstalledBackgroundsDataClassExtensions
    on GetInstalledBackgrounds {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetInstalledBackgrounds &&
          const DeepCollectionEquality().equals(
            other.forDarkTheme,
            forDarkTheme,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(forDarkTheme),
  ]);
}

extension RemoveInstalledBackgroundDataClassExtensions
    on RemoveInstalledBackground {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveInstalledBackground &&
          const DeepCollectionEquality().equals(
            other.backgroundId,
            backgroundId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(backgroundId),
  ]);
}

extension ResetInstalledBackgroundsDataClassExtensions
    on ResetInstalledBackgrounds {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ResetInstalledBackgrounds);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetLocalizationTargetInfoDataClassExtensions
    on GetLocalizationTargetInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetLocalizationTargetInfo &&
          const DeepCollectionEquality().equals(other.onlyLocal, onlyLocal));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(onlyLocal),
  ]);
}

extension GetLanguagePackInfoDataClassExtensions on GetLanguagePackInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetLanguagePackInfo &&
          const DeepCollectionEquality().equals(
            other.languagePackId,
            languagePackId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(languagePackId),
  ]);
}

extension GetLanguagePackStringsDataClassExtensions on GetLanguagePackStrings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetLanguagePackStrings &&
          const DeepCollectionEquality().equals(
            other.languagePackId,
            languagePackId,
          ) &&
          const DeepCollectionEquality().equals(other.keys, keys));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(languagePackId),
    const DeepCollectionEquality().hash(keys),
  ]);
}

extension SynchronizeLanguagePackDataClassExtensions
    on SynchronizeLanguagePack {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SynchronizeLanguagePack &&
          const DeepCollectionEquality().equals(
            other.languagePackId,
            languagePackId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(languagePackId),
  ]);
}

extension AddCustomServerLanguagePackDataClassExtensions
    on AddCustomServerLanguagePack {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddCustomServerLanguagePack &&
          const DeepCollectionEquality().equals(
            other.languagePackId,
            languagePackId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(languagePackId),
  ]);
}

extension SetCustomLanguagePackDataClassExtensions on SetCustomLanguagePack {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetCustomLanguagePack &&
          const DeepCollectionEquality().equals(other.info, info) &&
          const DeepCollectionEquality().equals(other.strings, strings));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(info),
    const DeepCollectionEquality().hash(strings),
  ]);
}

extension EditCustomLanguagePackInfoDataClassExtensions
    on EditCustomLanguagePackInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditCustomLanguagePackInfo &&
          const DeepCollectionEquality().equals(other.info, info));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(info)]);
}

extension SetCustomLanguagePackStringDataClassExtensions
    on SetCustomLanguagePackString {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetCustomLanguagePackString &&
          const DeepCollectionEquality().equals(
            other.languagePackId,
            languagePackId,
          ) &&
          const DeepCollectionEquality().equals(other.newString, newString));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(languagePackId),
    const DeepCollectionEquality().hash(newString),
  ]);
}

extension DeleteLanguagePackDataClassExtensions on DeleteLanguagePack {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteLanguagePack &&
          const DeepCollectionEquality().equals(
            other.languagePackId,
            languagePackId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(languagePackId),
  ]);
}

extension RegisterDeviceDataClassExtensions on RegisterDevice {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RegisterDevice &&
          const DeepCollectionEquality().equals(
            other.deviceToken,
            deviceToken,
          ) &&
          const DeepCollectionEquality().equals(
            other.otherUserIds,
            otherUserIds,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(deviceToken),
    const DeepCollectionEquality().hash(otherUserIds),
  ]);
}

extension ProcessPushNotificationDataClassExtensions
    on ProcessPushNotification {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ProcessPushNotification &&
          const DeepCollectionEquality().equals(other.payload, payload));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(payload),
  ]);
}

extension GetPushReceiverIdDataClassExtensions on GetPushReceiverId {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPushReceiverId &&
          const DeepCollectionEquality().equals(other.payload, payload));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(payload),
  ]);
}

extension GetRecentlyVisitedTMeUrlsDataClassExtensions
    on GetRecentlyVisitedTMeUrls {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetRecentlyVisitedTMeUrls &&
          const DeepCollectionEquality().equals(other.referrer, referrer));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(referrer),
  ]);
}

extension SetUserPrivacySettingRulesDataClassExtensions
    on SetUserPrivacySettingRules {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetUserPrivacySettingRules &&
          const DeepCollectionEquality().equals(other.setting, setting) &&
          const DeepCollectionEquality().equals(other.rules, rules));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(setting),
    const DeepCollectionEquality().hash(rules),
  ]);
}

extension GetUserPrivacySettingRulesDataClassExtensions
    on GetUserPrivacySettingRules {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetUserPrivacySettingRules &&
          const DeepCollectionEquality().equals(other.setting, setting));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(setting),
  ]);
}

extension SetReadDatePrivacySettingsDataClassExtensions
    on SetReadDatePrivacySettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetReadDatePrivacySettings &&
          const DeepCollectionEquality().equals(other.settings, settings));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(settings),
  ]);
}

extension GetReadDatePrivacySettingsDataClassExtensions
    on GetReadDatePrivacySettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetReadDatePrivacySettings);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SetNewChatPrivacySettingsDataClassExtensions
    on SetNewChatPrivacySettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetNewChatPrivacySettings &&
          const DeepCollectionEquality().equals(other.settings, settings));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(settings),
  ]);
}

extension GetNewChatPrivacySettingsDataClassExtensions
    on GetNewChatPrivacySettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetNewChatPrivacySettings);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetPaidMessageRevenueDataClassExtensions on GetPaidMessageRevenue {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPaidMessageRevenue &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension AllowUnpaidMessagesFromUserDataClassExtensions
    on AllowUnpaidMessagesFromUser {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AllowUnpaidMessagesFromUser &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.refundPayments,
            refundPayments,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(refundPayments),
  ]);
}

extension SetChatPaidMessageStarCountDataClassExtensions
    on SetChatPaidMessageStarCount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatPaidMessageStarCount &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(
            other.paidMessageStarCount,
            paidMessageStarCount,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(paidMessageStarCount),
  ]);
}

extension CanSendMessageToUserDataClassExtensions on CanSendMessageToUser {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanSendMessageToUser &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.onlyLocal, onlyLocal));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(onlyLocal),
  ]);
}

extension GetOptionDataClassExtensions on GetOption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetOption &&
          const DeepCollectionEquality().equals(other.name, name));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(name)]);
}

extension SetOptionDataClassExtensions on SetOption {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetOption &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.value, value));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(value),
  ]);
}

extension SetAccountTtlDataClassExtensions on SetAccountTtl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetAccountTtl &&
          const DeepCollectionEquality().equals(other.ttl, ttl));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(ttl)]);
}

extension GetAccountTtlDataClassExtensions on GetAccountTtl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetAccountTtl);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension DeleteAccountDataClassExtensions on DeleteAccount {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteAccount &&
          const DeepCollectionEquality().equals(other.reason, reason) &&
          const DeepCollectionEquality().equals(other.password, password));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(reason),
    const DeepCollectionEquality().hash(password),
  ]);
}

extension SetDefaultMessageAutoDeleteTimeDataClassExtensions
    on SetDefaultMessageAutoDeleteTime {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetDefaultMessageAutoDeleteTime &&
          const DeepCollectionEquality().equals(
            other.messageAutoDeleteTime,
            messageAutoDeleteTime,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(messageAutoDeleteTime),
  ]);
}

extension GetDefaultMessageAutoDeleteTimeDataClassExtensions
    on GetDefaultMessageAutoDeleteTime {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetDefaultMessageAutoDeleteTime);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension RemoveChatActionBarDataClassExtensions on RemoveChatActionBar {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveChatActionBar &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension ReportChatDataClassExtensions on ReportChat {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportChat &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.optionId, optionId) &&
          const DeepCollectionEquality().equals(other.messageIds, messageIds) &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(optionId),
    const DeepCollectionEquality().hash(messageIds),
    const DeepCollectionEquality().hash(text),
  ]);
}

extension ReportChatPhotoDataClassExtensions on ReportChatPhoto {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportChatPhoto &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.fileId, fileId) &&
          const DeepCollectionEquality().equals(other.reason, reason) &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(fileId),
    const DeepCollectionEquality().hash(reason),
    const DeepCollectionEquality().hash(text),
  ]);
}

extension ReportMessageReactionsDataClassExtensions on ReportMessageReactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReportMessageReactions &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.senderId, senderId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(senderId),
  ]);
}

extension GetChatRevenueStatisticsDataClassExtensions
    on GetChatRevenueStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatRevenueStatistics &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.isDark, isDark));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(isDark),
  ]);
}

extension GetChatRevenueWithdrawalUrlDataClassExtensions
    on GetChatRevenueWithdrawalUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatRevenueWithdrawalUrl &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.password, password));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(password),
  ]);
}

extension GetChatRevenueTransactionsDataClassExtensions
    on GetChatRevenueTransactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatRevenueTransactions &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetStarRevenueStatisticsDataClassExtensions
    on GetStarRevenueStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStarRevenueStatistics &&
          const DeepCollectionEquality().equals(other.ownerId, ownerId) &&
          const DeepCollectionEquality().equals(other.isDark, isDark));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(ownerId),
    const DeepCollectionEquality().hash(isDark),
  ]);
}

extension GetStarWithdrawalUrlDataClassExtensions on GetStarWithdrawalUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStarWithdrawalUrl &&
          const DeepCollectionEquality().equals(other.ownerId, ownerId) &&
          const DeepCollectionEquality().equals(other.starCount, starCount) &&
          const DeepCollectionEquality().equals(other.password, password));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(ownerId),
    const DeepCollectionEquality().hash(starCount),
    const DeepCollectionEquality().hash(password),
  ]);
}

extension GetStarAdAccountUrlDataClassExtensions on GetStarAdAccountUrl {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStarAdAccountUrl &&
          const DeepCollectionEquality().equals(other.ownerId, ownerId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(ownerId),
  ]);
}

extension GetChatStatisticsDataClassExtensions on GetChatStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetChatStatistics &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.isDark, isDark));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(isDark),
  ]);
}

extension GetMessageStatisticsDataClassExtensions on GetMessageStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessageStatistics &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.isDark, isDark));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(isDark),
  ]);
}

extension GetMessagePublicForwardsDataClassExtensions
    on GetMessagePublicForwards {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMessagePublicForwards &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetStoryStatisticsDataClassExtensions on GetStoryStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStoryStatistics &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.storyId, storyId) &&
          const DeepCollectionEquality().equals(other.isDark, isDark));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(storyId),
    const DeepCollectionEquality().hash(isDark),
  ]);
}

extension GetStatisticalGraphDataClassExtensions on GetStatisticalGraph {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStatisticalGraph &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.token, token) &&
          const DeepCollectionEquality().equals(other.x, x));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(token),
    const DeepCollectionEquality().hash(x),
  ]);
}

extension GetStorageStatisticsDataClassExtensions on GetStorageStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStorageStatistics &&
          const DeepCollectionEquality().equals(other.chatLimit, chatLimit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatLimit),
  ]);
}

extension GetStorageStatisticsFastDataClassExtensions
    on GetStorageStatisticsFast {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetStorageStatisticsFast);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetDatabaseStatisticsDataClassExtensions on GetDatabaseStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetDatabaseStatistics);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension OptimizeStorageDataClassExtensions on OptimizeStorage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is OptimizeStorage &&
          const DeepCollectionEquality().equals(other.size, size) &&
          const DeepCollectionEquality().equals(other.ttl, ttl) &&
          const DeepCollectionEquality().equals(other.count, count) &&
          const DeepCollectionEquality().equals(
            other.immunityDelay,
            immunityDelay,
          ) &&
          const DeepCollectionEquality().equals(other.fileTypes, fileTypes) &&
          const DeepCollectionEquality().equals(other.chatIds, chatIds) &&
          const DeepCollectionEquality().equals(
            other.excludeChatIds,
            excludeChatIds,
          ) &&
          const DeepCollectionEquality().equals(
            other.returnDeletedFileStatistics,
            returnDeletedFileStatistics,
          ) &&
          const DeepCollectionEquality().equals(other.chatLimit, chatLimit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(size),
    const DeepCollectionEquality().hash(ttl),
    const DeepCollectionEquality().hash(count),
    const DeepCollectionEquality().hash(immunityDelay),
    const DeepCollectionEquality().hash(fileTypes),
    const DeepCollectionEquality().hash(chatIds),
    const DeepCollectionEquality().hash(excludeChatIds),
    const DeepCollectionEquality().hash(returnDeletedFileStatistics),
    const DeepCollectionEquality().hash(chatLimit),
  ]);
}

extension SetNetworkTypeDataClassExtensions on SetNetworkType {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetNetworkType &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(type)]);
}

extension GetNetworkStatisticsDataClassExtensions on GetNetworkStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetNetworkStatistics &&
          const DeepCollectionEquality().equals(
            other.onlyCurrent,
            onlyCurrent,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(onlyCurrent),
  ]);
}

extension AddNetworkStatisticsDataClassExtensions on AddNetworkStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddNetworkStatistics &&
          const DeepCollectionEquality().equals(other.entry, entry));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(entry)]);
}

extension ResetNetworkStatisticsDataClassExtensions on ResetNetworkStatistics {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is ResetNetworkStatistics);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetAutoDownloadSettingsPresetsDataClassExtensions
    on GetAutoDownloadSettingsPresets {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetAutoDownloadSettingsPresets);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SetAutoDownloadSettingsDataClassExtensions
    on SetAutoDownloadSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetAutoDownloadSettings &&
          const DeepCollectionEquality().equals(other.settings, settings) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(settings),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension GetAutosaveSettingsDataClassExtensions on GetAutosaveSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetAutosaveSettings);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SetAutosaveSettingsDataClassExtensions on SetAutosaveSettings {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetAutosaveSettings &&
          const DeepCollectionEquality().equals(other.scope, scope) &&
          const DeepCollectionEquality().equals(other.settings, settings));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(scope),
    const DeepCollectionEquality().hash(settings),
  ]);
}

extension ClearAutosaveSettingsExceptionsDataClassExtensions
    on ClearAutosaveSettingsExceptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ClearAutosaveSettingsExceptions);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetBankCardInfoDataClassExtensions on GetBankCardInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetBankCardInfo &&
          const DeepCollectionEquality().equals(
            other.bankCardNumber,
            bankCardNumber,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(bankCardNumber),
  ]);
}

extension GetPassportElementDataClassExtensions on GetPassportElement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPassportElement &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.password, password));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(password),
  ]);
}

extension GetAllPassportElementsDataClassExtensions on GetAllPassportElements {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetAllPassportElements &&
          const DeepCollectionEquality().equals(other.password, password));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(password),
  ]);
}

extension SetPassportElementDataClassExtensions on SetPassportElement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetPassportElement &&
          const DeepCollectionEquality().equals(other.element, element) &&
          const DeepCollectionEquality().equals(other.password, password));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(element),
    const DeepCollectionEquality().hash(password),
  ]);
}

extension DeletePassportElementDataClassExtensions on DeletePassportElement {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeletePassportElement &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(type)]);
}

extension SetPassportElementErrorsDataClassExtensions
    on SetPassportElementErrors {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetPassportElementErrors &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.errors, errors));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(errors),
  ]);
}

extension GetPreferredCountryLanguageDataClassExtensions
    on GetPreferredCountryLanguage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPreferredCountryLanguage &&
          const DeepCollectionEquality().equals(
            other.countryCode,
            countryCode,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(countryCode),
  ]);
}

extension SendEmailAddressVerificationCodeDataClassExtensions
    on SendEmailAddressVerificationCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendEmailAddressVerificationCode &&
          const DeepCollectionEquality().equals(
            other.emailAddress,
            emailAddress,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(emailAddress),
  ]);
}

extension ResendEmailAddressVerificationCodeDataClassExtensions
    on ResendEmailAddressVerificationCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ResendEmailAddressVerificationCode);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension CheckEmailAddressVerificationCodeDataClassExtensions
    on CheckEmailAddressVerificationCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckEmailAddressVerificationCode &&
          const DeepCollectionEquality().equals(other.code, code));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(code)]);
}

extension GetPassportAuthorizationFormDataClassExtensions
    on GetPassportAuthorizationForm {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPassportAuthorizationForm &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId) &&
          const DeepCollectionEquality().equals(other.scope, scope) &&
          const DeepCollectionEquality().equals(other.publicKey, publicKey) &&
          const DeepCollectionEquality().equals(other.nonce, nonce));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(botUserId),
    const DeepCollectionEquality().hash(scope),
    const DeepCollectionEquality().hash(publicKey),
    const DeepCollectionEquality().hash(nonce),
  ]);
}

extension GetPassportAuthorizationFormAvailableElementsDataClassExtensions
    on GetPassportAuthorizationFormAvailableElements {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPassportAuthorizationFormAvailableElements &&
          const DeepCollectionEquality().equals(
            other.authorizationFormId,
            authorizationFormId,
          ) &&
          const DeepCollectionEquality().equals(other.password, password));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(authorizationFormId),
    const DeepCollectionEquality().hash(password),
  ]);
}

extension SendPassportAuthorizationFormDataClassExtensions
    on SendPassportAuthorizationForm {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendPassportAuthorizationForm &&
          const DeepCollectionEquality().equals(
            other.authorizationFormId,
            authorizationFormId,
          ) &&
          const DeepCollectionEquality().equals(other.types, types));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(authorizationFormId),
    const DeepCollectionEquality().hash(types),
  ]);
}

extension SetBotUpdatesStatusDataClassExtensions on SetBotUpdatesStatus {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetBotUpdatesStatus &&
          const DeepCollectionEquality().equals(
            other.pendingUpdateCount,
            pendingUpdateCount,
          ) &&
          const DeepCollectionEquality().equals(
            other.errorMessage,
            errorMessage,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(pendingUpdateCount),
    const DeepCollectionEquality().hash(errorMessage),
  ]);
}

extension UploadStickerFileDataClassExtensions on UploadStickerFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is UploadStickerFile &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.stickerFormat,
            stickerFormat,
          ) &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(stickerFormat),
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension GetSuggestedStickerSetNameDataClassExtensions
    on GetSuggestedStickerSetName {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetSuggestedStickerSetName &&
          const DeepCollectionEquality().equals(other.title, title));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(title)]);
}

extension CheckStickerSetNameDataClassExtensions on CheckStickerSetName {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckStickerSetName &&
          const DeepCollectionEquality().equals(other.name, name));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(name)]);
}

extension CreateNewStickerSetDataClassExtensions on CreateNewStickerSet {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CreateNewStickerSet &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.title, title) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(
            other.stickerType,
            stickerType,
          ) &&
          const DeepCollectionEquality().equals(
            other.needsRepainting,
            needsRepainting,
          ) &&
          const DeepCollectionEquality().equals(other.stickers, stickers) &&
          const DeepCollectionEquality().equals(other.source, source));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(title),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(stickerType),
    const DeepCollectionEquality().hash(needsRepainting),
    const DeepCollectionEquality().hash(stickers),
    const DeepCollectionEquality().hash(source),
  ]);
}

extension AddStickerToSetDataClassExtensions on AddStickerToSet {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddStickerToSet &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension ReplaceStickerInSetDataClassExtensions on ReplaceStickerInSet {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReplaceStickerInSet &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.oldSticker, oldSticker) &&
          const DeepCollectionEquality().equals(other.newSticker, newSticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(oldSticker),
    const DeepCollectionEquality().hash(newSticker),
  ]);
}

extension SetStickerSetThumbnailDataClassExtensions on SetStickerSetThumbnail {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetStickerSetThumbnail &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.thumbnail, thumbnail) &&
          const DeepCollectionEquality().equals(other.format, format));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(thumbnail),
    const DeepCollectionEquality().hash(format),
  ]);
}

extension SetCustomEmojiStickerSetThumbnailDataClassExtensions
    on SetCustomEmojiStickerSetThumbnail {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetCustomEmojiStickerSetThumbnail &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(
            other.customEmojiId,
            customEmojiId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(customEmojiId),
  ]);
}

extension SetStickerSetTitleDataClassExtensions on SetStickerSetTitle {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetStickerSetTitle &&
          const DeepCollectionEquality().equals(other.name, name) &&
          const DeepCollectionEquality().equals(other.title, title));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(name),
    const DeepCollectionEquality().hash(title),
  ]);
}

extension DeleteStickerSetDataClassExtensions on DeleteStickerSet {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DeleteStickerSet &&
          const DeepCollectionEquality().equals(other.name, name));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(name)]);
}

extension SetStickerPositionInSetDataClassExtensions
    on SetStickerPositionInSet {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetStickerPositionInSet &&
          const DeepCollectionEquality().equals(other.sticker, sticker) &&
          const DeepCollectionEquality().equals(other.position, position));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sticker),
    const DeepCollectionEquality().hash(position),
  ]);
}

extension RemoveStickerFromSetDataClassExtensions on RemoveStickerFromSet {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveStickerFromSet &&
          const DeepCollectionEquality().equals(other.sticker, sticker));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sticker),
  ]);
}

extension SetStickerEmojisDataClassExtensions on SetStickerEmojis {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetStickerEmojis &&
          const DeepCollectionEquality().equals(other.sticker, sticker) &&
          const DeepCollectionEquality().equals(other.emojis, emojis));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sticker),
    const DeepCollectionEquality().hash(emojis),
  ]);
}

extension SetStickerKeywordsDataClassExtensions on SetStickerKeywords {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetStickerKeywords &&
          const DeepCollectionEquality().equals(other.sticker, sticker) &&
          const DeepCollectionEquality().equals(other.keywords, keywords));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sticker),
    const DeepCollectionEquality().hash(keywords),
  ]);
}

extension SetStickerMaskPositionDataClassExtensions on SetStickerMaskPosition {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetStickerMaskPosition &&
          const DeepCollectionEquality().equals(other.sticker, sticker) &&
          const DeepCollectionEquality().equals(
            other.maskPosition,
            maskPosition,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(sticker),
    const DeepCollectionEquality().hash(maskPosition),
  ]);
}

extension GetOwnedStickerSetsDataClassExtensions on GetOwnedStickerSets {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetOwnedStickerSets &&
          const DeepCollectionEquality().equals(
            other.offsetStickerSetId,
            offsetStickerSetId,
          ) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(offsetStickerSetId),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetMapThumbnailFileDataClassExtensions on GetMapThumbnailFile {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetMapThumbnailFile &&
          const DeepCollectionEquality().equals(other.location, location) &&
          const DeepCollectionEquality().equals(other.zoom, zoom) &&
          const DeepCollectionEquality().equals(other.width, width) &&
          const DeepCollectionEquality().equals(other.height, height) &&
          const DeepCollectionEquality().equals(other.scale, scale) &&
          const DeepCollectionEquality().equals(other.chatId, chatId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(location),
    const DeepCollectionEquality().hash(zoom),
    const DeepCollectionEquality().hash(width),
    const DeepCollectionEquality().hash(height),
    const DeepCollectionEquality().hash(scale),
    const DeepCollectionEquality().hash(chatId),
  ]);
}

extension GetPremiumLimitDataClassExtensions on GetPremiumLimit {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPremiumLimit &&
          const DeepCollectionEquality().equals(other.limitType, limitType));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(limitType),
  ]);
}

extension GetPremiumFeaturesDataClassExtensions on GetPremiumFeatures {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPremiumFeatures &&
          const DeepCollectionEquality().equals(other.source, source));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(source),
  ]);
}

extension GetPremiumStickerExamplesDataClassExtensions
    on GetPremiumStickerExamples {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetPremiumStickerExamples);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetPremiumInfoStickerDataClassExtensions on GetPremiumInfoSticker {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPremiumInfoSticker &&
          const DeepCollectionEquality().equals(other.monthCount, monthCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(monthCount),
  ]);
}

extension ViewPremiumFeatureDataClassExtensions on ViewPremiumFeature {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ViewPremiumFeature &&
          const DeepCollectionEquality().equals(other.feature, feature));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(feature),
  ]);
}

extension ClickPremiumSubscriptionButtonDataClassExtensions
    on ClickPremiumSubscriptionButton {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ClickPremiumSubscriptionButton);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetPremiumStateDataClassExtensions on GetPremiumState {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetPremiumState);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetPremiumGiftPaymentOptionsDataClassExtensions
    on GetPremiumGiftPaymentOptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPremiumGiftPaymentOptions);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetPremiumGiveawayPaymentOptionsDataClassExtensions
    on GetPremiumGiveawayPaymentOptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPremiumGiveawayPaymentOptions &&
          const DeepCollectionEquality().equals(
            other.boostedChatId,
            boostedChatId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(boostedChatId),
  ]);
}

extension CheckPremiumGiftCodeDataClassExtensions on CheckPremiumGiftCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CheckPremiumGiftCode &&
          const DeepCollectionEquality().equals(other.code, code));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(code)]);
}

extension ApplyPremiumGiftCodeDataClassExtensions on ApplyPremiumGiftCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ApplyPremiumGiftCode &&
          const DeepCollectionEquality().equals(other.code, code));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(code)]);
}

extension GiftPremiumWithStarsDataClassExtensions on GiftPremiumWithStars {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GiftPremiumWithStars &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.starCount, starCount) &&
          const DeepCollectionEquality().equals(other.monthCount, monthCount) &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(starCount),
    const DeepCollectionEquality().hash(monthCount),
    const DeepCollectionEquality().hash(text),
  ]);
}

extension LaunchPrepaidGiveawayDataClassExtensions on LaunchPrepaidGiveaway {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is LaunchPrepaidGiveaway &&
          const DeepCollectionEquality().equals(other.giveawayId, giveawayId) &&
          const DeepCollectionEquality().equals(other.parameters, parameters) &&
          const DeepCollectionEquality().equals(
            other.winnerCount,
            winnerCount,
          ) &&
          const DeepCollectionEquality().equals(other.starCount, starCount));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(giveawayId),
    const DeepCollectionEquality().hash(parameters),
    const DeepCollectionEquality().hash(winnerCount),
    const DeepCollectionEquality().hash(starCount),
  ]);
}

extension GetGiveawayInfoDataClassExtensions on GetGiveawayInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetGiveawayInfo &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.messageId, messageId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(messageId),
  ]);
}

extension GetStarPaymentOptionsDataClassExtensions on GetStarPaymentOptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetStarPaymentOptions);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetStarGiftPaymentOptionsDataClassExtensions
    on GetStarGiftPaymentOptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStarGiftPaymentOptions &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension GetStarGiveawayPaymentOptionsDataClassExtensions
    on GetStarGiveawayPaymentOptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStarGiveawayPaymentOptions);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetStarTransactionsDataClassExtensions on GetStarTransactions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStarTransactions &&
          const DeepCollectionEquality().equals(other.ownerId, ownerId) &&
          const DeepCollectionEquality().equals(
            other.subscriptionId,
            subscriptionId,
          ) &&
          const DeepCollectionEquality().equals(other.direction, direction) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(ownerId),
    const DeepCollectionEquality().hash(subscriptionId),
    const DeepCollectionEquality().hash(direction),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetStarSubscriptionsDataClassExtensions on GetStarSubscriptions {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetStarSubscriptions &&
          const DeepCollectionEquality().equals(
            other.onlyExpiring,
            onlyExpiring,
          ) &&
          const DeepCollectionEquality().equals(other.offset, offset));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(onlyExpiring),
    const DeepCollectionEquality().hash(offset),
  ]);
}

extension CanPurchaseFromStoreDataClassExtensions on CanPurchaseFromStore {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is CanPurchaseFromStore &&
          const DeepCollectionEquality().equals(other.purpose, purpose));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(purpose),
  ]);
}

extension AssignStoreTransactionDataClassExtensions on AssignStoreTransaction {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AssignStoreTransaction &&
          const DeepCollectionEquality().equals(
            other.transaction,
            transaction,
          ) &&
          const DeepCollectionEquality().equals(other.purpose, purpose));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(transaction),
    const DeepCollectionEquality().hash(purpose),
  ]);
}

extension EditStarSubscriptionDataClassExtensions on EditStarSubscription {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditStarSubscription &&
          const DeepCollectionEquality().equals(
            other.subscriptionId,
            subscriptionId,
          ) &&
          const DeepCollectionEquality().equals(other.isCanceled, isCanceled));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(subscriptionId),
    const DeepCollectionEquality().hash(isCanceled),
  ]);
}

extension EditUserStarSubscriptionDataClassExtensions
    on EditUserStarSubscription {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditUserStarSubscription &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(
            other.telegramPaymentChargeId,
            telegramPaymentChargeId,
          ) &&
          const DeepCollectionEquality().equals(other.isCanceled, isCanceled));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(telegramPaymentChargeId),
    const DeepCollectionEquality().hash(isCanceled),
  ]);
}

extension ReuseStarSubscriptionDataClassExtensions on ReuseStarSubscription {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ReuseStarSubscription &&
          const DeepCollectionEquality().equals(
            other.subscriptionId,
            subscriptionId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(subscriptionId),
  ]);
}

extension SetChatAffiliateProgramDataClassExtensions
    on SetChatAffiliateProgram {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetChatAffiliateProgram &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.parameters, parameters));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(parameters),
  ]);
}

extension SearchChatAffiliateProgramDataClassExtensions
    on SearchChatAffiliateProgram {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchChatAffiliateProgram &&
          const DeepCollectionEquality().equals(other.username, username) &&
          const DeepCollectionEquality().equals(other.referrer, referrer));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(username),
    const DeepCollectionEquality().hash(referrer),
  ]);
}

extension SearchAffiliateProgramsDataClassExtensions
    on SearchAffiliatePrograms {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchAffiliatePrograms &&
          const DeepCollectionEquality().equals(other.affiliate, affiliate) &&
          const DeepCollectionEquality().equals(other.sortOrder, sortOrder) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(affiliate),
    const DeepCollectionEquality().hash(sortOrder),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension ConnectAffiliateProgramDataClassExtensions
    on ConnectAffiliateProgram {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is ConnectAffiliateProgram &&
          const DeepCollectionEquality().equals(other.affiliate, affiliate) &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(affiliate),
    const DeepCollectionEquality().hash(botUserId),
  ]);
}

extension DisconnectAffiliateProgramDataClassExtensions
    on DisconnectAffiliateProgram {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is DisconnectAffiliateProgram &&
          const DeepCollectionEquality().equals(other.affiliate, affiliate) &&
          const DeepCollectionEquality().equals(other.url, url));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(affiliate),
    const DeepCollectionEquality().hash(url),
  ]);
}

extension GetConnectedAffiliateProgramDataClassExtensions
    on GetConnectedAffiliateProgram {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetConnectedAffiliateProgram &&
          const DeepCollectionEquality().equals(other.affiliate, affiliate) &&
          const DeepCollectionEquality().equals(other.botUserId, botUserId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(affiliate),
    const DeepCollectionEquality().hash(botUserId),
  ]);
}

extension GetConnectedAffiliateProgramsDataClassExtensions
    on GetConnectedAffiliatePrograms {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetConnectedAffiliatePrograms &&
          const DeepCollectionEquality().equals(other.affiliate, affiliate) &&
          const DeepCollectionEquality().equals(other.offset, offset) &&
          const DeepCollectionEquality().equals(other.limit, limit));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(affiliate),
    const DeepCollectionEquality().hash(offset),
    const DeepCollectionEquality().hash(limit),
  ]);
}

extension GetBusinessFeaturesDataClassExtensions on GetBusinessFeatures {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetBusinessFeatures &&
          const DeepCollectionEquality().equals(other.source, source));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(source),
  ]);
}

extension AcceptTermsOfServiceDataClassExtensions on AcceptTermsOfService {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AcceptTermsOfService &&
          const DeepCollectionEquality().equals(
            other.termsOfServiceId,
            termsOfServiceId,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(termsOfServiceId),
  ]);
}

extension SearchStringsByPrefixDataClassExtensions on SearchStringsByPrefix {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SearchStringsByPrefix &&
          const DeepCollectionEquality().equals(other.strings, strings) &&
          const DeepCollectionEquality().equals(other.query, query) &&
          const DeepCollectionEquality().equals(other.limit, limit) &&
          const DeepCollectionEquality().equals(
            other.returnNoneForEmptyQuery,
            returnNoneForEmptyQuery,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(strings),
    const DeepCollectionEquality().hash(query),
    const DeepCollectionEquality().hash(limit),
    const DeepCollectionEquality().hash(returnNoneForEmptyQuery),
  ]);
}

extension SendCustomRequestDataClassExtensions on SendCustomRequest {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SendCustomRequest &&
          const DeepCollectionEquality().equals(other.method, method) &&
          const DeepCollectionEquality().equals(other.parameters, parameters));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(method),
    const DeepCollectionEquality().hash(parameters),
  ]);
}

extension AnswerCustomQueryDataClassExtensions on AnswerCustomQuery {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AnswerCustomQuery &&
          const DeepCollectionEquality().equals(
            other.customQueryId,
            customQueryId,
          ) &&
          const DeepCollectionEquality().equals(other.data, data));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(customQueryId),
    const DeepCollectionEquality().hash(data),
  ]);
}

extension SetAlarmDataClassExtensions on SetAlarm {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetAlarm &&
          const DeepCollectionEquality().equals(other.seconds, seconds));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(seconds),
  ]);
}

extension GetCountriesDataClassExtensions on GetCountries {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetCountries);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetCountryCodeDataClassExtensions on GetCountryCode {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetCountryCode);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetPhoneNumberInfoDataClassExtensions on GetPhoneNumberInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPhoneNumberInfo &&
          const DeepCollectionEquality().equals(
            other.phoneNumberPrefix,
            phoneNumberPrefix,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(phoneNumberPrefix),
  ]);
}

extension GetPhoneNumberInfoSyncDataClassExtensions on GetPhoneNumberInfoSync {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetPhoneNumberInfoSync &&
          const DeepCollectionEquality().equals(
            other.languageCode,
            languageCode,
          ) &&
          const DeepCollectionEquality().equals(
            other.phoneNumberPrefix,
            phoneNumberPrefix,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(languageCode),
    const DeepCollectionEquality().hash(phoneNumberPrefix),
  ]);
}

extension GetCollectibleItemInfoDataClassExtensions on GetCollectibleItemInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetCollectibleItemInfo &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(type)]);
}

extension GetDeepLinkInfoDataClassExtensions on GetDeepLinkInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetDeepLinkInfo &&
          const DeepCollectionEquality().equals(other.link, link));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(link)]);
}

extension GetApplicationConfigDataClassExtensions on GetApplicationConfig {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetApplicationConfig);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SaveApplicationLogEventDataClassExtensions
    on SaveApplicationLogEvent {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SaveApplicationLogEvent &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.chatId, chatId) &&
          const DeepCollectionEquality().equals(other.data, data));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(chatId),
    const DeepCollectionEquality().hash(data),
  ]);
}

extension GetApplicationDownloadLinkDataClassExtensions
    on GetApplicationDownloadLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetApplicationDownloadLink);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension AddProxyDataClassExtensions on AddProxy {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddProxy &&
          const DeepCollectionEquality().equals(other.server, server) &&
          const DeepCollectionEquality().equals(other.port, port) &&
          const DeepCollectionEquality().equals(other.enable, enable) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(server),
    const DeepCollectionEquality().hash(port),
    const DeepCollectionEquality().hash(enable),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension EditProxyDataClassExtensions on EditProxy {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EditProxy &&
          const DeepCollectionEquality().equals(other.proxyId, proxyId) &&
          const DeepCollectionEquality().equals(other.server, server) &&
          const DeepCollectionEquality().equals(other.port, port) &&
          const DeepCollectionEquality().equals(other.enable, enable) &&
          const DeepCollectionEquality().equals(other.type, type));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(proxyId),
    const DeepCollectionEquality().hash(server),
    const DeepCollectionEquality().hash(port),
    const DeepCollectionEquality().hash(enable),
    const DeepCollectionEquality().hash(type),
  ]);
}

extension EnableProxyDataClassExtensions on EnableProxy {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is EnableProxy &&
          const DeepCollectionEquality().equals(other.proxyId, proxyId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(proxyId),
  ]);
}

extension DisableProxyDataClassExtensions on DisableProxy {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is DisableProxy);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension RemoveProxyDataClassExtensions on RemoveProxy {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is RemoveProxy &&
          const DeepCollectionEquality().equals(other.proxyId, proxyId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(proxyId),
  ]);
}

extension GetProxiesDataClassExtensions on GetProxies {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetProxies);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetProxyLinkDataClassExtensions on GetProxyLink {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetProxyLink &&
          const DeepCollectionEquality().equals(other.proxyId, proxyId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(proxyId),
  ]);
}

extension PingProxyDataClassExtensions on PingProxy {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is PingProxy &&
          const DeepCollectionEquality().equals(other.proxyId, proxyId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(proxyId),
  ]);
}

extension SetLogStreamDataClassExtensions on SetLogStream {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetLogStream &&
          const DeepCollectionEquality().equals(other.logStream, logStream));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(logStream),
  ]);
}

extension GetLogStreamDataClassExtensions on GetLogStream {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetLogStream);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SetLogVerbosityLevelDataClassExtensions on SetLogVerbosityLevel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetLogVerbosityLevel &&
          const DeepCollectionEquality().equals(
            other.newVerbosityLevel,
            newVerbosityLevel,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(newVerbosityLevel),
  ]);
}

extension GetLogVerbosityLevelDataClassExtensions on GetLogVerbosityLevel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetLogVerbosityLevel);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension GetLogTagsDataClassExtensions on GetLogTags {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetLogTags);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension SetLogTagVerbosityLevelDataClassExtensions
    on SetLogTagVerbosityLevel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetLogTagVerbosityLevel &&
          const DeepCollectionEquality().equals(other.tag, tag) &&
          const DeepCollectionEquality().equals(
            other.newVerbosityLevel,
            newVerbosityLevel,
          ));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(tag),
    const DeepCollectionEquality().hash(newVerbosityLevel),
  ]);
}

extension GetLogTagVerbosityLevelDataClassExtensions
    on GetLogTagVerbosityLevel {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetLogTagVerbosityLevel &&
          const DeepCollectionEquality().equals(other.tag, tag));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(tag)]);
}

extension AddLogMessageDataClassExtensions on AddLogMessage {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is AddLogMessage &&
          const DeepCollectionEquality().equals(
            other.verbosityLevel,
            verbosityLevel,
          ) &&
          const DeepCollectionEquality().equals(other.text, text));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(verbosityLevel),
    const DeepCollectionEquality().hash(text),
  ]);
}

extension GetUserSupportInfoDataClassExtensions on GetUserSupportInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is GetUserSupportInfo &&
          const DeepCollectionEquality().equals(other.userId, userId));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
  ]);
}

extension SetUserSupportInfoDataClassExtensions on SetUserSupportInfo {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is SetUserSupportInfo &&
          const DeepCollectionEquality().equals(other.userId, userId) &&
          const DeepCollectionEquality().equals(other.message, message));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(userId),
    const DeepCollectionEquality().hash(message),
  ]);
}

extension GetSupportNameDataClassExtensions on GetSupportName {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is GetSupportName);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TestCallEmptyDataClassExtensions on TestCallEmpty {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TestCallEmpty);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TestCallStringDataClassExtensions on TestCallString {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TestCallString &&
          const DeepCollectionEquality().equals(other.x, x));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(x)]);
}

extension TestCallBytesDataClassExtensions on TestCallBytes {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TestCallBytes &&
          const DeepCollectionEquality().equals(other.x, x));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(x)]);
}

extension TestCallVectorIntDataClassExtensions on TestCallVectorInt {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TestCallVectorInt &&
          const DeepCollectionEquality().equals(other.x, x));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(x)]);
}

extension TestCallVectorIntObjectDataClassExtensions
    on TestCallVectorIntObject {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TestCallVectorIntObject &&
          const DeepCollectionEquality().equals(other.x, x));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(x)]);
}

extension TestCallVectorStringDataClassExtensions on TestCallVectorString {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TestCallVectorString &&
          const DeepCollectionEquality().equals(other.x, x));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(x)]);
}

extension TestCallVectorStringObjectDataClassExtensions
    on TestCallVectorStringObject {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TestCallVectorStringObject &&
          const DeepCollectionEquality().equals(other.x, x));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(x)]);
}

extension TestSquareIntDataClassExtensions on TestSquareInt {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TestSquareInt &&
          const DeepCollectionEquality().equals(other.x, x));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(x)]);
}

extension TestNetworkDataClassExtensions on TestNetwork {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TestNetwork);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TestProxyDataClassExtensions on TestProxy {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TestProxy &&
          const DeepCollectionEquality().equals(other.server, server) &&
          const DeepCollectionEquality().equals(other.port, port) &&
          const DeepCollectionEquality().equals(other.type, type) &&
          const DeepCollectionEquality().equals(other.dcId, dcId) &&
          const DeepCollectionEquality().equals(other.timeout, timeout));

  int get overriddenHashCode => Object.hashAll([
    runtimeType,
    const DeepCollectionEquality().hash(server),
    const DeepCollectionEquality().hash(port),
    const DeepCollectionEquality().hash(type),
    const DeepCollectionEquality().hash(dcId),
    const DeepCollectionEquality().hash(timeout),
  ]);
}

extension TestGetDifferenceDataClassExtensions on TestGetDifference {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TestGetDifference);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TestUseUpdateDataClassExtensions on TestUseUpdate {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType && other is TestUseUpdate);

  int get overriddenHashCode => runtimeType.hashCode;
}

extension TestReturnErrorDataClassExtensions on TestReturnError {
  bool overriddenEquality(Object other) =>
      identical(this, other) ||
      (other.runtimeType == runtimeType &&
          other is TestReturnError &&
          const DeepCollectionEquality().equals(other.error, error));

  int get overriddenHashCode =>
      Object.hashAll([runtimeType, const DeepCollectionEquality().hash(error)]);
}
